if (!self["actuate"]) {
    actuate = {}
}
if (actuate.common == undefined) {
    actuate.common = {}
}
if (actuate.common.web == undefined) {
    actuate.common.web = {}
}
actuate.common.web.Package = {
    PACKAGE_SEPARATOR: ".", _evalPackageSupported: null, initialize: function () {
        try {
            if (eval("actuate.common.web") == actuate.common.web) {
                this._evalPackageSupported = true
            }
        } catch (e) {
            this._evalPackageSupported = false
        }
    }, define: function (a, b) {
        var c = a.split(this.PACKAGE_SEPARATOR);
        var d = window;
        var e = null;
        for (var f = 0; f < c.length; f++) {
            e = d;
            if (!d[c[f]]) {
                d = d[c[f]] = {}
            } else {
                d = d[c[f]]
            }
        }
        if (b) {
            e[c[c.length - 1]] = b
        }
        return d
    }
};
actuate.common.web.Package.initialize();
actuate.common.web.Class = {
    create: function (a) {
        var b = function () {
            if (this.initialize == undefined) {
                this.initialize = function () {
                }
            }
            this.initialize.apply(this, arguments)
        };
        b._instanceCount = -1;
        return b
    }, extend: function (a, b) {
        for (property in b) {
            a[property] = b[property]
        }
        return a
    }, createClass: function (a) {
        var b = function () {
            if (this.initialize == undefined) {
                this.initialize = function () {
                }
            }
            this.initialize.apply(this, arguments)
        };
        if (a) {
            b.prototype = a
        }
        b._instanceCount = -1;
        return b
    }, extendClass: function (a, b) {
        var c = actuate.common.web.Class.create();
        c.superclass = a.prototype;
        a.prototype.__extending = true;
        c.prototype = actuate.common.web.Class.extend(new a, b);
        delete a.prototype.__extending;
        return c
    }
};/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
(function (a, b) {
    "use strict";
    if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = a.document ? b(a, true) : function (a) {
            if (!a.document) {
                throw new Error("jQuery requires a window with a document")
            }
            return b(a)
        }
    } else {
        b(a)
    }
})(typeof window !== "undefined" ? window : this, function (a, b) {
    function cX(a, b, c, d) {
        var e, f, g, h, i, j = {}, k = a.dataTypes.slice();
        if (k[1]) {
            for (g in a.converters) {
                j[g.toLowerCase()] = a.converters[g]
            }
        }
        f = k.shift();
        while (f) {
            if (a.responseFields[f]) {
                c[a.responseFields[f]] = b
            }
            if (!i && d && a.dataFilter) {
                b = a.dataFilter(b, a.dataType)
            }
            i = f;
            f = k.shift();
            if (f) {
                if (f === "*") {
                    f = i
                } else if (i !== "*" && i !== f) {
                    g = j[i + " " + f] || j["* " + f];
                    if (!g) {
                        for (e in j) {
                            h = e.split(" ");
                            if (h[1] === f) {
                                g = j[i + " " + h[0]] || j["* " + h[0]];
                                if (g) {
                                    if (g === true) {
                                        g = j[e]
                                    } else if (j[e] !== true) {
                                        f = h[0];
                                        k.unshift(h[1])
                                    }
                                    break
                                }
                            }
                        }
                    }
                    if (g !== true) {
                        if (g && a.throws) {
                            b = g(b)
                        } else {
                            try {
                                b = g(b)
                            } catch (l) {
                                return {state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f}
                            }
                        }
                    }
                }
            }
        }
        return {state: "success", data: b}
    }

    function cW(a, b, c) {
        var d, e, f, g, h = a.contents, i = a.dataTypes;
        while (i[0] === "*") {
            i.shift();
            if (d === undefined) {
                d = a.mimeType || b.getResponseHeader("Content-Type")
            }
        }
        if (d) {
            for (e in h) {
                if (h[e] && h[e].test(d)) {
                    i.unshift(e);
                    break
                }
            }
        }
        if (i[0] in c) {
            f = i[0]
        } else {
            for (e in c) {
                if (!i[0] || a.converters[e + " " + i[0]]) {
                    f = e;
                    break
                }
                if (!g) {
                    g = e
                }
            }
            f = f || g
        }
        if (f) {
            if (f !== i[0]) {
                i.unshift(f)
            }
            return c[f]
        }
    }

    function cV(a, b) {
        var c, d, e = v.ajaxSettings.flatOptions || {};
        for (c in b) {
            if (b[c] !== undefined) {
                (e[c] ? a : d || (d = {}))[c] = b[c]
            }
        }
        if (d) {
            v.extend(true, a, d)
        }
        return a
    }

    function cU(a, b, c, d) {
        function g(h) {
            var i;
            e[h] = true;
            v.each(a[h] || [], function (a, h) {
                var j = h(b, c, d);
                if (typeof j === "string" && !f && !e[j]) {
                    b.dataTypes.unshift(j);
                    g(j);
                    return false
                } else if (f) {
                    return !(i = j)
                }
            });
            return i
        }

        var e = {}, f = a === cQ;
        return g(b.dataTypes[0]) || !e["*"] && g("*")
    }

    function cT(a) {
        return function (b, c) {
            if (typeof b !== "string") {
                c = b;
                b = "*"
            }
            var d, e = 0, f = b.toLowerCase().match(K) || [];
            if (o(c)) {
                while (d = f[e++]) {
                    if (d[0] === "+") {
                        d = d.slice(1) || "*";
                        (a[d] = a[d] || []).unshift(c)
                    } else {
                        (a[d] = a[d] || []).push(c)
                    }
                }
            }
        }
    }

    function cH(a, b, c, d) {
        var e;
        if (Array.isArray(b)) {
            v.each(b, function (b, e) {
                if (c || cD.test(a)) {
                    d(a, e)
                } else {
                    cH(a + "[" + (typeof e === "object" && e != null ? b : "") + "]", e, c, d)
                }
            })
        } else if (!c && t(b) === "object") {
            for (e in b) {
                cH(a + "[" + e + "]", b[e], c, d)
            }
        } else {
            d(a, b)
        }
    }

    function cw(a) {
        if (Array.isArray(a)) {
            return a
        }
        if (typeof a === "string") {
            return a.match(K) || []
        }
        return []
    }

    function cv(a) {
        return a.getAttribute && a.getAttribute("class") || ""
    }

    function cu(a) {
        var b = a.match(K) || [];
        return b.join(" ")
    }

    function cp(a, b, c) {
        var d, e, f = 0, g = cp.prefilters.length, h = v.Deferred().always(function () {
            delete i.elem
        }), i = function () {
            if (e) {
                return false
            }
            var b = ce || cj(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d,
                g = 0, i = j.tweens.length;
            for (; g < i; g++) {
                j.tweens[g].run(f)
            }
            h.notifyWith(a, [j, f, c]);
            if (f < 1 && i) {
                return c
            }
            if (!i) {
                h.notifyWith(a, [j, 1, 0])
            }
            h.resolveWith(a, [j]);
            return false
        }, j = h.promise({
            elem: a,
            props: v.extend({}, b),
            opts: v.extend(true, {specialEasing: {}, easing: v.easing._default}, c),
            originalProperties: b,
            originalOptions: c,
            startTime: ce || cj(),
            duration: c.duration,
            tweens: [],
            createTween: function (b, c) {
                var d = v.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
                j.tweens.push(d);
                return d
            },
            stop: function (b) {
                var c = 0, d = b ? j.tweens.length : 0;
                if (e) {
                    return this
                }
                e = true;
                for (; c < d; c++) {
                    j.tweens[c].run(1)
                }
                if (b) {
                    h.notifyWith(a, [j, 1, 0]);
                    h.resolveWith(a, [j, b])
                } else {
                    h.rejectWith(a, [j, b])
                }
                return this
            }
        }), k = j.props;
        cn(k, j.opts.specialEasing);
        for (; f < g; f++) {
            d = cp.prefilters[f].call(j, a, k, j.opts);
            if (d) {
                if (o(d.stop)) {
                    v._queueHooks(j.elem, j.opts.queue).stop = d.stop.bind(d)
                }
                return d
            }
        }
        v.map(k, cl, j);
        if (o(j.opts.start)) {
            j.opts.start.call(a, j)
        }
        j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
        v.fx.timer(v.extend(i, {elem: a, anim: j, queue: j.opts.queue}));
        return j
    }

    function co() {
        var b = new Uint32Array(1);
        a.crypto.getRandomValues(b);
        return b[0] / (4294967295 + 1)
    }

    function cn(a, b) {
        var c, d, e, f, g;
        for (c in a) {
            d = W(c);
            e = b[d];
            f = a[c];
            if (Array.isArray(f)) {
                e = f[1];
                f = a[c] = f[0]
            }
            if (c !== d) {
                a[d] = f;
                delete a[c]
            }
            g = v.cssHooks[d];
            if (g && "expand" in g) {
                f = g.expand(f);
                delete a[d];
                for (c in f) {
                    if (!(c in a)) {
                        a[c] = f[c];
                        b[c] = e
                    }
                }
            } else {
                b[d] = e
            }
        }
    }

    function cm(a, b, c) {
        var d, e, f, g, h, i, j, k, l = "width" in b || "height" in b, m = this, n = {}, o = a.style,
            p = a.nodeType && bj(a), q = Z.get(a, "fxshow");
        if (!c.queue) {
            g = v._queueHooks(a, "fx");
            if (g.unqueued == null) {
                g.unqueued = 0;
                h = g.empty.fire;
                g.empty.fire = function () {
                    if (!g.unqueued) {
                        h()
                    }
                }
            }
            g.unqueued++;
            m.always(function () {
                m.always(function () {
                    g.unqueued--;
                    if (!v.queue(a, "fx").length) {
                        g.empty.fire()
                    }
                })
            })
        }
        for (d in b) {
            e = b[d];
            if (cg.test(e)) {
                delete b[d];
                f = f || e === "toggle";
                if (e === (p ? "hide" : "show")) {
                    if (e === "show" && q && q[d] !== undefined) {
                        p = true
                    } else {
                        continue
                    }
                }
                n[d] = q && q[d] || v.style(a, d)
            }
        }
        i = !v.isEmptyObject(b);
        if (!i && v.isEmptyObject(n)) {
            return
        }
        if (l && a.nodeType === 1) {
            c.overflow = [o.overflow, o.overflowX, o.overflowY];
            j = q && q.display;
            if (j == null) {
                j = Z.get(a, "display")
            }
            k = v.css(a, "display");
            if (k === "none") {
                if (j) {
                    k = j
                } else {
                    bn([a], true);
                    j = a.style.display || j;
                    k = v.css(a, "display");
                    bn([a])
                }
            }
            if (k === "inline" || k === "inline-block" && j != null) {
                if (v.css(a, "float") === "none") {
                    if (!i) {
                        m.done(function () {
                            o.display = j
                        });
                        if (j == null) {
                            k = o.display;
                            j = k === "none" ? "" : k
                        }
                    }
                    o.display = "inline-block"
                }
            }
        }
        if (c.overflow) {
            o.overflow = "hidden";
            m.always(function () {
                o.overflow = c.overflow[0];
                o.overflowX = c.overflow[1];
                o.overflowY = c.overflow[2]
            })
        }
        i = false;
        for (d in n) {
            if (!i) {
                if (q) {
                    if ("hidden" in q) {
                        p = q.hidden
                    }
                } else {
                    q = Z.access(a, "fxshow", {display: j})
                }
                if (f) {
                    q.hidden = !p
                }
                if (p) {
                    bn([a], true)
                }
                m.done(function () {
                    if (!p) {
                        bn([a])
                    }
                    Z.remove(a, "fxshow");
                    for (d in n) {
                        v.style(a, d, n[d])
                    }
                })
            }
            i = cl(p ? q[d] : 0, d, m);
            if (!(d in q)) {
                q[d] = i.start;
                if (p) {
                    i.end = i.start;
                    i.start = 0
                }
            }
        }
    }

    function cl(a, b, c) {
        var d, e = (cp.tweeners[b] || []).concat(cp.tweeners["*"]), f = 0, g = e.length;
        for (; f < g; f++) {
            if (d = e[f].call(c, b, a)) {
                return d
            }
        }
    }

    function ck(a, b) {
        var c, d = 0, e = {height: a};
        b = b ? 1 : 0;
        for (; d < 4; d += 2 - b) {
            c = bf[d];
            e["margin" + c] = e["padding" + c] = a
        }
        if (b) {
            e.opacity = e.width = a
        }
        return e
    }

    function cj() {
        a.setTimeout(function () {
            ce = undefined
        });
        return ce = Date.now()
    }

    function ci() {
        if (cf) {
            if (q.hidden === false && a.requestAnimationFrame) {
                a.requestAnimationFrame(ci)
            } else {
                a.setTimeout(ci, v.fx.interval)
            }
            v.fx.tick()
        }
    }

    function cd(a, b, c, d, e) {
        return new cd.prototype.init(a, b, c, d, e)
    }

    function cc(a, b, c) {
        var d = bO(a), e = !n.boxSizingReliable() || c, f = e && v.css(a, "boxSizing", false, d) === "border-box",
            g = f, h = bR(a, b, d), i = "offset" + b[0].toUpperCase() + b.slice(1);
        if (bN.test(h)) {
            if (!c) {
                return h
            }
            h = "auto"
        }
        if ((!n.boxSizingReliable() && f || !n.reliableTrDimensions() && B(a, "tr") || h === "auto" || !parseFloat(h) && v.css(a, "display", false, d) === "inline") && a.getClientRects().length) {
            f = v.css(a, "boxSizing", false, d) === "border-box";
            g = i in a;
            if (g) {
                h = a[i]
            }
        }
        h = parseFloat(h) || 0;
        return h + cb(a, b, c || (f ? "border" : "content"), g, d, h) + "px"
    }

    function cb(a, b, c, d, e, f) {
        var g = b === "width" ? 1 : 0, h = 0, i = 0;
        if (c === (d ? "border" : "content")) {
            return 0
        }
        for (; g < 4; g += 2) {
            if (c === "margin") {
                i += v.css(a, c + bf[g], true, e)
            }
            if (!d) {
                i += v.css(a, "padding" + bf[g], true, e);
                if (c !== "padding") {
                    i += v.css(a, "border" + bf[g] + "Width", true, e)
                } else {
                    h += v.css(a, "border" + bf[g] + "Width", true, e)
                }
            } else {
                if (c === "content") {
                    i -= v.css(a, "padding" + bf[g], true, e)
                }
                if (c !== "margin") {
                    i -= v.css(a, "border" + bf[g] + "Width", true, e)
                }
            }
        }
        if (!d && f >= 0) {
            i += Math.max(0, Math.ceil(a["offset" + b[0].toUpperCase() + b.slice(1)] - f - i - h - .5)) || 0
        }
        return i
    }

    function ca(a, b, c) {
        var d = be.exec(b);
        return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b
    }

    function bX(a) {
        var b = v.cssProps[a] || bV[a];
        if (b) {
            return b
        }
        if (a in bU) {
            return a
        }
        return bV[a] = bW(a) || a
    }

    function bW(a) {
        var b = a[0].toUpperCase() + a.slice(1), c = bT.length;
        while (c--) {
            a = bT[c] + b;
            if (a in bU) {
                return a
            }
        }
    }

    function bS(a, b) {
        return {
            get: function () {
                if (a()) {
                    delete this.get;
                    return
                }
                return (this.get = b).apply(this, arguments)
            }
        }
    }

    function bR(a, b, c) {
        var d, e, f, g, h = a.style;
        c = c || bO(a);
        if (c) {
            g = c.getPropertyValue(b) || c[b];
            if (g === "" && !bh(a)) {
                g = v.style(a, b)
            }
            if (!n.pixelBoxStyles() && bN.test(g) && bQ.test(b)) {
                d = h.width;
                e = h.minWidth;
                f = h.maxWidth;
                h.minWidth = h.maxWidth = h.width = g;
                g = c.width;
                h.width = d;
                h.minWidth = e;
                h.maxWidth = f
            }
        }
        return g !== undefined ? g + "" : g
    }

    function bM(a, b, c) {
        var d, e = b ? v.filter(b, a) : a, f = 0;
        for (; (d = e[f]) != null; f++) {
            if (!c && d.nodeType === 1) {
                v.cleanData(bs(d))
            }
            if (d.parentNode) {
                if (c && bh(d)) {
                    bt(bs(d, "script"))
                }
                d.parentNode.removeChild(d)
            }
        }
        return a
    }

    function bL(a, b, c, d) {
        b = f(b);
        var e, g, h, i, j, k, l = 0, m = a.length, p = m - 1, q = b[0], r = o(q);
        if (r || m > 1 && typeof q === "string" && !n.checkClone && bE.test(q)) {
            return a.each(function (e) {
                var f = a.eq(e);
                if (r) {
                    b[0] = q.call(this, e, f.html())
                }
                bL(f, b, c, d)
            })
        }
        if (m) {
            e = bv(b, a[0].ownerDocument, false, a, d);
            g = e.firstChild;
            if (e.childNodes.length === 1) {
                e = g
            }
            if (g || d) {
                h = v.map(bs(e, "script"), bH);
                i = h.length;
                for (; l < m; l++) {
                    j = e;
                    if (l !== p) {
                        j = v.clone(j, true, true);
                        if (i) {
                            v.merge(h, bs(j, "script"))
                        }
                    }
                    c.call(a[l], j, l)
                }
                if (i) {
                    k = h[h.length - 1].ownerDocument;
                    v.map(h, bI);
                    for (l = 0; l < i; l++) {
                        j = h[l];
                        if (bq.test(j.type || "") && !Z.access(j, "globalEval") && v.contains(k, j)) {
                            if (j.src && (j.type || "").toLowerCase() !== "module") {
                                if (v._evalUrl && !j.noModule) {
                                    v._evalUrl(j.src, {nonce: j.nonce || j.getAttribute("nonce")}, k)
                                }
                            } else {
                                s(j.textContent.replace(bF, ""), j, k)
                            }
                        }
                    }
                }
            }
        }
        return a
    }

    function bK(a, b) {
        var c = b.nodeName.toLowerCase();
        if (c === "input" && bo.test(a.type)) {
            b.checked = a.checked
        } else if (c === "input" || c === "textarea") {
            b.defaultValue = a.defaultValue
        }
    }

    function bJ(a, b) {
        var c, d, e, f, g, h, i;
        if (b.nodeType !== 1) {
            return
        }
        if (Z.hasData(a)) {
            f = Z.get(a);
            i = f.events;
            if (i) {
                Z.remove(b, "handle events");
                for (e in i) {
                    for (c = 0, d = i[e].length; c < d; c++) {
                        v.event.add(b, e, i[e][c])
                    }
                }
            }
        }
        if ($.hasData(a)) {
            g = $.access(a);
            h = v.extend({}, g);
            $.set(b, h)
        }
    }

    function bI(a) {
        if ((a.type || "").slice(0, 5) === "true/") {
            a.type = a.type.slice(5)
        } else {
            a.removeAttribute("type")
        }
        return a
    }

    function bH(a) {
        a.type = (a.getAttribute("type") !== null) + "/" + a.type;
        return a
    }

    function bG(a, b) {
        if (B(a, "table") && B(b.nodeType !== 11 ? b : b.firstChild, "tr")) {
            return v(a).children("tbody")[0] || a
        }
        return a
    }

    function bC(a, b, c) {
        if (!c) {
            if (Z.get(a, b) === undefined) {
                v.event.add(a, b, bx)
            }
            return
        }
        Z.set(a, b, false);
        v.event.add(a, b, {
            namespace: false, handler: function (a) {
                var d, f, g = Z.get(this, b);
                if (a.isTrigger & 1 && this[b]) {
                    if (!g.length) {
                        g = e.call(arguments);
                        Z.set(this, b, g);
                        d = c(this, b);
                        this[b]();
                        f = Z.get(this, b);
                        if (g !== f || d) {
                            Z.set(this, b, false)
                        } else {
                            f = {}
                        }
                        if (g !== f) {
                            a.stopImmediatePropagation();
                            a.preventDefault();
                            return f && f.value
                        }
                    } else if ((v.event.special[b] || {}).delegateType) {
                        a.stopPropagation()
                    }
                } else if (g.length) {
                    Z.set(this, b, {value: v.event.trigger(v.extend(g[0], v.Event.prototype), g.slice(1), this)});
                    a.stopImmediatePropagation()
                }
            }
        })
    }

    function bB(a, b, c, d, e, f) {
        var g, h;
        if (typeof b === "object") {
            if (typeof c !== "string") {
                d = d || c;
                c = undefined
            }
            for (h in b) {
                bB(a, h, c, d, b[h], f)
            }
            return a
        }
        if (d == null && e == null) {
            e = c;
            d = c = undefined
        } else if (e == null) {
            if (typeof c === "string") {
                e = d;
                d = undefined
            } else {
                e = d;
                d = c;
                c = undefined
            }
        }
        if (e === false) {
            e = by
        } else if (!e) {
            return a
        }
        if (f === 1) {
            g = e;
            e = function (a) {
                v().off(a);
                return g.apply(this, arguments)
            };
            e.guid = g.guid || (g.guid = v.guid++)
        }
        return a.each(function () {
            v.event.add(this, b, e, d, c)
        })
    }

    function bA() {
        try {
            return q.activeElement
        } catch (a) {
        }
    }

    function bz(a, b) {
        return a === bA() === (b === "focus")
    }

    function by() {
        return false
    }

    function bx() {
        return true
    }

    function bv(a, b, c, d, e) {
        var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length;
        for (; n < o; n++) {
            f = a[n];
            if (f || f === 0) {
                if (t(f) === "object") {
                    v.merge(m, f.nodeType ? [f] : f)
                } else if (!bu.test(f)) {
                    m.push(b.createTextNode(f))
                } else {
                    g = g || l.appendChild(b.createElement("div"));
                    h = (bp.exec(f) || ["", ""])[1].toLowerCase();
                    i = br[h] || br._default;
                    var p = i[1] + v.htmlPrefilter(f) + i[2];
                    p = actuate.common.web.util.Utility.removeInlineStyles(p);
                    g.innerHTML = p;
                    k = i[0];
                    while (k--) {
                        g = g.lastChild
                    }
                    v.merge(m, g.childNodes);
                    g = l.firstChild;
                    g.textContent = ""
                }
            }
        }
        l.textContent = "";
        n = 0;
        while (f = m[n++]) {
            if (d && v.inArray(f, d) > -1) {
                if (e) {
                    e.push(f)
                }
                continue
            }
            j = bh(f);
            g = bs(l.appendChild(f), "script");
            if (j) {
                bt(g)
            }
            if (c) {
                k = 0;
                while (f = g[k++]) {
                    if (bq.test(f.type || "")) {
                        c.push(f)
                    }
                }
            }
        }
        return l
    }

    function bt(a, b) {
        var c = 0, d = a.length;
        for (; c < d; c++) {
            Z.set(a[c], "globalEval", !b || Z.get(b[c], "globalEval"))
        }
    }

    function bs(a, b) {
        var c;
        if (typeof a.getElementsByTagName !== "undefined") {
            c = a.getElementsByTagName(b || "*")
        } else if (typeof a.querySelectorAll !== "undefined") {
            c = a.querySelectorAll(b || "*")
        } else {
            c = []
        }
        if (b === undefined || b && B(a, b)) {
            return v.merge([a], c)
        }
        return c
    }

    function bn(a, b) {
        var c, d, e = [], f = 0, g = a.length;
        for (; f < g; f++) {
            d = a[f];
            if (!d.style) {
                continue
            }
            c = d.style.display;
            if (b) {
                if (c === "none") {
                    e[f] = Z.get(d, "display") || null;
                    if (!e[f]) {
                        d.style.display = ""
                    }
                }
                if (d.style.display === "" && bj(d)) {
                    e[f] = bm(d)
                }
            } else {
                if (c !== "none") {
                    e[f] = "none";
                    Z.set(d, "display", c)
                }
            }
        }
        for (f = 0; f < g; f++) {
            if (e[f] != null) {
                a[f].style.display = e[f]
            }
        }
        return a
    }

    function bm(a) {
        var b, c = a.ownerDocument, d = a.nodeName, e = bl[d];
        if (e) {
            return e
        }
        b = c.body.appendChild(c.createElement(d));
        e = v.css(b, "display");
        b.parentNode.removeChild(b);
        if (e === "none") {
            e = "block"
        }
        bl[d] = e;
        return e
    }

    function bk(a, b, c, d) {
        var e, f, g = 20, h = d ? function () {
                return d.cur()
            } : function () {
                return v.css(a, b, "")
            }, i = h(), j = c && c[3] || (v.cssNumber[b] ? "" : "px"),
            k = a.nodeType && (v.cssNumber[b] || j !== "px" && +i) && be.exec(v.css(a, b));
        if (k && k[3] !== j) {
            i = i / 2;
            j = j || k[3];
            k = +i || 1;
            while (g--) {
                v.style(a, b, k + j);
                if ((1 - f) * (1 - (f = h() / i || .5)) <= 0) {
                    g = 0
                }
                k = k / f
            }
            k = k * 2;
            v.style(a, b, k + j);
            c = c || []
        }
        if (c) {
            k = +k || +i || 0;
            e = c[1] ? k + (c[1] + 1) * c[2] : +c[2];
            if (d) {
                d.unit = j;
                d.start = k;
                d.end = e
            }
        }
        return e
    }

    function bc(a, b, c) {
        var d;
        if (c === undefined && a.nodeType === 1) {
            d = "data-" + b.replace(ba, "-$&").toLowerCase();
            c = a.getAttribute(d);
            if (typeof c === "string") {
                try {
                    c = bb(c)
                } catch (e) {
                }
                $.set(a, b, c)
            } else {
                c = undefined
            }
        }
        return c
    }

    function bb(a) {
        if (a === "true") {
            return true
        }
        if (a === "false") {
            return false
        }
        if (a === "null") {
            return null
        }
        if (a === +a + "") {
            return +a
        }
        if (_.test(a)) {
            return JSON.parse(a)
        }
        return a
    }

    function Y() {
        this.expando = v.expando + Y.uid++
    }

    function W(a) {
        return a.replace(T, "ms-").replace(U, V)
    }

    function V(a, b) {
        return b.toUpperCase()
    }

    function R() {
        q.removeEventListener("DOMContentLoaded", R);
        a.removeEventListener("load", R);
        v.ready()
    }

    function O(a, b, c, d) {
        var e;
        try {
            if (a && o(e = a.promise)) {
                e.call(a).done(b).fail(c)
            } else if (a && o(e = a.then)) {
                e.call(a, b, c)
            } else {
                b.apply(undefined, [a].slice(d))
            }
        } catch (a) {
            c.apply(undefined, [a])
        }
    }

    function N(a) {
        throw a
    }

    function M(a) {
        return a
    }

    function L(a) {
        var b = {};
        v.each(a.match(K) || [], function (a, c) {
            b[c] = true
        });
        return b
    }

    function J(a, b) {
        while ((a = a[b]) && a.nodeType !== 1) {
        }
        return a
    }

    function D(a, b, c) {
        if (o(b)) {
            return v.grep(a, function (a, d) {
                return !!b.call(a, d, a) !== c
            })
        }
        if (b.nodeType) {
            return v.grep(a, function (a) {
                return a === b !== c
            })
        }
        if (typeof b !== "string") {
            return v.grep(a, function (a) {
                return h.call(b, a) > -1 !== c
            })
        }
        return v.filter(b, a, c)
    }

    function B(a, b) {
        return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
    }

    function w(a) {
        var b = !!a && "length" in a && a.length, c = t(a);
        if (o(a) || p(a)) {
            return false
        }
        return c === "array" || b === 0 || typeof b === "number" && b > 0 && b - 1 in a
    }

    function t(a) {
        if (a == null) {
            return a + ""
        }
        return typeof a === "object" || typeof a === "function" ? i[j.call(a)] || "object" : typeof a
    }

    function s(a, b, c) {
        c = c || q;
        var d, e, f = c.createElement("script");
        f.text = a;
        if (b) {
            for (d in r) {
                e = b[d] || b.getAttribute && b.getAttribute(d);
                if (e) {
                    f.setAttribute(d, e)
                }
            }
        }
        c.head.appendChild(f).parentNode.removeChild(f)
    }

    "use strict";
    var c = [];
    var d = Object.getPrototypeOf;
    var e = c.slice;
    var f = c.flat ? function (a) {
        return c.flat.call(a)
    } : function (a) {
        return c.concat.apply([], a)
    };
    var g = c.push;
    var h = c.indexOf;
    var i = {};
    var j = i.toString;
    var k = i.hasOwnProperty;
    var l = k.toString;
    var m = l.call(Object);
    var n = {};
    var o = function o(a) {
        return typeof a === "function" && typeof a.nodeType !== "number" && typeof a.item !== "function"
    };
    var p = function p(a) {
        return a != null && a === a.window
    };
    var q = a.document;
    var r = {type: true, src: true, nonce: true, noModule: true};
    var u = "3.6.0", v = function (a, b) {
        return new v.fn.init(a, b)
    };
    v.fn = v.prototype = {
        jquery: u, constructor: v, length: 0, toArray: function () {
            return e.call(this)
        }, get: function (a) {
            if (a == null) {
                return e.call(this)
            }
            return a < 0 ? this[a + this.length] : this[a]
        }, pushStack: function (a) {
            var b = v.merge(this.constructor(), a);
            b.prevObject = this;
            return b
        }, each: function (a) {
            return v.each(this, a)
        }, map: function (a) {
            return this.pushStack(v.map(this, function (b, c) {
                return a.call(b, c, b)
            }))
        }, slice: function () {
            return this.pushStack(e.apply(this, arguments))
        }, first: function () {
            return this.eq(0)
        }, last: function () {
            return this.eq(-1)
        }, even: function () {
            return this.pushStack(v.grep(this, function (a, b) {
                return (b + 1) % 2
            }))
        }, odd: function () {
            return this.pushStack(v.grep(this, function (a, b) {
                return b % 2
            }))
        }, eq: function (a) {
            var b = this.length, c = +a + (a < 0 ? b : 0);
            return this.pushStack(c >= 0 && c < b ? [this[c]] : [])
        }, end: function () {
            return this.prevObject || this.constructor()
        }, push: g, sort: c.sort, splice: c.splice
    };
    v.extend = v.fn.extend = function () {
        var a, b, c, d, e, f, g = arguments[0] || {}, h = 1, i = arguments.length, j = false;
        if (typeof g === "boolean") {
            j = g;
            g = arguments[h] || {};
            h++
        }
        if (typeof g !== "object" && !o(g)) {
            g = {}
        }
        if (h === i) {
            g = this;
            h--
        }
        for (; h < i; h++) {
            if ((a = arguments[h]) != null) {
                for (b in a) {
                    d = a[b];
                    if (b === "__proto__" || g === d) {
                        continue
                    }
                    if (j && d && (v.isPlainObject(d) || (e = Array.isArray(d)))) {
                        c = g[b];
                        if (e && !Array.isArray(c)) {
                            f = []
                        } else if (!e && !v.isPlainObject(c)) {
                            f = {}
                        } else {
                            f = c
                        }
                        e = false;
                        g[b] = v.extend(j, f, d)
                    } else if (d !== undefined) {
                        g[b] = d
                    }
                }
            }
        }
        return g
    };
    v.extend({
        expando: "jQuery" + (u + co()).replace(/\D/g, ""), isReady: true, error: function (a) {
            throw new Error(a)
        }, noop: function () {
        }, isPlainObject: function (a) {
            var b, c;
            if (!a || j.call(a) !== "[object Object]") {
                return false
            }
            b = d(a);
            if (!b) {
                return true
            }
            c = k.call(b, "constructor") && b.constructor;
            return typeof c === "function" && l.call(c) === m
        }, isEmptyObject: function (a) {
            var b;
            for (b in a) {
                return false
            }
            return true
        }, globalEval: function (a, b, c) {
            s(a, {nonce: b && b.nonce}, c)
        }, each: function (a, b) {
            var c, d = 0;
            if (w(a)) {
                c = a.length;
                for (; d < c; d++) {
                    if (b.call(a[d], d, a[d]) === false) {
                        break
                    }
                }
            } else {
                for (d in a) {
                    if (b.call(a[d], d, a[d]) === false) {
                        break
                    }
                }
            }
            return a
        }, makeArray: function (a, b) {
            var c = b || [];
            if (a != null) {
                if (w(Object(a))) {
                    v.merge(c, typeof a === "string" ? [a] : a)
                } else {
                    g.call(c, a)
                }
            }
            return c
        }, inArray: function (a, b, c) {
            return b == null ? -1 : h.call(b, a, c)
        }, merge: function (a, b) {
            var c = +b.length, d = 0, e = a.length;
            for (; d < c; d++) {
                a[e++] = b[d]
            }
            a.length = e;
            return a
        }, grep: function (a, b, c) {
            var d, e = [], f = 0, g = a.length, h = !c;
            for (; f < g; f++) {
                d = !b(a[f], f);
                if (d !== h) {
                    e.push(a[f])
                }
            }
            return e
        }, map: function (a, b, c) {
            var d, e, g = 0, h = [];
            if (w(a)) {
                d = a.length;
                for (; g < d; g++) {
                    e = b(a[g], g, c);
                    if (e != null) {
                        h.push(e)
                    }
                }
            } else {
                for (g in a) {
                    e = b(a[g], g, c);
                    if (e != null) {
                        h.push(e)
                    }
                }
            }
            return f(h)
        }, guid: 1, support: n
    });
    if (typeof Symbol === "function") {
        v.fn[Symbol.iterator] = c[Symbol.iterator]
    }
    v.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
        i["[object " + b + "]"] = b.toLowerCase()
    });
    var x = function (a) {
        function bB(a, b) {
            var c = b.length > 0, e = a.length > 0, f = function (f, g, h, i, k) {
                var l, o, q, r = 0, s = "0", t = f && [], u = [], v = j, x = f || e && d.find["TAG"]("*", k),
                    y = w += v == null ? 1 : co() || .1, z = x.length;
                if (k) {
                    j = g == n || g || k
                }
                for (; s !== z && (l = x[s]) != null; s++) {
                    if (e && l) {
                        o = 0;
                        if (!g && l.ownerDocument != n) {
                            m(l);
                            h = !p
                        }
                        while (q = a[o++]) {
                            if (q(l, g || n, h)) {
                                i.push(l);
                                break
                            }
                        }
                        if (k) {
                            w = y
                        }
                    }
                    if (c) {
                        if (l = !q && l) {
                            r--
                        }
                        if (f) {
                            t.push(l)
                        }
                    }
                }
                r += s;
                if (c && s !== r) {
                    o = 0;
                    while (q = b[o++]) {
                        q(t, u, g, h)
                    }
                    if (f) {
                        if (r > 0) {
                            while (s--) {
                                if (!(t[s] || u[s])) {
                                    u[s] = F.call(i)
                                }
                            }
                        }
                        u = by(u)
                    }
                    H.apply(i, u);
                    if (k && !f && u.length > 0 && r + b.length > 1) {
                        bi.uniqueSort(i)
                    }
                }
                if (k) {
                    w = y;
                    j = v
                }
                return t
            };
            return c ? bk(f) : f
        }

        function bA(a) {
            var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0,
                k = bv(function (a) {
                    return a === b
                }, h, true), l = bv(function (a) {
                    return J(b, a) > -1
                }, h, true), m = [function (a, c, d) {
                    var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));
                    b = null;
                    return e
                }];
            for (; i < f; i++) {
                if (c = d.relative[a[i].type]) {
                    m = [bv(bw(m), c)]
                } else {
                    c = d.filter[a[i].type].apply(null, a[i].matches);
                    if (c[u]) {
                        e = ++i;
                        for (; e < f; e++) {
                            if (d.relative[a[e].type]) {
                                break
                            }
                        }
                        return bz(i > 1 && bw(m), i > 1 && bu(a.slice(0, i - 1).concat({value: a[i - 2].type === " " ? "*" : ""})).replace(Q, "$1"), c, i < e && bA(a.slice(i, e)), e < f && bA(a = a.slice(e)), e < f && bu(a))
                    }
                    m.push(c)
                }
            }
            return bw(m)
        }

        function bz(a, b, c, d, e, f) {
            if (d && !d[u]) {
                d = bz(d)
            }
            if (e && !e[u]) {
                e = bz(e, f)
            }
            return bk(function (f, g, h, i) {
                var j, k, l, m = [], n = [], o = g.length, p = f || bx(b || "*", h.nodeType ? [h] : h, []),
                    q = a && (f || !b) ? by(p, m, a, h, i) : p, r = c ? e || (f ? a : o || d) ? [] : g : q;
                if (c) {
                    c(q, r, h, i)
                }
                if (d) {
                    j = by(r, n);
                    d(j, [], h, i);
                    k = j.length;
                    while (k--) {
                        if (l = j[k]) {
                            r[n[k]] = !(q[n[k]] = l)
                        }
                    }
                }
                if (f) {
                    if (e || a) {
                        if (e) {
                            j = [];
                            k = r.length;
                            while (k--) {
                                if (l = r[k]) {
                                    j.push(q[k] = l)
                                }
                            }
                            e(null, r = [], j, i)
                        }
                        k = r.length;
                        while (k--) {
                            if ((l = r[k]) && (j = e ? J(f, l) : m[k]) > -1) {
                                f[j] = !(g[j] = l)
                            }
                        }
                    }
                } else {
                    r = by(r === g ? r.splice(o, r.length) : r);
                    if (e) {
                        e(null, g, r, i)
                    } else {
                        H.apply(g, r)
                    }
                }
            })
        }

        function by(a, b, c, d, e) {
            var f, g = [], h = 0, i = a.length, j = b != null;
            for (; h < i; h++) {
                if (f = a[h]) {
                    if (!c || c(f, d, e)) {
                        g.push(f);
                        if (j) {
                            b.push(h)
                        }
                    }
                }
            }
            return g
        }

        function bx(a, b, c) {
            var d = 0, e = b.length;
            for (; d < e; d++) {
                bi(a, b[d], c)
            }
            return c
        }

        function bw(a) {
            return a.length > 1 ? function (b, c, d) {
                var e = a.length;
                while (e--) {
                    if (!a[e](b, c, d)) {
                        return false
                    }
                }
                return true
            } : a[0]
        }

        function bv(a, b, c) {
            var d = b.dir, e = b.next, f = e || d, g = c && f === "parentNode", h = x++;
            return b.first ? function (b, c, e) {
                while (b = b[d]) {
                    if (b.nodeType === 1 || g) {
                        return a(b, c, e)
                    }
                }
                return false
            } : function (b, c, i) {
                var j, k, l, m = [w, h];
                if (i) {
                    while (b = b[d]) {
                        if (b.nodeType === 1 || g) {
                            if (a(b, c, i)) {
                                return true
                            }
                        }
                    }
                } else {
                    while (b = b[d]) {
                        if (b.nodeType === 1 || g) {
                            l = b[u] || (b[u] = {});
                            k = l[b.uniqueID] || (l[b.uniqueID] = {});
                            if (e && e === b.nodeName.toLowerCase()) {
                                b = b[d] || b
                            } else if ((j = k[f]) && j[0] === w && j[1] === h) {
                                return m[2] = j[2]
                            } else {
                                k[f] = m;
                                if (m[2] = a(b, c, i)) {
                                    return true
                                }
                            }
                        }
                    }
                }
                return false
            }
        }

        function bu(a) {
            var b = 0, c = a.length, d = "";
            for (; b < c; b++) {
                d += a[b].value
            }
            return d
        }

        function bt() {
        }

        function bs(a) {
            return a && typeof a.getElementsByTagName !== "undefined" && a
        }

        function br(a) {
            return bk(function (b) {
                b = +b;
                return bk(function (c, d) {
                    var e, f = a([], c.length, b), g = f.length;
                    while (g--) {
                        if (c[e = f[g]]) {
                            c[e] = !(d[e] = c[e])
                        }
                    }
                })
            })
        }

        function bq(a) {
            return function (b) {
                if ("form" in b) {
                    if (b.parentNode && b.disabled === false) {
                        if ("label" in b) {
                            if ("label" in b.parentNode) {
                                return b.parentNode.disabled === a
                            } else {
                                return b.disabled === a
                            }
                        }
                        return b.isDisabled === a || b.isDisabled !== !a && bg(b) === a
                    }
                    return b.disabled === a
                } else if ("label" in b) {
                    return b.disabled === a
                }
                return false
            }
        }

        function bp(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return (c === "input" || c === "button") && b.type === a
            }
        }

        function bo(a) {
            return function (b) {
                var c = b.nodeName.toLowerCase();
                return c === "input" && b.type === a
            }
        }

        function bn(a, b) {
            var c = b && a, d = c && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (d) {
                return d
            }
            if (c) {
                while (c = c.nextSibling) {
                    if (c === b) {
                        return -1
                    }
                }
            }
            return a ? 1 : -1
        }

        function bm(a, b) {
            var c = a.split("|"), e = c.length;
            while (e--) {
                d.attrHandle[c[e]] = b
            }
        }

        function bl(a) {
            var b = n.createElement("fieldset");
            try {
                return !!a(b)
            } catch (c) {
                return false
            } finally {
                if (b.parentNode) {
                    b.parentNode.removeChild(b)
                }
                b = null
            }
        }

        function bk(a) {
            a[u] = true;
            return a
        }

        function bj() {
            function b(c, e) {
                if (a.push(c + " ") > d.cacheLength) {
                    delete b[a.shift()]
                }
                return b[c + " "] = e
            }

            var a = [];
            return b
        }

        function bi(a, b, d, e) {
            var f, h, j, k, l, o, r, s = b && b.ownerDocument, v = b ? b.nodeType : 9;
            d = d || [];
            if (typeof a !== "string" || !a || v !== 1 && v !== 9 && v !== 11) {
                return d
            }
            if (!e) {
                m(b);
                b = b || n;
                if (p) {
                    if (v !== 11 && (l = _.exec(a))) {
                        if (f = l[1]) {
                            if (v === 9) {
                                if (j = b.getElementById(f)) {
                                    if (j.id === f) {
                                        d.push(j);
                                        return d
                                    }
                                } else {
                                    return d
                                }
                            } else {
                                if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) {
                                    d.push(j);
                                    return d
                                }
                            }
                        } else if (l[2]) {
                            H.apply(d, b.getElementsByTagName(a));
                            return d
                        } else if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) {
                            H.apply(d, b.getElementsByClassName(f));
                            return d
                        }
                    }
                    if (c.qsa && !B[a + " "] && (!q || !q.test(a)) && (v !== 1 || b.nodeName.toLowerCase() !== "object")) {
                        r = a;
                        s = b;
                        if (v === 1 && (T.test(a) || S.test(a))) {
                            s = ba.test(a) && bs(b.parentNode) || b;
                            if (s !== b || !c.scope) {
                                if (k = b.getAttribute("id")) {
                                    k = k.replace(bd, be)
                                } else {
                                    b.setAttribute("id", k = u)
                                }
                            }
                            o = g(a);
                            h = o.length;
                            while (h--) {
                                o[h] = (k ? "#" + k : ":scope") + " " + bu(o[h])
                            }
                            r = o.join(",")
                        }
                        try {
                            H.apply(d, s.querySelectorAll(r));
                            return d
                        } catch (w) {
                            B(a, true)
                        } finally {
                            if (k === u) {
                                b.removeAttribute("id")
                            }
                        }
                    }
                }
            }
            return i(a.replace(Q, "$1"), b, d, e)
        }

        var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u = "sizzle" + 1 * new Date, v = a.document, w = 0,
            x = 0, y = bj(), z = bj(), A = bj(), B = bj(), C = function (a, b) {
                if (a === b) {
                    l = true
                }
                return 0
            }, D = ({}).hasOwnProperty, E = [], F = E.pop, G = E.push, H = E.push, I = E.slice, J = function (a, b) {
                var c = 0, d = a.length;
                for (; c < d; c++) {
                    if (a[c] === b) {
                        return c
                    }
                }
                return -1
            },
            K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
            L = "[\\x20\\t\\r\\n\\f]", M = "(?:\\\\[\\da-fA-F]{1,6}" + L + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^ -\\x7f])+",
            N = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + M + "))|)" + L + "*\\]",
            O = ":(" + M + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + N + ")*)|" + ".*" + ")\\)|)",
            P = new RegExp(L + "+", "g"), Q = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
            R = new RegExp("^" + L + "*," + L + "*"), S = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
            T = new RegExp(L + "|>"), U = new RegExp(O), V = new RegExp("^" + M + "$"), W = {
                ID: new RegExp("^#(" + M + ")"),
                CLASS: new RegExp("^\\.(" + M + ")"),
                TAG: new RegExp("^(" + M + "|[*])"),
                ATTR: new RegExp("^" + N),
                PSEUDO: new RegExp("^" + O),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + K + ")$", "i"),
                needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i")
            }, X = /HTML$/i, Y = /^(?:input|select|textarea|button)$/i, Z = /^h\d$/i, $ = /^[^{]+\{\s*\[native \w/,
            _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ba = /[+~]/,
            bb = new RegExp("\\\\[\\da-fA-F]{1,6}" + L + "?|\\\\([^\\r\\n\\f])", "g"), bc = function (a, b) {
                var c = "0x" + a.slice(1) - 65536;
                return b ? b : c < 0 ? String.fromCharCode(c + 65536) : String.fromCharCode(c >> 10 | 55296, c & 1023 | 56320)
            }, bd = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, be = function (a, b) {
                if (b) {
                    if (a === " ") {
                        return "?"
                    }
                    return a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " "
                }
                return "\\" + a
            }, bf = function () {
                m()
            }, bg = bv(function (a) {
                return a.disabled === true && a.nodeName.toLowerCase() === "fieldset"
            }, {dir: "parentNode", next: "legend"});
        try {
            H.apply(E = I.call(v.childNodes), v.childNodes);
            E[v.childNodes.length].nodeType
        } catch (bh) {
            H = {
                apply: E.length ? function (a, b) {
                    G.apply(a, I.call(b))
                } : function (a, b) {
                    var c = a.length, d = 0;
                    while (a[c++] = b[d++]) {
                    }
                    a.length = c - 1
                }
            }
        }
        c = bi.support = {};
        f = bi.isXML = function (a) {
            var b = a && a.namespaceURI, c = a && (a.ownerDocument || a).documentElement;
            return !X.test(b || c && c.nodeName || "HTML")
        };
        m = bi.setDocument = function (a) {
            var b, e, g = a ? a.ownerDocument || a : v;
            if (g == n || g.nodeType !== 9 || !g.documentElement) {
                return n
            }
            n = g;
            o = n.documentElement;
            p = !f(n);
            if (v != n && (e = n.defaultView) && e.top !== e) {
                if (e.addEventListener) {
                    e.addEventListener("unload", bf, false)
                } else if (e.attachEvent) {
                    e.attachEvent("onunload", bf)
                }
            }
            c.scope = bl(function (a) {
                o.appendChild(a).appendChild(n.createElement("div"));
                return typeof a.querySelectorAll !== "undefined" && !a.querySelectorAll(":scope fieldset div").length
            });
            c.attributes = bl(function (a) {
                a.className = "i";
                return !a.getAttribute("className")
            });
            c.getElementsByTagName = bl(function (a) {
                a.appendChild(n.createComment(""));
                return !a.getElementsByTagName("*").length
            });
            c.getElementsByClassName = $.test(n.getElementsByClassName);
            c.getById = bl(function (a) {
                o.appendChild(a).id = u;
                return !n.getElementsByName || !n.getElementsByName(u).length
            });
            if (c.getById) {
                d.filter["ID"] = function (a) {
                    var b = a.replace(bb, bc);
                    return function (a) {
                        return a.getAttribute("id") === b
                    }
                };
                d.find["ID"] = function (a, b) {
                    if (typeof b.getElementById !== "undefined" && p) {
                        var c = b.getElementById(a);
                        return c ? [c] : []
                    }
                }
            } else {
                d.filter["ID"] = function (a) {
                    var b = a.replace(bb, bc);
                    return function (a) {
                        var c = typeof a.getAttributeNode !== "undefined" && a.getAttributeNode("id");
                        return c && c.value === b
                    }
                };
                d.find["ID"] = function (a, b) {
                    if (typeof b.getElementById !== "undefined" && p) {
                        var c, d, e, f = b.getElementById(a);
                        if (f) {
                            c = f.getAttributeNode("id");
                            if (c && c.value === a) {
                                return [f]
                            }
                            e = b.getElementsByName(a);
                            d = 0;
                            while (f = e[d++]) {
                                c = f.getAttributeNode("id");
                                if (c && c.value === a) {
                                    return [f]
                                }
                            }
                        }
                        return []
                    }
                }
            }
            d.find["TAG"] = c.getElementsByTagName ? function (a, b) {
                if (typeof b.getElementsByTagName !== "undefined") {
                    return b.getElementsByTagName(a)
                } else if (c.qsa) {
                    return b.querySelectorAll(a)
                }
            } : function (a, b) {
                var c, d = [], e = 0, f = b.getElementsByTagName(a);
                if (a === "*") {
                    while (c = f[e++]) {
                        if (c.nodeType === 1) {
                            d.push(c)
                        }
                    }
                    return d
                }
                return f
            };
            d.find["CLASS"] = c.getElementsByClassName && function (a, b) {
                if (typeof b.getElementsByClassName !== "undefined" && p) {
                    return b.getElementsByClassName(a)
                }
            };
            r = [];
            q = [];
            if (c.qsa = $.test(n.querySelectorAll)) {
                bl(function (a) {
                    var b;
                    o.appendChild(a).innerHTML = "<a id='" + u + "'></a>" + "<select id='" + u + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";
                    if (a.querySelectorAll("[msallowcapture^='']").length) {
                        q.push("[*^$]=" + L + "*(?:''|\"\")")
                    }
                    if (!a.querySelectorAll("[selected]").length) {
                        q.push("\\[" + L + "*(?:value|" + K + ")")
                    }
                    if (!a.querySelectorAll("[id~=" + u + "-]").length) {
                        q.push("~=")
                    }
                    b = n.createElement("input");
                    b.setAttribute("name", "");
                    a.appendChild(b);
                    if (!a.querySelectorAll("[name='']").length) {
                        q.push("\\[" + L + "*name" + L + "*=" + L + "*(?:''|\"\")")
                    }
                    if (!a.querySelectorAll(":checked").length) {
                        q.push(":checked")
                    }
                    if (!a.querySelectorAll("a#" + u + "+*").length) {
                        q.push(".#.+[+~]")
                    }
                    a.querySelectorAll("\\\f");
                    q.push("[\\r\\n\\f]")
                });
                bl(function (a) {
                    a.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";
                    var b = n.createElement("input");
                    b.setAttribute("type", "hidden");
                    a.appendChild(b).setAttribute("name", "D");
                    if (a.querySelectorAll("[name=d]").length) {
                        q.push("name" + L + "*[*^$|!~]?=")
                    }
                    if (a.querySelectorAll(":enabled").length !== 2) {
                        q.push(":enabled", ":disabled")
                    }
                    o.appendChild(a).disabled = true;
                    if (a.querySelectorAll(":disabled").length !== 2) {
                        q.push(":enabled", ":disabled")
                    }
                    a.querySelectorAll("*,:x");
                    q.push(",.*:")
                })
            }
            if (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) {
                bl(function (a) {
                    c.disconnectedMatch = s.call(a, "*");
                    s.call(a, "[s!='']:x");
                    r.push("!=", O)
                })
            }
            q = q.length && new RegExp(q.join("|"));
            r = r.length && new RegExp(r.join("|"));
            b = $.test(o.compareDocumentPosition);
            t = b || $.test(o.contains) ? function (a, b) {
                var c = a.nodeType === 9 ? a.documentElement : a, d = b && b.parentNode;
                return a === d || !!(d && d.nodeType === 1 && (c.contains ? c.contains(d) : a.compareDocumentPosition && a.compareDocumentPosition(d) & 16))
            } : function (a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true
                        }
                    }
                }
                return false
            };
            C = b ? function (a, b) {
                if (a === b) {
                    l = true;
                    return 0
                }
                var d = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (d) {
                    return d
                }
                d = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (d & 1 || !c.sortDetached && b.compareDocumentPosition(a) === d) {
                    if (a == n || a.ownerDocument == v && t(v, a)) {
                        return -1
                    }
                    if (b == n || b.ownerDocument == v && t(v, b)) {
                        return 1
                    }
                    return k ? J(k, a) - J(k, b) : 0
                }
                return d & 4 ? -1 : 1
            } : function (a, b) {
                if (a === b) {
                    l = true;
                    return 0
                }
                var c, d = 0, e = a.parentNode, f = b.parentNode, g = [a], h = [b];
                if (!e || !f) {
                    return a == n ? -1 : b == n ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0
                } else if (e === f) {
                    return bn(a, b)
                }
                c = a;
                while (c = c.parentNode) {
                    g.unshift(c)
                }
                c = b;
                while (c = c.parentNode) {
                    h.unshift(c)
                }
                while (g[d] === h[d]) {
                    d++
                }
                return d ? bn(g[d], h[d]) : g[d] == v ? -1 : h[d] == v ? 1 : 0
            };
            return n
        };
        bi.matches = function (a, b) {
            return bi(a, null, null, b)
        };
        bi.matchesSelector = function (a, b) {
            m(a);
            if (c.matchesSelector && p && !B[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) {
                try {
                    var d = s.call(a, b);
                    if (d || c.disconnectedMatch || a.document && a.document.nodeType !== 11) {
                        return d
                    }
                } catch (e) {
                    B(b, true)
                }
            }
            return bi(b, n, null, [a]).length > 0
        };
        bi.contains = function (a, b) {
            if ((a.ownerDocument || a) != n) {
                m(a)
            }
            return t(a, b)
        };
        bi.attr = function (a, b) {
            if ((a.ownerDocument || a) != n) {
                m(a)
            }
            var e = d.attrHandle[b.toLowerCase()],
                f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : undefined;
            return f !== undefined ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null
        };
        bi.escape = function (a) {
            return (a + "").replace(bd, be)
        };
        bi.error = function (a) {
            throw new Error("Syntax error, unrecognized expression: " + a)
        };
        bi.uniqueSort = function (a) {
            var b, d = [], e = 0, f = 0;
            l = !c.detectDuplicates;
            k = !c.sortStable && a.slice(0);
            a.sort(C);
            if (l) {
                while (b = a[f++]) {
                    if (b === a[f]) {
                        e = d.push(f)
                    }
                }
                while (e--) {
                    a.splice(d[e], 1)
                }
            }
            k = null;
            return a
        };
        e = bi.getText = function (a) {
            var b, c = "", d = 0, f = a.nodeType;
            if (!f) {
                while (b = a[d++]) {
                    c += e(b)
                }
            } else if (f === 1 || f === 9 || f === 11) {
                if (typeof a.textContent === "string") {
                    return a.textContent
                } else {
                    for (a = a.firstChild; a; a = a.nextSibling) {
                        c += e(a)
                    }
                }
            } else if (f === 3 || f === 4) {
                return a.nodeValue
            }
            return c
        };
        d = bi.selectors = {
            cacheLength: 50,
            createPseudo: bk,
            match: W,
            attrHandle: {},
            find: {},
            relative: {
                ">": {dir: "parentNode", first: true},
                " ": {dir: "parentNode"},
                "+": {dir: "previousSibling", first: true},
                "~": {dir: "previousSibling"}
            },
            preFilter: {
                ATTR: function (a) {
                    a[1] = a[1].replace(bb, bc);
                    a[3] = (a[3] || a[4] || a[5] || "").replace(bb, bc);
                    if (a[2] === "~=") {
                        a[3] = " " + a[3] + " "
                    }
                    return a.slice(0, 4)
                }, CHILD: function (a) {
                    a[1] = a[1].toLowerCase();
                    if (a[1].slice(0, 3) === "nth") {
                        if (!a[3]) {
                            bi.error(a[0])
                        }
                        a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * (a[3] === "even" || a[3] === "odd"));
                        a[5] = +(a[7] + a[8] || a[3] === "odd")
                    } else if (a[3]) {
                        bi.error(a[0])
                    }
                    return a
                }, PSEUDO: function (a) {
                    var b, c = !a[6] && a[2];
                    if (W["CHILD"].test(a[0])) {
                        return null
                    }
                    if (a[3]) {
                        a[2] = a[4] || a[5] || ""
                    } else if (c && U.test(c) && (b = g(c, true)) && (b = c.indexOf(")", c.length - b) - c.length)) {
                        a[0] = a[0].slice(0, b);
                        a[2] = c.slice(0, b)
                    }
                    return a.slice(0, 3)
                }
            },
            filter: {
                TAG: function (a) {
                    var b = a.replace(bb, bc).toLowerCase();
                    return a === "*" ? function () {
                        return true
                    } : function (a) {
                        return a.nodeName && a.nodeName.toLowerCase
                        () === b
                    }
                }, CLASS: function (a) {
                    var b = y[a + " "];
                    return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function (a) {
                        return b.test(typeof a.className === "string" && a.className || typeof a.getAttribute !== "undefined" && a.getAttribute("class") || "")
                    })
                }, ATTR: function (a, b, c) {
                    return function (d) {
                        var e = bi.attr(d, a);
                        if (e == null) {
                            return b === "!="
                        }
                        if (!b) {
                            return true
                        }
                        e += "";
                        return b === "=" ? e === c : b === "!=" ? e !== c : b === "^=" ? c && e.indexOf(c) === 0 : b === "*=" ? c && e.indexOf(c) > -1 : b === "$=" ? c && e.slice(-c.length) === c : b === "~=" ? (" " + e.replace(P, " ") + " ").indexOf(c) > -1 : b === "|=" ? e === c || e.slice(0, c.length + 1) === c + "-" : false
                    }
                }, CHILD: function (a, b, c, d, e) {
                    var f = a.slice(0, 3) !== "nth", g = a.slice(-4) !== "last", h = b === "of-type";
                    return d === 1 && e === 0 ? function (a) {
                        return !!a.parentNode
                    } : function (b, c, i) {
                        var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling", q = b.parentNode,
                            r = h && b.nodeName.toLowerCase(), s = !i && !h, t = false;
                        if (q) {
                            if (f) {
                                while (p) {
                                    m = b;
                                    while (m = m[p]) {
                                        if (h ? m.nodeName.toLowerCase() === r : m.nodeType === 1) {
                                            return false
                                        }
                                    }
                                    o = p = a === "only" && !o && "nextSibling"
                                }
                                return true
                            }
                            o = [g ? q.firstChild : q.lastChild];
                            if (g && s) {
                                m = q;
                                l = m[u] || (m[u] = {});
                                k = l[m.uniqueID] || (l[m.uniqueID] = {});
                                j = k[a] || [];
                                n = j[0] === w && j[1];
                                t = n && j[2];
                                m = n && q.childNodes[n];
                                while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                                    if (m.nodeType === 1 && ++t && m === b) {
                                        k[a] = [w, n, t];
                                        break
                                    }
                                }
                            } else {
                                if (s) {
                                    m = b;
                                    l = m[u] || (m[u] = {});
                                    k = l[m.uniqueID] || (l[m.uniqueID] = {});
                                    j = k[a] || [];
                                    n = j[0] === w && j[1];
                                    t = n
                                }
                                if (t === false) {
                                    while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) {
                                        if ((h ? m.nodeName.toLowerCase() === r : m.nodeType === 1) && ++t) {
                                            if (s) {
                                                l = m[u] || (m[u] = {});
                                                k = l[m.uniqueID] || (l[m.uniqueID] = {});
                                                k[a] = [w, t]
                                            }
                                            if (m === b) {
                                                break
                                            }
                                        }
                                    }
                                }
                            }
                            t -= e;
                            return t === d || t % d === 0 && t / d >= 0
                        }
                    }
                }, PSEUDO: function (a, b) {
                    var c, e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || bi.error("unsupported pseudo: " + a);
                    if (e[u]) {
                        return e(b)
                    }
                    if (e.length > 1) {
                        c = [a, a, "", b];
                        return d.setFilters.hasOwnProperty(a.toLowerCase()) ? bk(function (a, c) {
                            var d, f = e(a, b), g = f.length;
                            while (g--) {
                                d = J(a, f[g]);
                                a[d] = !(c[d] = f[g])
                            }
                        }) : function (a) {
                            return e(a, 0, c)
                        }
                    }
                    return e
                }
            },
            pseudos: {
                not: bk(function (a) {
                    var b = [], c = [], d = h(a.replace(Q, "$1"));
                    return d[u] ? bk(function (a, b, c, e) {
                        var f, g = d(a, null, e, []), h = a.length;
                        while (h--) {
                            if (f = g[h]) {
                                a[h] = !(b[h] = f)
                            }
                        }
                    }) : function (a, e, f) {
                        b[0] = a;
                        d(b, null, f, c);
                        b[0] = null;
                        return !c.pop()
                    }
                }), has: bk(function (a) {
                    return function (b) {
                        return bi(a, b).length > 0
                    }
                }), contains: bk(function (a) {
                    a = a.replace(bb, bc);
                    return function (b) {
                        return (b.textContent || e(b)).indexOf(a) > -1
                    }
                }), lang: bk(function (a) {
                    if (!V.test(a || "")) {
                        bi.error("unsupported lang: " + a)
                    }
                    a = a.replace(bb, bc).toLowerCase();
                    return function (b) {
                        var c;
                        do {
                            if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) {
                                c = c.toLowerCase();
                                return c === a || c.indexOf(a + "-") === 0
                            }
                        } while ((b = b.parentNode) && b.nodeType === 1);
                        return false
                    }
                }), target: function (b) {
                    var c = a.location && a.location.hash;
                    return c && c.slice(1) === b.id
                }, root: function (a) {
                    return a === o
                }, focus: function (a) {
                    return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex)
                }, enabled: bq(false), disabled: bq(true), checked: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return b === "input" && !!a.checked || b === "option" && !!a.selected
                }, selected: function (a) {
                    if (a.parentNode) {
                        a.parentNode.selectedIndex
                    }
                    return a.selected === true
                }, empty: function (a) {
                    for (a = a.firstChild; a; a = a.nextSibling) {
                        if (a.nodeType < 6) {
                            return false
                        }
                    }
                    return true
                }, parent: function (a) {
                    return !d.pseudos["empty"](a)
                }, header: function (a) {
                    return Z.test(a.nodeName)
                }, input: function (a) {
                    return Y.test(a.nodeName)
                }, button: function (a) {
                    var b = a.nodeName.toLowerCase();
                    return b === "input" && a.type === "button" || b === "button"
                }, text: function (a) {
                    var b;
                    return a.nodeName.toLowerCase() === "input" && a.type === "text" && ((b = a.getAttribute("type")) == null || b.toLowerCase() === "text")
                }, first: br(function () {
                    return [0]
                }), last: br(function (a, b) {
                    return [b - 1]
                }), eq: br(function (a, b, c) {
                    return [c < 0 ? c + b : c]
                }), even: br(function (a, b) {
                    var c = 0;
                    for (; c < b; c += 2) {
                        a.push(c)
                    }
                    return a
                }), odd: br(function (a, b) {
                    var c = 1;
                    for (; c < b; c += 2) {
                        a.push(c)
                    }
                    return a
                }), lt: br(function (a, b, c) {
                    var d = c < 0 ? c + b : c > b ? b : c;
                    for (; --d >= 0;) {
                        a.push(d)
                    }
                    return a
                }), gt: br(function (a, b, c) {
                    var d = c < 0 ? c + b : c;
                    for (; ++d < b;) {
                        a.push(d)
                    }
                    return a
                })
            }
        };
        d.pseudos["nth"] = d.pseudos["eq"];
        for (b in {radio: true, checkbox: true, file: true, password: true, image: true}) {
            d.pseudos[b] = bo(b)
        }
        for (b in {submit: true, reset: true}) {
            d.pseudos[b] = bp(b)
        }
        bt.prototype = d.filters = d.pseudos;
        d.setFilters = new bt;
        g = bi.tokenize = function (a, b) {
            var c, e, f, g, h, i, j, k = z[a + " "];
            if (k) {
                return b ? 0 : k.slice(0)
            }
            h = a;
            i = [];
            j = d.preFilter;
            while (h) {
                if (!c || (e = R.exec(h))) {
                    if (e) {
                        h = h.slice(e[0].length) || h
                    }
                    i.push(f = [])
                }
                c = false;
                if (e = S.exec(h)) {
                    c = e.shift();
                    f.push({value: c, type: e[0].replace(Q, " ")});
                    h = h.slice(c.length)
                }
                for (g in d.filter) {
                    if ((e = W[g].exec(h)) && (!j[g] || (e = j[g](e)))) {
                        c = e.shift();
                        f.push({value: c, type: g, matches: e});
                        h = h.slice(c.length)
                    }
                }
                if (!c) {
                    break
                }
            }
            return b ? h.length : h ? bi.error(a) : z(a, i).slice(0)
        };
        h = bi.compile = function (a, b) {
            var c, d = [], e = [], f = A[a + " "];
            if (!f) {
                if (!b) {
                    b = g(a)
                }
                c = b.length;
                while (c--) {
                    f = bA(b[c]);
                    if (f[u]) {
                        d.push(f)
                    } else {
                        e.push(f)
                    }
                }
                f = A(a, bB(e, d));
                f.selector = a
            }
            return f
        };
        i = bi.select = function (a, b, c, e) {
            var f, i, j, k, l, m = typeof a === "function" && a, n = !e && g(a = m.selector || a);
            c = c || [];
            if (n.length === 1) {
                i = n[0] = n[0].slice(0);
                if (i.length > 2 && (j = i[0]).type === "ID" && b.nodeType === 9 && p && d.relative[i[1].type]) {
                    b = (d.find["ID"](j.matches[0].replace(bb, bc), b) || [])[0];
                    if (!b) {
                        return c
                    } else if (m) {
                        b = b.parentNode
                    }
                    a = a.slice(i.shift().value.length)
                }
                f = W["needsContext"].test(a) ? 0 : i.length;
                while (f--) {
                    j = i[f];
                    if (d.relative[k = j.type]) {
                        break
                    }
                    if (l = d.find[k]) {
                        if (e = l(j.matches[0].replace(bb, bc), ba.test(i[0].type) && bs(b.parentNode) || b)) {
                            i.splice(f, 1);
                            a = e.length && bu(i);
                            if (!a) {
                                H.apply(c, e);
                                return c
                            }
                            break
                        }
                    }
                }
            }
            (m || h(a, n))(e, b, !p, c, !b || ba.test(a) && bs(b.parentNode) || b);
            return c
        };
        c.sortStable = u.split("").sort(C).join("") === u;
        c.detectDuplicates = !!l;
        m();
        c.sortDetached = bl(function (a) {
            return a.compareDocumentPosition(n.createElement("fieldset")) & 1
        });
        if (!bl(function (a) {
            a.innerHTML = "<a href='#'></a>";
            return a.firstChild.getAttribute("href") === "#"
        })) {
            bm("type|href|height|width", function (a, b, c) {
                if (!c) {
                    return a.getAttribute(b, b.toLowerCase() === "type" ? 1 : 2)
                }
            })
        }
        if (!c.attributes || !bl(function (a) {
            a.innerHTML = "<input/>";
            a.firstChild.setAttribute("value", "");
            return a.firstChild.getAttribute("value") === ""
        })) {
            bm("value", function (a, b, c) {
                if (!c && a.nodeName.toLowerCase() === "input") {
                    return a.defaultValue
                }
            })
        }
        if (!bl(function (a) {
            return a.getAttribute("disabled") == null
        })) {
            bm(K, function (a, b, c) {
                var d;
                if (!c) {
                    return a[b] === true ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
                }
            })
        }
        return bi
    }(a);
    v.find = x;
    v.expr = x.selectors;
    v.expr[":"] = v.expr.pseudos;
    v.uniqueSort = v.unique = x.uniqueSort;
    v.text = x.getText;
    v.isXMLDoc = x.isXML;
    v.contains = x.contains;
    v.escapeSelector = x.escape;
    var y = function (a, b, c) {
        var d = [], e = c !== undefined;
        while ((a = a[b]) && a.nodeType !== 9) {
            if (a.nodeType === 1) {
                if (e && v(a).is(c)) {
                    break
                }
                d.push(a)
            }
        }
        return d
    };
    var z = function (a, b) {
        var c = [];
        for (; a; a = a.nextSibling) {
            if (a.nodeType === 1 && a !== b) {
                c.push(a)
            }
        }
        return c
    };
    var A = v.expr.match.needsContext;
    var C = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    v.filter = function (a, b, c) {
        var d = b[0];
        if (c) {
            a = ":not(" + a + ")"
        }
        if (b.length === 1 && d.nodeType === 1) {
            return v.find.matchesSelector(d, a) ? [d] : []
        }
        return v.find.matches(a, v.grep(b, function (a) {
            return a.nodeType === 1
        }))
    };
    v.fn.extend({
        find: function (a) {
            var b, c, d = this.length, e = this;
            if (typeof a !== "string") {
                return this.pushStack(v(a).filter(function () {
                    for (b = 0; b < d; b++) {
                        if (v.contains(e[b], this)) {
                            return true
                        }
                    }
                }))
            }
            c = this.pushStack([]);
            for (b = 0; b < d; b++) {
                v.find(a, e[b], c)
            }
            return d > 1 ? v.uniqueSort(c) : c
        }, filter: function (a) {
            return this.pushStack(D(this, a || [], false))
        }, not: function (a) {
            return this.pushStack(D(this, a || [], true))
        }, is: function (a) {
            return !!D(this, typeof a === "string" && A.test(a) ? v(a) : a || [], false).length
        }
    });
    var E, F = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, G = v.fn.init = function (a, b, c) {
        var d, e;
        if (!a) {
            return this
        }
        c = c || E;
        if (typeof a === "string") {
            if (a[0] === "<" && a[a.length - 1] === ">" && a.length >= 3) {
                d = [null, a, null]
            } else {
                d = F.exec(a)
            }
            if (d && (d[1] || !b)) {
                if (d[1]) {
                    b = b instanceof v ? b[0] : b;
                    v.merge(this, v.parseHTML(d[1], b && b.nodeType ? b.ownerDocument || b : q, true));
                    if (C.test(d[1]) && v.isPlainObject(b)) {
                        for (d in b) {
                            if (o(this[d])) {
                                this[d](b[d])
                            } else {
                                this.attr(d, b[d])
                            }
                        }
                    }
                    return this
                } else {
                    e = q.getElementById(d[2]);
                    if (e) {
                        this[0] = e;
                        this.length = 1
                    }
                    return this
                }
            } else if (!b || b.jquery) {
                return (b || c).find(a)
            } else {
                return this.constructor(b).find(a)
            }
        } else if (a.nodeType) {
            this[0] = a;
            this.length = 1;
            return this
        } else if (o(a)) {
            return c.ready !== undefined ? c.ready(a) : a(v)
        }
        return v.makeArray(a, this)
    };
    G.prototype = v.fn;
    E = v(q);
    var H = /^(?:parents|prev(?:Until|All))/, I = {children: true, contents: true, next: true, prev: true};
    v.fn.extend({
        has: function (a) {
            var b = v(a, this), c = b.length;
            return this.filter(function () {
                var a = 0;
                for (; a < c; a++) {
                    if (v.contains(this, b[a])) {
                        return true
                    }
                }
            })
        }, closest: function (a, b) {
            var c, d = 0, e = this.length, f = [], g = typeof a !== "string" && v(a);
            if (!A.test(a)) {
                for (; d < e; d++) {
                    for (c = this[d]; c && c !== b; c = c.parentNode) {
                        if (c.nodeType < 11 && (g ? g.index(c) > -1 : c.nodeType === 1 && v.find.matchesSelector(c, a))) {
                            f.push(c);
                            break
                        }
                    }
                }
            }
            return this.pushStack(f.length > 1 ? v.uniqueSort(f) : f)
        }, index: function (a) {
            if (!a) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
            }
            if (typeof a === "string") {
                return h.call(v(a), this[0])
            }
            return h.call(this, a.jquery ? a[0] : a)
        }, add: function (a, b) {
            return this.pushStack(v.uniqueSort(v.merge(this.get(), v(a, b))))
        }, addBack: function (a) {
            return this.add(a == null ? this.prevObject : this.prevObject.filter(a))
        }
    });
    v.each({
        parent: function (a) {
            var b = a.parentNode;
            return b && b.nodeType !== 11 ? b : null
        }, parents: function (a) {
            return y(a, "parentNode")
        }, parentsUntil: function (a, b, c) {
            return y(a, "parentNode", c)
        }, next: function (a) {
            return J(a, "nextSibling")
        }, prev: function (a) {
            return J(a, "previousSibling")
        }, nextAll: function (a) {
            return y(a, "nextSibling")
        }, prevAll: function (a) {
            return y(a, "previousSibling")
        }, nextUntil: function (a, b, c) {
            return y(a, "nextSibling", c)
        }, prevUntil: function (a, b, c) {
            return y(a, "previousSibling", c)
        }, siblings: function (a) {
            return z((a.parentNode || {}).firstChild, a)
        }, children: function (a) {
            return z(a.firstChild)
        }, contents: function (a) {
            if (a.contentDocument != null && d(a.contentDocument)) {
                return a.contentDocument
            }
            if (B(a, "template")) {
                a = a.content || a
            }
            return v.merge([], a.childNodes)
        }
    }, function (a, b) {
        v.fn[a] = function (c, d) {
            var e = v.map(this, b, c);
            if (a.slice(-5) !== "Until") {
                d = c
            }
            if (d && typeof d === "string") {
                e = v.filter(d, e)
            }
            if (this.length > 1) {
                if (!I[a]) {
                    v.uniqueSort(e)
                }
                if (H.test(a)) {
                    e.reverse()
                }
            }
            return this.pushStack(e)
        }
    });
    var K = /[^\x20\t\r\n\f]+/g;
    v.Callbacks = function (a) {
        a = typeof a === "string" ? L(a) : v.extend({}, a);
        var b, c, d, e, f = [], g = [], h = -1, i = function () {
            e = e || a.once;
            d = b = true;
            for (; g.length; h = -1) {
                c = g.shift();
                while (++h < f.length) {
                    if (f[h].apply(c[0], c[1]) === false && a.stopOnFalse) {
                        h = f.length;
                        c = false
                    }
                }
            }
            if (!a.memory) {
                c = false
            }
            b = false;
            if (e) {
                if (c) {
                    f = []
                } else {
                    f = ""
                }
            }
        }, j = {
            add: function () {
                if (f) {
                    if (c && !b) {
                        h = f.length - 1;
                        g.push(c)
                    }
                    (function d(b) {
                        v.each(b, function (b, c) {
                            if (o(c)) {
                                if (!a.unique || !j.has(c)) {
                                    f.push(c)
                                }
                            } else if (c && c.length && t(c) !== "string") {
                                d(c)
                            }
                        })
                    })(arguments);
                    if (c && !b) {
                        i()
                    }
                }
                return this
            }, remove: function () {
                v.each(arguments, function (a, b) {
                    var c;
                    while ((c = v.inArray(b, f, c)) > -1) {
                        f.splice(c, 1);
                        if (c <= h) {
                            h--
                        }
                    }
                });
                return this
            }, has: function (a) {
                return a ? v.inArray(a, f) > -1 : f.length > 0
            }, empty: function () {
                if (f) {
                    f = []
                }
                return this
            }, disable: function () {
                e = g = [];
                f = c = "";
                return this
            }, disabled: function () {
                return !f
            }, lock: function () {
                e = g = [];
                if (!c && !b) {
                    f = c = ""
                }
                return this
            }, locked: function () {
                return !!e
            }, fireWith: function (a, c) {
                if (!e) {
                    c = c || [];
                    c = [a, c.slice ? c.slice() : c];
                    g.push(c);
                    if (!b) {
                        i()
                    }
                }
                return this
            }, fire: function () {
                j.fireWith(this, arguments);
                return this
            }, fired: function () {
                return !!d
            }
        };
        return j
    };
    v.extend({
        Deferred: function (b) {
            var c = [["notify", "progress", v.Callbacks("memory"), v.Callbacks("memory"), 2], ["resolve", "done", v.Callbacks("once memory"), v.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", v.Callbacks("once memory"), v.Callbacks("once memory"), 1, "rejected"]],
                d = "pending", e = {
                    state: function () {
                        return d
                    }, always: function () {
                        f.done(arguments).fail(arguments);
                        return this
                    }, "catch": function (a) {
                        return e.then(null, a)
                    }, pipe: function () {
                        var a = arguments;
                        return v.Deferred(function (b) {
                            v.each(c, function (c, d) {
                                var e = o(a[d[4]]) && a[d[4]];
                                f[d[1]](function () {
                                    var a = e && e.apply(this, arguments);
                                    if (a && o(a.promise)) {
                                        a.promise().progress(b.notify).done(b.resolve).fail(b.reject)
                                    } else {
                                        b[d[0] + "With"](this, e ? [a] : arguments)
                                    }
                                })
                            });
                            a = null
                        }).promise()
                    }, then: function (b, d, e) {
                        function g(b, c, d, e) {
                            return function () {
                                var h = this, i = arguments, j = function () {
                                    var a, j;
                                    if (b < f) {
                                        return
                                    }
                                    a = d.apply(h, i);
                                    if (a === c.promise()) {
                                        throw new TypeError("Thenable self-resolution")
                                    }
                                    j = a && (typeof a === "object" || typeof a === "function") && a.then;
                                    if (o(j)) {
                                        if (e) {
                                            j.call(a, g(f, c, M, e), g(f, c, N, e))
                                        } else {
                                            f++;
                                            j.call(a, g(f, c, M, e), g(f, c, N, e), g(f, c, M, c.notifyWith))
                                        }
                                    } else {
                                        if (d !== M) {
                                            h = undefined;
                                            i = [a]
                                        }
                                        (e || c.resolveWith)(h, i)
                                    }
                                }, k = e ? j : function () {
                                    try {
                                        j()
                                    } catch (a) {
                                        if (v.Deferred.exceptionHook) {
                                            v.Deferred.exceptionHook(a, k.stackTrace)
                                        }
                                        if (b + 1 >= f) {
                                            if (d !== N) {
                                                h = undefined;
                                                i = [a]
                                            }
                                            c.rejectWith(h, i)
                                        }
                                    }
                                };
                                if (b) {
                                    k()
                                } else {
                                    if (v.Deferred.getStackHook) {
                                        k.stackTrace = v.Deferred.getStackHook()
                                    }
                                    a.setTimeout(k)
                                }
                            }
                        }

                        var f = 0;
                        return v.Deferred(function (a) {
                            c[0][3].add(g(0, a, o(e) ? e : M, a.notifyWith));
                            c[1][3].add(g(0, a, o(b) ? b : M));
                            c[2][3].add(g(0, a, o(d) ? d : N))
                        }).promise()
                    }, promise: function (a) {
                        return a != null ? v.extend(a, e) : e
                    }
                }, f = {};
            v.each(c, function (a, b) {
                var g = b[2], h = b[5];
                e[b[1]] = g.add;
                if (h) {
                    g.add(function () {
                        d = h
                    }, c[3 - a][2].disable, c[3 - a][3].disable, c[0][2].lock, c[0][3].lock)
                }
                g.add(b[3].fire);
                f[b[0]] = function () {
                    f[b[0] + "With"](this === f ? undefined : this, arguments);
                    return this
                };
                f[b[0] + "With"] = g.fireWith
            });
            e.promise(f);
            if (b) {
                b.call(f, f)
            }
            return f
        }, when: function (a) {
            var b = arguments.length, c = b, d = Array(c), f = e.call(arguments), g = v.Deferred(), h = function (a) {
                return function (c) {
                    d[a] = this;
                    f[a] = arguments.length > 1 ? e.call(arguments) : c;
                    if (!--b) {
                        g.resolveWith(d, f)
                    }
                }
            };
            if (b <= 1) {
                O(a, g.done(h(c)).resolve, g.reject, !b);
                if (g.state() === "pending" || o(f[c] && f[c].then)) {
                    return g.then()
                }
            }
            while (c--) {
                O(f[c], h(c), g.reject)
            }
            return g.promise()
        }
    });
    var P = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    v.Deferred.exceptionHook = function (b, c) {
        if (a.console && a.console.warn && b && P.test(b.name)) {
            a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c)
        }
    };
    v.readyException = function (b) {
        a.setTimeout(function () {
            throw b
        })
    };
    var Q = v.Deferred();
    v.fn.ready = function (a) {
        Q.then(a).catch(function (a) {
            v.readyException(a)
        });
        return this
    };
    v.extend({
        isReady: false, readyWait: 1, ready: function (a) {
            if (a === true ? --v.readyWait : v.isReady) {
                return
            }
            v.isReady = true;
            if (a !== true && --v.readyWait > 0) {
                return
            }
            Q.resolveWith(q, [v])
        }
    });
    v.ready.then = Q.then;
    if (q.readyState === "complete" || q.readyState !== "loading" && !q.documentElement.doScroll) {
        a.setTimeout(v.ready)
    } else {
        q.addEventListener("DOMContentLoaded", R);
        a.addEventListener("load", R)
    }
    var S = function (a, b, c, d, e, f, g) {
        var h = 0, i = a.length, j = c == null;
        if (t(c) === "object") {
            e = true;
            for (h in c) {
                S(a, b, h, c[h], true, f, g)
            }
        } else if (d !== undefined) {
            e = true;
            if (!o(d)) {
                g = true
            }
            if (j) {
                if (g) {
                    b.call(a, d);
                    b = null
                } else {
                    j = b;
                    b = function (a, b, c) {
                        return j.call(v(a), c)
                    }
                }
            }
            if (b) {
                for (; h < i; h++) {
                    b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)))
                }
            }
        }
        if (e) {
            return a
        }
        if (j) {
            return b.call(a)
        }
        return i ? b(a[0], c) : f
    };
    var T = /^-ms-/, U = /-([a-z])/g;
    var X = function (a) {
        return a.nodeType === 1 || a.nodeType === 9 || !+a.nodeType
    };
    Y.uid = 1;
    Y.prototype = {
        cache: function (a) {
            var b = a[this.expando];
            if (!b) {
                b = {};
                if (X(a)) {
                    if (a.nodeType) {
                        a[this.expando] = b
                    } else {
                        Object.defineProperty(a, this.expando, {value: b, configurable: true})
                    }
                }
            }
            return b
        }, set: function (a, b, c) {
            var d, e = this.cache(a);
            if (typeof b === "string") {
                e[W(b)] = c
            } else {
                for (d in b) {
                    e[W(d)] = b[d]
                }
            }
            return e
        }, get: function (a, b) {
            return b === undefined ? this.cache(a) : a[this.expando] && a[this.expando][W(b)]
        }, access: function (a, b, c) {
            if (b === undefined || b && typeof b === "string" && c === undefined) {
                return this.get(a, b)
            }
            this.set(a, b, c);
            return c !== undefined ? c : b
        }, remove: function (a, b) {
            var c, d = a[this.expando];
            if (d === undefined) {
                return
            }
            if (b !== undefined) {
                if (Array.isArray(b)) {
                    b = b.map(W)
                } else {
                    b = W(b);
                    b = b in d ? [b] : b.match(K) || []
                }
                c = b.length;
                while (c--) {
                    delete d[b[c]]
                }
            }
            if (b === undefined || v.isEmptyObject(d)) {
                if (a.nodeType) {
                    a[this.expando] = undefined
                } else {
                    delete a[this.expando]
                }
            }
        }, hasData: function (a) {
            var b = a[this.expando];
            return b !== undefined && !v.isEmptyObject(b)
        }
    };
    var Z = new Y;
    var $ = new Y;
    var _ = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, ba = /[A-Z]/g;
    v.extend({
        hasData: function (a) {
            return $.hasData(a) || Z.hasData(a)
        }, data: function (a, b, c) {
            return $.access(a, b, c)
        }, removeData: function (a, b) {
            $.remove(a, b)
        }, _data: function (a, b, c) {
            return Z.access(a, b, c)
        }, _removeData: function (a, b) {
            Z.remove(a, b)
        }
    });
    v.fn.extend({
        data: function (a, b) {
            var c, d, e, f = this[0], g = f && f.attributes;
            if (a === undefined) {
                if (this.length) {
                    e = $.get(f);
                    if (f.nodeType === 1 && !Z.get(f, "hasDataAttrs")) {
                        c = g.length;
                        while (c--) {
                            if (g[c]) {
                                d = g[c].name;
                                if (d.indexOf("data-") === 0) {
                                    d = W(d.slice(5));
                                    bc(f, d, e[d])
                                }
                            }
                        }
                        Z.set(f, "hasDataAttrs", true)
                    }
                }
                return e
            }
            if (typeof a === "object") {
                return this.each(function () {
                    $.set(this, a)
                })
            }
            return S(this, function (b) {
                var c;
                if (f && b === undefined) {
                    c = $.get(f, a);
                    if (c !== undefined) {
                        return c
                    }
                    c = bc(f, a);
                    if (c !== undefined) {
                        return c
                    }
                    return
                }
                this.each(function () {
                    $.set(this, a, b)
                })
            }, null, b, arguments.length > 1, null, true)
        }, removeData: function (a) {
            return this.each(function () {
                $.remove(this, a)
            })
        }
    });
    v.extend({
        queue: function (a, b, c) {
            var d;
            if (a) {
                b = (b || "fx") + "queue";
                d = Z.get(a, b);
                if (c) {
                    if (!d || Array.isArray(c)) {
                        d = Z.access(a, b, v.makeArray(c))
                    } else {
                        d.push(c)
                    }
                }
                return d || []
            }
        }, dequeue: function (a, b) {
            b = b || "fx";
            var c = v.queue(a, b), d = c.length, e = c.shift(), f = v._queueHooks(a, b), g = function () {
                v.dequeue(a, b)
            };
            if (e === "inprogress") {
                e = c.shift();
                d--
            }
            if (e) {
                if (b === "fx") {
                    c.unshift("inprogress")
                }
                delete f.stop;
                e.call(a, g, f)
            }
            if (!d && f) {
                f.empty.fire()
            }
        }, _queueHooks: function (a, b) {
            var c = b + "queueHooks";
            return Z.get(a, c) || Z.access(a, c, {
                empty: v.Callbacks("once memory").add(function () {
                    Z.remove(a, [b + "queue", c])
                })
            })
        }
    });
    v.fn.extend({
        queue: function (a, b) {
            var c = 2;
            if (typeof a !== "string") {
                b = a;
                a = "fx";
                c--
            }
            if (arguments.length < c) {
                return v.queue(this[0], a)
            }
            return b === undefined ? this : this.each(function () {
                var c = v.queue(this, a, b);
                v._queueHooks(this, a);
                if (a === "fx" && c[0] !== "inprogress") {
                    v.dequeue(this, a)
                }
            })
        }, dequeue: function (a) {
            return this.each(function () {
                v.dequeue(this, a)
            })
        }, clearQueue: function (a) {
            return this.queue(a || "fx", [])
        }, promise: function (a, b) {
            var c, d = 1, e = v.Deferred(), f = this, g = this.length, h = function () {
                if (!--d) {
                    e.resolveWith(f, [f])
                }
            };
            if (typeof a !== "string") {
                b = a;
                a = undefined
            }
            a = a || "fx";
            while (g--) {
                c = Z.get(f[g], a + "queueHooks");
                if (c && c.empty) {
                    d++;
                    c.empty.add(h)
                }
            }
            h();
            return e.promise(b)
        }
    });
    var bd = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var be = new RegExp("^(?:([+-])=|)(" + bd + ")([a-z%]*)$", "i");
    var bf = ["Top", "Right", "Bottom", "Left"];
    var bg = q.documentElement;
    var bh = function (a) {
        return v.contains(a.ownerDocument, a)
    }, bi = {composed: true};
    if (bg.getRootNode) {
        bh = function (a) {
            return v.contains(a.ownerDocument, a) || a.getRootNode(bi) === a.ownerDocument
        }
    }
    var bj = function (a, b) {
        a = b || a;
        return a.style.display === "none" || a.style.display === "" && bh(a) && v.css(a, "display") === "none"
    };
    var bl = {};
    v.fn.extend({
        show: function () {
            return bn(this, true)
        }, hide: function () {
            return bn(this)
        }, toggle: function (a) {
            if (typeof a === "boolean") {
                return a ? this.show() : this.hide()
            }
            return this.each(function () {
                if (bj(this)) {
                    v(this).show()
                } else {
                    v(this).hide()
                }
            })
        }
    });
    var bo = /^(?:checkbox|radio)$/i;
    var bp = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
    var bq = /^$|^module$|\/(?:java|ecma)script/i;
    (function () {
        var a = q.createDocumentFragment(), b = a.appendChild(q.createElement("div")), c = q.createElement("input");
        c.setAttribute("type", "radio");
        c.setAttribute("checked", "checked");
        c.setAttribute("name", "t");
        b.appendChild(c);
        n.checkClone = b.cloneNode(true).cloneNode(true).lastChild.checked;
        b.innerHTML = "<textarea>x</textarea>";
        n.noCloneChecked = !!b.cloneNode(true).lastChild.defaultValue;
        b.innerHTML = "<option></option>";
        n.option = !!b.lastChild
    })();
    var br = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
    };
    br.tbody = br.tfoot = br.colgroup = br.caption = br.thead;
    br.th = br.td;
    if (!n.option) {
        br.optgroup = br.option = [1, "<select multiple='multiple'>", "</select>"]
    }
    var bu = /<|&#?\w+;/;
    var bw = /^([^.]*)(?:\.(.+)|)/;
    v.event = {
        global: {}, add: function (a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, n, o, p, q = Z.get(a);
            if (!X(a)) {
                return
            }
            if (c.handler) {
                f = c;
                c = f.handler;
                e = f.selector
            }
            if (e) {
                v.find.matchesSelector(bg, e)
            }
            if (!c.guid) {
                c.guid = v.guid++
            }
            if (!(i = q.events)) {
                i = q.events = Object.create(null)
            }
            if (!(g = q.handle)) {
                g = q.handle = function (b) {
                    return typeof v !== "undefined" && v.event.triggered !== b.type ? v.event.dispatch.apply(a, arguments) : undefined
                }
            }
            b = (b || "").match(K) || [""];
            j = b.length;
            while (j--) {
                h = bw.exec(b[j]) || [];
                n = p = h[1];
                o = (h[2] || "").split(".").sort();
                if (!n) {
                    continue
                }
                l = v.event.special[n] || {};
                n = (e ? l.delegateType : l.bindType) || n;
                l = v.event.special[n] || {};
                k = v.extend({
                    type: n,
                    origType: p,
                    data: d,
                    handler: c,
                    guid: c.guid,
                    selector: e,
                    needsContext: e && v.expr.match.needsContext.test(e),
                    namespace: o.join(".")
                }, f);
                if (!(m = i[n])) {
                    m = i[n] = [];
                    m.delegateCount = 0;
                    if (!l.setup || l.setup.call(a, d, o, g) === false) {
                        if (a.addEventListener) {
                            a.addEventListener(n, g)
                        }
                    }
                }
                if (l.add) {
                    l.add.call(a, k);
                    if (!k.handler.guid) {
                        k.handler.guid = c.guid
                    }
                }
                if (e) {
                    m.splice(m.delegateCount++, 0, k)
                } else {
                    m.push(k)
                }
                v.event.global[n] = true
            }
        }, remove: function (a, b, c, d, e) {
            var f, g, h, i, j, k, l, m, n, o, p, q = Z.hasData(a) && Z.get(a);
            if (!q || !(i = q.events)) {
                return
            }
            b = (b || "").match(K) || [""];
            j = b.length;
            while (j--) {
                h = bw.exec(b[j]) || [];
                n = p = h[1];
                o = (h[2] || "").split(".").sort();
                if (!n) {
                    for (n in i) {
                        v.event.remove(a, n + b[j], c, d, true)
                    }
                    continue
                }
                l = v.event.special[n] || {};
                n = (d ? l.delegateType : l.bindType) || n;
                m = i[n] || [];
                h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)");
                g = f = m.length;
                while (f--) {
                    k = m[f];
                    if ((e || p === k.origType) && (!c || c.guid === k.guid) && (!h || h.test(k.namespace)) && (!d || d === k.selector || d === "**" && k.selector)) {
                        m.splice(f, 1);
                        if (k.selector) {
                            m.delegateCount--
                        }
                        if (l.remove) {
                            l.remove.call(a, k)
                        }
                    }
                }
                if (g && !m.length) {
                    if (!l.teardown || l.teardown.call(a, o, q.handle) === false) {
                        v.removeEvent(a, n, q.handle)
                    }
                    delete i[n]
                }
            }
            if (v.isEmptyObject(i)) {
                Z.remove(a, "handle events")
            }
        }, dispatch: function (a) {
            var b, c, d, e, f, g, h = new Array(arguments.length), i = v.event.fix(a),
                j = (Z.get(this, "events") || Object.create(null))[i.type] || [], k = v.event.special[i.type] || {};
            h[0] = i;
            for (b = 1; b < arguments.length; b++) {
                h[b] = arguments[b]
            }
            i.delegateTarget = this;
            if (k.preDispatch && k.preDispatch.call(this, i) === false) {
                return
            }
            g = v.event.handlers.call(this, i, j);
            b = 0;
            while ((e = g[b++]) && !i.isPropagationStopped()) {
                i.currentTarget = e.elem;
                c = 0;
                while ((f = e.handlers[c++]) && !i.isImmediatePropagationStopped()) {
                    if (!i.rnamespace || f.namespace === false || i.rnamespace.test(f.namespace)) {
                        i.handleObj = f;
                        i.data = f.data;
                        d = ((v.event.special[f.origType] || {}).handle || f.handler).apply(e.elem, h);
                        if (d !== undefined) {
                            if ((i.result = d) === false) {
                                i.preventDefault();
                                i.stopPropagation()
                            }
                        }
                    }
                }
            }
            if (k.postDispatch) {
                k.postDispatch.call(this, i)
            }
            return i.result
        }, handlers: function (a, b) {
            var c, d, e, f, g, h = [], i = b.delegateCount, j = a.target;
            if (i && j.nodeType && !(a.type === "click" && a.button >= 1)) {
                for (; j !== this; j = j.parentNode || this) {
                    if (j.nodeType === 1 && !(a.type === "click" && j.disabled === true)) {
                        f = [];
                        g = {};
                        for (c = 0; c < i; c++) {
                            d = b[c];
                            e = d.selector + " ";
                            if (g[e] === undefined) {
                                g[e] = d.needsContext ? v(e, this).index(j) > -1 : v.find(e, this, null, [j]).length
                            }
                            if (g[e]) {
                                f.push(d)
                            }
                        }
                        if (f.length) {
                            h.push({elem: j, handlers: f})
                        }
                    }
                }
            }
            j = this;
            if (i < b.length) {
                h.push({elem: j, handlers: b.slice(i)})
            }
            return h
        }, addProp: function (a, b) {
            Object.defineProperty(v.Event.prototype, a, {
                enumerable: true, configurable: true, get: o(b) ? function () {
                    if (this.originalEvent) {
                        return b(this.originalEvent)
                    }
                } : function () {
                    if (this.originalEvent) {
                        return this.originalEvent[a]
                    }
                }, set: function (b) {
                    Object.defineProperty(this, a, {enumerable: true, configurable: true, writable: true, value: b})
                }
            })
        }, fix: function (a) {
            return a[v.expando] ? a : new v.Event(a)
        }, special: {
            load: {noBubble: true}, click: {
                setup: function (a) {
                    var b = this || a;
                    if (bo.test(b.type) && b.click && B(b, "input")) {
                        bC(b, "click", bx)
                    }
                    return false
                }, trigger: function (a) {
                    var b = this || a;
                    if (bo.test(b.type) && b.click && B(b, "input")) {
                        bC(b, "click")
                    }
                    return true
                }, _default: function (a) {
                    var b = a.target;
                    return bo.test(b.type) && b.click && B(b, "input") && Z.get(b, "click") || B(b, "a")
                }
            }, beforeunload: {
                postDispatch: function (a) {
                    if (a.result !== undefined && a.originalEvent) {
                        a.originalEvent.returnValue = a.result
                    }
                }
            }
        }
    };
    v.removeEvent = function (a, b, c) {
        if (a.removeEventListener) {
            a.removeEventListener(b, c)
        }
    };
    v.Event = function (a, b) {
        if (!(this instanceof v.Event)) {
            return new v.Event(a, b)
        }
        if (a && a.type) {
            this.originalEvent = a;
            this.type = a.type;
            this.isDefaultPrevented = a.defaultPrevented || a.defaultPrevented === undefined && a.returnValue === false ? bx : by;
            this.target = a.target && a.target.nodeType === 3 ? a.target.parentNode : a.target;
            this.currentTarget = a.currentTarget;
            this.relatedTarget = a.relatedTarget
        } else {
            this.type = a
        }
        if (b) {
            v.extend(this, b)
        }
        this.timeStamp = a && a.timeStamp || Date.now();
        this[v.expando] = true
    };
    v.Event.prototype = {
        constructor: v.Event,
        isDefaultPrevented: by,
        isPropagationStopped: by,
        isImmediatePropagationStopped: by,
        isSimulated: false,
        preventDefault: function () {
            var a = this.originalEvent;
            this.isDefaultPrevented = bx;
            if (a && !this.isSimulated) {
                a.preventDefault()
            }
        },
        stopPropagation: function () {
            var a = this.originalEvent;
            this.isPropagationStopped = bx;
            if (a && !this.isSimulated) {
                a.stopPropagation()
            }
        },
        stopImmediatePropagation: function () {
            var a = this.originalEvent;
            this.isImmediatePropagationStopped = bx;
            if (a && !this.isSimulated) {
                a.stopImmediatePropagation()
            }
            this.stopPropagation()
        }
    };
    v.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
    }, v.event.addProp);
    v.each({focus: "focusin", blur: "focusout"}, function (a, b) {
        v.event.special[a] = {
            setup: function () {
                bC(this, a, bz);
                return false
            }, trigger: function () {
                bC(this, a);
                return true
            }, _default: function () {
                return true
            }, delegateType: b
        }
    });
    v.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function (a, b) {
        v.event.special[a] = {
            delegateType: b, bindType: b, handle: function (a) {
                var c, d = this, e = a.relatedTarget, f = a.handleObj;
                if (!e || e !== d && !v.contains(d, e)) {
                    a.type = f.origType;
                    c = f.handler.apply(this, arguments);
                    a.type = b
                }
                return c
            }
        }
    });
    v.fn.extend({
        on: function (a, b, c, d) {
            return bB(this, a, b, c, d)
        }, one: function (a, b, c, d) {
            return bB(this, a, b, c, d, 1)
        }, off: function (a, b, c) {
            var d, e;
            if (a && a.preventDefault && a.handleObj) {
                d = a.handleObj;
                v(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler);
                return this
            }
            if (typeof a === "object") {
                for (e in a) {
                    this.off(e, b, a[e])
                }
                return this
            }
            if (b === false || typeof b === "function") {
                c = b;
                b = undefined
            }
            if (c === false) {
                c = by
            }
            return this.each(function () {
                v.event.remove(this, a, c, b)
            })
        }
    });
    var bD = /<script|<style|<link/i, bE = /checked\s*(?:[^=]|=\s*.checked.)/i,
        bF = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    v.extend({
        htmlPrefilter: function (a) {
            return a
        }, clone: function (a, b, c) {
            var d, e, f, g, h = a.cloneNode(true), i = bh(a);
            if (!n.noCloneChecked && (a.nodeType === 1 || a.nodeType === 11) && !v.isXMLDoc(a)) {
                g = bs(h);
                f = bs(a);
                for (d = 0, e = f.length; d < e; d++) {
                    bK(f[d], g[d])
                }
            }
            if (b) {
                if (c) {
                    f = f || bs(a);
                    g = g || bs(h);
                    for (d = 0, e = f.length; d < e; d++) {
                        bJ(f[d], g[d])
                    }
                } else {
                    bJ(a, h)
                }
            }
            g = bs(h, "script");
            if (g.length > 0) {
                bt(g, !i && bs(a, "script"))
            }
            return h
        }, cleanData: function (a) {
            var b, c, d, e = v.event.special, f = 0;
            for (; (c = a[f]) !== undefined; f++) {
                if (X(c)) {
                    if (b = c[Z.expando]) {
                        if (b.events) {
                            for (d in b.events) {
                                if (e[d]) {
                                    v.event.remove(c, d)
                                } else {
                                    v.removeEvent(c, d, b.handle)
                                }
                            }
                        }
                        c[Z.expando] = undefined
                    }
                    if (c[$.expando]) {
                        c[$.expando] = undefined
                    }
                }
            }
        }
    });
    v.fn.extend({
        detach: function (a) {
            return bM(this, a, true)
        }, remove: function (a) {
            return bM(this, a)
        }, text: function (a) {
            return S(this, function (a) {
                return a === undefined ? v.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = a
                    }
                })
            }, null, a, arguments.length)
        }, append: function () {
            return bL(this, arguments, function (a) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var b = bG(this, a);
                    if (actuate && actuate.getNonce && (a.nodeName === "LINK" || a.nodeName === "STYLE")) {
                        a.setAttribute("nonce", actuate.getNonce())
                    }
                    b.appendChild(a)
                }
            })
        }, prepend: function () {
            return bL(this, arguments, function (a) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var b = bG(this, a);
                    b.insertBefore(a, b.firstChild)
                }
            })
        }, before: function () {
            return bL(this, arguments, function (a) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(a, this)
                }
            })
        }, after: function () {
            return bL(this, arguments, function (a) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(a, this.nextSibling)
                }
            })
        }, empty: function () {
            var a, b = 0;
            for (; (a = this[b]) != null; b++) {
                if (a.nodeType === 1) {
                    v.cleanData(bs(a, false));
                    a.textContent = ""
                }
            }
            return this
        }, clone: function (a, b) {
            a = a == null ? false : a;
            b = b == null ? a : b;
            return this.map(function () {
                return v.clone(this, a, b)
            })
        }, html: function (a) {
            return S(this, function (a) {
                var b = this[0] || {}, c = 0, d = this.length;
                if (a === undefined && b.nodeType === 1) {
                    return b.innerHTML
                }
                if (typeof a === "string" && !bD.test(a) && !br[(bp.exec(a) || ["", ""])[1].toLowerCase()]) {
                    a = v.htmlPrefilter(a);
                    try {
                        for (; c < d; c++) {
                            b = this[c] || {};
                            if (b.nodeType === 1) {
                                v.cleanData(bs(b, false));
                                b.innerHTML = a
                            }
                        }
                        b = 0
                    } catch (e) {
                    }
                }
                if (b) {
                    this.empty().append(a)
                }
            }, null, a, arguments.length)
        }, replaceWith: function () {
            var a = [];
            return bL(this, arguments, function (b) {
                var c = this.parentNode;
                if (v.inArray(this, a) < 0) {
                    v.cleanData(bs(this));
                    if (c) {
                        c.replaceChild(b, this)
                    }
                }
            }, a)
        }
    });
    v.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (a, b) {
        v.fn[a] = function (a) {
            var c, d = [], e = v(a), f = e.length - 1, h = 0;
            for (; h <= f; h++) {
                c = h === f ? this : this.clone(true);
                v(e[h])[b](c);
                g.apply(d, c.get())
            }
            return this.pushStack(d)
        }
    });
    var bN = new RegExp("^(" + bd + ")(?!px)[a-z%]+$", "i");
    var bO = function (b) {
        var c = b.ownerDocument.defaultView;
        if (!c || !c.opener) {
            c = a
        }
        return c.getComputedStyle(b)
    };
    var bP = function (a, b, c) {
        var d, e, f = {};
        for (e in b) {
            f[e] = a.style[e];
            a.style[e] = b[e]
        }
        d = c.call(a);
        for (e in b) {
            a.style[e] = f[e]
        }
        return d
    };
    var bQ = new RegExp(bf.join("|"), "i");
    (function () {
        function c(a) {
            return Math.round(parseFloat(a))
        }

        function b() {
            if (!k) {
                return
            }
            j.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
            k.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
            bg.appendChild(j).appendChild(k);
            var b = a.getComputedStyle(k);
            d = b.top !== "1%";
            i = c(b.marginLeft) === 12;
            k.style.right = "60%";
            g = c(b.right) === 36;
            e = c(b.width) === 36;
            k.style.position = "absolute";
            f = c(k.offsetWidth / 3) === 12;
            bg.removeChild(j);
            k = null
        }

        var d, e, f, g, h, i, j = q.createElement("div"), k = q.createElement("div");
        if (!k.style) {
            return
        }
        k.style.backgroundClip = "content-box";
        k.cloneNode(true).style.backgroundClip = "";
        n.clearCloneStyle = k.style.backgroundClip === "content-box";
        v.extend(n, {
            boxSizingReliable: function () {
                b();
                return e
            }, pixelBoxStyles: function () {
                b();
                return g
            }, pixelPosition: function () {
                b();
                return d
            }, reliableMarginLeft: function () {
                b();
                return i
            }, scrollboxSize: function () {
                b();
                return f
            }, reliableTrDimensions: function () {
                var b, c, d, e;
                if (h == null) {
                    b = q.createElement("table");
                    c = q.createElement("tr");
                    d = q.createElement("div");
                    b.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
                    c.style.cssText = "border:1px solid";
                    c.style.height = "1px";
                    d.style.height = "9px";
                    d.style.display = "block";
                    bg.appendChild(b).appendChild(c).appendChild(d);
                    e = a.getComputedStyle(c);
                    h = parseInt(e.height, 10) + parseInt(e.borderTopWidth, 10) + parseInt(e.borderBottomWidth, 10) === c.offsetHeight;
                    bg.removeChild(b)
                }
                return h
            }
        })
    })();
    var bT = ["Webkit", "Moz", "ms"], bU = q.createElement("div").style, bV = {};
    var bY = /^(none|table(?!-c[ea]).+)/, bZ = /^--/,
        b$ = {position: "absolute", visibility: "hidden", display: "block"},
        b_ = {letterSpacing: "0", fontWeight: "400"};
    v.extend({
        cssHooks: {
            opacity: {
                get: function (a, b) {
                    if (b) {
                        var c = bR(a, "opacity");
                        return c === "" ? "1" : c
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: true,
            columnCount: true,
            fillOpacity: true,
            flexGrow: true,
            flexShrink: true,
            fontWeight: true,
            gridArea: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnStart: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowStart: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {},
        style: function (a, b, c, d) {
            if (!a || a.nodeType === 3 || a.nodeType === 8 || !a.style) {
                return
            }
            var e, f, g, h = W(b), i = bZ.test(b), j = a.style;
            if (!i) {
                b = bX(h)
            }
            g = v.cssHooks[b] || v.cssHooks[h];
            if (c !== undefined) {
                f = typeof c;
                if (f === "string" && (e = be.exec(c)) && e[1]) {
                    c = bk(a, b, e);
                    f = "number"
                }
                if (c == null || c !== c) {
                    return
                }
                if (f === "number" && !i) {
                    c += e && e[3] || (v.cssNumber[h] ? "" : "px")
                }
                if (!n.clearCloneStyle && c === "" && b.indexOf("background") === 0) {
                    j[b] = "inherit"
                }
                if (!g || !("set" in g) || (c = g.set(a, c, d)) !== undefined) {
                    if (i) {
                        j.setProperty(b, c)
                    } else {
                        j[b] = c
                    }
                }
            } else {
                if (g && "get" in g && (e = g.get(a, false, d)) !== undefined) {
                    return e
                }
                return j[b]
            }
        },
        css: function (a, b, c, d) {
            var e, f, g, h = W(b), i = bZ.test(b);
            if (!i) {
                b = bX(h)
            }
            g = v.cssHooks[b] || v.cssHooks[h];
            if (g && "get" in g) {
                e = g.get(a, true, c)
            }
            if (e === undefined) {
                e = bR(a, b, d)
            }
            if (e === "normal" && b in b_) {
                e = b_[b]
            }
            if (c === "" || c) {
                f = parseFloat(e);
                return c === true || isFinite(f) ? f || 0 : e
            }
            return e
        }
    });
    v.each(["height", "width"], function (a, b) {
        v.cssHooks[b] = {
            get: function (a, c, d) {
                if (c) {
                    return bY.test(v.css(a, "display")) && (!a.getClientRects().length || !a.getBoundingClientRect().width) ? bP(a, b$, function () {
                        return cc(a, b, d)
                    }) : cc(a, b, d)
                }
            }, set: function (a, c, d) {
                var e, f = bO(a), g = !n.scrollboxSize() && f.position === "absolute", h = g || d,
                    i = h && v.css(a, "boxSizing", false, f) === "border-box", j = d ? cb(a, b, d, i, f) : 0;
                if (i && g) {
                    j -= Math.ceil(a["offset" + b[0].toUpperCase() + b.slice(1)] - parseFloat(f[b]) - cb(a, b, "border", false, f) - .5)
                }
                if (j && (e = be.exec(c)) && (e[3] || "px") !== "px") {
                    a.style[b] = c;
                    c = v.css(a, b)
                }
                return ca(a, c, j)
            }
        }
    });
    v.cssHooks.marginLeft = bS(n.reliableMarginLeft, function (a, b) {
        if (b) {
            return (parseFloat(bR(a, "marginLeft")) || a.getBoundingClientRect().left - bP(a, {marginLeft: 0}, function () {
                return a.getBoundingClientRect().left
            })) + "px"
        }
    });
    v.each({margin: "", padding: "", border: "Width"}, function (a, b) {
        v.cssHooks[a + b] = {
            expand: function (c) {
                var d = 0, e = {}, f = typeof c === "string" ? c.split(" ") : [c];
                for (; d < 4; d++) {
                    e[a + bf[d] + b] = f[d] || f[d - 2] || f[0]
                }
                return e
            }
        };
        if (a !== "margin") {
            v.cssHooks[a + b].set = ca
        }
    });
    v.fn.extend({
        css: function (a, b) {
            return S(this, function (a, b, c) {
                var d, e, f = {}, g = 0;
                if (Array.isArray(b)) {
                    d = bO(a);
                    e = b.length;
                    for (; g < e; g++) {
                        f[b[g]] = v.css(a, b[g], false, d)
                    }
                    return f
                }
                return c !== undefined ? v.style(a, b, c) : v.css(a, b)
            }, a, b, arguments.length > 1)
        }
    });
    v.Tween = cd;
    cd.prototype = {
        constructor: cd, init: function (a, b, c, d, e, f) {
            this.elem = a;
            this.prop = c;
            this.easing = e || v.easing._default;
            this.options = b;
            this.start = this.now = this.cur();
            this.end = d;
            this.unit = f || (v.cssNumber[c] ? "" : "px")
        }, cur: function () {
            var a = cd.propHooks[this.prop];
            return a && a.get ? a.get(this) : cd.propHooks._default.get(this)
        }, run: function (a) {
            var b, c = cd.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = b = v.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration)
            } else {
                this.pos = b = a
            }
            this.now = (this.end - this.start) * b + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this)
            }
            if (c && c.set) {
                c.set(this)
            } else {
                cd.propHooks._default.set(this)
            }
            return this
        }
    };
    cd.prototype.init.prototype = cd.prototype;
    cd.propHooks = {
        _default: {
            get: function (a) {
                var b;
                if (a.elem.nodeType !== 1 || a.elem[a.prop] != null && a.elem.style[a.prop] == null) {
                    return a.elem[a.prop]
                }
                b = v.css(a.elem, a.prop, "");
                return !b || b === "auto" ? 0 : b
            }, set: function (a) {
                if (v.fx.step[a.prop]) {
                    v.fx.step[a.prop](a)
                } else if (a.elem.nodeType === 1 && (v.cssHooks[a.prop] || a.elem.style[bX(a.prop)] != null)) {
                    v.style(a.elem, a.prop, a.now + a.unit)
                } else {
                    a.elem[a.prop] = a.now
                }
            }
        }
    };
    cd.propHooks.scrollTop = cd.propHooks.scrollLeft = {
        set: function (a) {
            if (a.elem.nodeType && a.elem.parentNode) {
                a.elem[a.prop] = a.now
            }
        }
    };
    v.easing = {
        linear: function (a) {
            return a
        }, swing: function (a) {
            return .5 - Math.cos(a * Math.PI) / 2
        }, _default: "swing"
    };
    v.fx = cd.prototype.init;
    v.fx.step = {};
    var ce, cf, cg = /^(?:toggle|show|hide)$/, ch = /queueHooks$/;
    v.Animation = v.extend(cp, {
        tweeners: {
            "*": [function (a, b) {
                var c = this.createTween(a, b);
                bk(c.elem, a, be.exec(b), c);
                return c
            }]
        }, tweener: function (a, b) {
            if (o(a)) {
                b = a;
                a = ["*"]
            } else {
                a = a.match(K)
            }
            var c, d = 0, e = a.length;
            for (; d < e; d++) {
                c = a[d];
                cp.tweeners[c] = cp.tweeners[c] || [];
                cp.tweeners[c].unshift(b)
            }
        }, prefilters: [cm], prefilter: function (a, b) {
            if (b) {
                cp.prefilters.unshift(a)
            } else {
                cp.prefilters.push(a)
            }
        }
    });
    v.speed = function (a, b, c) {
        var d = a && typeof a === "object" ? v.extend({}, a) : {
            complete: c || !c && b || o(a) && a,
            duration: a,
            easing: c && b || b && !o(b) && b
        };
        if (v.fx.off) {
            d.duration = 0
        } else {
            if (typeof d.duration !== "number") {
                if (d.duration in v.fx.speeds) {
                    d.duration = v.fx.speeds[d.duration]
                } else {
                    d.duration = v.fx.speeds._default
                }
            }
        }
        if (d.queue == null || d.queue === true) {
            d.queue = "fx"
        }
        d.old = d.complete;
        d.complete = function () {
            if (o(d.old)) {
                d.old.call(this)
            }
            if (d.queue) {
                v.dequeue(this, d.queue)
            }
        };
        return d
    };
    v.fn.extend({
        fadeTo: function (a, b, c, d) {
            return this.filter(bj).css("opacity", 0).show().end().animate({opacity: b}, a, c, d)
        }, animate: function (a, b, c, d) {
            var e = v.isEmptyObject(a), f = v.speed(b, c, d), g = function () {
                var b = cp(this, v.extend({}, a), f);
                if (e || Z.get(this, "finish")) {
                    b.stop(true)
                }
            };
            g.finish = g;
            return e || f.queue === false ? this.each(g) : this.queue(f.queue, g)
        }, stop: function (a, b, c) {
            var d = function (a) {
                var b = a.stop;
                delete a.stop;
                b(c)
            };
            if (typeof a !== "string") {
                c = b;
                b = a;
                a = undefined
            }
            if (b) {
                this.queue(a || "fx", [])
            }
            return this.each(function () {
                var b = true, e = a != null && a + "queueHooks", f = v.timers, g = Z.get(this);
                if (e) {
                    if (g[e] && g[e].stop) {
                        d(g[e])
                    }
                } else {
                    for (e in g) {
                        if (g[e] && g[e].stop && ch.test(e)) {
                            d(g[e])
                        }
                    }
                }
                for (e = f.length; e--;) {
                    if (f[e].elem === this && (a == null || f[e].queue === a)) {
                        f[e].anim.stop(c);
                        b = false;
                        f.splice(e, 1)
                    }
                }
                if (b || !c) {
                    v.dequeue(this, a)
                }
            })
        }, finish: function (a) {
            if (a !== false) {
                a = a || "fx"
            }
            return this.each(function () {
                var b, c = Z.get(this), d = c[a + "queue"], e = c[a + "queueHooks"], f = v.timers, g = d ? d.length : 0;
                c.finish = true;
                v.queue(this, a, []);
                if (e && e.stop) {
                    e.stop.call(this, true)
                }
                for (b = f.length; b--;) {
                    if (f[b].elem === this && f[b].queue === a) {
                        f[b].anim.stop(true);
                        f.splice(b, 1)
                    }
                }
                for (b = 0; b < g; b++) {
                    if (d[b] && d[b].finish) {
                        d[b].finish.call(this)
                    }
                }
                delete c.finish
            })
        }
    });
    v.each(["toggle", "show", "hide"], function (a, b) {
        var c = v.fn[b];
        v.fn[b] = function (a, d, e) {
            return a == null || typeof a === "boolean" ? c.apply(this, arguments) : this.animate(ck(b, true), a, d, e)
        }
    });
    v.each({
        slideDown: ck("show"),
        slideUp: ck("hide"),
        slideToggle: ck("toggle"),
        fadeIn: {opacity: "show"},
        fadeOut: {opacity: "hide"},
        fadeToggle: {opacity: "toggle"}
    }, function (a, b) {
        v.fn[a] = function (a, c, d) {
            return this.animate(b, a, c, d)
        }
    });
    v.timers = [];
    v.fx.tick = function () {
        var a, b = 0, c = v.timers;
        ce = Date.now();
        for (; b < c.length; b++) {
            a = c[b];
            if (!a() && c[b] === a) {
                c.splice(b--, 1)
            }
        }
        if (!c.length) {
            v.fx.stop()
        }
        ce = undefined
    };
    v.fx.timer = function (a) {
        v.timers.push(a);
        v.fx.start()
    };
    v.fx.interval = 13;
    v.fx.start = function () {
        if (cf) {
            return
        }
        cf = true;
        ci()
    };
    v.fx.stop = function () {
        cf = null
    };
    v.fx.speeds = {slow: 600, fast: 200, _default: 400};
    v.fn.delay = function (b, c) {
        b = v.fx ? v.fx.speeds[b] || b : b;
        c = c || "fx";
        return this.queue(c, function (c, d) {
            var e = a.setTimeout(c, b);
            d.stop = function () {
                a.clearTimeout(e)
            }
        })
    };
    (function () {
        var a = q.createElement("input"), b = q.createElement("select"), c = b.appendChild(q.createElement("option"));
        a.type = "checkbox";
        n.checkOn = a.value !== "";
        n.optSelected = c.selected;
        a = q.createElement("input");
        a.value = "t";
        a.type = "radio";
        n.radioValue = a.value === "t"
    })();
    var cq, cr = v.expr.attrHandle;
    v.fn.extend({
        attr: function (a, b) {
            return S(this, v.attr, a, b, arguments.length > 1)
        }, removeAttr: function (a) {
            return this.each(function () {
                v.removeAttr(this, a)
            })
        }
    });
    v.extend({
        attr: function (a, b, c) {
            var d, e, f = a.nodeType;
            if (f === 3 || f === 8 || f === 2) {
                return
            }
            if (typeof a.getAttribute === "undefined") {
                return v.prop(a, b, c)
            }
            if (f !== 1 || !v.isXMLDoc(a)) {
                e = v.attrHooks[b.toLowerCase()] || (v.expr.match.bool.test(b) ? cq : undefined)
            }
            if (c !== undefined) {
                if (c === null) {
                    v.removeAttr(a, b);
                    return
                }
                if (e && "set" in e && (d = e.set(a, c, b)) !== undefined) {
                    return d
                }
                a.setAttribute(b, c + "");
                return c
            }
            if (e && "get" in e && (d = e.get(a, b)) !== null) {
                return d
            }
            d = v.find.attr(a, b);
            return d == null ? undefined : d
        }, attrHooks: {
            type: {
                set: function (a, b) {
                    if (!n.radioValue && b === "radio" && B(a, "input")) {
                        var c = a.value;
                        a.setAttribute("type", b);
                        if (c) {
                            a.value = c
                        }
                        return b
                    }
                }
            }
        }, removeAttr: function (a, b) {
            var c, d = 0, e = b && b.match(K);
            if (e && a.nodeType === 1) {
                while (c = e[d++]) {
                    a.removeAttribute(c)
                }
            }
        }
    });
    cq = {
        set: function (a, b, c) {
            if (b === false) {
                v.removeAttr(a, c)
            } else {
                a.setAttribute(c, c)
            }
            return c
        }
    };
    v.each(v.expr.match.bool.source.match(/\w+/g), function (a, b) {
        var c = cr[b] || v.find.attr;
        cr[b] = function (a, b, d) {
            var e, f, g = b.toLowerCase();
            if (!d) {
                f = cr[g];
                cr[g] = e;
                e = c(a, b, d) != null ? g : null;
                cr[g] = f
            }
            return e
        }
    });
    var cs = /^(?:input|select|textarea|button)$/i, ct = /^(?:a|area)$/i;
    v.fn.extend({
        prop: function (a, b) {
            return S(this, v.prop, a, b, arguments.length > 1)
        }, removeProp: function (a) {
            return this.each(function () {
                delete this[v.propFix[a] || a]
            })
        }
    });
    v.extend({
        prop: function (a, b, c) {
            var d, e, f = a.nodeType;
            if (f === 3 || f === 8 || f === 2) {
                return
            }
            if (f !== 1 || !v.isXMLDoc(a)) {
                b = v.propFix[b] || b;
                e = v.propHooks[b]
            }
            if (c !== undefined) {
                if (e && "set" in e && (d = e.set(a, c, b)) !== undefined) {
                    return d
                }
                return a[b] = c
            }
            if (e && "get" in e && (d = e.get(a, b)) !== null) {
                return d
            }
            return a[b]
        }, propHooks: {
            tabIndex: {
                get: function (a) {
                    var b = v.find.attr(a, "tabindex");
                    if (b) {
                        return parseInt(b, 10)
                    }
                    if (cs.test(a.nodeName) || ct.test(a.nodeName) && a.href) {
                        return 0
                    }
                    return -1
                }
            }
        }, propFix: {"for": "htmlFor", "class": "className"}
    });
    if (!n.optSelected) {
        v.propHooks.selected = {
            get: function (a) {
                var b = a.parentNode;
                if (b && b.parentNode) {
                    b.parentNode.selectedIndex
                }
                return null
            }, set: function (a) {
                var b = a.parentNode;
                if (b) {
                    b.selectedIndex;
                    if (b.parentNode) {
                        b.parentNode.selectedIndex
                    }
                }
            }
        }
    }
    v.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        v.propFix[this.toLowerCase()] = this
    });
    v.fn.extend({
        addClass: function (a) {
            var b, c, d, e, f, g, h, i = 0;
            if (o(a)) {
                return this.each(function (b) {
                    v(this).addClass(a.call(this, b, cv(this)))
                })
            }
            b = cw(a);
            if (b.length) {
                while (c = this[i++]) {
                    e = cv(c);
                    d = c.nodeType === 1 && " " + cu(e) + " ";
                    if (d) {
                        g = 0;
                        while (f = b[g++]) {
                            if (d.indexOf(" " + f + " ") < 0) {
                                d += f + " "
                            }
                        }
                        h = cu(d);
                        if (e !== h) {
                            c.setAttribute("class", h)
                        }
                    }
                }
            }
            return this
        }, removeClass: function (a) {
            var b, c, d, e, f, g, h, i = 0;
            if (o(a)) {
                return this.each(function (b) {
                    v(this).removeClass(a.call(this, b, cv(this)))
                })
            }
            if (!arguments.length) {
                return this.attr("class", "")
            }
            b = cw(a);
            if (b.length) {
                while (c = this[i++]) {
                    e = cv(c);
                    d = c.nodeType === 1 && " " + cu(e) + " ";
                    if (d) {
                        g = 0;
                        while (f = b[g++]) {
                            while (d.indexOf(" " + f + " ") > -1) {
                                d = d.replace(" " + f + " ", " ")
                            }
                        }
                        h = cu(d);
                        if (e !== h) {
                            c.setAttribute("class", h)
                        }
                    }
                }
            }
            return this
        }, toggleClass: function (a, b) {
            var c = typeof a, d = c === "string" || Array.isArray(a);
            if (typeof b === "boolean" && d) {
                return b ? this.addClass(a) : this.removeClass(a)
            }
            if (o(a)) {
                return this.each(function (c) {
                    v(this).toggleClass(a.call(this, c, cv(this), b), b)
                })
            }
            return this.each(function () {
                var b, e, f, g;
                if (d) {
                    e = 0;
                    f = v(this);
                    g = cw(a);
                    while (b = g[e++]) {
                        if (f.hasClass(b)) {
                            f.removeClass(b)
                        } else {
                            f.addClass(b)
                        }
                    }
                } else if (a === undefined || c === "boolean") {
                    b = cv(this);
                    if (b) {
                        Z.set(this, "__className__", b)
                    }
                    if (this.setAttribute) {
                        this.setAttribute("class", b || a === false ? "" : Z.get(this, "__className__") || "")
                    }
                }
            })
        }, hasClass: function (a) {
            var b, c, d = 0;
            b = " " + a + " ";
            while (c = this[d++]) {
                if (c.nodeType === 1 && (" " + cu(cv(c)) + " ").indexOf(b) > -1) {
                    return true
                }
            }
            return false
        }
    });
    var cx = /\r/g;
    v.fn.extend({
        val: function (a) {
            var b, c, d, e = this[0];
            if (!arguments.length) {
                if (e) {
                    b = v.valHooks[e.type] || v.valHooks[e.nodeName.toLowerCase()];
                    if (b && "get" in b && (c = b.get(e, "value")) !== undefined) {
                        return c
                    }
                    c = e.value;
                    if (typeof c === "string") {
                        return c.replace(cx, "")
                    }
                    return c == null ? "" : c
                }
                return
            }
            d = o(a);
            return this.each(function (c) {
                var e;
                if (this.nodeType !== 1) {
                    return
                }
                if (d) {
                    e = a.call(this, c, v(this).val())
                } else {
                    e = a
                }
                if (e == null) {
                    e = ""
                } else if (typeof e === "number") {
                    e += ""
                } else if (Array.isArray(e)) {
                    e = v.map(e, function (a) {
                        return a == null ? "" : a + ""
                    })
                }
                b = v.valHooks[this.type] || v.valHooks[this.nodeName.toLowerCase()];
                if (!b || !("set" in b) || b.set(this, e, "value") === undefined) {
                    this.value = e
                }
            })
        }
    });
    v.extend({
        valHooks: {
            option: {
                get: function (a) {
                    var b = v.find.attr(a, "value");
                    return b != null ? b : cu(v.text(a))
                }
            }, select: {
                get: function (a) {
                    var b, c, d, e = a.options, f = a.selectedIndex, g = a.type === "select-one", h = g ? null : [],
                        i = g ? f + 1 : e.length;
                    if (f < 0) {
                        d = i
                    } else {
                        d = g ? f : 0
                    }
                    for (; d < i; d++) {
                        c = e[d];
                        if ((c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !B(c.parentNode, "optgroup"))) {
                            b = v(c).val();
                            if (g) {
                                return b
                            }
                            h.push(b)
                        }
                    }
                    return h
                }, set: function (a, b) {
                    var c, d, e = a.options, f = v.makeArray(b), g = e.length;
                    while (g--) {
                        d = e[g];
                        if (d.selected = v.inArray(v.valHooks.option.get(d), f) > -1) {
                            c = true
                        }
                    }
                    if (!c) {
                        a.selectedIndex = -1
                    }
                    return f
                }
            }
        }
    });
    v.each(["radio", "checkbox"], function () {
        v.valHooks[this] = {
            set: function (a, b) {
                if (Array.isArray(b)) {
                    return a.checked = v.inArray(v(a).val(), b) > -1
                }
            }
        };
        if (!n.checkOn) {
            v.valHooks[this].get = function (a) {
                return a.getAttribute("value") === null ? "on" : a.value
            }
        }
    });
    n.focusin = "onfocusin" in a;
    var cy = /^(?:focusinfocus|focusoutblur)$/, cz = function (a) {
        a.stopPropagation()
    };
    v.extend(v.event, {
        trigger: function (b, c, d, e) {
            var f, g, h, i, j, l, m, n, r = [d || q], s = k.call(b, "type") ? b.type : b,
                t = k.call(b, "namespace") ? b.namespace.split(".") : [];
            g = n = h = d = d || q;
            if (d.nodeType === 3 || d.nodeType === 8) {
                return
            }
            if (cy.test(s + v.event.triggered)) {
                return
            }
            if (s.indexOf(".") > -1) {
                t = s.split(".");
                s = t.shift();
                t.sort()
            }
            j = s.indexOf(":") < 0 && "on" + s;
            b = b[v.expando] ? b : new v.Event(s, typeof b === "object" && b);
            b.isTrigger = e ? 2 : 3;
            b.namespace = t.join(".");
            b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + t.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            b.result = undefined;
            if (!b.target) {
                b.target = d
            }
            c = c == null ? [b] : v.makeArray(c, [b]);
            m = v.event.special[s] || {};
            if (!e && m.trigger && m.trigger.apply(d, c) === false) {
                return
            }
            if (!e && !m.noBubble && !p(d)) {
                i = m.delegateType || s;
                if (!cy.test(i + s)) {
                    g = g.parentNode
                }
                for (; g; g = g.parentNode) {
                    r.push(g);
                    h = g
                }
                if (h === (d.ownerDocument || q)) {
                    r.push(h.defaultView || h.parentWindow || a)
                }
            }
            f = 0;
            while ((g = r[f++]) && !b.isPropagationStopped()) {
                n = g;
                b.type = f > 1 ? i : m.bindType || s;
                l = (Z.get(g, "events") || Object.create(null))[b.type] && Z.get(g, "handle");
                if (l) {
                    l.apply(g, c)
                }
                l = j && g[j];
                if (l && l.apply && X(g)) {
                    b.result = l.apply(g, c);
                    if (b.result === false) {
                        b.preventDefault()
                    }
                }
            }
            b.type = s;
            if (!e && !b.isDefaultPrevented()) {
                if ((!m._default || m._default.apply(r.pop(), c) === false) && X(d)) {
                    if (j && o(d[s]) && !p(d)) {
                        h = d[j];
                        if (h) {
                            d[j] = null
                        }
                        v.event.triggered = s;
                        if (b.isPropagationStopped()) {
                            n.addEventListener(s, cz)
                        }
                        d[s]();
                        if (b.isPropagationStopped()) {
                            n.removeEventListener(s, cz)
                        }
                        v.event.triggered = undefined;
                        if (h) {
                            d[j] = h
                        }
                    }
                }
            }
            return b.result
        }, simulate: function (a, b, c) {
            var d = v.extend(new v.Event, c, {type: a, isSimulated: true});
            v.event.trigger(d, null, b)
        }
    });
    v.fn.extend({
        trigger: function (a, b) {
            return this.each(function () {
                v.event.trigger(a, b, this)
            })
        }, triggerHandler: function (a, b) {
            var c = this[0];
            if (c) {
                return v.event.trigger(a, b, c, true)
            }
        }
    });
    if (!n.focusin) {
        v.each({focus: "focusin", blur: "focusout"}, function (a, b) {
            var c = function (a) {
                v.event.simulate(b, a.target, v.event.fix(a))
            };
            v.event.special[b] = {
                setup: function () {
                    var d = this.ownerDocument || this.document || this, e = Z.access(d, b);
                    if (!e) {
                        d.addEventListener(a, c, true)
                    }
                    Z.access(d, b, (e || 0) + 1)
                }, teardown: function () {
                    var d = this.ownerDocument || this.document || this, e = Z.access(d, b) - 1;
                    if (!e) {
                        d.removeEventListener(a, c, true);
                        Z.remove(d, b)
                    } else {
                        Z.access(d, b, e)
                    }
                }
            }
        })
    }
    var cA = a.location;
    var cB = {guid: Date.now()};
    var cC = /\?/;
    v.parseXML = function (b) {
        var c, d;
        if (!b || typeof b !== "string") {
            return null
        }
        try {
            c = (new a.DOMParser).parseFromString(b, "text/xml")
        } catch (e) {
        }
        d = c && c.getElementsByTagName("parsererror")[0];
        if (!c || d) {
            v.error("Invalid XML: " + (d ? v.map(d.childNodes, function (a) {
                return a.textContent
            }).join("\n") : b))
        }
        return c
    };
    var cD = /\[\]$/, cE = /\r?\n/g, cF = /^(?:submit|button|image|reset|file)$/i,
        cG = /^(?:input|select|textarea|keygen)/i;
    v.param = function (a, b) {
        var c, d = [], e = function (a, b) {
            var c = o(b) ? b() : b;
            d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(c == null ? "" : c)
        };
        if (a == null) {
            return ""
        }
        if (Array.isArray(a) || a.jquery && !v.isPlainObject(a)) {
            v.each(a, function () {
                e(this.name, this.value)
            })
        } else {
            for (c in a) {
                cH(c, a[c], b, e)
            }
        }
        return d.join("&")
    };
    v.fn.extend({
        serialize: function () {
            return v.param(this.serializeArray())
        }, serializeArray: function () {
            return this.map(function () {
                var a = v.prop(this, "elements");
                return a ? v.makeArray(a) : this
            }).filter(function () {
                var a = this.type;
                return this.name && !v(this).is(":disabled") && cG.test(this.nodeName) && !cF.test(a) && (this.checked || !bo.test(a))
            }).map(function (a, b) {
                var c = v(this).val();
                if (c == null) {
                    return null
                }
                if (Array.isArray(c)) {
                    return v.map(c, function (a) {
                        return {name: b.name, value: a.replace(cE, "\r\n")}
                    })
                }
                return {name: b.name, value: c.replace(cE, "\r\n")}
            }).get()
        }
    });
    var cI = /%20/g, cJ = /#.*$/, cK = /([?&])_=[^&]*/, cL = /^(.*?):[ \t]*([^\r\n]*)$/mg,
        cM = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, cN = /^(?:GET|HEAD)$/, cO = /^\/\//, cP = {},
        cQ = {}, cR = "*/".concat("*"), cS = q.createElement("a");
    cS.href = cA.href;
    v.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: cA.href,
            type: "GET",
            isLocal: cM.test(cA.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": cR,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/},
            responseFields: {xml: "responseXML", text: "responseText", json: "responseJSON"},
            converters: {"* text": String, "text html": true, "text json": JSON.parse, "text xml": v.parseXML},
            flatOptions: {url: true, context: true}
        },
        ajaxSetup: function (a, b) {
            return b ? cV(cV(a, v.ajaxSettings), b) : cV(v.ajaxSettings, a)
        },
        ajaxPrefilter: cT(cP),
        ajaxTransport: cT(cQ),
        ajax: function (b, c) {
            function A(b, c, g, i) {
                var l, m, q, u, w, x = c;
                if (j) {
                    return
                }
                j = true;
                if (h) {
                    a.clearTimeout(h)
                }
                d = undefined;
                f = i || "";
                y.readyState = b > 0 ? 4 : 0;
                l = b >= 200 && b < 300 || b === 304;
                if (g) {
                    u = cW(n, y, g)
                }
                if (!l && v.inArray("script", n.dataTypes) > -1 && v.inArray("json", n.dataTypes) < 0) {
                    n.converters["text script"] = function () {
                    }
                }
                u = cX(n, u, y, l);
                if (l) {
                    if (n.ifModified) {
                        w = y.getResponseHeader("Last-Modified");
                        if (w) {
                            v.lastModified[e] = w
                        }
                        w = y.getResponseHeader("etag");
                        if (w) {
                            v.etag[e] = w
                        }
                    }
                    if (b === 204 || n.type === "HEAD") {
                        x = "nocontent"
                    } else if (b === 304) {
                        x = "notmodified"
                    } else {
                        x = u.state;
                        m = u.data;
                        q = u.error;
                        l = !q
                    }
                } else {
                    q = x;
                    if (b || !x) {
                        x = "error";
                        if (b < 0) {
                            b = 0
                        }
                    }
                }
                y.status = b;
                y.statusText = (c || x) + "";
                if (l) {
                    r.resolveWith(o, [m, x, y])
                } else {
                    r.rejectWith(o, [y, x, q])
                }
                y.statusCode(t);
                t = undefined;
                if (k) {
                    p.trigger(l ? "ajaxSuccess" : "ajaxError", [y, n, l ? m : q])
                }
                s.fireWith(o, [y, x]);
                if (k) {
                    p.trigger("ajaxComplete", [y, n]);
                    if (!--v.active) {
                        v.event.trigger("ajaxStop")
                    }
                }
            }

            if (typeof b === "object") {
                c = b;
                b = undefined
            }
            c = c || {};
            var d, e, f, g, h, i, j, k, l, m, n = v.ajaxSetup({}, c), o = n.context || n,
                p = n.context && (o.nodeType || o.jquery) ? v(o) : v.event, r = v.Deferred(),
                s = v.Callbacks("once memory"), t = n.statusCode || {}, u = {}, w = {}, x = "canceled", y = {
                    readyState: 0, getResponseHeader: function (a) {
                        var b;
                        if (j) {
                            if (!g) {
                                g = {};
                                while (b = cL.exec(f)) {
                                    g[b[1].toLowerCase() + " "] = (g[b[1].toLowerCase() + " "] || []).concat(b[2])
                                }
                            }
                            b = g[a.toLowerCase() + " "]
                        }
                        return b == null ? null : b.join(", ")
                    }, getAllResponseHeaders: function () {
                        return j ? f : null
                    }, setRequestHeader: function (a, b) {
                        if (j == null) {
                            a = w[a.toLowerCase()] = w[a.toLowerCase()] || a;
                            u[a] = b
                        }
                        return this
                    }, overrideMimeType: function (a) {
                        if (j == null) {
                            n.mimeType = a
                        }
                        return this
                    }, statusCode: function (a) {
                        var b;
                        if (a) {
                            if (j) {
                                y.always(a[y.status])
                            } else {
                                for (b in a) {
                                    t[b] = [t[b], a[b]]
                                }
                            }
                        }
                        return this
                    }, abort: function (a) {
                        var b = a || x;
                        if (d) {
                            d.abort(b)
                        }
                        A(0, b);
                        return this
                    }
                };
            r.promise(y);
            n.url = ((b || n.url || cA.href) + "").replace(cO, cA.protocol + "//");
            n.type = c.method || c.type || n.method || n.type;
            n.dataTypes = (n.dataType || "*").toLowerCase().match(K) || [""];
            if (n.crossDomain == null) {
                i = q.createElement("a");
                try {
                    i.href = n.url;
                    i.href = i.href;
                    n.crossDomain = cS.protocol + "//" + cS.host !== i.protocol + "//" + i.host
                } catch (z) {
                    n.crossDomain = true
                }
            }
            if (n.data && n.processData && typeof n.data !== "string") {
                n.data = v.param(n.data, n.traditional)
            }
            cU(cP, n, c, y);
            if (j) {
                return y
            }
            k = v.event && n.global;
            if (k && v.active++ === 0) {
                v.event.trigger("ajaxStart")
            }
            n.type = n.type.toUpperCase();
            n.hasContent = !cN.test(n.type);
            e = n.url.replace(cJ, "");
            if (!n.hasContent) {
                m = n.url.slice(e.length);
                if (n.data && (n.processData || typeof n.data === "string")) {
                    e += (cC.test(e) ? "&" : "?") + n.data;
                    delete n.data
                }
                if (n.cache === false) {
                    e = e.replace(cK, "$1");
                    m = (cC.test(e) ? "&" : "?") + "_=" + cB.guid++ + m
                }
                n.url = e + m
            } else if (n.data && n.processData && (n.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
                n.data = n.data.replace(cI, "+")
            }
            if (n.ifModified) {
                if (v.lastModified[e]) {
                    y.setRequestHeader("If-Modified-Since", v.lastModified[e])
                }
                if (v.etag[e]) {
                    y.setRequestHeader("If-None-Match", v.etag[e])
                }
            }
            if (n.data && n.hasContent && n.contentType !== false || c.contentType) {
                y.setRequestHeader("Content-Type", n.contentType)
            }
            y.setRequestHeader("Accept", n.dataTypes[0] && n.accepts[n.dataTypes[0]] ? n.accepts[n.dataTypes[0]] + (n.dataTypes[0] !== "*" ? ", " + cR + "; q=0.01" : "") : n.accepts["*"]);
            for (l in n.headers) {
                y.setRequestHeader(l, n.headers[l])
            }
            if (n.beforeSend && (n.beforeSend.call(o, y, n) === false || j)) {
                return y.abort()
            }
            x = "abort";
            s.add(n.complete);
            y.done(n.success);
            y.fail(n.error);
            d = cU(cQ, n, c, y);
            if (!d) {
                A(-1, "No Transport")
            } else {
                y.readyState = 1;
                if (k) {
                    p.trigger("ajaxSend", [y, n])
                }
                if (j) {
                    return y
                }
                if (n.async && n.timeout > 0) {
                    h = a.setTimeout(function () {
                        y.abort("timeout")
                    }, n.timeout)
                }
                try {
                    j = false;
                    d.send(u, A)
                } catch (z) {
                    if (j) {
                        throw z
                    }
                    A(-1, z)
                }
            }
            return y
        },
        getJSON: function (a, b, c) {
            return v.get(a, b, c, "json")
        },
        getScript: function (a, b) {
            return v.get(a, undefined, b, "script")
        }
    });
    v.each(["get", "post"], function (a, b) {
        v[b] = function (a, c, d, e) {
            if (o(c)) {
                e = e || d;
                d = c;
                c = undefined
            }
            return v.ajax(v.extend({url: a, type: b, dataType: e, data: c, success: d}, v.isPlainObject(a) && a))
        }
    });
    v.ajaxPrefilter(function (a) {
        var b;
        for (b in a.headers) {
            if (b.toLowerCase() === "content-type") {
                a.contentType = a.headers[b] || ""
            }
        }
    });
    v._evalUrl = function (a, b, c) {
        return v.ajax({
            url: a,
            type: "GET",
            dataType: "script",
            cache: true,
            async: false,
            global: false,
            converters: {
                "text script": function () {
                }
            },
            dataFilter: function (a) {
                v.globalEval(a, b, c)
            }
        })
    };
    v.fn.extend({
        wrapAll: function (a) {
            var b;
            if (this[0]) {
                if (o(a)) {
                    a = a.call(this[0])
                }
                b = v(a, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    b.insertBefore(this[0])
                }
                b.map(function () {
                    var a = this;
                    while (a.firstElementChild) {
                        a = a.firstElementChild
                    }
                    return a
                }).append(this)
            }
            return this
        }, wrapInner: function (a) {
            if (o(a)) {
                return this.each(function (b) {
                    v(this).wrapInner(a.call(this, b))
                })
            }
            return this.each(function () {
                var b = v(this), c = b.contents();
                if (c.length) {
                    c.wrapAll(a)
                } else {
                    b.append(a)
                }
            })
        }, wrap: function (a) {
            var b = o(a);
            return this.each(function (c) {
                v(this).wrapAll(b ? a.call(this, c) : a)
            })
        }, unwrap: function (a) {
            this.parent(a).not("body").each(function () {
                v(this).replaceWith(this.childNodes)
            });
            return this
        }
    });
    v.expr.pseudos.hidden = function (a) {
        return !v.expr.pseudos.visible(a)
    };
    v.expr.pseudos.visible = function (a) {
        return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length)
    };
    v.ajaxSettings.xhr = function () {
        try {
            return new a.XMLHttpRequest
        } catch (b) {
        }
    };
    var cY = {0: 200, 1223: 204}, cZ = v.ajaxSettings.xhr();
    n.cors = !!cZ && "withCredentials" in cZ;
    n.ajax = cZ = !!cZ;
    v.ajaxTransport(function (b) {
        var c, d;
        if (n.cors || cZ && !b.crossDomain) {
            return {
                send: function (e, f) {
                    var g, h = b.xhr();
                    h.open(b.type, b.url, b.async, b.username, b.password);
                    if (b.xhrFields) {
                        for (g in b.xhrFields) {
                            h[g] = b.xhrFields[g]
                        }
                    }
                    if (b.mimeType && h.overrideMimeType) {
                        h.overrideMimeType(b.mimeType)
                    }
                    if (!b.crossDomain && !e["X-Requested-With"]) {
                        e["X-Requested-With"] = "XMLHttpRequest"
                    }
                    for (g in e) {
                        h.setRequestHeader(g, e[g])
                    }
                    c = function (a) {
                        return function () {
                            if (c) {
                                c = d = h.onload = h.onerror = h.onabort = h.ontimeout = h.onreadystatechange = null;
                                if (a === "abort") {
                                    h.abort()
                                } else if (a === "error") {
                                    if (typeof h.status !== "number") {
                                        f(0, "error")
                                    } else {
                                        f(h.status, h.statusText)
                                    }
                                } else {
                                    f(cY[h.status] || h.status, h.statusText, (h.responseType || "text") !== "text" || typeof h.responseText !== "string" ? {binary: h.response} : {text: h.responseText}, h.getAllResponseHeaders())
                                }
                            }
                        }
                    };
                    h.onload = c();
                    d = h.onerror = h.ontimeout = c("error");
                    if (h.onabort !== undefined) {
                        h.onabort = d
                    } else {
                        h.onreadystatechange = function () {
                            if (h.readyState === 4) {
                                a.setTimeout(function () {
                                    if (c) {
                                        d()
                                    }
                                })
                            }
                        }
                    }
                    c = c("abort");
                    try {
                        h.send(b.hasContent && b.data || null)
                    } catch (i) {
                        if (c) {
                            throw i
                        }
                    }
                }, abort: function () {
                    if (c) {
                        c()
                    }
                }
            }
        }
    });
    v.ajaxPrefilter(function (a) {
        if (a.crossDomain) {
            a.contents.script = false
        }
    });
    v.ajaxSetup({
        accepts: {script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"},
        contents: {script: /\b(?:java|ecma)script\b/},
        converters: {
            "text script": function (a) {
                v.globalEval(a);
                return a
            }
        }
    });
    v.ajaxPrefilter("script", function (a) {
        if (a.cache === undefined) {
            a.cache = false
        }
        if (a.crossDomain) {
            a.type = "GET"
        }
    });
    v.ajaxTransport("script", function (a) {
        if (a.crossDomain || a.scriptAttrs) {
            var b, c;
            return {
                send: function (d, e) {
                    b = v("<script>").attr(a.scriptAttrs || {}).prop({
                        charset: a.scriptCharset,
                        src: a.url
                    }).on("load error", c = function (a) {
                        b.remove();
                        c = null;
                        if (a) {
                            e(a.type === "error" ? 404 : 200, a.type)
                        }
                    });
                    if (actuate && actuate.getNonce) {
                        b[0].setAttribute("nonce", actuate.getNonce())
                    }
                    q.head.appendChild(b[0])
                }, abort: function () {
                    if (c) {
                        c()
                    }
                }
            }
        }
    });
    var c$ = [], c_ = /(=)\?(?=&|$)|\?\?/;
    v.ajaxSetup({
        jsonp: "callback", jsonpCallback: function () {
            var a = c$.pop() || v.expando + "_" + cB.guid++;
            this[a] = true;
            return a
        }
    });
    v.ajaxPrefilter("json jsonp", function (b, c, d) {
        var e, f, g,
            h = b.jsonp !== false && (c_.test(b.url) ? "url" : typeof b.data === "string" && (b.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && c_.test(b.data) && "data");
        if (h || b.dataTypes[0] === "jsonp") {
            e = b.jsonpCallback = o(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback;
            if (h) {
                b[h] = b[h].replace(c_, "$1" + e)
            } else if (b.jsonp !== false) {
                b.url += (cC.test(b.url) ? "&" : "?") + b.jsonp + "=" + e
            }
            b.converters["script json"] = function () {
                if (!g) {
                    v.error(e + " was not called")
                }
                return g[0]
            };
            b.dataTypes[0] = "json";
            f = a[e];
            a[e] = function () {
                g = arguments
            };
            d.always(function () {
                if (f === undefined) {
                    v(a).removeProp(e)
                } else {
                    a[e] = f
                }
                if (b[e]) {
                    b.jsonpCallback = c.jsonpCallback;
                    c$.push(e)
                }
                if (g && o(f)) {
                    f(g[0])
                }
                g = f = undefined
            });
            return "script"
        }
    });
    n.createHTMLDocument = function () {
        var a = q.implementation.createHTMLDocument("").body;
        a.innerHTML = "<form></form><form></form>";
        return a.childNodes.length === 2
    }();
    v.parseHTML = function (a, b, c) {
        if (typeof a !== "string") {
            return []
        }
        if (typeof b === "boolean") {
            c = b;
            b = false
        }
        var d, e, f;
        if (!b) {
            if (n.createHTMLDocument) {
                b = q.implementation.createHTMLDocument("");
                d = b.createElement("base");
                d.href = q.location.href;
                b.head.appendChild(d)
            } else {
                b = q
            }
        }
        e = C.exec(a);
        f = !c && [];
        if (e) {
            return [b.createElement(e[1])]
        }
        e = bv([a], b, f);
        if (f && f.length) {
            v(f).remove()
        }
        return v.merge([], e.childNodes)
    };
    v.fn.load = function (a, b, c) {
        var d, e, f, g = this, h = a.indexOf(" ");
        if (h > -1) {
            d = cu(a.slice(h));
            a = a.slice(0, h)
        }
        if (o(b)) {
            c = b;
            b = undefined
        } else if (b && typeof b === "object") {
            e = "POST"
        }
        if (g.length > 0) {
            v.ajax({url: a, type: e || "GET", dataType: "html", data: b}).done(function (a) {
                f = arguments;
                g.html(d ? v("<div>").append(v.parseHTML(a)).find(d) : a)
            }).always(c && function (a, b) {
                g.each(function () {
                    c.apply(this, f || [a.responseText, b, a])
                })
            })
        }
        return this
    };
    v.expr.pseudos.animated = function (a) {
        return v.grep(v.timers, function (b) {
            return a === b.elem
        }).length
    };
    v.offset = {
        setOffset: function (a, b, c) {
            var d, e, f, g, h, i, j, k = v.css(a, "position"), l = v(a), m = {};
            if (k === "static") {
                a.style.position = "relative"
            }
            h = l.offset();
            f = v.css(a, "top");
            i = v.css(a, "left");
            j = (k === "absolute" || k === "fixed") && (f + i).indexOf("auto") > -1;
            if (j) {
                d = l.position();
                g = d.top;
                e = d.left
            } else {
                g = parseFloat(f) || 0;
                e = parseFloat(i) || 0
            }
            if (o(b)) {
                b = b.call(a, c, v.extend({}, h))
            }
            if (b.top != null) {
                m.top = b.top - h.top + g
            }
            if (b.left != null) {
                m.left = b.left - h.left + e
            }
            if ("using" in b) {
                b.using.call(a, m)
            } else {
                l.css(m)
            }
        }
    };
    v.fn.extend({
        offset: function (a) {
            if (arguments.length) {
                return a === undefined ? this : this.each(function (b) {
                    v.offset.setOffset(this, a, b)
                })
            }
            var b, c, d = this[0];
            if (!d) {
                return
            }
            if (!d.getClientRects().length) {
                return {top: 0, left: 0}
            }
            b = d.getBoundingClientRect();
            c = d.ownerDocument.defaultView;
            return {top: b.top + c.pageYOffset, left: b.left + c.pageXOffset}
        }, position: function () {
            if (!this[0]) {
                return
            }
            var a, b, c, d = this[0], e = {top: 0, left: 0};
            if (v.css(d, "position") === "fixed") {
                b = d.getBoundingClientRect()
            } else {
                b = this.offset();
                c = d.ownerDocument;
                a = d.offsetParent || c.documentElement;
                while (a && (a === c.body || a === c.documentElement) && v.css(a, "position") === "static") {
                    a = a.parentNode
                }
                if (a && a !== d && a.nodeType === 1) {
                    e = v(a).offset();
                    e.top += v.css(a, "borderTopWidth", true);
                    e.left += v.css(a, "borderLeftWidth", true)
                }
            }
            return {
                top: b.top - e.top - v.css(d, "marginTop", true),
                left: b.left - e.left - v.css(d, "marginLeft", true)
            }
        }, offsetParent: function () {
            return this.map(function () {
                var a = this.offsetParent;
                while (a && v.css(a, "position") === "static") {
                    a = a.offsetParent
                }
                return a || bg
            })
        }
    });
    v.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function (a, b) {
        var c = "pageYOffset" === b;
        v.fn[a] = function (d) {
            return S(this, function (a, d, e) {
                var f;
                if (p(a)) {
                    f = a
                } else if (a.nodeType === 9) {
                    f = a.defaultView
                }
                if (e === undefined) {
                    return f ? f[b] : a[d]
                }
                if (f) {
                    f.scrollTo(!c ? e : f.pageXOffset, c ? e : f.pageYOffset)
                } else {
                    a[d] = e
                }
            }, a, d, arguments.length)
        }
    });
    v.each(["top", "left"], function (a, b) {
        v.cssHooks[b] = bS(n.pixelPosition, function (a, c) {
            if (c) {
                c = bR(a, b);
                return bN.test(c) ? v(a).position()[b] + "px" : c
            }
        })
    });
    v.each({Height: "height", Width: "width"}, function (a, b) {
        v.each({padding: "inner" + a, content: b, "": "outer" + a}, function (c, d) {
            v.fn[d] = function (e, f) {
                var g = arguments.length && (c || typeof e !== "boolean"),
                    h = c || (e === true || f === true ? "margin" : "border");
                return S(this, function (b, c, e) {
                    var f;
                    if (p(b)) {
                        return d.indexOf("outer") === 0 ? b["inner" + a] : b.document.documentElement["client" + a]
                    }
                    if (b.nodeType === 9) {
                        f = b.documentElement;
                        return Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])
                    }
                    return e === undefined ? v.css(b, c, h) : v.style(b, c, e, h)
                }, b, g ? e : undefined, g)
            }
        })
    });
    v.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
        v.fn[b] = function (a) {
            return this.on(b, a)
        }
    });
    v.fn.extend({
        bind: function (a, b, c) {
            return this.on(a, null, b, c)
        }, unbind: function (a, b) {
            return this.off(a, null, b)
        }, delegate: function (a, b, c, d) {
            return this.on(b, a, c, d)
        }, undelegate: function (a, b, c) {
            return arguments.length === 1 ? this.off(a, "**") : this.off(b, a || "**", c)
        }, hover: function (a, b) {
            return this.mouseenter(a).mouseleave(b || a)
        }
    });
    v.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (a, b) {
        v.fn[b] = function (a, c) {
            return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
        }
    });
    var da = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    v.proxy = function (a, b) {
        var c, d, f;
        if (typeof b === "string") {
            c = a[b];
            b = a;
            a = c
        }
        if (!o(a)) {
            return undefined
        }
        d = e.call(arguments, 2);
        f = function () {
            return a.apply(b || this, d.concat(e.call(arguments)))
        };
        f.guid = a.guid = a.guid || v.guid++;
        return f
    };
    v.holdReady = function (a) {
        if (a) {
            v.readyWait++
        } else {
            v.ready(true)
        }
    };
    v.isArray = Array.isArray;
    v.parseJSON = JSON.parse;
    v.nodeName = B;
    v.isFunction = o;
    v.isWindow = p;
    v.camelCase = W;
    v.type = t;
    v.now = Date.now;
    v.isNumeric = function (a) {
        var b = v.type(a);
        return (b === "number" || b === "string") && !isNaN(a - parseFloat(a))
    };
    v.trim = function (a) {
        return a == null ? "" : (a + "").replace(da, "")
    };
    if (typeof define === "function" && define.amd) {
        define("jquery", [], function () {
            return v
        })
    }
    var db = a.jQuery, dc = a.$;
    v.noConflict = function (b) {
        if (a.$ === v) {
            a.$ = dc
        }
        if (b && a.jQuery === v) {
            a.jQuery = db
        }
        return v
    };
    if (!b) {
        actuate.common.web.Package.define("actuate.common.web");
        if (actuate.common.web.jQuery) {
            v._acPrev$ = actuate.common.web.jQuery
        }
        actuate.common.web.jQuery = actuate.common.web.$ = v
    }
    return v
});
/**
 * jQuery JSON Plugin
 * version: 2.3 (2011-09-17)
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 *
 * Brantley Harris wrote this plugin. It is based somewhat on the JSON.org
 * website's http://www.json.org/json2.js, which proclaims:
 * "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that
 * I uphold.
 *
 * It is also influenced heavily by MochiKit's serializeJSON, which is
 * copyrighted 2005 by Bob Ippolito.
 *
 * This source is download from
 * http://code.google.com/p/jquery-json/downloads/detail?name=jquery.json-2.3.js&can=2&q=
 */(function ($) {
    var escapeable = /["\\\x00-\x1f\x7f-\x9f]/g,
        meta = {"\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\"};
    $.toJSON = typeof JSON === "object" && JSON.stringify ? JSON.stringify : function (a) {
        if (a === null) {
            return "null"
        }
        var b = typeof a;
        if (b === "undefined") {
            return undefined
        }
        if (b === "number" || b === "boolean") {
            return "" + a
        }
        if (b === "string") {
            return $.quoteString(a)
        }
        if (b === "object") {
            if (typeof a.toJSON === "function") {
                return $.toJSON(a.toJSON())
            }
            if (a.constructor === Date) {
                var c = a.getUTCMonth() + 1, d = a.getUTCDate(), e = a.getUTCFullYear(), f = a.getUTCHours(),
                    g = a.getUTCMinutes(), h = a.getUTCSeconds(), i = a.getUTCMilliseconds();
                if (c < 10) {
                    c = "0" + c
                }
                if (d < 10) {
                    d = "0" + d
                }
                if (f < 10) {
                    f = "0" + f
                }
                if (g < 10) {
                    g = "0" + g
                }
                if (h < 10) {
                    h = "0" + h
                }
                if (i < 100) {
                    i = "0" + i
                }
                if (i < 10) {
                    i = "0" + i
                }
                return '"' + e + "-" + c + "-" + d + "T" + f + ":" + g + ":" + h + "." + i + 'Z"'
            }
            if (a.constructor === Array) {
                var j = [];
                for (var k = 0; k < a.length; k++) {
                    j.push($.toJSON(a[k]) || "null")
                }
                return "[" + j.join(",") + "]"
            }
            var l, m, n = [];
            for (var o in a) {
                b = typeof o;
                if (b === "number") {
                    l = '"' + o + '"'
                } else if (b === "string") {
                    l = $.quoteString(o)
                } else {
                    continue
                }
                b = typeof a[o];
                if (b === "function" || b === "undefined") {
                    continue
                }
                m = $.toJSON(a[o]);
                n.push(l + ":" + m)
            }
            return "{" + n.join(",") + "}"
        }
    };
    $.evalJSON = typeof JSON === "object" && JSON.parse ? JSON.parse : function (src) {
        return eval("(" + src + ")")
    };
    $.secureEvalJSON = typeof JSON === "object" && JSON.parse ? JSON.parse : function (src) {
        var filtered = src.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "");
        if (/^[\],:{}\s]*$/.test(filtered)) {
            return eval("(" + src + ")")
        } else {
            throw new SyntaxError("Error parsing JSON, source is not valid.")
        }
    };
    $.quoteString = function (a) {
        if (a.match(escapeable)) {
            return '"' + a.replace(escapeable, function (a) {
                var b = meta[a];
                if (typeof b === "string") {
                    return b
                }
                b = a.charCodeAt();
                return "\\u00" + Math.floor(b / 16).toString(16) + (b % 16).toString(16)
            }) + '"'
        }
        return '"' + a + '"'
    }
})(actuate.common.web.jQuery);
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Utility = {
    __nonce: null, setNonce: function (a) {
        this.__nonce = a
    }, getNonce: function () {
        return this.__nonce
    }, appendToCSS: function (a, b, c) {
        if (!c) {
            c = "dynamic-style-element"
        }
        var d;
        var e;
        var f = this.getNonce();
        if (!document.querySelector("#" + c)) {
            d = document.createDocumentFragment();
            e = document.createElement("style");
            d.appendChild(e);
            e.setAttribute("id", c);
            if (f) {
                e.setAttribute("nonce", f)
            }
            document.head.appendChild(d);
            this.dynamicStyleSheet = e.sheet
        } else {
            e = document.getElementById(c);
            this.dynamicStyleSheet = e.sheet
        }
        a = a.split(/\s+/).join(" ");
        b = b.replace(/[{}]/g, "").trim();
        if (b.substr(b.length - 1, 1) !== ";") {
            b += ";"
        }
        b = "{ " + b.split(/\s+/).join(" ") + " }";
        var g = a + " " + b;
        this.dynamicStyleSheet.insertRule(g, this.dynamicStyleSheet.cssRules.length)
    }, getCSSDeclarations: function (a, b) {
        var c = "";
        var d = a.split("=")[1];
        var e = d.slice(1, d.length - 1);
        if (e) {
            var f = e.split(";");
            f = f.filter(function (a) {
                return a != ""
            });
            if (b) {
                c = f.join(" !important; ");
                c += " !important;"
            } else {
                c = f.join("; ")
            }
        }
        return c
    }, removeInlineStyles: function (a, b) {
        var c = /style["\s']*=["\s']*["']?([*+a-zA-Z0-9 :\-#()._%;!',\s\n\r&]*);?["']/gi;
        var d = a.match(c);
        if (d && d.length > 0) {
            if (a.includes("gadgets-gadget-chrome") && d.length === 1) {
                return a.replace(d[0], "")
            }
            for (var e = 0; e < d.length; e++) {
                var f = d[e];
                var g = Math.ceil(this.randomFloat() * Math.pow(10, 2));
                var h = Math.ceil(this.randomFloat() * Math.pow(10, 2));
                g = "" + g + (new Date).getTime() + h;
                var i = "class_" + g;
                if (f.length > 0) {
                    a = a.replace(f, 'class="' + i + '"');
                    var j = this.getCSSDeclarations(f, b);
                    this.appendToCSS("." + i, j)
                } else {
                    a = a.replace(f, "")
                }
            }
        }
        var k = /<[^>]*\sclass="([^"]*)"[^>]*\sclass="([^"]*)"/g;
        var l = a.replace(k, function (a, b, c) {
            return a.replace('class="' + b + '"', 'class="' + b + " " + c + '"').replace(' class="' + c + '"', "")
        });
        return l
    }, randomFloat: function () {
        var a = window.crypto || window.msCrypto;
        var b = a.getRandomValues(new Uint32Array(1))[0];
        return b / Math.pow(2, 32)
    }, addNonceAttribute: function (a) {
        var b = this.getNonce();
        if (a.indexOf('style type="text/css"') != -1) {
            return a.replace('style type="text/css"', 'style type="text/css" nonce="' + b + '"')
        }
    }, initialize: function () {
    }, escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    }, getRootCSSNamespace: function () {
        return "ac"
    }, unLoadChildren: function (a) {
        if (!a) {
            return
        }
        var b = null;
        if (typeof a == "string") {
            b = actuate.common.web.$("#" + a)
        } else {
            b = actuate.common.web.$(a)
        }
        this._cleanData(b.children(":first"))
    }, _cleanData: function (a) {
        for (var b = 0, c, d; (c = a[b]) != null; b++) {
            actuate.common.web.$.event.remove(c);
            actuate.common.web.$.removeData(c);
            this._purge(c)
        }
    }, _purge: function (a) {
        var b = a.childNodes;
        if (b) {
            var c = false;
            while (!c) {
                var d = b.length;
                for (var e = 0; e < d; e += 1) {
                    var f = b[e];
                    if (f.childNodes.length == 0) {
                        actuate.common.web.$.event.remove(f);
                        a.removeChild(f);
                        c = true;
                        break
                    } else {
                        this._purge(f)
                    }
                }
                if (c) {
                    c = false
                } else {
                    break
                }
            }
        }
    }, showMsgDlg: function (a, b, c, d) {
        var e = new actuate.common.web.widget.dialog.MsgDialog({id: a, msg: b, type: c, dialogConfig: d});
        e.render()
    }, createControlItem: function (a, b) {
        var c = null;
        switch (a) {
            case"password":
                c = new actuate.common.web.widget.control.Password(b);
                break;
            case"date":
                c = new actuate.common.web.widget.control.DatePicker(b);
                break;
            case"checkbox":
                c = new actuate.common.web.widget.control.CheckBox(b);
                break;
            case"combobox":
                c = new actuate.common.web.widget.control.ComboBox(b);
                break;
            case"label":
                c = new actuate.common.web.widget.control.Label(b);
                break;
            case"listbox":
                c = new actuate.common.web.widget.control.ListBox(b);
                break;
            case"radio":
                c = new actuate.common.web.widget.control.Radio(b);
                break;
            case"button":
                c = new actuate.common.web.widget.control.Button(b);
                break;
            case"file":
                c = new actuate.common.web.widget.control.File(b);
                break;
            default:
                c = new actuate.common.web.widget.control.TextField(b)
        }
        return c
    }, isActuateException: function (a) {
        return a instanceof actuate.common.web.Exception || a.getType && a.getErrCode
    }, createException: function (a, b) {
        if (this.isActuateException(a)) {
            return a
        } else if (typeof a == "string") {
            return new actuate.common.web.Exception(actuate.common.web.Exception.ERR_CLIENT, a)
        }
        if (!b) {
            b = actuate.common.web.Exception
        }
        var c = a.message ? a.message : a.description;
        if (!c) c = a;
        var d = a.number ? a.number : null;
        var e = "";
        if (a.fileName) e += "\n fileName=" + a.fileName; else if (a.filename) e += "\n filename=" + a.filename;
        if (a.lineNumber) e += "\n lineNumber=" + a.lineNumber;
        if (a.stack) e += "\n stack=" + a.stack;
        if (a.description && a.description != c) e += "\n description=" + a.description;
        return new b(actuate.common.web.Exception.ERR_CLIENT, c, e, d)
    }, chainCallbacksArray: function (a, b) {
        var c = new this._CallbackChain(a, b);
        c.start()
    }, arrayUnique: function (a) {
        var b = new Array;
        label:for (var c = 0; c < a.length; c++) {
            for (var d = 0; d < b.length; d++) {
                if (b[d] == a[c]) continue label
            }
            b[b.length] = a[c]
        }
        return b
    }, makeAbsoluteUrl: function (a, b) {
        if (!a || a.length == 0) {
            a = "."
        }
        if (!a.match(/^[a-zA-Z]*:\/\//)) {
            if (!b) {
                b = location.href
            }
            var c = b.match(/(^[a-zA-Z]*:\/\/[^\/]*)\//);
            if (c) {
                var d = c[1];
                var e = b.substr(d.length).indexOf("/");
                var f = b.substr(d.length + e);
                var g = null;
                if (a.charAt(0) == "/") {
                    f = f.substr(0, f.indexOf("/") + 1)
                } else {
                    var h = f.indexOf("?");
                    if (h < 0) {
                        h = f.length
                    }
                    g = f.lastIndexOf("/", h);
                    if (g >= 0) {
                        f = f.substr(0, g) + "/"
                    }
                }
                var i = a.indexOf("?");
                if (i < 0) {
                    i = a.length
                }
                var j = a.lastIndexOf("/", i);
                var k = a.substr(j + 1);
                if (k != "." && k != "..") {
                    a = a.substr(0, j)
                } else {
                    k = ""
                }
                f = f.substr(0, f.length - 1);
                var l = a.split("/");
                for (var m = 0; m < l.length; m++) {
                    var n = l[m];
                    if (n == "..") {
                        g = f.lastIndexOf("/");
                        f = f.substr(0, g)
                    } else if (n != "." && n != "") {
                        f += "/" + n
                    }
                }
                if (f != "/") {
                    f += "/" + k
                }
                a = d + f
            }
        }
        return a
    }, getValidationTitleKey: function (a) {
        var b = "Dlg.Title.Information";
        if (a === "warning") {
            b = "Dlg.Title.Warning"
        } else if (a === "error") {
            b = "Dlg.Title.Error"
        } else if (a === "severe") {
            b = "Dlg.Title.Severe"
        } else if (a === "confirmation") {
            b = "Dlg.Title.Confirmation"
        }
        return b
    }, _getLocalizedModule: function (a) {
        var b = actuate.common.web.resourcesBundle.localizedStrings[a];
        if (!b) {
            return null
        }
        return b
    }, _getLocalizedString: function (a, b) {
        var c = actuate.common.web.util.Utility._getLocalizedModule(a);
        if (!c) {
            return null
        }
        var d = c[b];
        if (!d) {
            c = actuate.common.web.util.Utility._getLocalizedModule("default");
            if (c) {
                c = c[a]
            }
        }
        return c
    }, getLocalizedString: function () {
        if (!actuate.common.web.resourcesBundle) {
            return ""
        }
        var a = arguments[0];
        var b = arguments[1];
        if (!a || !b) {
            return ""
        }
        b = b.toLowerCase();
        var c = actuate.common.web.util.Utility._getLocalizedString(a, b);
        if (!c) {
            return ""
        }
        var d = c[b];
        if (!d) {
            return ""
        }
        for (var e = 2; e < arguments.length; e++) {
            var f = e - 2;
            var g = new RegExp("\\{" + f + "\\}", "g");
            d = d.replace(g, arguments[e])
        }
        return d
    }, createUniqueControlID: function () {
        var a = (this.S4() + this.S4() + this.S4() + this.S4()).toUpperCase();
        return a
    }, S4: function () {
        var a = window.crypto || window.msCrypto;
        var b = a.getRandomValues(new Uint32Array(1))[0] / Math.pow(2, 32);
        var c = ((1 + b) * 65536 | 0).toString(16).substring(1);
        return c
    }, convertMsToDateString: function (a) {
        var b = new Date(a);
        var c = b.getMonth() + 1 + "/" + b.getDate() + "/" + b.getFullYear();
        return c
    }
};
actuate.common.web.util.Utility._CallbackChain = actuate.common.web.Class.create();
actuate.common.web.util.Utility._CallbackChain.prototype = {
    _functions: null,
    _currentFunction: null,
    _onException: null,
    initialize: function (a, b) {
        this._functions = a;
        this._nextClosure = actuate.common.web.Method.bind(this._next, this);
        this._onException = b
    },
    start: function () {
        this._next()
    },
    _next: function () {
        try {
            if (this._functions.length > 0) {
                this._currentFunction = this._functions.shift();
                if (!this._currentFunction) {
                    throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, "Null function found in the array passed to chainCallbacks")
                }
                var a = [];
                a.push(this._nextClosure);
                for (var b = 0; b < arguments.length; b++) {
                    a.push(arguments[b])
                }
                if (this._currentFunction.apply(null, a)) {
                    this._next()
                }
            }
        } catch (c) {
            if (this._onException) {
                this._onException(c)
            } else {
                throw c
            }
        }
    }
};
actuate.common.web.util.Utility.initialize();
actuate.common.web.Package.define("actuate.common.web.resourcesBundle.localizedStrings");
actuate.common.web.Package.define("actuate.common.web.logging");
actuate.common.web.logging.Logger = actuate.common.web.Class.create();
actuate.common.web.logging.Logger.DEBUG_LEVELS = {
    SEVERE: 100,
    WARNING: 200,
    INFO: 300,
    CONFIG: 400,
    FINE: 500,
    FINER: 600,
    FINEST: 700
};
actuate.common.web.logging.Logger.prototype = {
    _debugLevel: 0, _enableLog: true, _logWriter: null, initialize: function (a, b) {
        if (this.__extending) {
            return
        }
        if (a) {
            var c = parseInt(a, 10);
            if (c > 0) {
                this._debugLevel = c
            }
        }
        this._logWriter = b;
        if (!this._logWriter) {
            this._logWriter = new actuate.common.web.logging.Console
        }
    }, severe: function (a) {
        this._log(actuate.common.web.logging.Logger.DEBUG_LEVELS.SEVERE, a)
    }, info: function (a) {
        this._log(actuate.common.web.logging.Logger.DEBUG_LEVELS.INFO, a)
    }, config: function (a) {
        this._log(actuate.common.web.logging.Logger.DEBUG_LEVELS.CONFIG, a)
    }, fine: function (a) {
        this._log(actuate.common.web.logging.Logger.DEBUG_LEVELS.FINE, a)
    }, finer: function (a) {
        this._log(actuate.common.web.logging.Logger.DEBUG_LEVELS.FINER, a)
    }, finest: function (a) {
        this._log(actuate.common.web.logging.Logger.DEBUG_LEVELS.FINEST, a)
    }, enable: function (a) {
        this._enableLog = a === true ? true : false
    }, _isOKToLog: function (a) {
        if (this._enableLog && a <= this._debugLevel) {
            return true
        }
        return false
    }, _log: function (a, b) {
        if (!this._isOKToLog(a)) {
            return
        }
        var c = this._getLogger();
        if (c) {
            c.log(b)
        }
    }, _getLogger: function () {
        if (this._logWriter) {
            if (this._logWriter.log) {
                return this._logWriter
            } else {
                throw new Error("Log writer's log method does not exist!")
            }
        }
        return null
    }
};
actuate.common.web.Package.define("actuate.common.web.logging");
actuate.common.web.logging.LogWriter = actuate.common.web.Class.create();
actuate.common.web.logging.LogWriter.prototype = {
    _addTimeStamp: true, initialize: function () {
        if (this.__extending) {
            return
        }
    }, log: function (a) {
        try {
            if (console) {
                var b = this.getFormattedMsg(a);
                console.log(b)
            }
        } catch (c) {
        }
    }, addDateTime: function (a) {
        this._addTimeStamp = a
    }, getFormattedMsg: function (a) {
        var b = actuate.common.web.$.toJSON(a);
        var c = (new Date).toLocaleString();
        var d = c + "--" + b;
        return d
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Control = actuate.common.web.Class.create();
actuate.common.web.widget.control.Control.prototype = {
    _defaults: {readOnly: false, disabled: false},
    _element: null,
    _lblElement: null,
    _curSettings: null,
    _width: null,
    _height: null,
    _label: null,
    _css: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._initControlSettings(a);
        this._createElement();
        this._initComponent()
    },
    _initControlSettings: function (a) {
        this._curSettings = actuate.common.web.$.extend({}, this._defaults, a);
        this._width = this._curSettings.width;
        this._height = this._curSettings.height;
        this._label = this._curSettings.label;
        this._css = this._curSettings.cssClass;
        delete this._curSettings.width;
        delete this._curSettings.height;
        delete this._curSettings.label;
        delete this._curSettings.cssClass
    },
    appendTo: function (a) {
        this._curSettings.appendTo = a;
        if (this._curSettings.appendTo) {
            if (this._lblElement) {
                this._lblElement.appendTo(this._curSettings.appendTo)
            }
            this._element.appendTo(this._curSettings.appendTo)
        }
    },
    getValue: function () {
        return this._element.val()
    },
    setValue: function (a) {
        this._element.attr("value", a);
        this._element.val(a)
    },
    enable: function () {
        this._curSettings.disabled = false;
        this._element.attr("disabled", true)
    },
    disable: function () {
        this._curSettings.disabled = true;
        this._element.attr("disabled", false)
    },
    isEnabled: function () {
        return !this._curSettings.disabled
    },
    addClass: function (a) {
        return this._element.addClass(a)
    },
    removeClass: function (a) {
        return this._element.removeClass(a)
    },
    hasClass: function (a) {
        return this._element.hasClass(a)
    },
    css: function (a, b) {
        this._element.css(a, b)
    },
    setSize: function (a) {
        this._element.css({"min-width": a.width, "min-height": a.height})
    },
    _initComponent: function () {
        this.setSize({width: this._width, height: this._height});
        this.addClass(this._css)
    },
    _getHTMLTag: function () {
        return "<input>"
    },
    _getPrefixID: function () {
        return "acctrl"
    },
    _getSuffixID: function () {
        return "accnt"
    },
    _createElement: function () {
        var a = this._getHTMLTag();
        this._curSettings.id = this.getID();
        this._element = new actuate.common.web.$(a);
        this._element.attr(this._curSettings);
        if (this._label) {
            var b = actuate.common.web.$.extend({}, {}, this._curSettings);
            b.id = this.getUniqueID();
            this._lblElement = new actuate.common.web.widget.control.Label(b)
        }
    },
    find: function () {
        return this._element.find.apply(this._element, arguments)
    },
    focus: function () {
        return this._element.focus()
    },
    setDataNameAttr: function (a) {
        this._element.attr({"data-name": a})
    },
    getDataNameAttr: function () {
        return this._element.attr("data-name")
    },
    addListener: function (a, b) {
        this._element[a] = b
    },
    getTitle: function () {
        if (!this._curSettings.title) {
            return ""
        }
        return this._curSettings.title
    },
    getID: function () {
        if (this._element) {
            return actuate.common.web.$(this._element).attr("id")
        }
        if (this._curSettings.id) {
            return this._curSettings.id
        }
        return this.getUniqueID()
    },
    getUniqueID: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = this._getNextCtrlCntID();
        var c = this._getPrefixID();
        var d = this._getSuffixID();
        a = c + b + "-" + a + "-" + d + b;
        return a
    },
    _getNextCtrlCntID: function () {
        return actuate.common.web.widget.control.Counter.getNextCtrlCntId()
    }
};
actuate.common.web.widget.control.Counter = {
    _nextCntrlCnt_: 0, getNextCtrlCntId: function () {
        return this._nextCntrlCnt_++
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.InputTag = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    initialize: function (a) {
        if (this.__extending) return;
        actuate.common.web.widget.control.InputTag.superclass.initialize.call(this, a)
    }, _initComponent: function () {
        actuate.common.web.widget.control.InputTag.superclass._initComponent.call(this);
        this.addClass("actuTextField")
    }, _getHTMLTag: function () {
        return "<input>"
    }
});/*!
 * jQuery UI Widget 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *///>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/
(function (a, b) {
    var c = 0;
    var d = Array.prototype.hasOwnProperty;
    var e = Array.prototype.slice;
    a.cleanData = function (b) {
        return function (c) {
            var d, e, f;
            for (f = 0; (e = c[f]) != null; f++) {
                d = a._data(e, "events");
                if (d && d.remove) {
                    a(e).triggerHandler("remove")
                }
            }
            b(c)
        }
    }(a.cleanData);
    a.widget = function (b, c, d) {
        var e, f, g;
        var h = {};
        var i = b.split(".")[0];
        b = b.split(".")[1];
        var j = i + "-" + b;
        if (!d) {
            d = c;
            c = a.Widget
        }
        if (Array.isArray(d)) {
            d = a.extend.apply(null, [{}].concat(d))
        }
        a.expr.pseudos[j.toLowerCase()] = function (b) {
            return !!a.data(b, j)
        };
        a[i] = a[i] || {};
        e = a[i][b];
        f = a[i][b] = function (a, b) {
            if (!this._createWidget) {
                return new f(a, b)
            }
            if (arguments.length) {
                this._createWidget(a, b)
            }
        };
        a.extend(f, e, {version: d.version, _proto: a.extend({}, d), _childConstructors: []});
        g = new c;
        g.options = a.widget.extend({}, g.options);
        a.each(d, function (a, b) {
            if (typeof b !== "function") {
                h[a] = b;
                return
            }
            h[a] = function () {
                function e(b) {
                    return c.prototype[a].apply(this, b)
                }

                function d() {
                    return c.prototype[a].apply(this, arguments)
                }

                return function () {
                    var a = this._super;
                    var c = this._superApply;
                    var f;
                    this._super = d;
                    this._superApply = e;
                    f = b.apply(this, arguments);
                    this._super = a;
                    this._superApply = c;
                    return f
                }
            }()
        });
        f.prototype = a.widget.extend(g, {widgetEventPrefix: e ? g.widgetEventPrefix || b : b}, h, {
            constructor: f,
            namespace: i,
            widgetName: b,
            widgetFullName: j
        });
        if (e) {
            a.each(e._childConstructors, function (b, c) {
                var d = c.prototype;
                a.widget(d.namespace + "." + d.widgetName, f, c._proto)
            });
            delete e._childConstructors
        } else {
            c._childConstructors.push(f)
        }
        a.widget.bridge(b, f);
        return f
    };
    a.widget.extend = function (c) {
        var f = e.call(arguments, 1);
        var g = 0;
        var h = f.length;
        var i;
        var j;
        for (; g < h; g++) {
            for (i in f[g]) {
                j = f[g][i];
                if (d.call(f[g], i) && j !== b) {
                    if (a.isPlainObject(j)) {
                        c[i] = a.isPlainObject(c[i]) ? a.widget.extend({}, c[i], j) : a.widget.extend({}, j)
                    } else {
                        c[i] = j
                    }
                }
            }
        }
        return c
    };
    a.widget.bridge = function (c, d) {
        var f = d.prototype.widgetFullName || c;
        a.fn[c] = function (g) {
            var h = typeof g === "string";
            var i = e.call(arguments, 1);
            var j = this;
            if (h) {
                if (!this.length && g === "instance") {
                    j = b
                } else {
                    this.each(function () {
                        var d;
                        var e = a.data(this, f);
                        if (g === "instance") {
                            j = e;
                            return false
                        }
                        if (!e) {
                            return a.error("cannot call methods on " + c + " prior to initialization; " + "attempted to call method '" + g + "'")
                        }
                        if (typeof e[g] !== "function" || g.charAt(0) === "_") {
                            return a.error("no such method '" + g + "' for " + c + " widget instance")
                        }
                        d = e[g].apply(e, i);
                        if (d !== e && d !== b) {
                            j = d && d.jquery ? j.pushStack(d.get()) : d;
                            return false
                        }
                    })
                }
            } else {
                if (i.length) {
                    g = a.widget.extend.apply(null, [g].concat(i))
                }
                this.each(function () {
                    var b = a.data(this, f);
                    if (b) {
                        b.option(g || {});
                        if (b._init) {
                            b._init()
                        }
                    } else {
                        a.data(this, f, new d(g, this))
                    }
                })
            }
            return j
        }
    };
    a.Widget = function () {
    };
    a.Widget._childConstructors = [];
    a.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {classes: {}, disabled: false, create: null},
        _createWidget: function (b, d) {
            d = a(d || this.defaultElement || this)[0];
            this.element = a(d);
            this.uuid = c++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.bindings = a();
            this.hoverable = a();
            this.focusable = a();
            this.classesElementLookup = {};
            if (d !== this) {
                a.data(d, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function (a) {
                        if (a.target === d) {
                            this.destroy()
                        }
                    }
                });
                this.document = a(d.style ? d.ownerDocument : d.document || d);
                this.window = a(this.document[0].defaultView || this.document[0].parentWindow)
            }
            this.options = a.widget.extend({}, this.options, this._getCreateOptions(), b);
            this._create();
            if (this.options.disabled) {
                this._setOptionDisabled(this.options.disabled)
            }
            this._trigger("create", null, this._getCreateEventData());
            this._init()
        },
        _getCreateOptions: function () {
            return {}
        },
        _getCreateEventData: a.noop,
        _create: a.noop,
        _init: a.noop,
        destroy: function () {
            var b = this;
            this._destroy();
            a.each(this.classesElementLookup, function (a, c) {
                b._removeClass(c, a)
            });
            this.element.off(this.eventNamespace).removeData(this.widgetFullName);
            this.widget().off(this.eventNamespace).removeAttr("aria-disabled");
            this.bindings.off(this.eventNamespace)
        },
        _destroy: a.noop,
        widget: function () {
            return this.element
        },
        option: function (c, d) {
            var e = c;
            var f;
            var g;
            var h;
            if (arguments.length === 0) {
                return a.widget.extend({}, this.options)
            }
            if (typeof c === "string") {
                e = {};
                f = c.split(".");
                c = f.shift();
                if (f.length) {
                    g = e[c] = a.widget.extend({}, this.options[c]);
                    for (h = 0; h < f.length - 1; h++) {
                        g[f[h]] = g[f[h]] || {};
                        g = g[f[h]]
                    }
                    c = f.pop();
                    if (arguments.length === 1) {
                        return g[c] === b ? null : g[c]
                    }
                    g[c] = d
                } else {
                    if (arguments.length === 1) {
                        return this.options[c] === b ? null : this.options[c]
                    }
                    e[c] = d
                }
            }
            this._setOptions(e);
            return this
        },
        _setOptions: function (a) {
            var b;
            for (b in a) {
                this._setOption(b, a[b])
            }
            return this
        },
        _setOption: function (a, b) {
            if (a === "classes") {
                this._setOptionClasses(b)
            }
            this.options[a] = b;
            if (a === "disabled") {
                this._setOptionDisabled(b)
            }
            return this
        },
        _setOptionClasses: function (b) {
            var c, d, e;
            for (c in b) {
                e = this.classesElementLookup[c];
                if (b[c] === this.options.classes[c] || !e || !e.length) {
                    continue
                }
                d = a(e.get());
                this._removeClass(e, c);
                d.addClass(this._classes({element: d, keys: c, classes: b, add: true}))
            }
        },
        _setOptionDisabled: function (a) {
            this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!a);
            if (a) {
                this._removeClass(this.hoverable, null, "ui-state-hover");
                this._removeClass(this.focusable, null, "ui-state-focus")
            }
        },
        enable: function () {
            return this._setOptions({disabled: false})
        },
        disable: function () {
            return this._setOptions({disabled: true})
        },
        _classes: function (b) {
            function f(f, g) {
                var h, i;
                for (i = 0; i < f.length; i++) {
                    h = d.classesElementLookup[f[i]] || a();
                    if (b.add) {
                        e();
                        h = a(a.uniqueSort(h.get().concat(b.element.get())))
                    } else {
                        h = a(h.not(b.element).get())
                    }
                    d.classesElementLookup[f[i]] = h;
                    c.push(f[i]);
                    if (g && b.classes[f[i]]) {
                        c.push(b.classes[f[i]])
                    }
                }
            }

            function e() {
                b.element.each(function (b, c) {
                    var e = a.map(d.classesElementLookup, function (a) {
                        return a
                    }).some(function (a) {
                        return a.is(c)
                    });
                    if (!e) {
                        d._on(a(c), {remove: "_untrackClassesElement"})
                    }
                })
            }

            var c = [];
            var d = this;
            b = a.extend({element: this.element, classes: this.options.classes || {}}, b);
            if (b.keys) {
                f(b.keys.match(/\S+/g) || [], true)
            }
            if (b.extra) {
                f(b.extra.match(/\S+/g) || [])
            }
            return c.join(" ")
        },
        _untrackClassesElement: function (b) {
            var c = this;
            a.each(c.classesElementLookup, function (d, e) {
                if (a.inArray(b.target, e) !== -1) {
                    c.classesElementLookup[d] = a(e.not(b.target).get())
                }
            });
            this._off(a(b.target))
        },
        _removeClass: function (a, b, c) {
            return this._toggleClass(a, b, c, false)
        },
        _addClass: function (a, b, c) {
            return this._toggleClass(a, b, c, true)
        },
        _toggleClass: function (a, b, c, d) {
            d = typeof d === "boolean" ? d : c;
            var e = typeof a === "string" || a === null,
                f = {extra: e ? b : c, keys: e ? a : b, element: e ? this.element : a, add: d};
            f.element.toggleClass(this._classes(f), d);
            return this
        },
        _on: function (b, c, d) {
            var e;
            var f = this;
            if (typeof b !== "boolean") {
                d = c;
                c = b;
                b = false
            }
            if (!d) {
                d = c;
                c = this.element;
                e = this.widget()
            } else {
                c = e = a(c);
                this.bindings = this.bindings.add(c)
            }
            a.each(d, function (d, g) {
                function h() {
                    if (!b && (f.options.disabled === true || a(this).hasClass("ui-state-disabled"))) {
                        return
                    }
                    return (typeof g === "string" ? f[g] : g).apply(f, arguments)
                }

                if (typeof g !== "string") {
                    h.guid = g.guid = g.guid || h.guid || a.guid++
                }
                var i = d.match(/^([\w:-]*)\s*(.*)$/);
                var j = i[1] + f.eventNamespace;
                var k = i[2];
                if (k) {
                    e.on(j, k, h)
                } else {
                    c.on(j, h)
                }
            })
        },
        _off: function (b, c) {
            c = (c || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            b.off(c);
            this.bindings = a(this.bindings.not(b).get());
            this.focusable = a(this.focusable.not(b).get());
            this.hoverable = a(this.hoverable.not(b).get())
        },
        _delay: function (a, b) {
            function c() {
                return (typeof a === "string" ? d[a] : a).apply(d, arguments)
            }

            var d = this;
            return setTimeout(c, b || 0)
        },
        _hoverable: function (b) {
            this.hoverable = this.hoverable.add(b);
            this._on(b, {
                mouseenter: function (b) {
                    this._addClass(a(b.currentTarget), null, "ui-state-hover")
                }, mouseleave: function (b) {
                    this._removeClass(a(b.currentTarget), null, "ui-state-hover")
                }
            })
        },
        _focusable: function (b) {
            this.focusable = this.focusable.add(b);
            this._on(b, {
                focusin: function (b) {
                    this._addClass(a(b.currentTarget), null, "ui-state-focus")
                }, focusout: function (b) {
                    this._removeClass(a(b.currentTarget), null, "ui-state-focus")
                }
            })
        },
        _trigger: function (b, c, d) {
            var e, f;
            var g = this.options[b];
            d = d || {};
            c = a.Event(c);
            c.type = (b === this.widgetEventPrefix ? b : this.widgetEventPrefix + b).toLowerCase();
            c.target = this.element[0];
            f = c.originalEvent;
            if (f) {
                for (e in f) {
                    if (!(e in c)) {
                        c[e] = f[e]
                    }
                }
            }
            this.element.trigger(c, d);
            return !(typeof g === "function" && g.apply(this.element[0], [c].concat(d)) === false || c.isDefaultPrevented())
        }
    };
    a.each({show: "fadeIn", hide: "fadeOut"}, function (b, c) {
        a.Widget.prototype["_" + b] = function (d, e, f) {
            if (typeof e === "string") {
                e = {effect: e}
            }
            var g;
            var h = !e ? b : e === true || typeof e === "number" ? c : e.effect || c;
            e = e || {};
            if (typeof e === "number") {
                e = {duration: e}
            } else if (e === true) {
                e = {}
            }
            g = !a.isEmptyObject(e);
            e.complete = f;
            if (e.delay) {
                d.delay(e.delay)
            }
            if (g && a.effects && a.effects.effect[h]) {
                d[b](e)
            } else if (h !== b && d[h]) {
                d[h](e.duration, e.easing, f)
            } else {
                d.queue(function (c) {
                    a(this)[b]();
                    if (f) {
                        f.call(d[0])
                    }
                    c()
                })
            }
        }
    });
    var f = a.widget
})(actuate.common.web.jQuery);
!function (a) {
    "use strict";
    var b = function (a, b) {
        this.init("tooltip", a, b)
    };
    b.prototype = {
        constructor: b, init: function (b, c, d) {
            var e, f;
            this.type = b;
            this.$element = a(c);
            this.options = this.getOptions(d);
            this.enabled = true;
            if (this.options.trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this))
            } else if (this.options.trigger != "manual") {
                e = this.options.trigger == "hover" ? "mouseenter" : "focus";
                f = this.options.trigger == "hover" ? "mouseleave" : "blur";
                this.$element.on(e + "." + this.type, this.options.selector, a.proxy(this.enter, this));
                this.$element.on(f + "." + this.type, this.options.selector, a.proxy(this.leave, this))
            }
            this.options.selector ? this._options = a.extend({}, this.options, {
                trigger: "manual",
                selector: ""
            }) : this.fixTitle()
        }, getOptions: function (b) {
            b = a.extend({}, a.fn[this.type].defaults, b, this.$element.data());
            if (b.delay && typeof b.delay == "number") {
                b.delay = {show: b.delay, hide: b.delay}
            }
            return b
        }, enter: function (b) {
            var c = a(b.currentTarget)[this.type](this._options).data(this.type);
            if (!c.options.delay || !c.options.delay.show) return c.show();
            clearTimeout(this.timeout);
            c.hoverState = "in";
            this.timeout = setTimeout(function () {
                if (c.hoverState == "in") c.show()
            }, c.options.delay.show)
        }, leave: function (b) {
            var c = a(b.currentTarget)[this.type](this._options).data(this.type);
            if (this.timeout) clearTimeout(this.timeout);
            if (!c.options.delay || !c.options.delay.hide) return c.hide();
            c.hoverState = "out";
            this.timeout = setTimeout(function () {
                if (c.hoverState == "out") c.hide()
            }, c.options.delay.hide)
        }, show: function () {
            var a, b, c, d, e, f, g;
            if (this.hasContent() && this.enabled) {
                a = this.tip();
                this.setContent();
                if (this.options.animation) {
                    a.addClass("fade")
                }
                f = typeof this.options.placement == "function" ? this.options.placement.call(this, a[0], this.$element[0]) : this.options.placement;
                b = /in/.test(f);
                a.remove().css({top: 0, left: 0, display: "block"}).appendTo(b ? this.$element : document.body);
                c = this.getPosition(b);
                d = a[0].offsetWidth;
                e = a[0].offsetHeight;
                switch (b ? f.split(" ")[1] : f) {
                    case"bottom":
                        g = {top: c.top + c.height, left: c.left + c.width / 2 - d / 2};
                        break;
                    case"top":
                        g = {top: c.top - e, left: c.left + c.width / 2 - d / 2};
                        break;
                    case"left":
                        g = {top: c.top + c.height / 2 - e / 2, left: c.left - d};
                        break;
                    case"right":
                        g = {top: c.top + c.height / 2 - e / 2, left: c.left + c.width};
                        break
                }
                a.css(g).addClass(f).addClass("in")
            }
        }, setContent: function () {
            var a = this.tip(), b = this.getTitle();
            a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b);
            a.removeClass("fade in top bottom left right")
        }, hide: function () {
            function d() {
                var b = setTimeout(function () {
                    c.off(a.support.transition.end).remove()
                }, 500);
                c.one(a.support.transition.end, function () {
                    clearTimeout(b);
                    c.remove()
                })
            }

            var b = this, c = this.tip();
            c.removeClass("in");
            a.support.transition && this.$tip.hasClass("fade") ? d() : c.remove();
            return this
        }, fixTitle: function () {
            var a = this.$element;
            if (a.attr("title") || typeof a.attr("data-original-title") != "string") {
                a.attr("data-original-title", a.attr("title") || "").removeAttr("title")
            }
        }, hasContent: function () {
            return this.getTitle()
        }, getPosition: function (b) {
            return a.extend({}, b ? {top: 0, left: 0} : this.$element.offset(), {
                width: this.$element[0].offsetWidth,
                height: this.$element[0].offsetHeight
            })
        }, getTitle: function () {
            var a, b = this.$element, c = this.options;
            a = b.attr("data-original-title") || (typeof c.title == "function" ? c.title.call(b[0]) : c.title);
            return a
        }, tip: function () {
            return this.$tip = this.$tip || a(this.options.template)
        }, validate: function () {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null
            }
        }, enable: function () {
            this.enabled = true
        }, disable: function () {
            this.enabled = false
        }, toggleEnabled: function () {
            this.enabled = !this.enabled
        }, toggle: function () {
            this[this.tip().hasClass("in") ? "hide" : "show"]()
        }, destroy: function () {
            this.hide().$element.off("." + this.type).removeData(this.type)
        }
    };
    a.fn.tooltip = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("tooltip"), f = typeof c == "object" && c;
            if (!e) d.data("tooltip", e = new b(this, f));
            if (typeof c == "string") e[c]()
        })
    };
    a.fn.tooltip.Constructor = b;
    a.fn.tooltip.defaults = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover",
        title: "",
        delay: 0,
        html: true
    }
}(actuate.common.web.jQuery);
!function (a) {
    "use strict";
    var b = function (a, b) {
        this.init("popover", a, b)
    };
    b.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype, {
        constructor: b, setContent: function () {
            var a = this.tip(), b = this.getTitle(), c = this.getContent();
            a.find(".popover-title")[this.options.html ? "html" : "text"](b);
            a.find(".popover-content > *")[this.options.html ? "html" : "text"](c);
            a.removeClass("fade top bottom left right in")
        }, hasContent: function () {
            return this.getTitle() || this.getContent()
        }, getContent: function () {
            var a, b = this.$element, c = this.options;
            a = b.attr("data-content") || (typeof c.content == "function" ? c.content.call(b[0]) : c.content);
            return a
        }, tip: function () {
            if (!this.$tip) {
                this.$tip = a(this.options.template)
            }
            return this.$tip
        }, destroy: function () {
            this.hide().$element.off("." + this.type).removeData(this.type)
        }
    });
    a.fn.popover = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("popover"), f = typeof c == "object" && c;
            if (!e) d.data("popover", e = new b(this, f));
            if (typeof c == "string") e[c]()
        })
    };
    a.fn.popover.Constructor = b;
    a.fn.popover.defaults = a.extend({}, a.fn.tooltip.defaults, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'
    })
}(actuate.common.web.jQuery);
actuate.common.web.Exception = actuate.common.web.Class.create();
actuate.common.web.Class.extend(actuate.common.web.Exception, {
    ERR_SERVER: "err_server",
    ERR_CLIENT: "err_client",
    ERR_USAGE: "err_usage"
});
actuate.common.web.Exception.prototype = {
    _type: null, _code: null, _msg: null, _detail: null, initialize: function (a, b, c, d, e) {
        if (arguments.length == 1) {
            this.initJSException(a);
            return
        }
        this._type = a;
        this._msg = b;
        this._detail = c;
        this._errorParams = e;
        this._code = d
    }, initJSException: function (a) {
        var b = "";
        if (a) {
            var c = "\n\t";
            if (a.fileName) {
                b += c + "fileName: " + a.fileName
            }
            if (a.lineNumber) {
                b += c + "lineNumber: " + a.lineNumber
            }
            if (a.message) {
                b += c + "message: " + a.message;
                this._msg = a.message
            }
            if (a.name) {
                b += c + "name: " + a.name
            }
        }
        this._type = actuate.common.web.Exception.ERR_CLIENT;
        this._detail = b
    }, getType: function () {
        return this._type
    }, getMessage: function () {
        return this._msg
    }, getDescription: function () {
        return this._detail
    }, getParameters: function () {
        return this._errorParams
    }, getErrCode: function () {
        return this._code
    }, isExceptionType: function (a) {
        if (typeof a == "string") {
            return a == this._getName()
        }
        return this instanceof a
    }, _getName: function () {
        return "actuate.common.web.Exception"
    }, toString: function () {
        var a = this._getName() + ": ";
        if (this.getType()) {
            a += "<br/><b>Type:</b> " + this.getType()
        }
        if (this.getErrCode()) {
            a += "<br/><b>Error code:</b> " + this.getErrCode()
        }
        a += "<br/><b>Message:</b> " + this.getMessage();
        if (this.getDescription()) {
            a += "<br/><b>Description:</b> " + this.getDescription()
        }
        return a
    }
};
actuate.common.web.Loader = {
    _moduleMappings: {
        myfiles: "actuate.myfiles",
        ac: "actuate.ac",
        umc: "actuate.umc",
        jqueryui: "jquery.ui",
        jslibcss: "webjslib.css",
        uxumc: "uxumc.css"
    },
    _initialized: false,
    _running: false,
    _onError: null,
    _onAfterInit: null,
    _baseUrl: null,
    _initModules: new Array,
    _requestOptions: null,
    initialize: function (a, b, c, d) {
        if (this._initialized || this._running) {
            return
        }
        if (!a) {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, "Missing argument baseUrl")
        }
        if (this._initModules.length == 0) {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, "No modules have been selected with the load() method.")
        }
        if (c && typeof c != "function") {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, 'Argument "callback" contains an invalid callback function.')
        }
        if (d && typeof d != "function") {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, 'Argument "errorCallback" contains an invalid callback function.')
        }
        this._initialized = false;
        this._running = true;
        this._onAfterInit = c;
        this._onError = d;
        if (a && a.charAt(a.length - 1) != "/") {
            a += "/"
        }
        this._baseUrl = a;
        if (b) {
            if (!(b instanceof actuate.common.web.RequestOptions)) {
                throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, 'Invalid request options, it must be an instance of "actuate.RequestOptions".')
            }
            this._requestOptions = new actuate.common.web.RequestOptions(b)
        } else {
            this._requestOptions = null
        }
        this._errorClosure = actuate.common.web.Method.bind(this._error, this);
        var e = new Array;
        e.push(actuate.common.web.Method.bind(this._loadResources, this));
        e.push(actuate.common.web.Method.bind(this._resourcesLoaded, this));
        window.setTimeout(function () {
            actuate.common.web.util.Utility.chainCallbacksArray(e, this._errorClosure)
        }, 100)
    },
    load: function (a) {
        var b = this._moduleMappings[a];
        if (b) {
            this._initModules.push(a)
        } else {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, 'Invalid module name "' + a + '".')
        }
    },
    _loadResources: function (a) {
        var b = [];
        b.push(this._moduleMappings["jslibcss"]);
        for (var c = 0; c < this._initModules.length; c++) {
            var d = this._initModules[c];
            if (d === "umc") {
                b.push(this._moduleMappings["uxumc"])
            }
            b.push(this._moduleMappings[d])
        }
        actuate.common.web.resource.module.require(b, a)
    },
    _resourcesLoaded: function () {
        this._initialized = true;
        this._running = false;
        if (this._onAfterInit) {
            var a = this;
            self.setTimeout(function () {
                a._onAfterInit()
            }, 0)
        }
    },
    _error: function (a) {
        a = actuate.common.web.util.Utility.createException(a);
        if (this._onError) {
            this._onError(a)
        } else if (a.getErrCode() == 555) {
            alert(a.getDescription())
        } else {
            alert(a)
        }
    },
    isInitialized: function () {
        return this._initialized
    },
    getDefaultBaseUrl: function () {
        return this._baseUrl
    },
    getDefaultRequestOptions: function () {
        return this._requestOptions
    }
};
actuate.common.web.Method = {
    empty: function () {
    }, tryThese: function () {
        var a = null;
        for (var b = 0; b < arguments.length; b++) {
            var c = arguments[b];
            try {
                a = c();
                break
            } catch (d) {
            }
        }
        return a
    }, bind: function (a, b, c) {
        if (c && c.single == true && c.event) {
            var d = function () {
                var e = c.dispatcher;
                if (!e) {
                    e = b
                }
                if (e.unregisterEventHandler) {
                    e.unregisterEventHandler(c.event, d)
                }
                if (a) {
                    return a.apply(b, arguments)
                }
            };
            return d
        }
        return function () {
            if (a) {
                return a.apply(b, arguments)
            }
        }
    }, bindAsEventListener: function (a, b) {
        return function (c) {
            if (a) {
                return a.call(b, c || window.event)
            }
        }
    }, bind2: function (a, b) {
        var c = [];
        for (var d = 2; d < arguments.length; d++) {
            c.push(arguments[d])
        }
        return function () {
            var d = [];
            for (var e = 0; e < c.length; e++) {
                d.push(c[e])
            }
            for (e = 0; e < arguments.length; e++) {
                d.push(arguments[e])
            }
            if (a) {
                return a.apply(b, d)
            }
        }
    }, defer: function (a, b, c, d, e) {
        var f = this.createDelegate(b, c, d, e);
        if (a) {
            return setTimeout(f, a)
        }
        f();
        return 0
    }, createDelegate: function (a, b, c, d) {
        return function () {
            var e = c || arguments;
            if (d === true) {
                e = Array.prototype.slice.call(arguments, 0);
                e = e.concat(c)
            } else if (typeof d == "number") {
                e = Array.prototype.slice.call(arguments, 0);
                var f = [d, 0].concat(c);
                Array.prototype.splice.apply(e, f)
            }
            if (a) {
                return a.apply(b || window, e)
            }
        }
    }, createInterceptor: function (a, b, c) {
        if (typeof b != "function") {
            return a
        }
        return function () {
            b.target = this;
            b.method = a;
            if (b.apply(c || this || window, arguments) === false) {
                return
            }
            if (a) {
                return a.apply(this || window, arguments)
            }
        }
    }, createSequence: function (a, b, c, d) {
        if (typeof c != "function") {
            return a
        }
        return function () {
            var e = a.apply(b || a || window, arguments);
            c.apply(d || a || window, arguments);
            return e
        }
    }, callback: function (a, b, c, d) {
        if (typeof a == "function") {
            if (d) {
                actuate.Method.defer(d, a, b, c || [])
            } else {
                a.apply(b, c || [])
            }
        }
    }, createCallback: function (a) {
        var b = [];
        for (var c = 1; c < arguments.length; c++) {
            b.push(arguments[c])
        }
        var d = a;
        return function () {
            if (d) {
                return d.apply(window, b)
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web");
actuate.common.web.RequestOptions = actuate.common.web.Class.create();
actuate.common.web.RequestOptions.prototype = {
    _customParameters: null, _locale: null, _authID: null, _url: null, initialize: function (a) {
        if (a && a.__getCustomParameters) {
            this._locale = a._locale;
            this._authID = a._authID;
            this._url = a._url;
            this._customParameters = new Object;
            for (var b in a._customParameters) {
                this._customParameters[b] = a._customParameters[b]
            }
        } else {
            this._customParameters = new Object;
            this._locale = null;
            this._authID = null
        }
    }, setCustomParameters: function (a) {
        this._customParameters = a
    }, getAuthId: function () {
        return this._authID
    }, setAuthId: function (a) {
        this._authID = a
    }, getLocale: function () {
        return this._locale
    }, setLocale: function (a) {
        this._assertString(a, "locale");
        this._locale = a
    }, getDefaultURL: function () {
        return this._url
    }, setDefaultURL: function (a) {
        this._url = a
    }, __getCustomParameters: function () {
        return this._customParameters
    }, __getJsessionId: function () {
        var a = null;
        if (actuate.common.web.jsessionId && actuate.common.web.jsessionId != "null") {
            a = actuate.common.web.jsessionId
        }
        return a
    }, __toMap: function () {
        var a = new Object;
        for (var b in this._customParameters) {
            if (b != "jsessionid") {
                a[b] = this._customParameters[b]
            }
        }
        if (this._locale != null) {
            a.locale = this._locale
        }
        return a
    }, _assertString: function (a, b) {
        if (a && typeof a != "string") {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_USAGE, 'Argument "' + b + '" must be a string.')
        }
    }, toString: function () {
        var a = "RequestOptions: ";
        return a
    }
};
actuate.common.web.Package.define("actuate.common.web.core");
actuate.common.web.core.ContentHelper = actuate.common.web.Class.create();
actuate.common.web.core.ContentHelper.prototype = {
    _config: null, _ajaxServlet: "ajax", _progressBar: null, _showprogressBar: true, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        var b = {msg: "", id: null, dlgConfig: []};
        if (this._showprogressBar) {
            this._progressBar = new actuate.common.web.widget.dialog.ProgressDialog(b.id, "", b.msg, b.dlgConfig)
        }
    }, getRequestData: function (a, b, c) {
        var d = actuate.common.web.$.toJSON(b);
        var e = {
            operation: a,
            data: d,
            locale: this.getRequestOptions().getLocale(),
            resultDef: actuate.common.web.$.toJSON(c)
        };
        return e
    }, _contentSendRequestCB: function () {
        if (this._showprogressBar) {
            this._progressBar.close()
        }
        var a = [];
        for (var b = 1; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        if (arguments[0]) {
            arguments[0].apply(this, a)
        }
    }, sendRequest: function (a, b, c, d) {
        var e = this.getRequestOptions();
        if (this._showprogressBar) {
            var f = "";
            if (d && d.msg) {
                f = d.msg
            }
            this._progressBar.render(f)
        }
        var g = actuate.common.web.Method.bind2(this._contentSendRequestCB, this, b);
        var h = actuate.common.web.Method.bind2(this._contentSendRequestCB, this, c);
        var i = new actuate.common.web.core.Request(a, g, h);
        i.setURL(this._getAjaxURL(e));
        i.sendMsg()
    }, download: function (a) {
    }, getRequestOptions: function () {
        return this._config.requestOptions
    }, _getAjaxURL: function (a) {
        var b = a.getDefaultURL();
        var c = b.lastIndexOf("/");
        if (c !== b.length - 1) {
            b = b + "/"
        }
        var d = this.getAjaxServletPath();
        b += d + "?" + actuate.common.web.Version.getVersionParam();
        return b
    }, getAjaxServletPath: function () {
        return "ajax"
    }
};
actuate.common.web.Package.define("actuate.common.web.core");
actuate.common.web.core.Request = actuate.common.web.Class.create();
actuate.common.web.core.Request.prototype = {
    _defaults: {
        url: "ajax",
        cache: false,
        type: "post",
        traditional: true,
        dataType: "json",
        async: true,
        data: {},
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        dataType: "json"
    },
    _requestData: null,
    _successCB: null,
    _errorCB: null,
    _url: null,
    _timeOutHandler: null,
    _httpRquestHandler: null,
    initialize: function (a, b, c) {
        this._requestData = a;
        this._successCB = b;
        this._errorCB = c
    },
    setURL: function (a) {
        this._url = a
    },
    sendMsg: function () {
        this._defaults.success = actuate.common.web.Method.bind(this.success, this);
        this._defaults.error = actuate.common.web.Method.bind(this.error, this);
        this._defaults.complete = actuate.common.web.Method.bind(this.complete, this);
        if (this._url) {
            this._defaults.url = this._url
        }
        var a = {data: this._requestData};
        this._httpRquestHandler = actuate.common.web.plugin.Ajax.sendMsg(this._defaults, a)
    },
    abort: function () {
        if (this._httpRquestHandler) {
            this._httpRquestHandler.abort()
        }
    },
    success: function (a, b, c) {
        if (!a) {
            this.error(c, "Unknown Exception", "Unknown Exception");
            return
        }
        if (a && a.exception) {
            var d = this._createWebException(a.exception);
            this._errorCB(d);
            return
        }
        if (this._successCB) {
            this._successCB(a)
        }
    },
    error: function (a, b, c) {
        var d = actuate.common.web.Exception.ERR_CLIENT;
        var e = b;
        var f = c;
        var g = a.status;
        var h = new actuate.common.web.Exception(d, e, f, g);
        if (this._errorCB) {
            this._errorCB(h);
            return
        }
        throw h
    },
    complete: function () {
    },
    _createWebException: function (a) {
        var b = new actuate.common.web.Exception(a.type, a.msg, a.detail, a.code, a.params);
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.logging");
actuate.common.web.logging.DebugConsole = actuate.common.web.Class.extendClass(actuate.common.web.logging.Logger, {
    initialize: function (a) {
        if (this.__extending) {
            return
        }
        var b = new actuate.common.web.logging.Console;
        actuate.common.web.logging.DebugConsole.superclass.initialize.call(this, a, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.plugin");
(function (a) {
    actuate.common.web.plugin.Ajax = {
        sendMsg: function (b, c) {
            var d = a.extend({}, b, c);
            var e = a.ajax({
                type: d.type,
                async: d.async,
                cache: d.cache,
                timeout: d.timeout,
                url: d.url,
                data: d.data,
                contentType: d.contentType,
                dataType: d.dataType,
                success: d.success,
                complete: d.complete,
                error: d.error
            });
            return e
        }
    }
})(actuate.common.web.jQuery);
(function (a) {
    a.widget("ui.combobox", {
        _create: function () {
            var b, c = this, d = this.element.hide(), e = d.children(":selected"), f = e.val() ? e.text() : "",
                g = this.wrapper = a("<span>").addClass("ui-combobox").insertAfter(d);
            b = a("<input>").appendTo(g).val(f).addClass("ui-state-default ui-combobox-input").autocomplete({
                delay: 0,
                minLength: 0,
                source: function (b, c) {
                    var e = new RegExp(a.ui.autocomplete.escapeRegex(b.term), "i");
                    c(d.children("option").map(function () {
                        var c = a(this).text();
                        if (this.value && (!b.term || e.test(c))) return {
                            label: c.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + a.ui.autocomplete.escapeRegex(b.term) + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>"),
                            value: c,
                            option: this
                        }
                    }))
                },
                select: function (a, b) {
                    b.item.option.selected = true;
                    c._trigger("selected", a, {item: b.item.option})
                },
                change: function (c, e) {
                    if (!e.item) {
                        var f = new RegExp("^" + a.ui.autocomplete.escapeRegex(a(this).val()) + "$", "i"), g = false;
                        d.children("option").each(function () {
                            if (a(this).text().match(f)) {
                                this.selected = g = true;
                                return false
                            }
                        });
                        if (!g) {
                            a(this).val("");
                            d.val("");
                            b.data("autocomplete").term = "";
                            return false
                        }
                    }
                }
            }).addClass("ui-widget ui-widget-content ui-corner-left");
            b.data("autocomplete")._renderItem = function (b, c) {
                return a("<li></li>").data("item.autocomplete", c).append("<a>" + c.label + "</a>").appendTo(b)
            };
            a("<a>").attr("tabIndex", -1).attr("title", "Show All Items").appendTo(g).button({
                icons: {primary: "ui-icon-triangle-1-s"},
                text: false
            }).removeClass("ui-corner-all").addClass("ui-corner-right ui-combobox-toggle").click(function () {
                if (b.autocomplete("widget").is(":visible")) {
                    b.autocomplete("close");
                    return
                }
                a(this).blur();
                b.autocomplete("search", "");
                b.focus()
            })
        }, destroy: function () {
            this.wrapper.remove();
            this.element.show();
            a.Widget.prototype.destroy.call(this)
        }
    })
})(actuate.common.web.jQuery);
actuate.common.web.Package.define("actuate.common.web.resource");
actuate.common.web.resource.module = {
    modules: new Object, define: function (a, b) {
        if (this.modules[a]) {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_CLIENT, 'Module "' + a + '" already defined')
        }
        actuate.common.web.Package.define(a);
        return this.modules[a] = actuate.common.web.Class.extend(new actuate.common.web.resource.ModuleLoader(a), b)
    }, require: function (a, b, c, d, e) {
        if (a && a.length > 0) {
            var f = new actuate.common.web.resource.ResourceLoader(d || actuate.common.web.Loader.getDefaultBaseUrl(), e || actuate.common.web.Loader.getDefaultRequestOptions(), a);
            f.setOnLoad(b);
            f.setOnError(c);
            f.load()
        }
    }, getResourcesContainerId: function (a) {
        a += ".resourcesContainer";
        return a.replace(/\./g, "_")
    }
};
actuate.common.web.resource.ModuleLoader = actuate.common.web.Class.create();
actuate.common.web.resource.ModuleLoader.prototype = {
    loaded: false,
    _loading: false,
    _licenseFailure: false,
    _sessionTimeout: false,
    _moduleName: null,
    _moduleDependencies: null,
    _jsPath: null,
    _jsFiles: null,
    _cssFiles: null,
    _cssPath: null,
    _htmlResourcesUri: null,
    _publicClasses: null,
    _onAfterHtmlResourcesLoaded: null,
    _onLoad: null,
    _packageLoaded: false,
    _htmlLoaded: true,
    _localizedStringLoaded: false,
    _container: null,
    initialize: function (a) {
        this._moduleName = a;
        this._exceptionClosure = actuate.common.web.Method.bind(this._exception, this)
    },
    getModuleName: function () {
        return this._moduleName
    },
    getModuleDependencies: function () {
        return this._moduleDependencies
    },
    load: function (a, b, c) {
        var d = this;
        this._exceptionHandler = c;
        this._baseUrl = actuate.common.web.util.Utility.makeAbsoluteUrl(a);
        this._requestOptions = b;
        if (this.loaded || this._loading) {
            return
        }
        actuate.common.web.util.Logging.log("loading..." + a);
        this._loading = true;
        if (this._localizedString) {
            this._loadLocalizedString(function () {
                actuate.common.web.util.Logging.log("localized resource is now loaded...");
                d._localizedStringLoaded = true
            })
        } else {
            actuate.common.web.util.Logging.log("localize string is not set...");
            this._localizedStringLoaded = true
        }
        if (this._cssFiles != null && this._cssFiles.length > 0) {
            this._loadCss(this._cssPath, this._cssFiles)
        }
        if (this._jsFiles && this._jsFiles.length > 0) {
            this._loadScripts(function () {
                d._packageLoaded = true
            })
        } else {
            this._packageLoaded = true
        }
        this.timerInterval = window.setInterval(function () {
            d._rendezvous()
        }, 10)
    },
    _rendezvous: function () {
        if (this._licenseFailure == true || this._sessionTimeout == true) {
            clearInterval(this.timerInterval);
            this._loading = false;
            return
        }
        if (this._packageLoaded == true && this._localizedStringLoaded == true) {
            clearInterval(this.timerInterval);
            this._loading = false;
            actuate.common.web.util.Logging.log("All resources are loaded...");
            if (this._onLoad) {
                this._onLoad()
            }
            this.loaded = true
        }
    },
    _loadCss: function (a, b) {
        if (a && a.charAt(a.length - 1) != "/") {
            a += "/"
        }
        for (var c = 0; c < b.length; c++) {
            actuate.common.web.util.Style.addExternalStyleSheet(this._baseUrl + a + b[c])
        }
    },
    _loadLocalizedString: function (a) {
        var b = this._requestOptions.getLocale();
        if (!b) {
            b = this._requestOptions._customParameters["__locale"]
        }
        var c = this._localizedStringServlet;
        var d = c;
        if (this._requestOptions && this._requestOptions.__getJsessionId()) {
            d += ";" + "jsessionid=" + this._requestOptions.__getJsessionId()
        }
        d += "?__localizedstrings=module::" + this._moduleName + "&__locale=" + (b ? b : "");
        actuate.common.web.resource.Script.loadScripts(this._baseUrl, d, a)
    },
    _loadScripts: function (a) {
        var b = new Array;
        for (var c = 0; c < this._jsFiles.length; c++) {
            b.push(this._jsFiles[c])
        }
        var d = this._baseUrl + (this._jsPath && this._jsPath != "" ? this._jsPath + "/" : "");
        var e = this;
        actuate.common.web.resource.Script.loadScripts(d, b, function f(b) {
            var c = b.failedUrls;
            if (c && c.length > 0) {
                e._throwFailedUrls(c)
            } else {
                a()
            }
        })
    },
    _throwFailedUrls: function _throwFailedUrls(a) {
        var b = "Failed to load the following files:";
        for (var c = 0; c < a.length; c++) {
            b += "\n" + a[c]
        }
        this._exception(new actuate.common.web.Exception(a, actuate.common.web.Exception.ERR_CLIENT, b))
    },
    _exception: function (a) {
        a = actuate.common.web.util.Utility.createException(a);
        if (a.getErrCode() == 555) {
            this._licenseFailure = true
        } else if (a.getErrCode() == 556) {
            this._sessionTimeout = true
        }
        if (this._exceptionHandler) {
            this._exceptionHandler(a)
        } else {
            throw a
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.resource");
actuate.common.web.resource.ResourceLoader = actuate.common.web.Class.create();
actuate.common.web.resource.ResourceLoader.prototype = {
    _onLoad: null,
    _onError: null,
    _baseUrl: null,
    _requestOptions: null,
    _exceptionClosure: null,
    _requestedModuleNames: null,
    _requestedFeatures: null,
    initialize: function (a, b, c, d) {
        this._baseUrl = a;
        this._requestOptions = b;
        this._onLoad = null;
        this._onError = null;
        this._requestedModuleNames = c;
        this._requestedFeatures = d;
        this._exceptionClosure = actuate.common.web.Method.bind(this._exception, this)
    },
    setOnLoad: function (a) {
        this._onLoad = a
    },
    setOnError: function (a) {
        this._onError = a
    },
    load: function () {
        if (this._requestedModuleNames) {
            for (var a = 0; a < this._requestedModuleNames.length; a++) {
                var b = actuate.common.web.resource.module.modules[this._requestedModuleNames[a]];
                b.load(this._baseUrl, this._requestOptions, this._exceptionClosure)
            }
        }
        var c = this;
        this.timerInterval = window.setInterval(function () {
            c._rendezvous()
        }, 10)
    },
    _rendezvous: function () {
        for (var a = 0; a < this._requestedModuleNames.length; a++) {
            var b = actuate.common.web.resource.module.modules[this._requestedModuleNames[a]];
            if (!b.loaded) {
                return
            }
        }
        clearInterval(this.timerInterval);
        if (this._onLoad) {
            window.setTimeout(this._onLoad, 0)
        }
    },
    _exception: function (a) {
        a = actuate.common.web.util.Utility.createException(a);
        if (this._onError) {
            return this._onError(a)
        } else {
            throw a
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.resource");
actuate.common.web.resource.ScriptLoader = actuate.common.web.Class.create();
actuate.common.web.resource.ScriptLoader.prototype = {
    _headElement: null,
    onLoad: null,
    onError: null,
    basePath: null,
    _urlList: null,
    _currentUrl: null,
    _loadedClosure: null,
    _errorClosure: null,
    _finishClosure: null,
    _charset: "utf-8",
    _cleanUpScripts: true,
    _scriptTagsList: null,
    failedUrls: null,
    _busy: false,
    initialize: function () {
        this._headElement = document.getElementsByTagName("head")[0];
        this._loadedClosure = actuate.common.web.Method.bindAsEventListener(this._loaded, this);
        this._errorClosure = actuate.common.web.Method.bindAsEventListener(this._error, this);
        this._finishClosure = actuate.common.web.Method.bindAsEventListener(this._finish, this);
        this.failedUrls = new Array;
        this._scriptTagsList = new Array;
        this._busy = false;
        this._urlList = new Array
    },
    loadScripts: function (a) {
        this._urlList = this._urlList.concat(a);
        if (this._busy) {
            return
        }
        this._busy = true;
        this._next()
    },
    _next: function () {
        if (this._urlList.length > 0) {
            var a = this._urlList.shift();
            if (this.basePath && this.basePath != "") {
                a = this.basePath + a
            }
            a = actuate.common.web.util.Utility.makeAbsoluteUrl(a);
            this._currentUrl = a;
            if (a.indexOf("?") > -1) {
                this._loadScript(a + "&" + actuate.common.web.Version.getVersionParam())
            } else {
                this._loadScript(a + "?" + actuate.common.web.Version.getVersionParam())
            }
        } else {
            self.setTimeout(this._finishClosure, 0)
        }
    },
    _finish: function () {
        if (this._cleanUpScripts) {
            while (this._scriptTagsList.length > 0) {
                var a = this._scriptTagsList.pop();
                if (a.parentNode) {
                    a.parentNode.removeChild(a)
                }
            }
        }
        this._urlList = null;
        this._busy = false;
        if (this.onLoad) {
            this.onLoad(this)
        }
    },
    _error: function (a) {
        this.failedUrls.unshift(this._currentUrl);
        var b = false;
        if (this.onError) {
            b = !this.onError(this._currentUrl)
        }
        if (!b) {
            this._next()
        }
    }
};
actuate.common.web.resource.GenericScriptLoader = actuate.common.web.Class.create();
actuate.common.web.resource.GenericScriptLoader.prototype = actuate.common.web.Class.extend(new actuate.common.web.resource.ScriptLoader, {
    _currentScript: null,
    initialize: function () {
        actuate.common.web.resource.ScriptLoader.prototype.initialize.call(this)
    },
    _loadScript: function (a) {
        this._currentScript = document.createElement("script");
        this._currentScript.setAttribute("type", "text/javascript");
        this._currentScript.setAttribute("src", a);
        this._currentScript.setAttribute("charset", this._charset);
        actuate.common.web.util.Event.observe(this._currentScript, "load", this._loadedClosure);
        actuate.common.web.util.Event.observe(this._currentScript, "error", this._errorClosure);
        this._headElement.appendChild(this._currentScript);
        this._scriptTagsList.push(this._currentScript)
    },
    _loaded: function () {
        actuate.common.web.util.Event.stopObserving(this._currentScript, "load", this._loadedClosure);
        actuate.common.web.util.Event.stopObserving(this._currentScript, "error", this._errorClosure);
        this._next()
    }
});
actuate.common.web.resource.IEScriptLoader = actuate.common.web.Class.create();
actuate.common.web.resource.IEScriptLoader.prototype = actuate.common.web.Class.extend(new actuate.common.web.resource.ScriptLoader, {
    _currentScript: null,
    initialize: function () {
        actuate.common.web.resource.ScriptLoader.prototype.initialize.call(this)
    },
    _loadScript: function (a) {
        this._currentScript = document.createElement("script");
        this._currentScript.setAttribute("type", "text/javascript");
        this._currentScript.setAttribute("src", a);
        this._currentScript.setAttribute("charset", this._charset);
        actuate.common.web.util.Event.observe(this._currentScript, "readystatechange", this._loadedClosure);
        this._headElement.appendChild(this._currentScript);
        this._scriptTagsList.push(this._currentScript)
    },
    _loaded: function () {
        if (this._currentScript.readyState == "complete" || this._currentScript.readyState == "loaded") {
            actuate.common.web.util.Event.stopObserving(this._currentScript, "readystatechange", this._loadedClosure);
            this._next()
        }
    }
});
actuate.common.web.resource.Script = {
    _getScriptLoader: function () {
        var a;
        if (navigator.userAgent.toLowerCase().indexOf("msie") > -1) {
            a = new actuate.common.web.resource.IEScriptLoader
        } else {
            a = new actuate.common.web.resource.GenericScriptLoader
        }
        return a
    }, loadScripts: function (a, b, c, d) {
        var e = this._getScriptLoader();
        e.onLoad = c;
        if (d != null) {
            e.onError = d
        }
        e.basePath = a;
        e.loadScripts(b)
    }
};
!function (a) {
    "use strict";
    var b = function (b, c) {
        this.$element = a(b);
        this.options = a.extend({}, a.fn.collapse.defaults, c);
        if (this.options.parent) {
            this.$parent = a(this.options.parent)
        }
        this.options.toggle && this.toggle()
    };
    b.prototype = {
        constructor: b, dimension: function () {
            var a = this.$element.hasClass("width");
            return a ? "width" : "height"
        }, show: function () {
            var b, c, d, e;
            if (this.transitioning) return;
            b = this.dimension();
            c = a.camelCase(["scroll", b].join("-"));
            d = this.$parent && this.$parent.find("> .accordion-group > .in");
            if (d && d.length) {
                e = d.data("collapse");
                if (e && e.transitioning) return;
                d.collapse("hide");
                e || d.data("collapse", null)
            }
            this.$element[b](0);
            this.transition("addClass", a.Event("show"), "shown");
            a.support.transition && this.$element[b](this.$element[0][c])
        }, hide: function () {
            var b;
            if (this.transitioning) return;
            b = this.dimension();
            this.reset(this.$element[b]());
            this.transition("removeClass", a.Event("hide"), "hidden");
            this.$element[b](0)
        }, reset: function (a) {
            var b = this.dimension();
            this.$element.removeClass("collapse")[b](a || "auto")[0].offsetWidth;
            this.$element[a !== null ? "addClass" : "removeClass"]("collapse");
            return this
        }, transition: function (b, c, d) {
            var e = this, f = function () {
                if (c.type == "show") e.reset();
                e.transitioning = 0;
                e.$element.trigger(d)
            };
            this.$element.trigger(c);
            if (c.isDefaultPrevented()) return;
            this.transitioning = 1;
            this.$element[b]("in");
            a.support.transition && this.$element.hasClass("collapse") ? this.$element.one(a.support.transition.end, f) : f()
        }, toggle: function () {
            this[this.$element.hasClass("in") ? "hide" : "show"]()
        }
    };
    a.fn.collapse = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("collapse"), f = typeof c == "object" && c;
            if (!e) d.data("collapse", e = new b(this, f));
            if (typeof c == "string") e[c]()
        })
    };
    a.fn.collapse.defaults = {toggle: true};
    a.fn.collapse.Constructor = b;
    a.fn.collapse.acSetEventListeners = function () {
        var b = function (a) {
            a("body").off("click.ac.collapse.data-api")
        };
        var c = function (a) {
            a("body").on("click.ac.collapse.data-api", "[data-toggle=collapse]", function (b) {
                var c = a(this), d,
                    e = c.attr("data-target") || b.preventDefault() || (d = c.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, ""),
                    f = a(e).data("collapse") ? "toggle" : c.data();
                c[a(e).hasClass("in") ? "addClass" : "removeClass"]("collapsed");
                a(e).collapse(f)
            })
        };
        if (a._acPrev$) {
            b(a._acPrev$)
        }
        c(a)
    };
    a(function () {
        a.fn.collapse.acSetEventListeners()
    })
}(actuate.common.web.jQuery);
!function (a) {
    function e(b) {
        var c = b.attr("data-target"), d;
        if (!c) {
            c = b.attr("href");
            c = c && /#/.test(c) && c.replace(/.*(?=#[^\s]*$)/, "")
        }
        if (c === "#") {
            c = undefined
        }
        d = a(c);
        d.length || (d = b.parent());
        return d
    }

    function d() {
        e(a(b)).removeClass("open")
    }

    "use strict";
    var b = "[data-toggle=ac_dropdown]", c = function (b) {
        var c = a(b).on("click.ac.dropdown.data-api", this.toggle);
        a("html").on("click.ac.dropdown.data-api", function () {
            c.parent().removeClass("open")
        })
    };
    c.prototype = {
        constructor: c, toggle: function (b) {
            var c = a(this), f, g;
            if (c.is(".disabled, :disabled")) return;
            f = e(c);
            g = f.hasClass("open");
            d();
            if (!g) {
                f.toggleClass("open");
                c.focus()
            }
            return false
        }, keydown: function (b) {
            var c, d, f, g, h, i;
            if (!/(38|40|27)/.test(b.keyCode)) return;
            c = a(this);
            b.preventDefault();
            b.stopPropagation();
            if (c.is(".disabled, :disabled")) return;
            g = e(c);
            h = g.hasClass("open");
            if (!h || h && b.keyCode == 27) return c.click();
            d = a(".ac [role=menu] li:not(.divider) a", g);
            if (!d.length) return;
            i = d.index(d.filter(":focus"));
            if (b.keyCode == 38 && i > 0) i--;
            if (b.keyCode == 40 && i < d.length - 1) i++;
            if (!~i) i = 0;
            d.eq(i).focus()
        }
    };
    a.fn.dropdown = function (b) {
        return this.each(function () {
            var d = a(this), e = d.data("ac_dropdown");
            if (!e) d.data("ac_dropdown", e = new c(this));
            if (typeof b == "string") e[b].call(d)
        })
    };
    a.fn.dropdown.Constructor = c;
    a.fn.dropdown.acSetEventListeners = function () {
        var e = function (a) {
            a("html").off("click.ac.dropdown.data-api");
            a("body").off("click.ac.dropdown");
            a("body").off("click.ac.dropdown.data-api");
            a("body").off("keydown.ac.dropdown.data-api")
        };
        var f = function (a) {
            a("html").on("click.ac.dropdown.data-api touchstart.dropdown.data-api", d);
            a("body").on("click.ac.dropdown touchstart.dropdown.data-api", ".dropdown form", function (a) {
                a.stopPropagation()
            }).on("click.ac.dropdown.data-api touchstart.dropdown.data-api", b, c.prototype.toggle).on("keydown.ac.dropdown.data-api touchstart.dropdown.data-api", b + ", .ac [role=menu]", c.prototype.keydown)
        };
        if (a._acPrev$) {
            e(a._acPrev$)
        }
        f(a)
    };
    a(function () {
        var b = a("html").attr("acdropdownlistener");
        actuate.common.web.util.Logging.log("dropdown::acSetEventListeners:isListenerSet=" + b);
        if (b) {
            return
        }
        a("html").attr("acdropdownlistener", true);
        a.fn.dropdown.acSetEventListeners()
    })
}(actuate.common.web.jQuery);
!function (a) {
    "use strict";
    var b = function (b, c) {
        this.options = c;
        this.$element = a(b).delegate('[data-dismiss="modal"]', "click.dismiss.modal", a.proxy(this.hide, this));
        this.options.remote && this.$element.find(".modal-body").load(this.options.remote)
    };
    b.prototype = {
        constructor: b, toggle: function () {
            return this[!this.isShown ? "show" : "hide"]()
        }, show: function () {
            var b = this, c = a.Event("show");
            this.$element.trigger(c);
            if (this.isShown || c.isDefaultPrevented()) return;
            a("body").addClass("modal-open");
            this.isShown = true;
            this.escape();
            this.backdrop(function () {
                var c = a.support.transition && b.$element.hasClass("fade");
                if (!b.$element.parent().length) {
                    b.$element.appendTo(document.body)
                }
                b.$element.show();
                if (c) {
                    b.$element[0].offsetWidth
                }
                b.$element.addClass("in").attr("aria-hidden", false).focus();
                b.enforceFocus();
                c ? b.$element.one(a.support.transition.end, function () {
                    b.$element.trigger("shown")
                }) : b.$element.trigger("shown")
            })
        }, hide: function (b) {
            b && b.preventDefault();
            var c = this;
            b = a.Event("hide");
            this.$element.trigger(b);
            if (!this.isShown || b.isDefaultPrevented()) return;
            this.isShown = false;
            a("body").removeClass("modal-open");
            this.escape();
            a(document).off("focusin.modal");
            this.$element.removeClass("in").attr("aria-hidden", true);
            a.support.transition && this.$element.hasClass("fade") ? this.hideWithTransition() : this.hideModal()
        }, enforceFocus: function () {
            var b = this;
            a(document).on("focusin.modal", function (a) {
                if (b.$element[0] !== a.target && !b.$element.has(a.target).length) {
                    b.$element.focus()
                }
            })
        }, escape: function () {
            var a = this;
            if (this.isShown && this.options.keyboard) {
                this.$element.on("keyup.dismiss.modal", function (b) {
                    if (b.currentTarget.innerHTML.indexOf("resources/video/iHub3_Highlevelview4_beta.mp4") > -1) {
                        return false
                    }
                    b.which == 27 && a.hide()
                })
            } else if (!this.isShown) {
                this.$element.off("keyup.dismiss.modal")
            }
        }, hideWithTransition: function () {
            var b = this, c = setTimeout(function () {
                b.$element.off(a.support.transition.end);
                b.hideModal()
            }, 500);
            this.$element.one(a.support.transition.end, function () {
                clearTimeout(c);
                b.hideModal()
            })
        }, hideModal: function (a) {
            this.$element.hide().trigger("hidden");
            this.backdrop()
        }, removeBackdrop: function () {
            this.$backdrop.remove();
            this.$backdrop = null
        }, backdrop: function (b) {
            var c = this, d = this.$element.hasClass("fade") ? "fade" : "";
            if (this.isShown && this.options.backdrop) {
                var e = a.support.transition && d;
                this.$backdrop = a('<div class="modal-backdrop ' + d + '" />').appendTo(document.body);
                if (this.options.backdrop != "static") {
                }
                if (e) this.$backdrop[0].offsetWidth;
                this.$backdrop.addClass("in");
                e ? this.$backdrop.one(a.support.transition.end, b) : b()
            } else if (!this.isShown && this.$backdrop) {
                this.$backdrop.removeClass("in");
                a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(a.support.transition.end, a.proxy(this.removeBackdrop, this)) : this.removeBackdrop()
            } else if (b) {
                b()
            }
        }
    };
    a.fn.modal = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("modal"),
                f = a.extend({}, a.fn.modal.defaults, d.data(), typeof c == "object" && c);
            if (!e) d.data("modal", e = new b(this, f));
            if (typeof c == "string") e[c](); else if (f.show) e.show()
        })
    };
    a.fn.modal.defaults = {backdrop: true, keyboard: true, show: true};
    a.fn.modal.Constructor = b;
    a.fn.modal.acSetEventListeners = function () {
        var b = function (a) {
            a("body").off("click.ac.modal.data-api")
        };
        var c = function (a) {
            a("body").on("click.ac.modal.data-api", '[data-toggle="modal"]', function (b) {
                var c = a(this), d = c.attr("href"),
                    e = a(c.attr("data-target") || d && d.replace(/.*(?=#[^\s]+$)/, "")),
                    f = e.data("modal") ? "toggle" : a.extend({remote: !/#/.test(d) && d}, e.data(), c.data());
                b.preventDefault();
                e.modal(f).one("hide", function () {
                    c.focus()
                })
            })
        };
        if (a._acPrev$) {
            b(a._acPrev$)
        }
        c(a)
    };
    a(function () {
        a.fn.modal.acSetEventListeners()
    })
}(actuate.common.web.jQuery);
!function (a) {
    "use strict";
    var b = function (a, b) {
        this.init("popover", a, b)
    };
    b.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype, {
        constructor: b, setContent: function () {
            var a = this.tip(), b = this.getTitle(), c = this.getContent();
            a.find(".popover-title")[this.options.html ? "html" : "text"](b);
            a.find(".popover-content > *")[this.options.html ? "html" : "text"](c);
            a.removeClass("fade top bottom left right in")
        }, hasContent: function () {
            return this.getTitle() || this.getContent()
        }, getContent: function () {
            var a, b = this.$element, c = this.options;
            a = b.attr("data-content") || (typeof c.content == "function" ? c.content.call(b[0]) : c.content);
            return a
        }, tip: function () {
            if (!this.$tip) {
                this.$tip = a(this.options.template)
            }
            return this.$tip
        }, destroy: function () {
            this.hide().$element.off("." + this.type).removeData(this.type)
        }
    });
    a.fn.popover = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("popover"), f = typeof c == "object" && c;
            if (!e) d.data("popover", e = new b(this, f));
            if (typeof c == "string") e[c]()
        })
    };
    a.fn.popover.Constructor = b;
    a.fn.popover.defaults = a.extend({}, a.fn.tooltip.defaults, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'
    })
}(actuate.common.web.jQuery);
!function (a) {
    "use strict";
    var b = function (b) {
        this.element = a(b)
    };
    b.prototype = {
        constructor: b, show: function () {
            var b = this.element, c = b.closest("ul:not(.dropdown-menu)"), d = b.attr("data-target"), e, f, g;
            if (!d) {
                d = b.attr("href");
                d = d && d.replace(/.*(?=#[^\s]*$)/, "")
            }
            if (b.parent("li").hasClass("active")) return;
            e = c.find(".active a").last()[0];
            g = a.Event("show", {relatedTarget: e});
            b.trigger(g);
            if (g.isDefaultPrevented()) return;
            f = a(d);
            this.activate(b.parent("li"), c);
            this.activate(f, f.parent(), function () {
                b.trigger({type: "shown", relatedTarget: e})
            })
        }, activate: function (b, c, d
        ) {
            function g() {
                e.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
                b.addClass("active");
                if (f) {
                    b[0].offsetWidth;
                    b.addClass("in")
                } else {
                    b.removeClass("fade")
                }
                if (b.parent(".dropdown-menu")) {
                    b.closest("li.dropdown").addClass("active")
                }
                d && d()
            }

            var e = c.find("> .active"), f = d && a.support.transition && e.hasClass("fade");
            f ? e.one(a.support.transition.end, g) : g();
            e.removeClass("in")
        }
    };
    a.fn.tab = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("tab");
            if (!e) d.data("tab", e = new b(this));
            if (typeof c == "string") e[c]()
        })
    };
    a.fn.tab.Constructor = b;
    a.fn.tab.acSetEventListeners = function () {
        var b = function (a) {
            a("body").off("click.ac.tab.data-api")
        };
        var c = function (a) {
            a("body").on("click.ac.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function (b) {
                b.preventDefault();
                a(this).tab("show")
            })
        };
        if (a._acPrev$) {
            b(a._acPrev$)
        }
        c(a)
    };
    a(function () {
        a.fn.tab.acSetEventListeners()
    })
}(actuate.common.web.jQuery);
!function (a) {
    "use strict";
    var b = function (a, b) {
        this.init("tooltip", a, b)
    };
    b.prototype = {
        constructor: b, init: function (b, c, d) {
            var e, f;
            this.type = b;
            this.$element = a(c);
            this.options = this.getOptions(d);
            this.enabled = true;
            if (this.options.trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this))
            } else if (this.options.trigger != "manual") {
                e = this.options.trigger == "hover" ? "mouseenter" : "focus";
                f = this.options.trigger == "hover" ? "mouseleave" : "blur";
                this.$element.on(e + "." + this.type, this.options.selector, a.proxy(this.enter, this));
                this.$element.on(f + "." + this.type, this.options.selector, a.proxy(this.leave, this))
            }
            this.options.selector ? this._options = a.extend({}, this.options, {
                trigger: "manual",
                selector: ""
            }) : this.fixTitle()
        }, getOptions: function (b) {
            b = a.extend({}, a.fn[this.type].defaults, b, this.$element.data());
            if (b.delay && typeof b.delay == "number") {
                b.delay = {show: b.delay, hide: b.delay}
            }
            return b
        }, enter: function (b) {
            var c = a(b.currentTarget)[this.type](this._options).data(this.type);
            if (!c.options.delay || !c.options.delay.show) return c.show();
            clearTimeout(this.timeout);
            c.hoverState = "in";
            this.timeout = setTimeout(function () {
                if (c.hoverState == "in") c.show()
            }, c.options.delay.show)
        }, leave: function (b) {
            var c = a(b.currentTarget)[this.type](this._options).data(this.type);
            if (this.timeout) clearTimeout(this.timeout);
            if (!c.options.delay || !c.options.delay.hide) return c.hide();
            c.hoverState = "out";
            this.timeout = setTimeout(function () {
                if (c.hoverState == "out") c.hide()
            }, c.options.delay.hide)
        }, show: function () {
            var a, b, c, d, e, f, g;
            if (this.hasContent() && this.enabled) {
                a = this.tip();
                this.setContent();
                if (this.options.animation) {
                    a.addClass("fade")
                }
                f = typeof this.options.placement == "function" ? this.options.placement.call(this, a[0], this.$element[0]) : this.options.placement;
                b = /in/.test(f);
                a.remove().css({top: 0, left: 0, display: "block"}).appendTo(b ? this.$element : document.body);
                c = this.getPosition(b);
                d = a[0].offsetWidth;
                e = a[0].offsetHeight;
                switch (b ? f.split(" ")[1] : f) {
                    case"bottom":
                        g = {top: c.top + c.height, left: c.left + c.width / 2 - d / 2};
                        break;
                    case"top":
                        g = {top: c.top - e, left: c.left + c.width / 2 - d / 2};
                        break;
                    case"left":
                        g = {top: c.top + c.height / 2 - e / 2, left: c.left - d};
                        break;
                    case"right":
                        g = {top: c.top + c.height / 2 - e / 2, left: c.left + c.width};
                        break
                }
                a.css(g).addClass(f).addClass("in")
            }
        }, setContent: function () {
            var a = this.tip(), b = this.getTitle();
            a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b);
            a.removeClass("fade in top bottom left right")
        }, hide: function () {
            function d() {
                var b = setTimeout(function () {
                    c.off(a.support.transition.end).remove()
                }, 500);
                c.one(a.support.transition.end, function () {
                    clearTimeout(b);
                    c.remove()
                })
            }

            var b = this, c = this.tip();
            c.removeClass("in");
            a.support.transition && this.$tip.hasClass("fade") ? d() : c.remove();
            return this
        }, fixTitle: function () {
            var a = this.$element;
            if (a.attr("title") || typeof a.attr("data-original-title") != "string") {
                a.attr("data-original-title", a.attr("title") || "").removeAttr("title")
            }
        }, hasContent: function () {
            return this.getTitle()
        }, getPosition: function (b) {
            return a.extend({}, b ? {top: 0, left: 0} : this.$element.offset(), {
                width: this.$element[0].offsetWidth,
                height: this.$element[0].offsetHeight
            })
        }, getTitle: function () {
            var a, b = this.$element, c = this.options;
            a = b.attr("data-original-title") || (typeof c.title == "function" ? c.title.call(b[0]) : c.title);
            return a
        }, tip: function () {
            return this.$tip = this.$tip || a(this.options.template)
        }, validate: function () {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null
            }
        }, enable: function () {
            this.enabled = true
        }, disable: function () {
            this.enabled = false
        }, toggleEnabled: function () {
            this.enabled = !this.enabled
        }, toggle: function () {
            this[this.tip().hasClass("in") ? "hide" : "show"]()
        }, destroy: function () {
            this.hide().$element.off("." + this.type).removeData(this.type)
        }
    };
    a.fn.tooltip = function (c) {
        return this.each(function () {
            var d = a(this), e = d.data("tooltip"), f = typeof c == "object" && c;
            if (!e) d.data("tooltip", e = new b(this, f));
            if (typeof c == "string") e[c]()
        })
    };
    a.fn.tooltip.Constructor = b;
    a.fn.tooltip.defaults = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover",
        title: "",
        delay: 0,
        html: true
    }
}(actuate.common.web.jQuery);
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    observers: false,
    element: function (a) {
        var b = a.target || a.srcElement;
        if (a.touches && a.touches.length == 1) {
            b = a.touches[0].target
        }
        return b
    },
    findElement: function (a, b) {
        var c = a.target || a.srcElement;
        if (a.touches && a.touches.length == 1) {
            c = a.touches[0].target
        }
        while (c && c.className != b) {
            c = c.parentNode
        }
        return c
    },
    isLeftClick: function (a) {
        if (a.touches) {
            return true
        }
        return a.which && a.which == 1 || a.button && a.button == 1
    },
    pointer: function (a) {
        if (a.touches) {
            var b = a.touches[0];
            return {x: b.pageX, y: b.pageY}
        }
        var c = document.documentElement, d = document.body || {scrollLeft: 0, scrollTop: 0};
        return {
            x: a.pageX || a.clientX + (c.scrollLeft || d.scrollLeft) - (c.clientLeft || 0),
            y: a.pageY || a.clientY + (c.scrollTop || d.scrollTop) - (c.clientTop || 0)
        }
    },
    pointerX: function (a) {
        if (a.touches) {
            var b = a.touches[0];
            if (b && b.pageX) {
                return b.pageX
            }
        }
        return a.pageX || a.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft)
    },
    pointerY: function (a) {
        if (a.touches) {
            var b = a.touches[0];
            return b.pageY
        }
        return a.pageY || a.clientY + (document.documentElement.scrollTop || document.body.scrollTop)
    },
    stop: function (a) {
        if (a.type == "touchstart" && a.touches && a.touches.length > 1) {
            return
        }
        if (a.preventDefault) {
            a.preventDefault();
            a.stopPropagation()
        } else {
            a.returnValue = false;
            a.cancelBubble = true
        }
    },
    _observeAndCache: function (a, b, c, d) {
        a = this.getDom(a);
        if (!this.observers) {
            this.observers = []
        }
        if (navigator) {
            var e = navigator.userAgent;
            if (e && e.toLowerCase().indexOf("msie") >= 0) {
                this.stopObserving(a, b, c)
            }
        }
        if (a.addEventListener) {
            this.observers.push([a, b, c, d]);
            a.addEventListener(b, c, d)
        } else if (a.attachEvent) {
            this.observers.push([a, b, c, d]);
            a.attachEvent("on" + b, c)
        }
    },
    unloadCache: function () {
        if (!actuate.common.web.util.Event.observers) {
            return
        }
        for (var a = 0; a < actuate.common.web.util.Event.observers.length; a++) {
            actuate.common.web.util.Event.stopObserving.apply(this, actuate.common.web.util.Event.observers[a]);
            actuate.common.web.util.Event.observers[a][0] = null
        }
        actuate.common.web.util.Event.observers = false
    },
    observe: function (a, b, c, d) {
        if (a) {
            a = this.getDom(a);
            d = d || false;
            this._observeAndCache(a, b, c, d)
        }
    },
    stopObserving: function (a, b, c, d) {
        if (a) {
            d = d || false;
            if (a.removeEventListener) {
                a.removeEventListener(b, c, d)
            } else if (a.detachEvent) {
                a.detachEvent("on" + b, c)
            }
        }
    },
    getDom: function (a) {
        if (!a || !document) {
            return null
        }
        return a.dom ? a.dom : typeof a == "string" ? document.getElementById(a) : a
    }
};
actuate.common.web.util.Event.observe(window, "unload", actuate.common.web.util.Event.unloadCache, false);
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Logging = {
    _CONSOLE_LOGGING: "console",
    _isLoggingOn: false,
    _loggingType: null,
    log: function (a) {
        if (this._isLoggingOn) {
            var b = this._getLogger();
            b.log(a)
        }
    },
    setLogging: function (a) {
        this._isLoggingOn = a
    },
    setLoggingType: function (a) {
        this._loggingType = a
    },
    _getLogger: function () {
        if (this._loggingType == this._CONSOLE_LOGGING || this._loggingType == null) {
            return new actuate.common.web.util.Logging.Console
        }
        return new actuate.common.web.util.Logging.Console
    }
};
actuate.common.web.util.Logging.Console = actuate.common.web.Class.create();
actuate.common.web.util.Logging.Console.prototype = {
    log: function (a) {
        try {
            if (console) {
                var b = actuate.common.web.$.toJSON(a);
                console.log(b)
            }
        } catch (c) {
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Style = {
    _headElement: null, addStyleSheet: function (a, b) {
        var c = document.createElement("style");
        c.type = "text/css";
        if (b) {
            c.title = b
        }
        if (a) {
            if (c.styleSheet) {
                c.styleSheet.cssText = a
            } else {
                c.appendChild(document.createTextNode(a))
            }
        }
        if (!this._headElement) {
            this._headElement = document.getElementsByTagName("head")[0]
        }
        this._headElement.appendChild(c);
        return c
    }, addExternalStyleSheet: function (a) {
        a = actuate.common.web.util.Utility.makeAbsoluteUrl(a);
        a += "?" + actuate.common.web.Version.getVersionParam();
        var b = document.createElement("link");
        b.rel = "stylesheet";
        b.type = "text/css";
        b.href = a;
        if (!this._headElement) {
            this._headElement = document.getElementsByTagName("head")[0]
        }
        this._headElement.appendChild(b)
    }, findCSSRule: function (a, b, c) {
        if (!a) {
            return
        }
        var d = false;
        var e;
        if (a.cssRules) {
            e = a.cssRules
        } else {
            e = a.rules
        }
        for (var f = 0; f < e.length; f++) {
            d = e[f];
            if (d) {
                if (d.selectorText == b) {
                    if (c) {
                        if (a.deleteRule) {
                            a.deleteRule(f)
                        } else {
                            a.removeRule(f)
                        }
                        return true
                    } else {
                        return d
                    }
                }
            }
        }
    }, getStyleSheet: function (a) {
        if (document.styleSheets) {
            return document.styleSheets[a]
        }
    }, findStyleSheet: function (a) {
        if (document.styleSheets) {
            for (var b = 0; b < document.styleSheets.length; b++) {
                var c = document.styleSheets[b];
                if (c.title == a) {
                    return c
                }
            }
        }
        return null
    }, findFreeStyleSheet: function () {
        if (document.styleSheets) {
            for (var a = 0; a < document.styleSheets.length; a++) {
                var b = document.styleSheets[a];
                if (!b.ownerNode || b.ownerNode.tagName.toLowerCase() == "style") {
                    return b
                }
            }
        }
        return null
    }, deleteCSSRule: function (a, b) {
        return this.getCSSRule(a, b, true)
    }, addCSSRule: function (a, b, c) {
        if (document.styleSheets) {
            if (!a) {
                a = this.findFreeStyleSheet();
                if (!a) {
                    return
                }
            }
            if (a.addRule) {
                a.addRule(b, c ? c : null, 0)
            } else {
                a.insertRule(b + " {" + (c ? c : "") + "}", 0)
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.TimeZoneLocaleUtil = {
    _locales: {
        sq_AL: "Albanian",
        ar_DZ: "Arabic (Algeria)",
        ar_BH: "Arabic (Bahrain)",
        ar_EG: "Arabic (Egypt)",
        ar_IQ: "Arabic (Iraq)",
        ar_JO: "Arabic (Jordan)",
        ar_KW: "Arabic (Kuwait)",
        ar_LB: "Arabic (Lebanon)",
        ar_LY: "Arabic (Libya)",
        ar_MA: "Arabic (Morocco)",
        ar_OM: "Arabic (Oman)",
        ar_QA: "Arabic (Qatar)",
        ar_SA: "Arabic (Saudi Arabia)",
        ar_SY: "Arabic (Syria)",
        ar_TN: "Arabic (Tunisia)",
        ar_AE: "Arabic (U.A.E)",
        ar_YE: "Arabic (Yemen)",
        bg_BG: "Bulgarian",
        zh_HK: "Chinese (Hong Kong SAR)",
        zh_CN: "Chinese (PRC)",
        zh_SG: "Chinese (Singapore)",
        zh_TW: "Chinese (Taiwan)",
        hr_HR: "Croatian",
        cs_CZ: "Czech",
        da_DK: "Danish (Denmark)",
        nl_BE: "Dutch (Belgium)",
        nl_NL: "Dutch (Netherlands)",
        en_AU: "English (Australia)",
        en_BZ: "English (Belize)",
        en_CA: "English (Canada)",
        en_IE: "English (Ireland)",
        en_NZ: "English (New Zealand)",
        en_ZA: "English (South Africa)",
        en_GB: "English (United Kingdom)",
        en_US: "English (United States)",
        et_EE: "Estonian",
        fa_IR: "Farsi",
        fi_FI: "Finnish",
        fr_CA: "French (Canada)",
        fr_FR: "French (France)",
        fr_CH: "French (Switzerland)",
        de_AT: "German (Austria)",
        de_DE: "German (Germany)",
        de_LI: "German (Liechtenstein)",
        de_CH: "German (Switzerland)",
        el_GR: "Greek",
        he_IL: "Hebrew",
        iw_IL: "Hebrew (iw_IL)",
        hu_HU: "Hungarian",
        id_ID: "Indonesian",
        in_ID: "Indonesian (in_ID)",
        it_IT: "Italian (Italy)",
        it_CH: "Italian (Switzerland)",
        ja_JP: "Japanese",
        ko_KR: "Korean",
        lv_LV: "Latvian",
        no_NO: "Norwegian (Bokmal)",
        no_NY: "Norwegian (Nynorsk)",
        pl_PL: "Polish",
        pt_BR: "Portuguese (Brazil)",
        pt_PT: "Portuguese (Portugal)",
        ro_RO: "Romanian",
        ru_RU: "Russian",
        sr_YU: "Serbian (Latin)  (Yugoslavia)",
        sk_SK: "Slovak",
        sl_SI: "Slovenian",
        es_MX: "Spanish (Mexico)",
        es_ES: "Spanish (Spain)",
        sv_FI: "Swedish (Finland)",
        sv_SE: "Swedish (Sweden)",
        th_TH: "Thai",
        tr_TR: "Turkish (Turkey)",
        uk_UA: "Ukrainian (Ukraine)"
    }, _timeZones: {
        "Africa/Abidjan": "Africa/Abidjan",
        "Africa/Accra": "Africa/Accra",
        "Africa/Addis_Ababa": "Africa/Addis Ababa",
        "Africa/Algiers": "Africa/Algiers",
        "Africa/Asmera": "Africa/Asmera",
        "Africa/Bamako": "Africa/Bamako",
        "Africa/Bangui": "Africa/Bangui",
        "Africa/Banjul": "Africa/Banjul",
        "Africa/Bissau": "Africa/Bissau",
        "Africa/Blantyre": "Africa/Blantyre",
        "Africa/Brazzaville": "Africa/Brazzaville",
        "Africa/Bujumbura": "Africa/Bujumbura",
        "Africa/Cairo": "Africa/Cairo",
        "Africa/Casablanca": "Africa/Casablanca",
        "Africa/Ceuta": "Africa/Ceuta",
        "Africa/Conakry": "Africa/Conakry",
        "Africa/Dakar": "Africa/Dakar",
        "Africa/Dar_es_Salaam": "Africa/Dar es Salaam",
        "Africa/Djibouti": "Africa/Djibouti",
        "Africa/Douala": "Africa/Douala",
        "Africa/El_Aaiun": "Africa/El Aaiun",
        "Africa/Freetown": "Africa/Freetown",
        "Africa/Gaborone": "Africa/Gaborone",
        "Africa/Harare": "Africa/Harare",
        "Africa/Johannesburg": "Africa/Johannesburg",
        "Africa/Kampala": "Africa/Kampala",
        "Africa/Khartoum": "Africa/Khartoum",
        "Africa/Kigali": "Africa/Kigali",
        "Africa/Kinshasa": "Africa/Kinshasa",
        "Africa/Lagos": "Africa/Lagos",
        "Africa/Libreville": "Africa/Libreville",
        "Africa/Lome": "Africa/Lome",
        "Africa/Luanda": "Africa/Luanda",
        "Africa/Lubumbashi": "Africa/Lubumbashi",
        "Africa/Lusaka": "Africa/Lusaka",
        "Africa/Malabo": "Africa/Malabo",
        "Africa/Maputo": "Africa/Maputo",
        "Africa/Maseru": "Africa/Maseru",
        "Africa/Mbabane": "Africa/Mbabane",
        "Africa/Mogadishu": "Africa/Mogadishu",
        "Africa/Monrovia": "Africa/Monrovia",
        "Africa/Nairobi": "Africa/Nairobi",
        "Africa/Ndjamena": "Africa/Ndjamena",
        "Africa/Niamey": "Africa/Niamey",
        "Africa/Nouakchott": "Africa/Nouakchott",
        "Africa/Ouagadougou": "Africa/Ouagadougou",
        "Africa/Porto-Novo": "Africa/Porto-Novo",
        "Africa/Sao_Tome": "Africa/Sao Tome",
        "Africa/Timbuktu": "Africa/Timbuktu",
        "Africa/Tripoli": "Africa/Tripoli",
        "Africa/Tunis": "Africa/Tunis",
        "Africa/Windhoek": "Africa/Windhoek",
        "America/Adak": "Americas/Adak",
        "America/Anchorage": "Americas/Anchorage",
        "America/Anguilla": "Americas/Anguilla",
        "America/Antigua": "Americas/Antigua",
        "America/Araguaina": "Americas/Araguaina",
        "America/Aruba": "Americas/Aruba",
        "America/Asuncion": "Americas/Asuncion",
        "America/Atikokan": "Americas/Atikokan",
        "America/Atka": "Americas/Atka",
        "America/Bahia": "Americas/Bahia",
        "America/Barbados": "Americas/Barbados",
        "America/Belem": "Americas/Belem",
        "America/Belize": "Americas/Belize",
        "America/Blanc-Sablon": "Americas/Blanc-Sablon",
        "America/Boa_Vista": "Americas/Boa Vista",
        "America/Bogota": "Americas/Bogota",
        "America/Boise": "Americas/Boise",
        "America/Buenos_Aires": "Americas/Buenos Aires",
        "America/Cambridge_Bay": "Americas/Cambridge Bay",
        "America/Campo_Grande": "Americas/Campo Grande",
        "America/Cancun": "Americas/Cancun",
        "America/Caracas": "Americas/Caracas",
        "America/Catamarca": "Americas/Catamarca",
        "America/Cayenne": "Americas/Cayenne",
        "America/Cayman": "Americas/Cayman",
        "America/Chicago": "Americas/Chicago",
        "America/Chihuahua": "Americas/Chihuahua",
        "America/ComodRivadavia": "Americas/ComodRivadavia",
        "America/Coral_Harbour": "Americas/Coral Harbour",
        "America/Cordoba": "Americas/Cordoba",
        "America/Costa_Rica": "Americas/Costa Rica",
        "America/Cuiaba": "Americas/Cuiaba",
        "America/Curacao": "Americas/Curacao",
        "America/Danmarkshavn": "Americas/Danmarkshavn",
        "America/Dawson": "Americas/Dawson",
        "America/Dawson_Creek": "Americas/Dawson Creek",
        "America/Denver": "Americas/Denver",
        "America/Detroit": "Americas/Detroit",
        "America/Dominica": "Americas/Dominica",
        "America/Edmonton": "Americas/Edmonton",
        "America/Eirunepe": "Americas/Eirunepe",
        "America/El_Salvador": "Americas/El Salvador",
        "America/Ensenada": "Americas/Ensenada",
        "America/Fort_Wayne": "Americas/Fort Wayne",
        "America/Fortaleza": "Americas/Fortaleza",
        "America/Glace_Bay": "Americas/Glace Bay",
        "America/Godthab": "Americas/Godthab",
        "America/Goose_Bay": "Americas/Goose Bay",
        "America/Grand_Turk": "Americas/Grand Turk",
        "America/Grenada": "Americas/Grenada",
        "America/Guadeloupe": "Americas/Guadeloupe",
        "America/Guatemala": "Americas/Guatemala",
        "America/Guayaquil": "Americas/Guayaquil",
        "America/Guyana": "Americas/Guyana",
        "America/Halifax": "Americas/Halifax",
        "America/Havana": "Americas/Havana",
        "America/Hermosillo": "Americas/Hermosillo",
        "America/Indianapolis": "Americas/Indianapolis",
        "America/Inuvik": "Americas/Inuvik",
        "America/Iqaluit": "Americas/Iqaluit",
        "America/Jamaica": "Americas/Jamaica",
        "America/Jujuy": "Americas/Jujuy",
        "America/Juneau": "Americas/Juneau",
        "America/Knox_IN": "Americas/Knox IN",
        "America/La_Paz": "Americas/La Paz",
        "America/La_Rioja": "Americas/La Rioja",
        "America/Lima": "Americas/Lima",
        "America/Los_Angeles": "Americas/Los Angeles",
        "America/Louisville": "Americas/Louisville",
        "America/Maceio": "Americas/Maceio",
        "America/Managua": "Americas/Managua",
        "America/Manaus": "Americas/Manaus",
        "America/Marengo": "Americas/Marengo",
        "America/Martinique": "Americas/Martinique",
        "America/Mazatlan": "Americas/Mazatlan",
        "America/Mendoza": "Americas/Mendoza",
        "America/Menominee": "Americas/Menominee",
        "America/Merida": "Americas/Merida",
        "America/Mexico_City": "Americas/Mexico City",
        "America/Miquelon": "Americas/Miquelon",
        "America/Moncton": "Americas/Moncton",
        "America/Monterrey": "Americas/Monterrey",
        "America/Montevideo": "Americas/Montevideo",
        "America/Monticello": "Americas/Monticello",
        "America/Montreal": "Americas/Montreal",
        "America/Montserrat": "Americas/Montserrat",
        "America/Nassau": "Americas/Nassau",
        "America/New_Salem": "Americas/New Salem",
        "America/New_York": "Americas/New York",
        "America/Nipigon": "Americas/Nipigon",
        "America/Nome": "Americas/Nome",
        "America/Noronha": "Americas/Noronha",
        "America/Panama": "Americas/Panama",
        "America/Pangnirtung": "Americas/Pangnirtung",
        "America/Paramaribo": "Americas/Paramaribo",
        "America/Petersburg": "Americas/Petersburg",
        "America/Phoenix": "Americas/Phoenix",
        "America/Port-au-Prince": "Americas/Port-au-Prince",
        "America/Port_of_Spain": "Americas/Port of Spain",
        "America/Porto_Acre": "Americas/Porto Acre",
        "America/Porto_Velho": "Americas/Porto Velho",
        "America/Puerto_Rico": "Americas/Puerto Rico",
        "America/Rainy_River": "Americas/Rainy River",
        "America/Rankin_Inlet": "Americas/Rankin Inlet",
        "America/Recife": "Americas/Recife",
        "America/Regina": "Americas/Regina",
        "America/Rio_Branco": "Americas/Rio Branco",
        "America/Rio_Gallegos": "Americas/Rio Gallegos",
        "America/Rosario": "Americas/Rosario",
        "America/San_Juan": "Americas/San Juan",
        "America/Santiago": "Americas/Santiago",
        "America/Santo_Domingo": "Americas/Santo Domingo",
        "America/Sao_Paulo": "Americas/Sao Paulo",
        "America/Scoresbysund": "Americas/Scoresbysund",
        "America/Shiprock": "Americas/Shiprock",
        "America/St_Johns": "Americas/St Johns",
        "America/St_Kitts": "Americas/St Kitts",
        "America/St_Lucia": "Americas/St Lucia",
        "America/St_Thomas": "Americas/St Thomas",
        "America/St_Vincent": "Americas/St Vincent",
        "America/Swift_Current": "Americas/Swift Current",
        "America/Tegucigalpa": "Americas/Tegucigalpa",
        "America/Thule": "Americas/Thule",
        "America/Thunder_Bay": "Americas/Thunder Bay",
        "America/Tijuana": "Americas/Tijuana",
        "America/Toronto": "Americas/Toronto",
        "America/Tortola": "Americas/Tortola",
        "America/Tucuman": "Americas/Tucuman",
        "America/Ushuaia": "Americas/Ushuaia",
        "America/Vancouver": "Americas/Vancouver",
        "America/Vevay": "Americas/Vevay",
        "America/Vincennes": "Americas/Vincennes",
        "America/Virgin": "Americas/Virgin",
        "America/Whitehorse": "Americas/Whitehorse",
        "America/Winnipeg": "Americas/Winnipeg",
        "America/Yakutat": "Americas/Yakutat",
        "America/Yellowknife": "Americas/Yellowknife",
        "Asia/Aden": "Asia/Aden",
        "Asia/Almaty": "Asia/Almaty",
        "Asia/Amman": "Asia/Amman",
        "Asia/Anadyr": "Asia/Anadyr",
        "Asia/Aqtau": "Asia/Aqtau",
        "Asia/Aqtobe": "Asia/Aqtobe",
        "Asia/Ashgabat": "Asia/Ashgabat",
        "Asia/Ashkhabad": "Asia/Ashkhabad",
        "Asia/Baghdad": "Asia/Baghdad",
        "Asia/Bahrain": "Asia/Bahrain",
        "Asia/Baku": "Asia/Baku",
        "Asia/Bangkok": "Asia/Bangkok",
        "Asia/Beirut": "Asia/Beirut",
        "Asia/Bishkek": "Asia/Bishkek",
        "Asia/Brunei": "Asia/Brunei",
        "Asia/Calcutta": "Asia/Calcutta",
        "Asia/Choibalsan": "Asia/Choibalsan",
        "Asia/Chongqing": "Asia/Chongqing",
        "Asia/Chungking": "Asia/Chungking",
        "Asia/Colombo": "Asia/Colombo",
        "Asia/Dacca": "Asia/Dacca",
        "Asia/Damascus": "Asia/Damascus",
        "Asia/Dhaka": "Asia/Dhaka",
        "Asia/Dili": "Asia/Dili",
        "Asia/Dubai": "Asia/Dubai",
        "Asia/Dushanbe": "Asia/Dushanbe",
        "Asia/Gaza": "Asia/Gaza",
        "Asia/Harbin": "Asia/Harbin",
        "Asia/Hong_Kong": "Asia/Hong Kong",
        "Asia/Hovd": "Asia/Hovd",
        "Asia/Irkutsk": "Asia/Irkutsk",
        "Asia/Istanbul": "Asia/Istanbul",
        "Asia/Jakarta": "Asia/Jakarta",
        "Asia/Jayapura": "Asia/Jayapura",
        "Asia/Jerusalem": "Asia/Jerusalem",
        "Asia/Kabul": "Asia/Kabul",
        "Asia/Kamchatka": "Asia/Kamchatka",
        "Asia/Karachi": "Asia/Karachi",
        "Asia/Kashgar": "Asia/Kashgar",
        "Asia/Katmandu": "Asia/Katmandu",
        "Asia/Krasnoyarsk": "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur": "Asia/Kuala Lumpur",
        "Asia/Kuching": "Asia/Kuching",
        "Asia/Kuwait": "Asia/Kuwait",
        "Asia/Macao": "Asia/Macao",
        "Asia/Macau": "Asia/Macau",
        "Asia/Magadan": "Asia/Magadan",
        "Asia/Makassar": "Asia/Makassar",
        "Asia/Manila": "Asia/Manila",
        "Asia/Muscat": "Asia/Muscat",
        "Asia/Nicosia": "Asia/Nicosia",
        "Asia/Novosibirsk": "Asia/Novosibirsk",
        "Asia/Omsk": "Asia/Omsk",
        "Asia/Oral": "Asia/Oral",
        "Asia/Phnom_Penh": "Asia/Phnom Penh",
        "Asia/Pontianak": "Asia/Pontianak",
        "Asia/Pyongyang": "Asia/Pyongyang",
        "Asia/Qatar": "Asia/Qatar",
        "Asia/Qyzylorda": "Asia/Qyzylorda",
        "Asia/Rangoon": "Asia/Rangoon",
        "Asia/Riyadh": "Asia/Riyadh",
        "Asia/Saigon": "Asia/Saigon",
        "Asia/Sakhalin": "Asia/Sakhalin",
        "Asia/Samarkand": "Asia/Samarkand",
        "Asia/Seoul": "Asia/Seoul",
        "Asia/Shanghai": "Asia/Shanghai",
        "Asia/Singapore": "Asia/Singapore",
        "Asia/Taipei": "Asia/Taipei",
        "Asia/Tashkent": "Asia/Tashkent",
        "Asia/Tbilisi": "Asia/Tbilisi",
        "Asia/Tehran": "Asia/Tehran",
        "Asia/Tel_Aviv": "Asia/Tel Aviv",
        "Asia/Thimbu": "Asia/Thimbu",
        "Asia/Thimphu": "Asia/Thimphu",
        "Asia/Tokyo": "Asia/Tokyo",
        "Asia/Ujung_Pandang": "Asia/Ujung Pandang",
        "Asia/Ulaanbaatar": "Asia/Ulaanbaatar",
        "Asia/Ulan_Bator": "Asia/Ulan Bator",
        "Asia/Urumqi": "Asia/Urumqi",
        "Asia/Vientiane": "Asia/Vientiane",
        "Asia/Vladivostok": "Asia/Vladivostok",
        "Asia/Yakutsk": "Asia/Yakutsk",
        "Asia/Yekaterinburg": "Asia/Yekaterinburg",
        "Asia/Yerevan": "Asia/Yerevan",
        "Atlantic/Azores": "Atlantic/Azores",
        "Atlantic/Bermuda": "Atlantic/Bermuda",
        "Atlantic/Canary": "Atlantic/Canary",
        "Atlantic/Cape_Verde": "Atlantic/Cape Verde",
        "Atlantic/Faeroe": "Atlantic/Faeroe",
        "Atlantic/Jan_Mayen": "Atlantic/Jan Mayen",
        "Atlantic/Madeira": "Atlantic/Madeira",
        "Atlantic/Reykjavik": "Atlantic/Reykjavik",
        "Atlantic/South_Georgia": "Atlantic/South Georgia",
        "Atlantic/St_Helena": "Atlantic/St Helena",
        "Atlantic/Stanley": "Atlantic/Stanley",
        "Australia/ACT": "Australia/ACT",
        "Australia/Adelaide": "Australia/Adelaide",
        "Australia/Brisbane": "Australia/Brisbane",
        "Australia/Broken_Hill": "Australia/Broken Hill",
        "Australia/Canberra": "Australia/Canberra",
        "Australia/Currie": "Australia/Currie",
        "Australia/Darwin": "Australia/Darwin",
        "Australia/Hobart": "Australia/Hobart",
        "Australia/LHI": "Australia/LHI",
        "Australia/Lindeman": "Australia/Lindeman",
        "Australia/Lord_Howe": "Australia/Lord Howe",
        "Australia/Melbourne": "Australia/Melbourne",
        "Australia/NSW": "Australia/NSW",
        "Australia/North": "Australia/North",
        "Australia/Perth": "Australia/Perth",
        "Australia/Queensland": "Australia/Queensland",
        "Australia/South": "Australia/South",
        "Australia/Sydney": "Australia/Sydney",
        "Australia/Tasmania": "Australia/Tasmania",
        "Australia/Victoria": "Australia/Victoria",
        "Australia/West": "Australia/West",
        "Australia/Yancowinna": "Australia/Yancowinna",
        "Europe/Amsterdam": "Europe/Amsterdam",
        "Europe/Andorra": "Europe/Andorra",
        "Europe/Athens": "Europe/Athens",
        "Europe/Belfast": "Europe/Belfast",
        "Europe/Belgrade": "Europe/Belgrade",
        "Europe/Berlin": "Europe/Berlin",
        "Europe/Bratislava": "Europe/Bratislava",
        "Europe/Brussels": "Europe/Brussels",
        "Europe/Bucharest": "Europe/Bucharest",
        "Europe/Budapest": "Europe/Budapest",
        "Europe/Chisinau": "Europe/Chisinau",
        "Europe/Copenhagen": "Europe/Copenhagen",
        "Europe/Dublin": "Europe/Dublin",
        "Europe/Gibraltar": "Europe/Gibraltar",
        "Europe/Guernsey": "Europe/Guernsey",
        "Europe/Helsinki": "Europe/Helsinki",
        "Europe/Isle_of_Man": "Europe/Isle of Man",
        "Europe/Istanbul": "Europe/Istanbul",
        "Europe/Jersey": "Europe/Jersey",
        "Europe/Kaliningrad": "Europe/Kaliningrad",
        "Europe/Kiev": "Europe/Kiev",
        "Europe/Lisbon": "Europe/Lisbon",
        "Europe/Ljubljana": "Europe/Ljubljana",
        "Europe/London": "Europe/London",
        "Europe/Luxembourg": "Europe/Luxembourg",
        "Europe/Madrid": "Europe/Madrid",
        "Europe/Malta": "Europe/Malta",
        "Europe/Mariehamn": "Europe/Mariehamn",
        "Europe/Minsk": "Europe/Minsk",
        "Europe/Monaco": "Europe/Monaco",
        "Europe/Moscow": "Europe/Moscow",
        "Europe/Nicosia": "Europe/Nicosia",
        "Europe/Oslo": "Europe/Oslo",
        "Europe/Paris": "Europe/Paris",
        "Europe/Prague": "Europe/Prague",
        "Europe/Riga": "Europe/Riga",
        "Europe/Rome": "Europe/Rome",
        "Europe/Samara": "Europe/Samara",
        "Europe/San_Marino": "Europe/San Marino",
        "Europe/Sarajevo": "Europe/Sarajevo",
        "Europe/Simferopol": "Europe/Simferopol",
        "Europe/Skopje": "Europe/Skopje",
        "Europe/Sofia": "Europe/Sofia",
        "Europe/Stockholm": "Europe/Stockholm",
        "Europe/Tallinn": "Europe/Tallinn",
        "Europe/Tirane": "Europe/Tirane",
        "Europe/Tiraspol": "Europe/Tiraspol",
        "Europe/Uzhgorod": "Europe/Uzhgorod",
        "Europe/Vaduz": "Europe/Vaduz",
        "Europe/Vatican": "Europe/Vatican",
        "Europe/Vienna": "Europe/Vienna",
        "Europe/Vilnius": "Europe/Vilnius",
        "Europe/Volgograd": "Europe/Volgograd",
        "Europe/Warsaw": "Europe/Warsaw",
        "Europe/Zagreb": "Europe/Zagreb",
        "Europe/Zaporozhye": "Europe/Zaporozhye",
        "Europe/Zurich": "Europe/Zurich",
        "Indian/Antananarivo": "Indian/Antananarivo",
        "Indian/Chagos": "Indian/Chagos",
        "Indian/Christmas": "Indian/Christmas",
        "Indian/Cocos": "Indian/Cocos",
        "Indian/Comoro": "Indian/Comoro",
        "Indian/Kerguelen": "Indian/Kerguelen",
        "Indian/Mahe": "Indian/Mahe",
        "Indian/Maldives": "Indian/Maldives",
        "Indian/Mauritius": "Indian/Mauritius",
        "Indian/Mayotte": "Indian/Mayotte",
        "Indian/Reunion": "Indian/Reunion",
        "Pacific/Apia": "Pacific/Apia",
        "Pacific/Auckland": "Pacific/Auckland",
        "Pacific/Chatham": "Pacific/Chatham",
        "Pacific/Easter": "Pacific/Easter",
        "Pacific/Efate": "Pacific/Efate",
        "Pacific/Enderbury": "Pacific/Enderbury",
        "Pacific/Fakaofo": "Pacific/Fakaofo",
        "Pacific/Fiji": "Pacific/Fiji",
        "Pacific/Funafuti": "Pacific/Funafuti",
        "Pacific/Galapagos": "Pacific/Galapagos",
        "Pacific/Gambier": "Pacific/Gambier",
        "Pacific/Guadalcanal": "Pacific/Guadalcanal",
        "Pacific/Guam": "Pacific/Guam",
        "Pacific/Honolulu": "Pacific/Honolulu",
        "Pacific/Johnston": "Pacific/Johnston",
        "Pacific/Kiritimati": "Pacific/Kiritimati",
        "Pacific/Kosrae": "Pacific/Kosrae",
        "Pacific/Kwajalein": "Pacific/Kwajalein",
        "Pacific/Majuro": "Pacific/Majuro",
        "Pacific/Marquesas": "Pacific/Marquesas",
        "Pacific/Midway": "Pacific/Midway",
        "Pacific/Nauru": "Pacific/Nauru",
        "Pacific/Niue": "Pacific/Niue",
        "Pacific/Norfolk": "Pacific/Norfolk",
        "Pacific/Noumea": "Pacific/Noumea",
        "Pacific/Pago_Pago": "Pacific/Pago Pago",
        "Pacific/Palau": "Pacific/Palau",
        "Pacific/Pitcairn": "Pacific/Pitcairn",
        "Pacific/Ponape": "Pacific/Ponape",
        "Pacific/Port_Moresby": "Pacific/Port Moresby",
        "Pacific/Rarotonga": "Pacific/Rarotonga",
        "Pacific/Saipan": "Pacific/Saipan",
        "Pacific/Samoa": "Pacific/Samoa",
        "Pacific/Tahiti": "Pacific/Tahiti",
        "Pacific/Tarawa": "Pacific/Tarawa",
        "Pacific/Tongatapu": "Pacific/Tongatapu",
        "Pacific/Truk": "Pacific/Truk",
        "Pacific/Wake": "Pacific/Wake",
        "Pacific/Wallis": "Pacific/Wallis",
        "Pacific/Yap": "Pacific/Yap"
    }, getTimeZones: function () {
        return this._timeZones
    }, getLocales: function () {
        return this._locales
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Anchor = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _click: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._text = b.text;
        this._click = b.click;
        this._name = b.name;
        delete b.type;
        delete b.text;
        delete b.click;
        delete b.allowblank;
        actuate.common.web.widget.control.Anchor.superclass.initialize.call(this, b)
    },
    _initComponent: function () {
        actuate.common.web.widget.control.Anchor.superclass._initComponent.call(this);
        this.setText(this._text)
    },
    appendTo: function (a) {
        actuate.common.web.widget.control.Anchor.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(actuate.common.web.Method.bind2(this._onClick, this, this._name))
    },
    _onClick: function (a, b) {
        if (this._click) {
            this._click(a)
        }
    },
    setText: function (a) {
        this._text = a;
        this._element.text(this._text)
    },
    setValue: function (a) {
        this._element.attr("value", a);
        this.setText(a)
    },
    _getHTMLTag: function () {
        return "<a href='#'>"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Button = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _click: null,
    _buttonType: null,
    _class: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = {};
        b = actuate.common.web.$.extend({}, b, a);
        this._click = b.click;
        this._buttonType = b.buttonType;
        this._class = a.btnClass;
        delete b.click;
        actuate.common.web.widget.control.Button.superclass.initialize.call(this, b)
    },
    _getHTMLTag: function () {
        var a = "";
        var b = "";
        if (this._buttonType) {
            a = " btn-" + this._buttonType
        }
        if (this._class) {
            b = this._class;
            return '<button type="button" class="' + b + '">' + this.getTitle() + "</button>"
        } else {
            b = "btn " + a
        }
        return '<button type="button" class="' + b + '">' + this.getTitle() + "</button>"
    },
    appendTo: function (a) {
        actuate.common.web.widget.control.Button.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(this._click)
    },
    addListener: function (a, b) {
        if ("click" === a) {
            this._click = b
        } else {
            actuate.common.web.widget.control.Button.superclass.addListener.call(this, arguments)
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.CheckBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        b.type = "checkbox";
        var c = "actuCheckBox";
        if (b.cssClass) {
            c = "actuCheckBox " + b.cssClass
        }
        b.cssClass = c;
        actuate.common.web.widget.control.CheckBox.superclass.initialize.call(this, b)
    }, _getbooleanValue: function (a) {
        var b = true === a || "true" === a || "True" === a ? true : false;
        return b
    }, getValue: function () {
        var a = actuate.common.web.$(this._element).prop("checked");
        a = a ? true : false;
        return a
    }, setValue: function (a) {
        var b = this._getbooleanValue(a);
        actuate.common.web.$(this._element).prop("checked", b)
    }, onSelect: function (a) {
        this._callBack = a
    }, appendTo: function (a) {
        this._curSettings.appendTo = a;
        if (this._curSettings.appendTo) {
            if (this._lblElement) {
                this._lblElement.appendTo(this._curSettings.appendTo)
            }
            this._element.appendTo(this._curSettings.appendTo);
            if (this.getValue()) {
                this._imgCheckBox = actuate.common.web.$("<i name=imgcheckbox_" + this._curSettings.name + ' class="actuImgCheckBoxChecked"></i>')
            } else {
                this._imgCheckBox = actuate.common.web.$("<i name=imgcheckbox_" + this._curSettings.name + ' class="actuImgCheckBoxUnChecked"></i>')
            }
            this._imgCheckBox.click(actuate.common.web.Method.bind(this.onClick, this));
            this._imgCheckBox.appendTo(this._curSettings.appendTo)
        }
    }, onClick: function () {
        if (this._imgCheckBox.hasClass("actuImgCheckBoxUnChecked")) {
            this._imgCheckBox.removeClass("actuImgCheckBoxUnChecked");
            this._imgCheckBox.addClass("actuImgCheckBoxChecked");
            this.setValue(true)
        } else {
            this._imgCheckBox.removeClass("actuImgCheckBoxChecked");
            this._imgCheckBox.addClass("actuImgCheckBoxUnChecked");
            this.setValue(false)
        }
        if (this._callBack) {
            this._callBack(this._curSettings.name)
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.ComboBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _id: null,
    initialize: function (a, b, c) {
        if (this.__extending) return;
        var d = new actuate.common.web.widget.control.ListBox(a);
        d.addToList(b);
        if (c) {
            d.appendTo(c)
        }
        this._id = a.id;
        if (this._id) {
            actuate.common.web.$("#" + this._id).combobox()
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.DatePicker = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        actuate.common.web.widget.control.DatePicker.superclass.initialize.call(this, b)
    }, _initComponent: function () {
        actuate.common.web.widget.control.DatePicker.superclass._initComponent.call(this);
        this.addClass("actuTextField")
    }, appendTo: function (a) {
        actuate.common.web.widget.control.DatePicker.superclass.appendTo.call(this, a);
        var b = this.getID();
        actuate.common.web.$("#" + b).datepicker()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.DropdownButton = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Button, {
    _config: null, _menuItems: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        actuate.common.web.widget.control.DropdownButton.superclass.initialize.call(this, a)
    }, _getCogHeaderTemplate: function () {
        var a = this.getID();
        var b = '<div id="' + a + '" class="ac-filebar-actuate-menu-inner" data-toggle="ac_dropdown">' + '<i class="icon-ygg-cog"></i>' + '<i class="icon-ygg-caret-down ac-filebar-actuate-menu-icon-caret"></i>' + "</div>" + this._addDropDownList();
        return b
    }, _getNormalDropdownTemplate: function () {
        var a = this.getID();
        var b = this
            ._config.customClass ? " " + this._config.customClass : "";
        var c = this._config.display ? this._config.display : this.getTitle();
        var d = '<span><div class="btn-group">' + '<button id="' + a + '" class="btn ' + b + '" data-toggle="ac_dropdown">' + c + '<span class="icon-ygg-caret-down ac-filebar-actuate-menu-icon-caret"></span>' + "</button>" + this._addDropDownList() + "</div></span>";
        return d
    }, _createElement: function () {
        this._curSettings.id = this.getID();
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a);
        var b = this._curSettings.id;
        delete this._curSettings.id;
        this._element.attr(this._curSettings);
        this._curSettings.id = b
    }, getID: function () {
        if (this._curSettings.id) {
            return this._curSettings.id
        }
        return this.getUniqueID()
    }, _getHTMLTag: function (a) {
        var b = "";
        var c = a ? a.type : "none";
        var d = this.getID();
        switch (c) {
            case"none":
                var e = this.getTitle();
                this._templateType = !e ? "cog" : "normal";
                if (this._templateType === "cog") {
                    b += this._getCogHeaderTemplate()
                } else {
                    b += this._getNormalDropdownTemplate()
                }
                break;
            default:
                var f = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
                b = this._anchorHtml(c, f, a)
        }
        return b
    }, _anchorHtml: function (a, b, c) {
        var d = " data-name='" + a + "'";
        var e = "";
        if (c.cls) {
            e = " class='" + c.cls + "'"
        }
        var f = '<a title ="' + c.title + "\" href='#'" + d + e + ' id="' + b + '">';
        if (a != "back") {
            if (c.title) {
                f += " " + c.title
            }
        }
        f += "</a>";
        this._addItemHandler(b, c);
        return f
    }, _attachClickHandler: function () {
        var a = this;
        for (var b in this._menuItems) {
            actuate.common.web.$("#" + b).click(function () {
                a._menuItems[this.id].listener.onItemClick(a)
            })
        }
    }, _addItemHandler: function (a, b) {
        if (!this._menuItems) {
            this._menuItems = {}
        }
        this._menuItems[a] = b
    }, appendTo: function (a) {
        actuate.common.web.widget.control.DropdownButton.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(this._click);
        this._attachClickHandler()
    }, updateMenuItem: function (a) {
        var b = this._menuItems;
        if (b) {
            for (var c in b) {
                var d = b[c];
                if (!d.data || !d.data.name) continue;
                if (d.data.name == a.data.name) {
                    var e = c;
                    var f = actuate.common.web.$("#" + e);
                    f.text(a.title);
                    this.hideMenuItem(e, a.isHidden);
                    break
                }
            }
        }
    }, hideMenuItem: function (a, b) {
        var c = actuate.common.web.$("#" + a);
        var d = c.closest("li");
        if (b) {
            d.removeClass("show").addClass("hide")
        } else {
            d.removeClass("hide")
        }
    }, _addDropDownList: function () {
        var a = this.getID();
        var b = "";
        var c = "wrench" + a;
        if (this._config.items && this._config.items.items) {
            var d = this._config.items.items;
            var e = "dropdown-menu";
            if (this._config.listPosition) {
                if (this._config.listPosition === "left") {
                    e += " pull-right"
                }
            }
            b += '<ul id="' + c + '" class="' + e + '" role="menu" aria-labelledby="' + a + '">';
            for (var f = 0; f < d.length; f++) {
                var g = d[f];
                var h = "submenu" + f + "_" + a;
                var i = "";
                if (g.isHidden) {
                    i = ' class="hide"'
                }
                b += '<li id="' + h + '"' + i + ">";
                b += this._getHTMLTag(g);
                b += "</li>"
            }
            b += "</ul>"
        }
        return b
    }, _createWrenchOptions: function (a, b, c) {
        var d = '<div class="ac_dropdown">';
        var e = {icon: this._iconHtml(a)};
        d += this._wrenchIconHtml(a, b, c, null, null, e);
        d += this._addDropDownList(c);
        d += "</div>";
        return d
    }, _createNameValueAttr: function (a, b) {
        var c = " " + a + "='" + b + "'";
        return c
    }, _wrenchIconHtml: function (a, b, c, d, e, f) {
        var g = this._createNameValueAttr("data-name", b);
        var h = this._createNameValueAttr("role", "button");
        var i = this._createNameValueAttr("data-toggle", "ac_dropdown");
        var j = "";
        if (d) {
            j = " " + d
        }
        j = this._createNameValueAttr("class", "dropdown-toggle wrench td-none" + j);
        var k = "<a " + i + h + g + j + ' id="' + c + '">';
        for (var l in f) {
            k += f[l]
        }
        if (e) {
            k += " " + e
        }
        k += "</a>";
        return k
    }, _iconHtml: function (a) {
        if (!a) return "";
        var b = '<i class="' + a + '"></i>';
        return b
    }, getConfig: function () {
        return this._config
    }, hideDropdownCaret: function (a) {
        var b = this.getID();
        var c = actuate.common.web.$("#" + b);
        var d = "icon-ygg-caret-down";
        var e = c.find("span");
        if (this._templateType === "cog") {
            e = actuate.common.web.$(c.find("i")[1])
        }
        e.removeClass(d);
        if (!a) {
            e.addClass(d)
        }
    }, changeCustomClass: function (a) {
        var b = this.getID();
        if (this._config.customClass) {
            actuate.common.web.$("#" + b).removeClass(this._config.customClass).addClass(a)
        } else {
            actuate.common.web.$("#" + b).addClass(a)
        }
        this._config.customClass = a
    }, getMenuItems: function () {
        return this._menuItems
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.File = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        b.type = "file";
        b.cssClass = "actuFile";
        actuate.common.web.widget.control.File.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.GridUtil = {
    initialize: function () {
    }, generateItem: function (a, b, c, d, e, f, g, h, i, j) {
        var k = j;
        if (!j) {
            var l = {onItemClick: f};
            k = new actuate.common.web.widget.control.GridItemListener(l)
        }
        var m = k.isClickableItem();
        var n = {
            type: a,
            title: b,
            state: e,
            data: {name: c, label: d},
            listener: k,
            cls: g,
            template: h,
            isHidden: i,
            isClickable: m
        };
        return n
    }, getHeaderLabel: function (a) {
        var b = "";
        if (a && a.data) {
            b = a.data.label
        }
        return b
    }
};
actuate.common.web.widget.control.GridUtil.initialize();
actuate.common.web.widget.control.GridItemListener = actuate.common.web.Class.create();
actuate.common.web.widget.control.GridItemListener.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        if (a && a.onItemClick) {
            this._onItemClick = a.onItemClick
        }
    }, isClickableItem: function () {
        if (this._onItemClick) return true;
        return false
    }, onItemClick: function (a, b) {
        if (this._onItemClick) {
            return this._onItemClick.apply(this, arguments)
        }
    }, getIconLabel: function (a, b) {
        return null
    }, toggleIcon: function (a, b, c) {
        if (!b) return;
        var d = c.hasClass(b.active) ? b.deactive : b.active;
        switch (a) {
            case"flag":
            case"star":
            case"startstop":
                c.removeClass(b.deactive + " " + b.active);
                c.addClass(d);
                break;
            default:
                break
        }
        return d
    }
};
actuate.common.web.widget.control.GridItem = actuate.common.web.Class.create();
actuate.common.web.widget.control.GridItem.prototype = {
    _icons: {
        back: {"default": "icon-ygg-back back-icon"},
        flag: {"default": "icon-ygg-flag", active: "icon-ygg-flag", deactive: ""},
        next: {"default": "icon-ygg-chevron-right icon-large icon-no-underline"},
        prev: {"default": "icon-ygg-chevron-left icon-large icon-no-underline"},
        refresh: {"default": "icon-ygg-refresh"},
        search: {"default": "icon-ygg-search"},
        star: {
            "default": "pointer icon-ygg-star",
            active: "pointer icon-ygg-star",
            deactive: "pointer icon-ygg-star-empty"
        },
        startstop: {},
        wrench: {"default": "icon-ygg-caret-down icon-large pointer"},
        file: {"default": "icon-ygg-file-alt"},
        folder: {"default": "icon-ygg-folder-close"},
        volume: {"default": "icon-ygg-volume-add"},
        dot: {"default": "icon-ygg-dot icon-large"},
        check: {"default": "icon-ygg-menu-check icon-large"},
        alert: {"default": "icon-ygg-alert-triangle icon-large"},
        error: {"default": "icon-ygg-alert-triangle icon-large"}
    }, _config: null, _id: null, _handler: null, initialize: function (a) {
        this._config = a;
        this._createElement()
    }, getIconClass: function (a, b) {
        var c = this._icons[a];
        if (!c) return "";
        var d = b === "active" ? "active" : "deactive";
        var e = null;
        switch (a) {
            case"star":
                e = c[d];
                break
        }
        if (!e) e = c["default"];
        return e
    }, appendTo: function (a) {
        if (this._isHidden() === true) return;
        this._element.appendTo(a);
        this._attachClickHandler()
    }, _createElement: function () {
        if (this._isHidden() === true) return;
        var a = this._getHTMLTag(this._config);
        this._element = new actuate.common.web.$(a);
        this._click = actuate.common.web.Method.bind2(this._iconHandler, this, actuate.common.web.Method.bind(this._config.listener.onItemClick, this._config.listener))
    }, _isHidden: function () {
        return this._config.isHidden
    }, _iconHandler: function (a, b) {
        var c = actuate.common.web.$(actuate.common.web.$(b.currentTarget)[0]);
        var d = null;
        var e = null;
        var f = c.attr("data-name");
        var g = c.attr("id");
        if (typeof g === "string" && g.indexOf("selectItemsmask") > 0) {
            var h = c.attr("data-value");
            if (h === "unchecked") {
                h = "checked"
            } else {
                h = "unchecked"
            }
            c.attr("data-value", h)
        }
        if (f === "checkbox") {
            e = actuate.common.web.$(".checkbox-in-btn")
        } else {
            d = c.find("i")
        }
        var i = this._icons[f];
        var j = this._updateIconState(f, i, d, c);
        if (a) {
            var k = {};
            var l = c.attr("id");
            var m = f === "clear" && l.indexOf("searchClear") >= 0 ? true : false;
            if (f === "search" || m) {
                if (m) {
                    var n = l.lastIndexOf("searchClear");
                    if (n !== l.length - 1) {
                        l = l.substr(0, n)
                    }
                }
                var o = l + "searchTxt";
                var p = actuate.common.web.$("#" + o);
                if (m) {
                    p.val("")
                } else {
                    var q = p.val();
                    k.data = q
                }
            } else if (f === "checkbox") {
                var r = c.prop("checked");
                if (r) {
                    c.prop("checked", true)
                } else {
                    c.prop("checked", false)
                }
                e.prop("checked", false);
                j = r ? "checked" : "unchecked";
                k.data = j
            } else if (f === "star") {
                j = d.hasClass(i.active) ? "active" : "deactive";
                k.data = j
            } else if (f == "startstop") {
                var s = this._config.items;
                if (s) {
                    for (var t = 0; t < s.length; t++) {
                        var u = s[t];
                        if (u.type == "startstop") {
                            k.menuState = u.state;
                            break
                        }
                    }
                }
            }
            k.elementId = l;
            k.state = j;
            a(f, b, k)
        }
    }, _updateIconState: function (a, b, c, d) {
        var e = this._config.listener.toggleIcon(a, b, c);
        var f = this._iconHtml(e);
        var g = "active";
        switch (a) {
            case"startstop":
                g = e === b.active ? "active" : "deactive";
                var h = this._config.listener.getIconLabel(a, g);
                if (h) {
                    d[0].innerHTML = h
                }
                break;
            default:
                break
        }
        return g
    }, _getHTMLTag: function (a) {
        var b = a;
        var c = "";
        var d = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var e = true;
        var f = b.template ? b.template : this._getDefaultTemplate(a);
        switch (b.type) {
            case"add":
            case"back":
            case"cancel":
            case"checkbox":
            case"details":
            case"edit":
            case"flag":
            case"next":
            case"prev":
            case"refresh":
            case"save":
            case"search":
            case"selectItems":
            case"star":
            case"startstop":
            case"trash":
            case"wrench":
            case"file":
            case"folder":
            case"volume":
            case"onlineoffline":
            case"setaccess":
            case"dropDownButton":
            case"dot":
            case"check":
            case"alert":
            case"error":
            case"button":
                c = this._generateClickableHTML(d, b.type, b.state, b.cls, b.title, b.data.label);
                break;
            case"pageinfo":
                var g = b.template;
                c = this._pageInfoHtml(b.type, g, b.cls, b.title);
                break;
            default:
                if (b.isClickable) {
                    c = this._generateClickableHTML(d, b.type, b.state, b.cls, b.title)
                } else {
                    e = false;
                    c = this._getTemplate(f, b.data.name, b.data.label, b.title)
                }
                break
        }
        if (e) {
            this._id = d
        }
        return c
    }, _getDefaultHTMLTemplate: function (a, b) {
        var c = this._getTemplate(a, b.data.name, b.data.label, b.title);
        if (b.isClickable) {
            c = this._generateClickableHTML(iconId, b.type, b.state, b.cls, b.title)
        }
        return c
    }, _getDefaultTemplate: function (a) {
        var b = "";
        if (a.cls) {
            b = a.cls
        }
        var c = '<p class="acgridtext ' + b + '"';
        if (b.indexOf("cliptext") !== -1) {
            c += ' title="' + "{value}" + '"'
        }
        c += ' data-name="' + "{data.name}" + '" data-label="' + "{data.label}" + '">' + "{value}" + "</p>";
        return c
    }, _getTemplate: function (a, b, c, d) {
        var e = a.replace(/{data.name}/g, actuate.common.web.util.Utility.escapeHtml(b));
        e = e.replace(/{data.label}/g, actuate.common.web.util.Utility.escapeHtml(c));
        e = e.replace(/{value}/g, actuate.common.web.util.Utility.escapeHtml(d));
        return e
    }, _generateClickableHTML: function (a, b, c, d, e, f) {
        var g = this.getIconClass(b, c);
        var h = this._iconHtml(g, e);
        var i = "";
        switch (b) {
            case"save":
            case"cancel":
            case"button":
            case"refresh":
            case"add":
                i = this._createButtonHtml(b, a, d, e, c, f);
                break;
            case"checkbox":
                i = this._checkboxHtml(b, a, d, e, c);
                break;
            case"search":
                i = this._searchHtml(g, b, a, d, e);
                break;
            case"selectItems":
                i = this._selectItemsHtml(b, a, d, e, c);
                break;
            case"wrench":
                i = this._createWrenchOptions(g, b, a, d, e);
                break;
            case"dropDownButton":
                i = this._createdropDownButtonOptions(g, b, a, d, e, f);
                break;
            case"alert":
            case"error":
                i = this._createAlertErrorHtml(b, a, d, e, {icon: h});
                break;
            case"check":
            case"dot":
                i = this._createDotCheckHtml(b, a, d, e, {icon: h});
                break;
            default:
                i = this._anchorHtml(b, a, d, e, {icon: h});
                break
        }
        return i
    }, _pageInfoHtml: function (a, b, c, d) {
        var e = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var f = "<li>";
        var g = this.getIconClass("prev", "active");
        var h = this._iconHtml(g);
        f += this._anchorHtml("prev", e + "prev", null, null, {icon: h});
        var i = "pageinfo-" + b;
        f += "</li><li id='" + i + "' class='pageinfo-text'>";
        f += "</li><li>";
        g = this.getIconClass("next", "active");
        h = this._iconHtml(g);
        f += this._anchorHtml("next", e + "next", null, null, {icon: h});
        f += "</li>";
        return f
    }, _checkboxHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        this._addHandlerId(b);
        var g = null;
        if (e === "checked") {
            g = "<input id=" + b + ' type="checkbox" ' + e + ' class="table-select-checkbox" ' + f + ">&nbsp;</input>"
        } else {
            g = "<input id=" + b + ' type="checkbox" ' + e + ' class="table-select-checkbox" ' + f + ">&nbsp;</input>"
        }
        return g
    }, _addDropDownItemsToList: function () {
        var a = this._config.items;
        var b = '<ul class="dropdown-menu">';
        if (a && a.length) {
            for (var c = 0; c < a.length; c++) {
                var d = a[c].name;
                var e = a[c].title;
                var f = a[c].cls;
                var g = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
                var h = "";
                if (f) {
                    h += "<li class=" + f + ">"
                } else {
                    h += "<li>"
                }
                h += '<a id="' + g + '" data-name="' + d + '" href="#">' + e + "</a></li>";
                this._addHandlerId(g);
                b += h
            }
        }
        b += "</ul>";
        return b
    }, _createdropDownButtonOptions: function (a, b, c, d, e, f) {
        if (!f) {
            f = ""
        }
        var g = "<div title='" + f + '\' class="btn-group">';
        if (this._config.listener.addAdditionalCssToElement) {
            var h = this._config.listener.addAdditionalCssToElement(this._config.data.name, d);
            if (h) {
                g = "<div title='" + f + "' class=\"btn-group " + h + ' ">'
            }
        }
        if (!d) {
            d = ""
        }
        g += '<button type="button" class="btn ' + d + '" data-toggle="ac_dropdown">' + e + '&nbsp;&nbsp; &nbsp;<span class="caret"></span></button>';
        g += this._addDropDownItemsToList();
        g += "</div>";
        return g
    }, _createButtonHtml: function (a, b, c, d, e, f) {
        var g = this._createNameValueAttr("data-name", a);
        var h = "";
        var i = c;
        if (!c) {
            c = ""
        }
        if (!f) {
            f = ""
        }
        if (a == "add") {
            c = "btn-inner-green";
            h = "<i class='icon-ygg-add icon-large'></i>"
        } else if (a == "refresh") {
            c = "btn-inner-green";
            h = "<i class='icon-ygg-refresh icon-large'></i>"
        }
        var j = '<button title="' + f + '" type="button" ' + g + '  id="' + b + "\" class='btn " + c + "'>" + h + d + "</button>";
        if (this._config.listener.wrapHtmlTemplate) {
            j = this._config.listener.wrapHtmlTemplate(a, i, j)
        }
        this._addHandlerId(b);
        return j
    }, updateMenuItem: function (a) {
        var b = this._config.items;
        if (b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                if (!d.data || !d.data.name) continue;
                if (d.data.name == a.data.name) {
                    var e = "submenu" + c + "_" + this._id;
                    var f = actuate.common.web.$("#" + e);
                    var g = f.find("a")[0];
                    g.innerHTML = a.title;
                    if (a.isHidden) {
                        f.removeClass("show").addClass("hide")
                    } else {
                        f.removeClass("hide")
                    }
                    break
                }
            }
        }
    }, _createWrenchOptions: function (a, b, c, d, e) {
        var f = c + "wrench";
        var g = '<div class="dropdown">';
        var h = {icon: this._iconHtml(a)};
        g += this._wrenchIconHtml(a, b, c, d, e, h);
        var i = this._config.items;
        if (i) {
            g += '<ul id="' + f + '" class="dropdown-menu" role="menu" aria-labelledby="' + c + '">';
            for (var j = 0; j < i.length; j++) {
                var k = i[j];
                var l = "submenu" + j + "_" + c;
                var m = "";
                if (k.isHidden) {
                    m = ' class="hide"'
                }
                g += '<li id="' + l + '"' + m + ">";
                g += this._getHTMLTag(k);
                g += "</li>"
            }
            g += "</ul>"
        }
        g += "</div>";
        return g
    }, _createNameValueAttr: function (a, b) {
        var c = " " + a + "='" + b + "'";
        return c
    }, _wrenchIconHtml: function (a, b, c, d, e, f) {
        var g = this._createNameValueAttr("data-name", b);
        var h = this._createNameValueAttr("role", "button");
        var i = this._createNameValueAttr("data-toggle", "ac_dropdown");
        var j = "";
        if (d) {
            j = " " + d
        }
        j = this._createNameValueAttr("class", "dropdown-toggle wrench td-none" + j);
        var k = "<a " + i + h + g + j + ' id="' + c + '">';
        for (var l in f) {
            k += f[l]
        }
        if (e) {
            k += " " + e
        }
        k += "</a>";
        return k
    }, _attachClickHandler: function () {
        if (!this._handler) return;
        for (var a = 0; a < this._handler.length; a++) {
            actuate.common.web.$("#" + this._handler[a]).click(this._click)
        }
    }, _addHandlerId: function (a) {
        if (!this._handler) {
            this._handler = []
        }
        this._handler.push(a)
    }, _anchorHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        var g = "";
        if (c) {
            g = " class='" + c + "'"
        }
        var h = "<a href='#'" + f + g + ' id="' + b + '">';
        for (var i in e) {
            h += e[i]
        }
        if (a != "back") {
            if (d) {
                h += " " + d
            }
        }
        h += "</a>";
        this._addHandlerId(b);
        return h
    }, _createAlertErrorHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        var g = "";
        if (c) {
            g = " class='" + c + "'"
        }
        var h = "<div style=\"text-align:center\"><a href='#'" + f + g + ' id="' + b + '">';
        for (var i in e) {
            h += e[i]
        }
        h += "</a></div>";
        this._addHandlerId(b);
        return h
    }, _createDotCheckHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        var g = "";
        if (c) {
            g = " class='" + c + "'"
        }
        var h = "<div " + g + ' style="text-align:center">';
        for (var i in e) {
            h += e[i]
        }
        if (a != "back") {
            if (d) {
                h += " " + d
            }
        }
        h += "</div>";
        this._addHandlerId(b);
        return h
    }, _iconHtml: function (a, b) {
        if (!a) return "";
        var c = null;
        if (b) {
            c = '<i class="' + a + '" title="' + b + '"></i>'
        } else {
            c = '<i class="' + a + '"></i>'
        }
        return c
    }, _selectItemsHtml: function (a, b, c, d, e) {
        var f = "<div class='btn-group'>";
        f += "<button class='btn' data-toggle='ac_dropdown'>";
        var g = " data-name='" + a + "'";
        var h = b + "selectItems";
        f += "<span style='width:13px;height:13px'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>" + "<span class='caret'></span>";
        f += "</button>";
        f += this._addDropDownSelectToList(b, h);
        f += "<input data-value='unchecked' data-name='" + a + "' id='" + h + "mask' class='checkbox-in-btn selectItemsHtml' type='checkbox'" + e + " /> ";
        this._addHandlerId(h + "mask");
        return f
    }, _addDropDownSelectToList: function (a, b) {
        var c = '<ul class="dropdown-menu">';
        var d = "selectItems";
        var e = "Select All";
        var f = "Select None";
        if (this._config.data.label) {
            e = this._config.data.label.selectAll;
            f = this._config.data.label.selectNone
        }
        var g = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var h = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var i = "";
        i = "<li><a data-value='checked' id=\"" + g + '" data-name="' + d + '" >' + e + "</a></li>";
        this._addHandlerId(g);
        c += i;
        var j = "<li><a data-value='unchecked' id=\"" + h + '" data-name="' + d + '">' + f + "</a></li>";
        this._addHandlerId(h);
        c += j;
        c += "</ul></div>";
        this._click = actuate.common.web.Method.bind2(this._selectItemsHandler, this, this._config.listener.onItemClick);
        this._config.listener.onItemClick = this._click;
        return c
    }, _selectItemsHandler: function (a, b, c, d) {
        var e = null;
        e = actuate.common.web.$(".checkbox-in-btn");
        var f = e.attr("id");
        if (a) {
            var g = {};
            var h = c.target.getAttribute("data-value") === "checked" ? "checked" : "unchecked";
            if (h == "checked") {
                e.prop("checked", true)
            } else {
                e.prop("checked", false)
            }
            g.data = h;
            g.id = f;
            c.data = g;
            a(b, c, g)
        }
    }, _searchHtml: function (a, b, c, d, e) {
        var f = "search";
        var g = "";
        if (g) {
            f += "-" + g
        }
        var h = c + "searchTxt";
        var i = '<i class="icon-ygg-search"></i><input type="text" placeholder="' + e + '" class="' + f + '" id="' + h + '">';
        i += '<i class="icon-ygg-close-circle search-delete-text-icon" style="display:none;"></i></input>';
        var j = {icon: this._iconHtml(a)};
        return i
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control.Grid");
actuate.common.web.widget.control.Grid.Column = actuate.common.web.Class.create();
actuate.common.web.widget.control.Grid.Column.prototype = {
    initialize: function (a) {
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = this._config.css ? " " + this._config.css : "";
        var b = this._config.template ? this._config.template : '<div class="span' + this._config.colSize + a + '">';
        var c = this._config.colHeader;
        var d = "";
        var e = "";
        if (c && c.items && c.items.data) {
            d = c.items.data.name;
            e = c.items.data.label
        }
        b = this._getTemplate(d, e, b);
        return b
    }, _getTemplate: function (a, b, c) {
        var d = c.replace(/{data.name}/g, a);
        d = d.replace(/{data.label}/g, b);
        if (a === "actionItems" || a === "checkbox" || a === "star") {
            d = d.replace(/{class.name}/g, "check-column")
        } else if (a === "wrench") {
            d = d.replace(/{class.name}/g, "caret-column")
        } else {
            var e = this._config.css ? this._config.css : "";
            d = d.replace(/{class.name}/g, e)
        }
        return d
    }, getItems: function () {
        return this._config.items
    }, getGridControl: function () {
        return this._gridControl
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, _appendItems: function () {
        var a = this._config.items;
        this._gridControl = [];
        var b = 0;
        var c = null;
        if (actuate.common.web.$.isArray(a)) {
            for (var d in a) {
                c = this._appendItem(a[d], this._element);
                this._gridControl.push(c)
            }
        } else {
            c = this._appendItem(a, this._element);
            this._gridControl.push(c)
        }
    }, _appendItem: function (a, b) {
        var c = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var d = actuate.common.web.Method.bind2(this._colHandler, this, c);
        a.listener.onItemClick = d;
        var e = new actuate.common.web.widget.control.GridItem(a);
        e.appendTo(b);
        return e
    }, _colHandler: function () {
        if (this._config.handler) {
            this._config.handler.apply(this, arguments)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control.Grid");
actuate.common.web.widget.control.Grid.Row = actuate.common.web.Class.create();
actuate.common.web.widget.control.Grid.Row.prototype = {
    _ROW_INDEX_ATTR: "row-index", _DEFAULT_COLUMN_COUNT: 12, _cols: null, initialize: function (a) {
        this._cols = [];
        this._colIdx = 0;
        this._config = a;
        this._colCount = this._DEFAULT_COLUMN_COUNT;
        if (a.colCount) this._colCount = a.colCount;
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, getData: function (a) {
        var b = this._config.row;
        var c = this._generateRecord(b);
        var d = {data: c};
        return d
    }, _generateRecord: function (a) {
        var b = null;
        var c = a.items;
        for (var d in c) {
            var e = {};
            var f = c[d].items;
            if (actuate.common.web.$.isArray(f)) {
                var g = this._generateRecord(f);
                if (g) {
                    b = actuate.common.web.$.extend({}, b, g)
                }
            } else if (f) {
                e.name = f.data.name;
                e.value = f.title;
                if (e.name) {
                    if (!b) {
                        b = {}
                    }
                    b[e.name] = e.value
                }
            }
        }
        return b
    }, _appendItems: function () {
        if (!this._config.row) {
            return
        }
        var a = this._config.row["css"];
        if (a) {
            this._element.addClass(a)
        }
        var b = 0;
        var c = 0;
        var d = this._config.row["items"];
        var e = this._config.row["template"];
        var f = this._calcColSize(d);
        var g = this._config.colHeaders;
        var h = actuate.common.web.Method.bind(this._rowHandler, this);
        for (var i in d) {
            if (b >= this._colCount) break;
            var j = d[i].items;
            if (j.isHidden == true) continue;
            var k = d[i].colSize ? d[i].colSize : f;
            var l = null;
            var m = d[i].css;
            if (g && g.items) {
                l = g.items[i]
            }
            var n = {items: j, colSize: k, css: m, handler: h, template: e, colHeader: l};
            var o = new actuate.common.web.widget.control.Grid.Column(n);
            this._appendColumn(o, c++);
            b += k
        }
    }, getColumn: function (a) {
        return this._cols[a]
    }, _appendColumn: function (a, b) {
        a.appendTo(this._element);
        this._cols[b] = a
    }, _rowHandler: function (a, b, c, d) {
        if (a) {
            var e = null;
            e = {event: d, row: this.getData()};
            a(b, e)
        }
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = this._config.rowIndex;
        var b = this._getRowIndexAttr(a);
        var c = this._config.template ? this._config.template : "<div {rowAttr} class='row-fluid'>";
        var d = this._getTemplate(null, b, c);
        return d
    }, _getTemplate: function (a, b, c) {
        c = c.replace(/{rowAttr}/g, b);
        c = c.replace(/\{id\}/g, a);
        return c
    }, _getRowIndexAttr: function (a) {
        if (a === undefined) return "";
        return " " + this._ROW_INDEX_ATTR + "='" + a + "'"
    }, _getItemsLength: function (a) {
        if (!a) return 0;
        if (a.length) return a.length;
        var b = 0;
        for (var c in a) {
            b += Number(a.hasOwnProperty(c))
        }
        return b
    }, _calcColSize: function (a) {
        var b = 1;
        var c = this._getItemsLength(a);
        if (c < this._colCount) b = Math.floor(this._colCount / c);
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.HiddenField = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = {value: ""};
        b = actuate.common.web.$.extend({}, b, a);
        b.type = "hidden";
        actuate.common.web.widget.control.HiddenField.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Label = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _text: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._text = b.text;
        delete b.type;
        delete b.text;
        delete b.allowblank;
        actuate.common.web.widget.control.Label.superclass.initialize.call(this, b)
    },
    _initComponent: function () {
        actuate.common.web.widget.control.Label.superclass._initComponent.call(this);
        this.setText(this._text)
    },
    setText: function (a) {
        this._text = a;
        this._element.text(this._text)
    },
    setValue: function (a) {
        this._element.attr("value", a);
        this.setText(a)
    },
    getText: function () {
        return this._text
    },
    updateForValue: function (a) {
        this._element.attr("for", a)
    },
    _getHTMLTag: function () {
        return "<label>"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.ListBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        actuate.common.web.widget.control.ListBox.superclass.initialize.call(this, b)
    }, setSize: function (a) {
    }, _getStyle: function () {
        var a = this._curSettings.style;
        if (a) {
            return a
        }
        return ""
    }, _getLegacyHTMLTag: function (a, b) {
        var c = '<input type="hidden">' + '<a class="btn actuListBoxDisplayButton dropdown-toggle cliptext ' + a + ' " data-toggle="ac_dropdown" style="' + b + '"></a>' + '<a class="btn btn-secondary dropdown-toggle actuListBoxDropdownButton" data-toggle="ac_dropdown">' + '<span class="caret"></span>' + "</a>";
        return c
    }, _getMinTextWidth: function () {
        return 15
    }, _createStyleWidthText: function (a) {
        if (!a) return "";
        var b = "min-width: " + a + "px;";
        var c = "max-width: " + a + "px;";
        var d = 'style="' + b + c + '"';
        return d
    }, _dropDownListMinWidth: function (a) {
        var b = this._getUXPaddingWidth() + this._getMinTextWidth();
        var c = b;
        if (a && a > c) {
            c = a
        }
        if (c < b) {
            c = b
        }
        return c
    }, _getUXPaddingWidth: function () {
        var a = 1 + 1;
        var b = 12 + 12;
        var c = 4 + 4;
        var d = 3 + 3;
        var e = a + b + c + d;
        return e
    }, _getBtnBoxMinWidth: function (a) {
        if (!a) return 0;
        var b = this._getUXPaddingWidth();
        var c = this._getMinTextWidth();
        var d = a - b;
        if (this._width && d < c) {
            d = c
        }
        return d
    }, _getDefaultListBoxTemplate: function () {
        var a = this._width;
        a = this._getBtnBoxMinWidth(a);
        var b = this._createStyleWidthText(a);
        var c = '<button class="actuListBoxDropdownButton btn border-style-profile" data-toggle="ac_dropdown">' + '<span class="actuListBoxDisplayButton dropdown-trunc-text" ' + b + "></span>" + '&nbsp;&nbsp;<span class="caret"></span>' + "</button>";
        return c
    }, _getMainContMinWidth: function () {
        var a = this._getUXPaddingWidth();
        var b = this._getMinTextWidth();
        return a + b
    }, _getHTMLTag: function () {
        this._divElement = actuate.common.web.$('<div class="btn-group actuListBoxContainer"></div>');
        var a = this._getDefaultListBoxTemplate();
        this._listBoxButton = actuate.common.web.$(a);
        this._list = actuate.common.web.$('<ul class="actuListBoxDropdownList dropdown-menu"></ul>');
        this._listBoxButton.appendTo(this._divElement);
        this._list.appendTo(this._divElement);
        var b = this._css ? this._css : "";
        var c = '<div class="' + b + '"></div>';
        var d = actuate.common.web.$(c);
        this._divElement.appendTo(d);
        return d
    }, resetList: function (a, b, c) {
        this._list.empty();
        this.addToList(a, b, c)
    }, appendTo: function (a) {
        actuate.common.web.widget.control.ListBox.superclass.appendTo.call(this, a);
        this._divElement.click(actuate.common.web.Method.bind(this._scrollToElement, this));
        if (this._listOfItems && this._listItemList) {
            for (var b in this._listOfItems) {
                var c = this._listItemList[b];
                c.click({
                    value: b,
                    name: this._displayNameList[b]
                }, actuate.common.web.Method.bind(this._onSelect, this));
                c.hover(actuate.common.web.Method.bind(this._removeDefaultHighlight, this))
            }
        }
    }, addToList: function (a, b, c) {
        var d = true;
        this._listOfItems = a;
        this._idList = {};
        this._listItemList = {};
        this._displayNameList = {};
        for (var e in a) {
            var f = a[e];
            if (typeof b == "undefined" && d == true) {
                this.setValue(e, f);
                d = false
            } else if (e == b) {
                this.setValue(e, f)
            }
            var g = "aclist-" + actuate.common.web.util.Utility.createUniqueControlID();
            this._idList[e] = g;
            var h = actuate.common.web.$("<div/>").text(f).html();
            var i = actuate.common.web.$("<li id=" + g + '><a class="trunc" title="' + h + '">' + h + "</a></li>");
            this._list.append(i);
            this._listItemList[e] = i;
            this._displayNameList[e] = f
        }
        if (c) {
            this._callBack = c;
            actuate.common.web.Method.bind(this._callBack, this)
        }
    }, _removeDefaultHighlight: function () {
        if (this._scrollTo) {
            this._scrollTo.css("background-color", "");
            this._scrollTo.find("a").css("color", "")
        }
    }, getValue: function () {
        var a = this._divElement.attr("value");
        return a
    }, setValue: function (a) {
        this._divElement.attr("value", a);
        var b = this._listOfItems[a];
        if (!b) {
            b = a
        }
        var c = this._divElement.find(".actuListBoxDisplayButton");
        c.text(b);
        this._divElement.attr("title", b)
    }, _onSelect: function (a) {
        this._divElement.attr("value", a.data.value);
        var b = this._divElement.find(".actuListBoxDisplayButton");
        b.text(a.data.name);
        this._divElement.attr("title", a.data.name);
        if (this._callBack) {
            this._callBack(this.getValue())
        }
    }, _setDefaultBtnWidth: function () {
        var a = this._divElement[0];
        var b = a.offsetWidth;
        this._width = b;
        if (!this._width && !this._isWidthInitialized) {
            var c = this._divElement.find(".actuListBoxDisplayButton");
            this._isWidthInitialized = true;
            var d = this._getBtnBoxMinWidth(b);
            c.css({"min-width": d, "max-width": d})
        }
        return b
    }, _updateDropDownWidth: function () {
        var a = this._setDefaultBtnWidth();
        var b = this._divElement.find(".actuListBoxDropdownList").closest("ul");
        b.css({"min-width": a, "max-width": a})
    }, _scrollToElement: function () {
        this._updateDropDownWidth();
        var a = ".actuListBoxContainer." + this._curSettings.name;
        actuate.common.web.$(a).toggleClass("open");
        var b = this._list;
        var c = this._idList[this.getValue()];
        if (c) {
            this._scrollTo = this._divElement.find(".actuListBoxDropdownList").find("#" + c);
            b.scrollTop(this._scrollTo.offset().top - b.offset().top + b.scrollTop());
            this._scrollTo.css("background-color", "#303030");
            this._scrollTo.find("a").css("color", "#FFFFFF")
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.MultiSelectListBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _addedItems: null, _removedItems: null, initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._title = a.title;
        if (a.filter) {
            this._filterConfig = a.filter
        }
        delete b.title;
        delete b.filter;
        var c = {filter: this._filterConfig, title: this._title};
        this._multiListLayout = new actuate.common.web.widget.control.MultiSelectListBoxLayout(c);
        this._addedItems = {};
        this._removedItems = {};
        this._leftAllItems = {};
        this._rightAllItems = {};
        this._searchFilters = new Array;
        actuate.common.web.widget.control.MultiSelectListBox.superclass.initialize.call(this, b);
        this._addSearchBox()
    }, _getHTMLTag: function () {
        return this._multiListLayout.getLayoutTemplate()
    }, appendTo: function (a) {
        actuate.common.web.widget.control.MultiSelectListBox.superclass.appendTo.call(this, a);
        this.attachEvents()
    }, _getElementById: function (a) {
        return this.find("#" + a)
    }, _addSearchBox: function () {
        var a = false;
        var b = this._multiListLayout.getLeftSearchId();
        var c = this._getElementById(b);
        var d = this._multiListLayout.getRightSearchId();
        var e = this._getElementById(d);
        if (this._filterConfig && this._filterConfig.left) {
            this.renderSearchBox(c, this._filterConfig.left.callBack, this._refreshLeftListBoxList, this._filterConfig.left.title);
            a = true
        }
        if (this._filterConfig && this._filterConfig.right) {
            this.renderSearchBox(e, this._filterConfig.right.callBack, this._refreshRightListBoxList, this._filterConfig.right.title);
            a = true
        }
        if (!a) {
            e.remove();
            e.remove()
        }
    }, _unbindEvent: function (a, b) {
        a.unbind(b)
    }, attachEvents: function () {
        var a = this._getElementById(this._multiListLayout.getRightSelectId());
        var b = this._getElementById(this._multiListLayout.getLeftSelectId());
        var c = this._getElementById(this._multiListLayout.getAddBtnId());
        this._unbindEvent(c, "click");
        c.click(actuate.common.web.Method.bind2(this.addRemoveItems, this, b, a));
        var d = this._getElementById(this._multiListLayout.getRemoveBtnId());
        this._unbindEvent(d, "click");
        d.click(actuate.common.web.Method.bind2(this.addRemoveItems, this, a, b));
        for (var e = 0; e < this._searchFilters.length; e++) {
            var f = this._searchFilters[e];
            f.attachEvents()
        }
    }, renderSearchBox: function (a, b, c, d) {
        if (b) {
            var e = {
                width: "261px",
                placeholder: d,
                searchCallBack: b,
                customCss: "pull-left",
                refreshListCallBack: actuate.common.web.Method.bind(c, this)
            };
            var f = new actuate.common.web.widget.control.SearchBox(e);
            f.appendTo(a);
            this._searchFilters.push(f)
        }
    }, _refreshLeftListBoxList: function (a) {
        var b = this._getElementById(this._multiListLayout.getLeftSelectId());
        b.empty();
        var c = null;
        var d = null;
        var e = null;
        var f = null;
        var g = this._getElementById(this._multiListLayout.getLeftSearchId());
        var h = g.find("input");
        if (h) {
            var i = null;
            for (var j in this._removedItems) {
                d = this._removedItems[j].name;
                e = this._removedItems[j].value;
                i = h.val().length;
                if (d.substring(0, i).toLowerCase() == h.val().toLowerCase()) {
                    f = actuate.common.web.util.Utility.createUniqueControlID();
                    b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
                }
            }
        }
        var k = a.items;
        for (var l = 0; l < k.length; l++) {
            c = k[l];
            d = c.name;
            e = c.value;
            if (!this._rightAllItems[d] && !this._removedItems[d]) {
                this._leftAllItems[d] = d;
                f = actuate.common.web.util.Utility.createUniqueControlID();
                b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
            }
        }
    }, _refreshRightListBoxList: function (a) {
        var b = this._getElementById(this._multiListLayout.getRightSelectId());
        b.empty();
        var c = null;
        var d = null;
        var e = null;
        var f = null;
        var g = this._getElementById(this._multiListLayout.getRightSearchId());
        var h = g.find("input");
        if (h) {
            var i = null;
            for (var j in this._addedItems) {
                d = this._addedItems[j].name;
                e = this._addedItems[j].value;
                i = h.val().length;
                if (d.substring(0, i).toLowerCase() == h.val().toLowerCase()) {
                    f = actuate.common.web.util.Utility.createUniqueControlID();
                    b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
                }
            }
        }
        var k = a.items;
        for (var l = 0; l < k.length; l++) {
            c = k[l];
            d = c.name;
            e = c.value;
            if (!this._leftAllItems[d] && !this._addedItems[d]) {
                this._rightAllItems[d
                    ] = d;
                f = actuate.common.web.util.Utility.createUniqueControlID();
                b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
            }
        }
    }, addRemoveItems: function (a, b) {
        var c = a.attr("name");
        var d = a.val();
        if (d) {
            for (var e = 0; e < d.length; e++) {
                var f = actuate.common.web.util.Utility.createUniqueControlID();
                var g = actuate.common.web.util.Utility.escapeHtml(d[e]);
                var h = a.find('option[value="' + d[e] + '"]');
                optionName = h.text();
                h.remove();
                var i = actuate.common.web.util.Utility.escapeHtml(optionName);
                b.prepend('<option id="' + f + '" value="' + g + '" title="' + i + '">' + i + "</option>").css("width", b.css("width"));
                var j = {name: optionName, value: d[e]};
                if (c == "left") {
                    delete this._leftAllItems[optionName];
                    this._rightAllItems[optionName] = optionName;
                    if (this._removedItems && this._removedItems[d[e]]) {
                        delete this._removedItems[d[e]]
                    } else {
                        this._addedItems[d[e]] = j
                    }
                } else {
                    delete this._rightAllItems[d[e]];
                    this._leftAllItems[d[e]] = d[e];
                    if (this._addedItems && this._addedItems[d[e]]) {
                        delete this._addedItems[d[e]]
                    } else {
                        this._removedItems[d[e]] = j
                    }
                }
            }
        }
    }, addToList: function (a, b) {
        this._defaultItems = b;
        var c = {};
        var d = null;
        if (b) {
            var e = this._getElementById(this._multiListLayout.getRightSelectId());
            for (var f = 0; f < b.length; f++) {
                d = actuate.common.web.util.Utility.createUniqueControlID();
                c[b[f].name] = b[f].name;
                if (!this._rightAllItems[b[f].name]) {
                    this._rightAllItems[b[f].name] = b[f].name
                }
                e.append('<option id="' + d + '" value="' + b[f].value + '" title="' + b[f].name + '">' + b[f].name + "</option>")
            }
        }
        if (a) {
            var g = this._getElementById(this._multiListLayout.getLeftSelectId());
            for (var h = 0; h < a.length; h++) {
                d = actuate.common.web.util.Utility.createUniqueControlID();
                var i = a[h].name;
                if (!c[i]) {
                    if (!this._leftAllItems[i]) {
                        this._leftAllItems[i] = i
                    }
                    g.append('<option id="' + d + '" value="' + actuate.common.web.util.Utility.escapeHtml(a[h].value) + '" title="' + actuate.common.web.util.Utility.escapeHtml(a[h].name) + '">' + actuate.common.web.util.Utility.escapeHtml(i) + "</option>")
                }
            }
        }
    }, getValue: function () {
        var a = {};
        a.addedItems = this._convertObjectToArray(this._addedItems);
        a.removedItems = this._convertObjectToArray(this._removedItems);
        return a
    }, _convertObjectToArray: function (a) {
        return actuate.common.web.$.map(a, function (a, b) {
            return [a.value]
        })
    }
});
actuate.common.web.widget.control.MultiSelectListBoxLayout = actuate.common.web.Class.create();
actuate.common.web.widget.control.MultiSelectListBoxLayout.prototype = {
    _PREFIX_NAMES: {
        header: "header",
        search: "search",
        listBox: "listBox",
        leftList: "left",
        rightList: "right",
        addRight: "right",
        removeLeft: "left",
        colLayout: "colLayout",
        layoutLeft: "layoutLeft",
        layoutMid: "layoutMid",
        layoutRight: "layoutRight"
    }, initialize: function (a) {
        if (this.__extending) {
            return
        }
        this._layoutConfig = a
    }, _getHeaderTitleTemplate: function (a) {
        var b = '<h4 style="font-weight:900;" align="left">' + a + "</h4>";
        return b
    }, _getBtnSelectionTemplate: function (a) {
        var b = '<button id="' + a + '{id}" class="btn btn-success assign-group-move-btn"><i class="icon-ygg-sort-' + a + ' icon-large"></i></button>';
        return b
    }, _getSelectionTemplate: function () {
        var a = this._getBtnSelectionTemplate(this._PREFIX_NAMES.addRight);
        a += "<br/>";
        a += this._getBtnSelectionTemplate(this._PREFIX_NAMES.removeLeft);
        return a
    }, _getSearchTemplate: function (a) {
        var b = '<div style="margin-top: 10px; height: 50px;" id="' + this._PREFIX_NAMES.search + a + '{id}"></div>';
        return b
    }, _getListTemplate: function (a) {
        var b = '<select multiple="multiple" id="' + this._PREFIX_NAMES.listBox + a + '{id}" name=' + a + ' style="height:266px !important;margin-top: 10px;" size="20"></select>';
        b += this._getSearchTemplate(a);
        return b
    }, _getColLayoutTemplate: function (a, b, c, d, e, f) {
        var g = '<div class="' + a + ' control-group">';
        g += '<div class="layoutColumn" id="' + b + '{id}">';
        g += '<div class="layoutLeft" id="' + this._PREFIX_NAMES.layoutLeft + '{id}">' + c + "</div>";
        g += '<div class="layoutMid assign-column assign-column-thin" id="' + this._PREFIX_NAMES.layoutMid + '{id}">' + d + "</div>";
        g += '<div class="layoutRight" id="' + this._PREFIX_NAMES.layoutRight + '{id}">' + e + "</div>";
        if (f) {
            g += '<div class="helptext">' + f + "</div>"
        }
        g += "</div>";
        g += '<div style="clear:both;"></div>';
        g += "</div>";
        return g
    }, _getTopTemplate: function (a) {
        var b = this._getHeaderTitleTemplate(this._layoutConfig.title.left);
        var c = "&nbsp;";
        var d = this._getHeaderTitleTemplate(this._layoutConfig.title.right);
        var e = this._getColLayoutTemplate("header", this._PREFIX_NAMES.header, b, c, d);
        e = e.replace(/{id}/g, a);
        return e
    }, _getMiddleTemplate: function (a) {
        var b = null;
        if (this._layoutConfig.filter && this._layoutConfig.filter.helpText) {
            b = this._layoutConfig.filter.helpText
        }
        var c = this._getListTemplate(this._PREFIX_NAMES.leftList);
        var d = this._getSelectionTemplate();
        var e = this._getListTemplate(this._PREFIX_NAMES.rightList);
        var f = this._getColLayoutTemplate("content", this._PREFIX_NAMES.listBox, c, d, e, b);
        f = f.replace(/{id}/g, a);
        return f
    }, getAddBtnId: function () {
        return this._PREFIX_NAMES.addRight + this._midId
    }, getRemoveBtnId: function () {
        return this._PREFIX_NAMES.removeLeft + this._midId
    }, getLeftSelectId: function () {
        return this._PREFIX_NAMES.listBox + this._PREFIX_NAMES.leftList + this._midId
    }, getRightSelectId: function () {
        return this._PREFIX_NAMES.listBox + this._PREFIX_NAMES.rightList + this._midId
    }, getLeftSearchId: function () {
        return this._PREFIX_NAMES.search + this._PREFIX_NAMES.leftList + this._midId
    }, getRightSearchId: function () {
        return this._PREFIX_NAMES.search + this._PREFIX_NAMES.rightList + this._midId
    }, getLayoutTemplate: function () {
        var a = "_aclist_";
        this._topId = a + actuate.common.web.util.Utility.createUniqueControlID();
        var b = this._getTopTemplate(this._topId);
        this._midId = a + actuate.common.web.util.Utility.createUniqueControlID();
        b += this._getMiddleTemplate(this._midId);
        b = '<div class="multiSelectListBoxContainer control-group">' + b + "</div>";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Password = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = {value: ""};
        b = actuate.common.web.$.extend({}, b, a);
        b.type = "password";
        actuate.common.web.widget.control.Password.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Radio = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    _click: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        b.type = "radio";
        this._click = b.click;
        actuate.common.web.widget.control.Radio.superclass.initialize.call(this, b);
        if (a && a.value) {
            this.setValue(a.value)
        }
    },
    appendTo: function (a) {
        actuate.common.web.widget.control.Radio.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(this._click)
    },
    setValue: function (a) {
        if (!this._element.attr("value")) {
            actuate.common.web.widget.control.Radio.superclass.setValue.call(this, a)
        } else if (this._element.attr("value") === a) {
            this._element.attr("checked", "checked")
        } else {
            this._element.removeAttr("checked")
        }
    },
    isChecked: function () {
        return this._element.attr("checked") === "checked"
    },
    getSelectedValue: function () {
        var a = this._element.attr("name");
        var b = actuate.common.web.$("input[name=" + a + "]:radio:checked");
        return b.val()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.SearchBox = actuate.common.web.Class.create();
actuate.common.web.widget.control.SearchBox.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._filterConfig = a
    }, appendTo: function (a) {
        var b = this;
        var c = {width: this._filterConfig.width, placeholder: this._filterConfig.placeholder};
        var d = "";
        if (this._filterConfig.customCss) {
            d = this._filterConfig.customCss
        }
        var e = actuate.common.web.$('<div style="margin-right:2px;" class="header-bar-search-box ' + d + '"></div>');
        var f = new actuate.common.web.widget.control.TextField(c);
        f.appendTo(e);
        this._deleteIcon = actuate.common.web.$('<i class="icon-ygg-close-circle search-delete-text-icon" style="display:none;"></i>');
        this._deleteIcon.appendTo(e);
        e.appendTo(a);
        this._textBoxElement = a.find("input");
        this._textBoxElement.css("padding-left", "1px");
        this._textBoxElement.css("padding-right", "1px");
        this.attachEvents()
    }, attachEvents: function () {
        var a;
        var b = this;
        this._unbindEvent(this._textBoxElement, "keyup");
        this._textBoxElement.keyup(actuate.common.web.Method.bind2(function (c) {
            clearTimeout(a);
            a = setTimeout(function () {
                if (c.keyCode != 0) {
                    if (c.keyCode != 13) {
                        data = b._textBoxElement.val()
                    }
                    b._deleteIcon.css("display", "block")
                } else {
                    data = b._textBoxElement.val().substring(0, b._textBoxElement.val().length - 1)
                }
                var a = actuate.common.web.Method.bind(b._filterConfig.refreshListCallBack, b);
                var d = {filter: data, refreshListCallBack: a};
                b._filterConfig.searchCallBack(d)
            }, 500)
        }, this._textBoxElement));
        this._unbindEvent(this._deleteIcon, "click");
        this._deleteIcon.click(function (a) {
            data = "";
            b._textBoxElement.val("");
            var c = actuate.common.web.Method.bind(b._filterConfig.refreshListCallBack, b);
            var d = {filter: data, refreshListCallBack: c};
            b._filterConfig.searchCallBack(d);
            b._deleteIcon.css("display", "none")
        })
    }, _unbindEvent: function (a, b) {
        a.unbind(b)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.TextField = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = {value: ""};
        b = actuate.common.web.$.extend({}, b, a);
        b.type = "text";
        actuate.common.web.widget.control.TextField.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.AddEditDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.AddEditDialog.prototype = {
    _config: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    }, showAddEdit: function (a) {
        var b = actuate.common.web.$("#" + this._config.mainId);
        var c = actuate.common.web.$("#" + this._config.id);
        if (a) {
            b.hide();
            c.show()
        } else {
            b.show();
            c.hide()
        }
    }, showDialog: function () {
        var a = this;
        var b = function (b, c) {
            switch (b) {
                case"save":
                    if (c) {
                        a.sendDlgData(c)
                    }
                    a.invokeListener("ON_SAVE_CLICK");
                    break;
                default:
                    a.showAddEdit(false);
                    if (b === "back") {
                        a.invokeListener("ON_BACKARROW_CLICK")
                    } else if (b === "cancel") {
                        a.invokeListener("ON_CANCEL_CLICK")
                    }
                    break
            }
        };
        var c = {
            id: a._config.id,
            titleKey: a._config.titleKey,
            title: a._config.title,
            operation: a._config.operation,
            renderer: a._config.renderer,
            callback: actuate.common.web.Method.bind(b, this)
        };
        a.showAddEdit(true);
        a.showActionDlgBasic(c)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, invokeListener: function (a) {
        this._listener.invokeListener(a, a)
    }, isSupportedFeature: function (a) {
        if (!this._config.features) return true;
        if ("backarrow" === a) {
            if (this._config.features.backarrow) {
                return true
            }
        } else if ("cancel" === a) {
            if (this._config.features.cancel) {
                return true
            }
        } else if ("save" === a) {
            if (this._config.features.save) {
                return true
            }
        }
        return false
    }, showActionDlgBasic: function (a) {
        var b = null;
        var c = function (c) {
            var d = null;
            if (c === "save") {
                var e = b.getContent().validate();
                if (e === true) {
                    d = b.getContent().getData()
                } else {
                    var f = this.getMsgDialogConfig("info");
                    actuate.common.web.util.Utility.showMsgDlg(a.id, e, "info", f)
                }
            }
            if (a.callback) {
                return a.callback(c, d)
            }
        };
        var d = {};
        if (this.isSupportedFeature("backarrow")) {
            d["backarrow"] = {
                handler: actuate.common.web.Method.bind2(c, this, "back"),
                title: this.getDefaultLabel("backarrow", a.renderer)
            }
        }
        if (this.isSupportedFeature("cancel")) {
            d["cancel"] = {
                handler: actuate.common.web.Method.bind2(c, this, "cancel"),
                title: this.getDefaultLabel("cancel", a.renderer)
            }
        }
        if (this.isSupportedFeature("save")) {
            d["save"] = {
                handler: actuate.common.web.Method.bind2(c, this, "save"),
                title: this.getDefaultLabel("save", a.renderer)
            }
        }
        var e = {handlers: d};
        var f = this.getLocalizedString(a.titleKey);
        if (a.title) {
            f = a.title
        }
        b = new actuate.common.web.widget.layout.AddEdit(a.id, f, a.renderer, e);
        b.render()
    }, sendRequest: function (a) {
        var b = this;
        var c = b._config.dataProcessor;
        a["authToken"] = c.getRequestOptions().getAuthId();
        var d = c.getRequestData(b._config.operation, a);
        var e = {msg: b.getLocalizedString("Lbl.SavingChanges")};
        c.sendRequest(d, actuate.common.web.Method.bind(b._onSuccess, b), actuate.common.web.Method.bind(b._onError, b), e)
    }, sendDlgData: function (a) {
        var b = this;
        var c = this.getConfirmDialogConfig("confirmation");
        c.okButton.handler = actuate.common.web.Method.bind2(this.sendRequest, this, a);
        var d = b.getLocalizedString("Lbl.SaveChanges");
        var e = new actuate.common.web.widget.dialog.ConfirmDialog({
            id: b._config.id,
            msg: d,
            type: "confirmation",
            dialogConfig: c
        });
        e.render()
    }, _onSuccess: function () {
        this.showAddEdit(false);
        this._config.dataProcessor.refreshContent()
    }, _onError: function (a) {
        var b = this.getMsgDialogConfig("error");
        actuate.common.web.util.Utility.showMsgDlg(this._config.id, a, "error", b)
    }, getDefaultLabel: function (a, b) {
        var c = "";
        if (b && b.getLabel) {
            c = b.getLabel(a);
            if (c) return c
        }
        switch (a) {
            case"backarrow":
                c = this.getLocalizedString("Lbl.Btn.Back");
                break;
            case"cancel":
                c = this.getLocalizedString("Lbl.Btn.Cancel");
                break;
            case"save":
                c = this.getLocalizedString("Lbl.Btn.Save");
                break
        }
        return c
    }, getConfirmDialogConfig: function (a) {
        var b = this._getTitle(a);
        var c = {
            title: this.getLocalizedString(b),
            okButton: {
                label: this.getLocalizedString("Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this.okCallBack, this)
            },
            cancelButton: {label: this.getLocalizedString("Lbl.Btn.Cancel")}
        };
        return c
    }, getMsgDialogConfig: function (a) {
        var b = this._getTitle(a);
        var c = {
            title: this.getLocalizedString(b),
            okButton: {
                label: this.getLocalizedString("Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this.okCallBack, this)
            }
        };
        return c
    }, okCallBack: function () {
    }, _getTitle: function (a) {
        var b = "Dlg.Title.Information";
        if (a === "warning") {
            b = "Dlg.Title.Warning"
        } else if (a === "error") {
            b = "Dlg.Title.Error"
        } else if (a === "severe") {
            b = "Dlg.Title.Severe"
        } else if (a === "confirmation") {
            b = "Dlg.Title.Confirmation"
        }
        return b
    }, getLocalizedString: function (a) {
        return a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ConfirmDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ConfirmDialog.prototype = {
    _type: null,
    _msg: null,
    _dialogID: null,
    _containerID: null,
    _callbackOK: null,
    _hideCloseButton: true,
    _hideCancelButton: false,
    _contentMaxWidth: 500,
    _infoMap: {
        error: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        info: {icon: "icon-info-sign", cls: "alert alert-info"},
        warning: {icon: "icon-warning-sign", cls: "alert alert-block"},
        severe: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        confirmation: {icon: "icon-warning-sign", cls: "alert alert-block"}
    },
    initialize: function (a) {
        if (this.__extending) return;
        this._type = "info";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        if (a) {
            this._containerID = a.id;
            if (a.type === "warning") {
                this._type = "warning"
            } else if (a.type === "error") {
                this._type = "error"
            } else if (a.type === "severe") {
                this._type = "severe"
            }
            this._containerID = a.id;
            this._msg = a.msg;
            this._dialogConfig = a.dialogConfig;
            if (a.isMsgDlg) {
                this._isMsgDlg = true
            }
            this._title = a.dialogConfig.title;
            if (a.contentMaxWidth) {
                this._contentMaxWidth = a.contentMaxWidth
            }
        }
        this._dialogID = this._containerID + "-" + actuate.common.web.util.Utility.createUniqueControlID() + "-" + actuate.common.web.$(".act_dlg").length;
        var b = actuate.common.web.$("<div id='" + this._dialogID + "'>");
        b.addClass(this._type);
        b.appendTo(actuate.common.web.$("#" + this._containerID))
    },
    register: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewProfile.addListener(a, b)
        }
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    render: function () {
        var a = null;
        var b = this;
        var c = false;
        if (this._dialogConfig.isMsgDlg) {
            c = true
        }
        var d = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var e = function () {
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler()
            }
        };
        var f = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var g = {render: actuate.common.web.Method.bind(f, this)};
        var h = this._dialogConfig.okButton.buttonType ? this._dialogConfig.okButton.buttonType : "secondary";
        var i = this._dialogConfig.cancelButton.buttonType ? this._dialogConfig.cancelButton.buttonType : "primary";
        var j = [{
            label: this._dialogConfig.okButton.label,
            handler: actuate.common.web.Method.bind(e, this),
            type: h
        }, {label: this._dialogConfig.cancelButton.label, handler: actuate.common.web.Method.bind(d, this), type: i}];
        if (this._dialogConfig.swapButtonsPosition) {
            j = [j[1], j[0]]
        }
        if (this._hideCancelButton) {
            j.shift()
        }
        var k = {buttons: j, modal: true, titleIconType: "warning", isMsgDlg: c};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, g, k);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    },
    _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width:' + this._contentMaxWidth + 'px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 3px 50px 0;"></span>';
        var c = this._msg;
        b += c;
        b += "</div>";
        return b
    },
    _escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    },
    setHideCloseButton: function (a) {
        this._hideCloseButton = a
    },
    setHideCancelButton: function (a) {
        this._hideCancelButton = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.DataUsageDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.DataUsageDialog.prototype = {
    _data: null,
    _listener: null,
    _administrator: null,
    _iportalBaseURL: null,
    _helpDocBase: null,
    _productVesion: null,
    _productName: null,
    _oldacode: null,
    _activationUrl: null,
    _pingtestUrl: null,
    _locale: null,
    initialize: function () {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._contentView = new actuate.common.web.widget.ui.view.common.DataUsage
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._contentView.addListener(a, b)
        }
    },
    _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    setData: function (a) {
        this._contentView.setData(a)
    },
    getData: function () {
        return this._contentView.getData()
    },
    _NOOP: function () {
        return
    },
    _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    },
    render: function (a) {
        var b = null;
        var c = {modal: true, showFooter: false, hideCloseButton: false, cls: "ftype-usage"};
        var d = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.DataUsage.Title");
        this._contentView._administrator = this._administrator;
        this._contentView._iportalBaseURL = this._iportalBaseURL;
        this._contentView._helpDocBase = this._helpDocBase;
        this._contentView._productVesion = this._productVesion;
        this._contentView._productName = this._productName;
        this._contentView._oldacode = this._oldacode;
        this._contentView._activationUrl = this._activationUrl;
        this._contentView._pingtestUrl = this._pingtestUrl;
        this._contentView._locale = this._locale;
        b = new actuate.common.web.widget.dialog.Dialog(a, d, this._contentView, c);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.Dialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.Dialog.prototype = {
    _autoOpen: false,
    _containerId: null,
    _element: null,
    _contentID: null,
    _dialogID: null,
    _content: null,
    _modal: false,
    _rendered: false,
    _width: null,
    _height: null,
    _buttons: null,
    _dlgEl: null,
    _hideCloseButton: true,
    _primaryHandler: null,
    _cls: "",
    _showFooter: true,
    _infoMap: {warning: {icon: "icon-ygg-check with-divider"}},
    initialize: function (a, b, c, d) {
        this._containerId = a;
        this._title = b;
        this._content = c;
        if (d) {
            if (d["modal"]) {
                this._modal = true
            }
            this._width = d["width"] || this._width;
            this._height = d["height"] || this._height;
            this._buttons = d["buttons"];
            this._autoOpen = d["autoOpen"];
            this._isMsgDlg = d["isMsgDlg"];
            this._titleIconType = d["titleIconType"];
            this._cls = d["cls"];
            this._showFooter = d["showFooter"];
            this._hideCloseButton = d["hideCloseButton"] === false ? false : true;
            if (d.minheight) {
                this._minheight = d.minheight
            }
            if (d.minwidth) {
                this._minwidth = d.minwidth
            }
        }
        if (this._autoOpen != true) {
            this._autoOpen = false
        }
        this._dialogID = "act_dlg-" + this._containerId + "-" + actuate.common.web.$(".act_dlg").length;
        this._element = actuate.common.web.$(this._getDialogTemplate())
    },
    _getDialogHeader: function () {
        var a = actuate.common.web.$('<div class="modal-header"></div>');
        var b = '<h3 class="green-highlight-color">';
        if (this._titleIconType) {
            b += '<i class="' + this._infoMap[this._titleIconType].icon + " green-highlight-color" + '"></i>'
        }
        b += this._title + "</h3>";
        var c = actuate.common.web.$(b);
        if (!this._hideCloseButton) {
            var d = actuate.common.web.$('<a id="closeicon" class="close close-dialog">&times;</a>');
            d.click(actuate.common.web.Method.bind(this.close, this));
            d.appendTo(c)
        }
        c.appendTo(a);
        return a
    },
    _getDialogTemplate: function () {
        return '<div id="' + this._dialogID + '" class="act-dlg"/>'
    },
    _getContentTemplate: function () {
        return '<div id="' + this._getContentDivId() + '" class="act-dlg-cnt form-horizontal modal-body modal-dialog-body"/>'
    },
    _getMasterDialogTemplate: function () {
        var a = "width: ";
        var b = "height: ";
        var c = "max-height: ";
        var d = "min-height: ";
        var e = "min-width: ";
        if (this._width) {
            a += this._width + "px;"
        } else {
            a += "auto;"
        }
        if (this._height) {
            b += this._height + "px;"
        } else {
            b += "auto;"
        }
        if (this._minheight) {
            d += this._minheight + "px;"
        } else {
            d += "auto;"
        }
        if (this._minwidth) {
            e += this._minwidth + "px;"
        } else {
            e += "auto;"
        }
        var f = "";
        if (a || b || d) {
            f = ' style="' + b + " " + d + " " + a + " " + e + '"'
        }
        var g = "";
        if (this._isMsgDlg === true) {
            g = "acmsgdlg "
        }
        var h = "";
        if (this._titleIconType == "warning") {
            h = "modal-warning"
        }
        return '<div id="' + this._getMasterDialogDivId() + '" class="dlg-warn ' + g + " " + h + " modal hide fade " + this._cls + '" tabindex="-1"' + f + "/>"
    },
    _getMasterDialogDivId: function () {
        return this._dialogID + "-main"
    },
    _getDialogFooter: function () {
        var a = actuate.common.web.$('<div class="modal-footer"></div>');
        for (var b = 0; this._buttons && b < this._buttons.length; b++) {
            var c = this._buttons[b];
            var d = c.label;
            var e = c.handler;
            var f = d;
            var g = {buttonType: c.type, title: f, click: e, width: "100px"};
            if (c.type === "inverse" || c.type === "primary") {
                this._primaryHandler = e
            }
            var h = new actuate.common.web.widget.control.Button(g);
            h.appendTo(a)
        }
        return a
    },
    setContent: function (a) {
        this._content = a;
        if (this._rendered) {
            this._renderDialogContent()
        }
    },
    getContent: function () {
        return this._content
    },
    _getContentDivId: function () {
        return this._dialogID + "-cnt"
    },
    _renderDialogContent: function () {
        if (this._content) {
            var a = this._getContentDivId();
            var b = actuate.common.web.$("#" + a);
            b.html("");
            this._content.render(a, this._getMasterDialogDivId());
            this._rendered = true;
            b.bind("keypress", actuate.common.web.Method.bind2(this._onEnterKey, this, this._primaryHandler))
        }
    },
    render: function () {
        if (!this._rendered) {
            this._renderDialogDiv();
            this._renderDialogContent()
        }
        var a = actuate.common.web.$(".modal-notification");
        if (a) {
            a.remove()
        }
        var b = actuate.common.web.$(window).height();
        var c = this._dlgEl.height();
        var d = actuate.common.web.$(window).width();
        var e = this._dlgEl.width();
        var f = actuate.common.web.$(window).scrollTop();
        var g = actuate.common.web.$(window).scrollLeft();
        var h = b / 2 - c / 2;
        if (h < 0) {
            h = 0
        }
        var i = d / 2 - e / 2;
        if (i < 0) {
            i = 0
        }
        this._dlgEl.offset({top: f + 1 / 2 * h, left: g + i})
    },
    _renderDialogDiv: function () {
        if (actuate.common.web.$("#" + this._getMasterDialogDivId()).length > 0) {
            actuate.common.web.$("#" + this._getMasterDialogDivId()).remove()
        }
        this._dlgEl = actuate.common.web.$(this._getMasterDialogTemplate());
        var a = this._getDialogHeader();
        a.appendTo(this._dlgEl);
        var b = actuate.common.web.$(this._getContentTemplate());
        b.appendTo(this._dlgEl);
        if (this._showFooter !== false) {
            var c = this._getDialogFooter();
            c.appendTo(this._dlgEl)
        }
        this._dlgEl.appendTo(this._element);
        var d = actuate.common.web.$("#" + this._containerId);
        this._element.appendTo(d);
        var e = "show";
        if (this._isMsgDlg === true) {
            e = {backdrop: false}
        }
        this._dlgEl.modal(e);
        this._dlgEl.keyup(actuate.common.web.Method.bind(this._onESCKey, this));
        this._dlgEl.draggable({handle: ".modal-header"});
        if (this._isMsgDlg === true) {
            this._backdrop = actuate.common.web.$(this._getMsgBackDropTemplate());
            this._backdrop.appendTo(actuate.common.web.$("#" + this._containerId))
        }
    },
    _getMsgBackDropTemplate: function () {
        var a = '<div class="act-msgDlg"><div class="modal-backdrop"></div></div>';
        return a
    },
    _getIgnoreEnterKey: function () {
        if (this._ignoreEnterKey === undefined) {
            var a = (new Date).getTime();
            if (this._startTimeDelay) {
                if (a < this._startTimeDelay) {
                    return false
                }
            }
            this._startTimeDelay = (new Date).getTime() + 600;
            return true
        }
        return this._ignoreEnterKey
    },
    okToListenOnEnterKey: function (a) {
        this._ignoreEnterKey = a
    },
    _onESCKey: function (a) {
        if (a.keyCode == 27) {
            this.close();
            return false
        }
    },
    _onEnterKey: function (a, b) {
        if (b.keyCode == 13 && a) {
            if (this._getIgnoreEnterKey() === true) {
                a()
            }
            return false
        }
    },
    close: function () {
        this._dlgEl.modal("hide");
        this._dlgEl.remove();
        this._element.remove();
        if (this._backdrop) {
            this._backdrop.remove()
        }
        if (document.getElementById("PopUpCalendar")) {
            hideCalendar()
        }
    },
    setHideCloseButton: function (a) {
        this._hideCloseButton = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ExitDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ExitDialog.prototype = {
    _type: null,
    _msg: null,
    _dialogID: null,
    _containerID: null,
    _callbackOK: null,
    _hideCloseButton: true,
    _hideCancelButton: false,
    _contentMaxWidth: 500,
    _infoMap: {
        error: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        info: {icon: "icon-info-sign", cls: "alert alert-info"},
        warning: {icon: "icon-warning-sign", cls: "alert alert-block"},
        severe: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        confirmation: {icon: "icon-warning-sign", cls: "alert alert-block"}
    },
    initialize: function (a) {
        if (this.__extending) return;
        this._type = "info";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        if (a) {
            this._containerID = a.id;
            if (a.type === "warning") {
                this._type = "warning"
            } else if (a.type === "error") {
                this._type = "error"
            } else if (a.type === "severe") {
                this._type = "severe"
            }
            this._containerID = a.id;
            this._msg = a.msg;
            this._dialogConfig = a.dialogConfig;
            if (a.isMsgDlg) {
                this._isMsgDlg = true
            }
            this._title = a.dialogConfig.title;
            if (a.contentMaxWidth) {
                this._contentMaxWidth = a.contentMaxWidth
            }
        }
        this._dialogID = this._containerID + "-" + actuate.common.web.util.Utility.createUniqueControlID() + "-" + actuate.common.web.$(".act_dlg").length;
        var b = actuate.common.web.$("<div id='" + this._dialogID + "'>");
        b.addClass(this._type);
        b.appendTo(actuate.common.web.$("#" + this._containerID))
    },
    register: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewProfile.addListener(a, b)
        }
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    render: function () {
        var a = null;
        var b = this;
        var c = false;
        if (this._dialogConfig.isMsgDlg) {
            c = true
        }
        var d = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var e = function () {
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler()
            }
        };
        var f = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var g = {render: actuate.common.web.Method.bind(f, this)};
        var h = this._dialogConfig.okButton.buttonType ? this._dialogConfig.okButton.buttonType : "secondary";
        var i = this._dialogConfig.cancelButton.buttonType ? this._dialogConfig.cancelButton.buttonType : "primary";
        var j = [{
            label: this._dialogConfig.cancelButton.label,
            handler: actuate.common.web.Method.bind(d, this),
            type: i
        }, {label: this._dialogConfig.okButton.label, handler: actuate.common.web.Method.bind(e, this), type: h}];
        if (this._hideCancelButton) {
            j.shift()
        }
        var k = {buttons: j, modal: true, isMsgDlg: c};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, g, k);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    },
    _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width:' + this._contentMaxWidth + 'px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 3px 50px 0;"></span>';
        var c = this._msg;
        b += c;
        b += "</div>";
        return b
    },
    _escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    },
    setHideCloseButton: function (a) {
        this._hideCloseButton = a
    },
    setHideCancelButton: function (a) {
        this._hideCancelButton = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ExportDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ExportDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewExport = new actuate.common.web.widget.ui.view.common.Export(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewExport.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewExport.setData(a)
    }, getData: function () {
        return this._viewExport.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._export, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = function () {
            this._invokeListener("ON_OK", b)
        };
        var d = function () {
            this._invokeListener("ON_CANCEL", b)
        };
        var e = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "secondary"
        }, {
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.ExportXLS"),
            handler: actuate.common.web.Method.bind(c, this),
            type: "primary"
        }];
        var f = {buttons: e, modal: true};
        var g = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Export.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, g, this._viewExport, f);
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.IntegrateDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.IntegrateDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewInteract = new actuate.common.web.widget.ui.view.common.Integrate(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        this._viewInteract.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewInteract.setData(a)
    }, getData: function () {
        return this._viewInteract.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Interact.Settings"),
            renderer: this._viewInteract
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Integrate.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.setHideCloseButton(false);
        b.render();
        var i = actuate.common.web.$("#" + b._getContentDivId());
        i.unbind("keypress")
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.InteractDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.InteractDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewInteract = new actuate.common.web.widget.ui.view.common.Interact(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewInteract.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewInteract.setData(a)
    }, getData: function () {
        return this._viewInteract.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c =
            {
                title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
                okButton: {
                    label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                    handler: actuate.common.web.Method.bind(this._NOOP, this)
                }
            };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Interact.Settings"),
            renderer: this._viewInteract
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Interact.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.MsgDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.MsgDialog.prototype = {
    _type: null,
    _msg: null,
    _containerID: null,
    _showDetail: true,
    _infoMap: {
        error: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        info: {icon: "icon-info-sign", cls: "alert alert-info"},
        warning: {icon: "icon-warning-sign", cls: "alert alert-block"},
        severe: {icon: "icon-exclamation-sign", cls: "alert alert-error"}
    },
    initialize: function (a) {
        if (this.__extending) return;
        this._type = "info";
        if (a) {
            this._containerID = a.id;
            if (a.type === "warning") {
                this._type = "warning"
            } else if (a.type === "error") {
                this._type = "error"
            } else if (a.type === "severe") {
                this._type = "severe"
            }
            this._containerID = a.id;
            this._msg = a.msg
        }
        if (a.showDetail !== undefined) {
            this._showDetail = a.showDetail
        }
        this._dialogConfig = a.dialogConfig
    },
    render: function () {
        var a = null;
        var b = this;
        var c = function () {
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler()
            }
        };
        var d = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var e = {render: actuate.common.web.Method.bind(d, this)};
        var f = [{label: this._dialogConfig.okButton.label, handler: c, type: "primary"}];
        var g = {buttons: f, modal: true, isMsgDlg: true, type: this._type};
        a = new actuate.common.web.widget.dialog.MsgDialogEx(this._containerID, this._dialogConfig.title, e, g);
        a.render()
    },
    _isEmptyString: function (a) {
        var b = a + "";
        if (b.length === 0) {
            return true
        }
        return false
    },
    _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = actuate.common.web.util.Utility.createUniqueControlID();
        var c = '<div id="' + b + '-msg">';
        c += '<span class="' + a.icon + '" style="float:left; margin:0 0px 50px 0;"></span>';
        var d = " ";
        var e;
        if (this._msg instanceof actuate.common.web.Exception) {
            var f = !this._isEmptyString(this._msg.getErrCode()) ? this._msg.getErrCode() + ": " : "";
            d = f + this._escapeHtml(this._msg.getMessage()) + "<br>";
            if (this._showDetail === true) {
                var g = this._msg.getParameters();
                if (g) {
                    for (e = 0; e < g.length; e++) {
                        d += "Parameter" + e + ": " + g[e] + "<br>"
                    }
                }
            }
        } else {
            for (e = 0; e < this._msg.length; e++) {
                var h = this._msg[e];
                if (h.successLabel && h.successMessage) {
                    label = h.successLabel;
                    message = h.successMessage
                } else {
                    label = h.errorLabel;
                    message = h.errorMessage
                }
                d += label + " " + message + "<br>"
            }
        }
        c += d;
        c += "</div>";
        return c
    },
    _escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    }
};
actuate.common.web.widget.dialog.MsgDialogEx = actuate.common.web.Class.extendClass(actuate.common.web.widget.dialog.Dialog, {
    _dialogID: null,
    initialize: function (a, b, c, d) {
        if (this.__extending) return;
        this._dialogID = a + "-" + actuate.common.web.util.Utility.createUniqueControlID() + "-" + actuate.common.web.$(".act_dlg").length;
        this._wrapperEl = actuate.common.web.$("<div id='" + this._dialogID + "'>");
        this._wrapperEl.appendTo(actuate.common.web.$("#" + a));
        this._wrapperEl.addClass(d.type);
        d["hideCloseButton"] = false;
        actuate.common.web.widget.dialog.MsgDialogEx.superclass.initialize.call(this, this._dialogID, b, c, d)
    },
    close: function () {
        actuate.common.web.widget.dialog.MsgDialogEx.superclass.close.apply(this, arguments);
        this._wrapperEl.remove()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.MyProfileDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.MyProfileDialog.prototype = {
    _data: null, _listener: null, _freemium: null, initialize: function () {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewProfile = new actuate.common.web.widget.ui.view.common.MyProfile
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewProfile.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewProfile.setData(a)
    }, getData: function () {
        return this._viewProfile.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.MyProfile.Settings"),
            renderer: this._viewProfile
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
            handler: actuate.common.web.Method.bind(e, this),
            type: "secondary"
        }, {
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Save"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.MyProfile.Title");
        this._viewProfile._freemium = this._freemium;
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ProductAboutDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ProductAboutDialog.prototype = {
    _data: null, _listener: null, _freemium: null, initialize: function () {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._about = new actuate.common.web.widget.ui.view.common.ProductAbout
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._about.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._about.setData(a)
    }, getData: function () {
        return this._about.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.About.Title"), renderer: this._about};
        var d = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var e = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var f = {buttons: e, modal: true};
        var g = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.About.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, g, c.renderer, f);
        b.render();
        actuate.common.web.$(".modal-header")[0].children[0].style.fontSize = "22px"
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ProgressDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ProgressDialog.prototype = {
    _autoOpen: false,
    _containerId: null,
    _element: null,
    _contentID: null,
    _dialogID: null,
    _content: null,
    _modal: false,
    _rendered: false,
    _width: null,
    _height: null,
    _dlgEl: null,
    _hideCloseButton: true,
    _primaryHandler: null,
    _progressBarConfig: {},
    _delay: 1 * 1e3,
    _timer: null,
    _counterIdx: 0,
    initialize: function (a, b, c, d) {
        this._containerId = a;
        this._title = b;
        this._content = c;
        if (d) {
            if (d["modal"]) {
                this._modal = true
            }
            this._width = d["width"] || this._width;
            this._height = d["height"] || this._height;
            this._autoOpen = d["autoOpen"];
            this._hideCloseButton = d["hideCloseButton"] === false ? false : true;
            if (d.minheight) {
                this._minheight = d.minheight
            }
            if (d.minwidth) {
                this._minwidth = d.minwidth
            }
        }
        if (this._autoOpen != true) {
            this._autoOpen = false
        }
        this._dialogID = "act_dlg-" + this._containerId + "-" + actuate.common.web.$(".act_dlg").length;
        this._element = actuate.common.web.$(this._getDialogTemplate())
    },
    _getDialogTemplate: function () {
        return '<div id="' + this._dialogID + '" class="act-dlg"/>'
    },
    _getContentTemplate: function () {
        return '<div id="' + this._getContentDivId() + '" class="act-dlg-cnt modal-body"/>'
    },
    _getMasterDialogTemplate: function () {
        var a = "width: ";
        var b = "height: ";
        var c = "max-height: ";
        var d = "min-height: ";
        var e = "min-width: ";
        if (this._width) {
            a += this._width + "px;"
        } else {
            a += "auto;"
        }
        if (this._height) {
            b += this._height + "px;"
        } else {
            b += "auto;"
        }
        if (this._minheight) {
            d += this._minheight + "px;"
        } else {
            d += "auto;"
        }
        if (this._minwidth) {
            e += this._minwidth + "px;"
        } else {
            e += "auto;"
        }
        var f = "";
        if (a || b || d) {
            f = ' style="' + b + " " + d + " " + a + " " + e + '"'
        }
        return '<div id="' + this._getMasterDialogDivId() + '" class="modal hide fade" tabindex="-1"' + f + "/>"
    },
    _getMasterDialogDivId: function () {
        return this._dialogID + "-main"
    },
    _getContentDivId: function () {
        return this._dialogID + "-cnt"
    },
    _renderDialogContent: function () {
        var a = this._getContentDivId();
        var b = actuate.common.web.$("#" + a);
        b.html("");
        var c = "";
        if (this._content) {
            c = '<div><i class="icon-ygg-spinner icon-large icon-spin"></i> ' + this._content + " </div>"
        } else {
            c = '<div><i class="icon-ygg-spinner icon-large icon-spin"></i></div>'
        }
        actuate.common.web.$(c).appendTo(b);
        var d = actuate.common.web.$(window).height();
        var e = this._dlgEl.height();
        var f = actuate.common.web.$(window).width();
        var g = this._dlgEl.width();
        var h = actuate.common.web.$(window).scrollTop();
        var i = actuate.common.web.$(window).scrollLeft();
        var j = d / 2 - e / 2;
        var k = f / 2 - g / 2;
        this._dlgEl.offset({top: h + 1 / 2 * j, left: i + k})
    },
    render: function (a) {
        if (this._counterIdx <= 0) {
            this._rendered = false;
            this._showGlobalContainer();
            var b = actuate.common.web.Method.bind2(this._showProgressDlg, this, a);
            this._timer = window.setTimeout(b, this._delay)
        }
        this._counterIdx++
    },
    _showGlobalContainer: function () {
        var a = this._getGlobalContainerEl();
        a.empty();
        a.show()
    },
    _getGlobalContainerEl: function () {
        var a = actuate.common.web.$("#" + this._getGlobalId());
        if (a.length === 0) {
            var b = this._bodyHtmlTemplate();
            a = actuate.common.web.$(b);
            a.appendTo(document.body)
        }
        return a
    },
    _renderDialogDiv: function () {
        if (actuate.common.web.$("#" + this._getMasterDialogDivId()).length > 0) {
            actuate.common.web.$("#" + this._getMasterDialogDivId()).remove()
        }
        this._dlgEl = actuate.common.web.$(this._getMasterDialogTemplate());
        var a = actuate.common.web.$(this._getContentTemplate());
        a.appendTo(this._element);
        this._element.appendTo(this._dlgEl);
        var b = this._getGlobalContainerEl();
        this._dlgEl.appendTo(b);
        this._dlgEl.modal("show");
        this._dlgEl.draggable({handle: ".modal-header"})
    },
    _getGlobalId: function () {
        if (!this._progressBarConfig.globalId) {
            this._progressBarConfig.globalId = "acwebprogid" + actuate.common.web.util.Utility.createUniqueControlID()
        }
        return this._progressBarConfig.globalId
    },
    _bodyHtmlTemplate: function () {
        var a = this._getGlobalId();
        var b = '<div class="' + actuate.common.web.util.Utility.getRootCSSNamespace() + ' ac-progressbar" id="' + a + '"></div>';
        return b
    },
    _showProgressDlg: function (a) {
        if (this._rendered == false && this._timer != null) {
            this._clearTimeOut();
            this._rendered = true;
            this._content = "";
            if (a) {
                this._content = a
            }
            this._element.empty();
            this._renderDialogDiv();
            this._renderDialogContent()
        }
    },
    _clearTimeOut: function () {
        if (this._timer) {
            window.clearTimeout(this._timer);
            this._timer = null
        }
    },
    close: function () {
        this._counterIdx--;
        this._clearTimeOut();
        if (this._counterIdx <= 0) {
            this._rendered = false;
            if (this._dlgEl) {
                this._dlgEl.modal("hide");
                this._dlgEl.remove()
            }
            var a = actuate.common.web.$("#" + this._getGlobalId());
            if (a.length != 0) {
                a.hide()
            }
            this._counterIdx = 0
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.SchedulerDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.SchedulerDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewScheduler = new actuate.common.web.widget.ui.view.common.Scheduler(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewScheduler.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewScheduler.setData(a)
    }, getData: function () {
        return this._viewScheduler.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Scheduler.Settings"),
            renderer: this._viewScheduler
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
            handler: actuate.common.web.Method.bind(e, this),
            type: "secondary"
        }, {
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Schedule"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Scheduler.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b._width = "625px;";
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ShareDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ShareDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewShare = new actuate.common.web.widget.ui.view.common.Share(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewShare.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewShare.setData(a)
    }, getData: function () {
        return this._viewShare.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Share.Settings"),
            renderer: this._viewShare
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Share.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.AddEdit = actuate.common.web.Class.create();
actuate.common.web.widget.layout.AddEdit.prototype = {
    _config: null, initialize: function (a, b, c, d) {
        if (this.__extending) return;
        this._config = {containerId: a, title: b, content: c, handlers: d.handlers};
        this._initView()
    }, render: function () {
        var a = actuate.common.web.$("#" + this._config.containerId);
        a.html("");
        this._el.appendTo(a);
        this._createHeader(this._el);
        this._createContent(this._el)
    }, _createHeader: function (a) {
        var b = actuate.common.web.$('<div id="header' + this._config.containerId + '" class="view-header-bar"></div>');
        b.appendTo(a);
        var c = actuate.common.web.$('<div class="view-header-bar-inner"></div>');
        c.appendTo(b);
        var d = this._config.handlers;
        var e = "<h2 class='view-header-title view-header-title-left'>" + "{value}" + "</h2>";
        var f = actuate.common.web.widget.control.GridUtil.generateItem(null, this._config.title, null, null, null, null, null, e);
        var g = d["backarrow"] ? actuate.common.web.widget.control.GridUtil.generateItem("back", d["backarrow"].title, null, null, null, d["backarrow"].handler, "acaddedit-back", null) : null;
        var h = {items: [{items: [f]}, {items: [g]}]};
        var i = {store: [h]};
        var j = new actuate.common.web.widget.layout.EditHeaderBar(i);
        j.appendTo(c)
    }, _createContent: function (a) {
        var b = "content" + this._config.containerId;
        var c = actuate.common.web.$('<div id="' + b + '" class="view-update-content"></div>');
        c.appendTo(a);
        if (this._config.content) {
            c.html("");
            this._config.content.render(b, actuate.common.web.Method.bind(this._createFooter, this));
            this._rendered = true
        }
        return c
    }, getContent: function () {
        return this._config.content
    }, _createFooter: function (a) {
        var b = this._config.handlers;
        if (b.save && b.cancel) {
            actuate.common.web.$("<br>").appendTo(a);
            var c = actuate.common.web.$('<div id="footer' + this._config.containerId + '" class="view-update-footer"></div>');
            c.appendTo(a);
            var d = actuate.common.web.$('<div class="btn-group"></div>');
            var e = actuate.common.web.$('<div class="btn-group"></div>');
            d.appendTo(c);
            e.appendTo(c);
            var f = {onItemClick: b["save"].handler};
            var g = new actuate.common.web.widget.control.GridItemListener(f);
            var h = b["save"] ? actuate.common.web.widget.control.GridUtil.generateItem("save", b["save"].title, "save", null, null, null, "btn-primary header-right-button btn-wide", null, null, g) : null;
            f = {onItemClick: b["cancel"].handler};
            g = new actuate.common.web.widget.control.GridItemListener(f);
            var i = b["cancel"] ? actuate.common.web.widget.control.GridUtil.generateItem("cancel", b["cancel"].title, "cancel", null, null, null, "header-right-button btn-wide", null, null, g) : null;
            var j = new actuate.common.web.widget.control.GridItem(i);
            j.appendTo(d);
            var k = new actuate.common.web.widget.control.GridItem(h);
            k.appendTo(e)
        }
    }, _renderView: function () {
    }, _initView: function () {
        this._el = actuate.common.web.$('<div class="view-update"></div>')
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.BaseHeaderbar = actuate.common.web.Class.create();
actuate.common.web.widget.layout.BaseHeaderbar.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="headerwrap_' + a + "\" class='view-header-content'>";
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendHeader()
    }, onUnload: function () {
        this._element.html("")
    }, _appendHeader: function () {
        this._divObject = actuate.common.web.$("<div id='titleandsearch'></div>");
        for (var a = 0; a < this._config.items.length; a++) {
            this._appendItems(this._config.items[a])
        }
        this._divObject.appendTo(this._element);
        setTimeout(function () {
            if (actuate.common.web.$(".search") && actuate.common.web.$(".search").length > 0) actuate.common.web.$(".search")[0].focus()
        }, 0)
    }, _appendItems: function (a) {
        var b = null;
        switch (a.items.type) {
            case"add":
                b = this._getAddComponent(a.items);
                b.appendTo(this._element);
                break;
            case"search":
                b = this._getSearchComponent(a.items);
                b.prependTo(this._divObject);
                break;
            case"emptyadd":
                b = this._getEmptyAddComponent(a.items);
                b.prependTo(this._element);
                break;
            default:
                if (a.items.length != 0) {
                    b = this._getTextComponent(a.items);
                    b.appendTo(this._divObject)
                } else {
                    b = actuate.common.web.$("<a></a>");
                    b.appendTo(this._element)
                }
                break
        }
    }, _getAddComponent: function (a) {
        var b = actuate.common.web.$("<div class='view-header-bar-left'></div>");
        var c = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var d = actuate.common.web.Method.bind2(this._buttonHandler, this, c);
        var e = new actuate.common.web.widget.control.GridItem(a);
        e.appendTo(b);
        b.click(function () {
            d(a.type)
        });
        return b
    }, _getEmptyAddComponent: function (a) {
        var b = actuate.common.web.$("<div class='view-header-bar-left'><div class='hiddenplaceholder' style='visibility:hidden'>ACTUATE</div></div>");
        return b
    }, _getSearchComponent: function (a) {
        var b = actuate.common.web.$("<div class='header-bar-search-box'></div>");
        var c = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var d = actuate.common.web.Method.bind2(this._buttonHandler, a, c);
        a.listener.onItemClick = d;
        var e = new actuate.common.web.widget.control.GridItem(a);
        e.appendTo(b);
        var f = this;
        var g;
        b.find("input").keyup(function (c) {
            var e = b.find("input");
            clearTimeout(g);
            g = setTimeout(function () {
                if (c.keyCode != 0) {
                    if (c.keyCode != 13) {
                        a.data = e.val()
                    }
                    actuate.common.web.$(".search-delete-text-icon").css("display", "block")
                } else {
                    a.data = e.val().substring(0, e.val().length - 1)
                }
                d(a.type, a.data);
                if (a.data == "") {
                    actuate.common.web.$(".search-delete-text-icon").css("display", "none")
                }
            }, 500)
        });
        b.find(".search-delete-text-icon").click(function (b) {
            a.data = "";
            this.value = "";
            actuate.common.web.$(".header-bar-search-box").find("input").val("");
            d(a.type, a.data);
            actuate.common.web.$(".search-delete-text-icon").css("display", "none")
        });
        return b
    }, _getTextComponent: function (a) {
        var b = new actuate.common.web.widget.control.GridItem(a);
        return b
    }, _buttonHandler: function (a, b, c, d) {
        var e = null;
        if (a) {
            if (c != null) {
                e = {event: {data: c}}
            }
            a(b, e)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.BaseMenubar = actuate.common.web.Class.create();
actuate.common.web.widget.layout.BaseMenubar.prototype = {
    CONTENT_ID_PREFIX: "act_menu_cnt_",
    HREF_ID_PREFIX: "act_menu_href_",
    _configMenus: null,
    _selectedMenu: null,
    _idsOfMainItems: null,
    _idsOfSubItems: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    initComponent: function () {
        var a = this.getTemplate();
        var b = actuate.common.web.util.Utility.getRootCSSNamespace();
        a = '<div class="' + b + '">' + a + "</div>";
        this._element = actuate.common.web.$(a);
        this._element.attr("id", "act_menu_panel-" + this._containerId + "-" + actuate.common.web.$(".act_menu_panel").length)
    },
    addMenuItem: function (a) {
        this._configMenus.main.items.push(a)
    },
    onMainMenuClick: function (a, b) {
        var c = "li_" + this._getHrefId(a, b);
        var d = actuate.common.web.$("#" + c);
        if (d && d.hasClass("disabled")) {
            arguments[2].stopPropagation()
        } else {
            var e = b.items[a];
            var f = e.renderer;
            if (f) {
                var g = this._getArrayOfMenuItemIds(a, b);
                f.render(e, g)
            }
        }
    },
    onMenuClick: function (a, b) {
        this._setActiveMenu(a, b);
        this._renderContentMenu(a, b)
    },
    onSubMenuClick: function (a, b) {
        var c = b.renderer;
        if (c) {
            var d = "submemuItem_" + this._getContentId(a, b);
            c.render(d, b)
        }
    },
    _getArrayOfMenuItemIds: function (a, b) {
        var c = null;
        var d = b.items[a];
        var e = d.menu;
        if (e && e.length > 0) {
            c = new Array;
            for (var f = 0; f < e.length; f++) c.push("li_memuItem_" + this._getContentId(a + "_" + f, b))
        }
        return c
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._rendered = true
        }
    },
    getTemplate: function () {
        var a = '<div class="acnavbar"><div class="navbar">' + '<ul class="acmenu nav">' + "</ul>" + "</div>";
        return a
    },
    _getContentId: function (a, b) {
        return this.CONTENT_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getHrefId: function (a, b) {
        return this.HREF_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _setActiveMenu: function (a, b) {
        var c = this._selectedMenu.idx;
        if (this._selectedMenu.config) {
            actuate.common.web.$("#" + this._getHrefId(c, this._selectedMenu.config)).removeClass("active");
            actuate.common.web.$("#" + this._getContentId(c, this._selectedMenu.config)).hide()
        }
        this._selectedMenu.idx = a;
        this._selectedMenu.config = b;
        actuate.common.web.$("#" + this._getHrefId(a, b)).addClass("active");
        actuate.common.web.$("#" + this._getContentId(a, b)).show()
    },
    _renderMenus: function () {
        this._element.prependTo(actuate.common.web.$("#" + this._containerId));
        var a = this._element.find(".nav");
        this._idsOfMainItems = new Array;
        this._idsOfSubItems = new Array;
        for (var b = 0; b < this._configMenus.main.items.length; b++) {
            this._createMenuItem(b, this._configMenus.main.items[b], a, this._configMenus.main)
        }
        this._rendertoolbarSpecificItems()
    },
    _rendertoolbarSpecificItems: function () {
    },
    _updateParentLabel: function (a, b, c) {
        var d = this._getHrefId(b, c);
        var e = this._element.find("#" + d)[0];
        e.innerHTML = "";
        e.innerHTML = a
    },
    _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            c.render(this._getContentId(a, b))
        }
    },
    _getContentRenderer: function (a, b) {
        var c = b.items[a];
        if (c) {
            return c.renderer
        }
        if (b.items.length == 0) return;
        var d = a.split("_");
        c = b.items[d[0]];
        var e = 0;
        for (var f = 1; f < d.length; f++) {
            e = d[f];
            c = c.menu[e]
        }
        var g = c.type;
        if (g != "external") {
            this._updateParentLabel(c.text, d[0], b)
        }
        return c.renderer
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.BaseNav = actuate.common.web.Class.create();
actuate.common.web.widget.layout.BaseNav.prototype = {
    CONTENT_ID_PREFIX: "act_menu_cnt_",
    HREF_ID_PREFIX: "act_menu_href_",
    _configMenus: null,
    _selectedMenu: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    initComponent: function () {
        var a = this.getTemplate();
        var b = actuate.common.web.util.Utility.getRootCSSNamespace();
        a = '<div class="' + b + '">' + a + "</div>";
        this._element = actuate.common.web.$(a);
        this._element.attr("id", "act_menu_panel-" + this._containerId + "-" + actuate.common.web.$(".act_menu_panel").length)
    },
    addMenuItem: function (a) {
        this._configMenus.main.items.push(a)
    },
    onMenuClick: function (a, b) {
        this._setActiveMenu(a, b)
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._rendered = true
        }
    },
    getTemplate: function () {
        var a = '<div class="application-nav">' + '<div class="application-nav-inner">' + '<ul class="nav-right pull-right">' + "</ul>" + '<ul class="nav nav-tabs">' + "</ul>" + "</div>" + "</div>";
        return a
    },
    _getSubMenuLabelTemplate: function (a) {
        return a + ' <i class="caret"></i>'
    },
    getSubMenuTemplate: function (a, b) {
        var c = '<li><div class="dropdown submenu">' + '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown">' + this._getSubMenuLabelTemplate(b) + "</a>" + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>" + "</div></li>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    getMenuLinkTemplate: function (a) {
        return '<a class="acmenu" data-toggle="pill">' + a + "</a>"
    },
    _createSingleMenuItem: function (a, b, c, d) {
        var e = actuate.common.web.$("<li>");
        if (b.cssClass && b.cssClass == "divider") {
            e.addClass("divider")
        } else {
            var f = b.text;
            var g = b.type;
            var h = actuate.common.web.$(this.getMenuLinkTemplate(f));
            h.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a, c));
            e.append(h);
            e.addClass(b.cssClass);
            if (g == "external") {
                h.append(actuate.common.web.$('<i class="icon-share"></i>'))
            }
            var i = this._getContentId(a, c);
            var j = actuate.common.web.util.Utility.getRootCSSNamespace();
            var k = actuate.common.web.$('<div id="' + i + '" class="' + j + '"></div>');
            actuate.common.web.$("#" + this._containerId).append(k)
        }
        if (a == 0 && d === true) {
            e.addClass("active")
        }
        b.index = a;
        return e
    },
    _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleMenuItem(a, b, d, false);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getSubMenuTemplate(g, b.text);
        var i = actuate.common.web.$(h);
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d, true);
            j.append(f)
        }
    },
    _getContentId: function (a, b) {
        return this.CONTENT_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getHrefId: function (a, b) {
        return this.HREF_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _setActiveMenu: function (a, b) {
        var c = this._selectedMenu.idx;
        if (this._selectedMenu.config) {
            actuate.common.web.$("#" + this._getHrefId(c, this._selectedMenu.config)).removeClass("active");
            actuate.common.web.$("#" + this._getContentId(c, this._selectedMenu.config)).hide()
        }
        this._selectedMenu.idx = a;
        this._selectedMenu.config = b;
        actuate.common.web.$("#" + this._getHrefId(a, b)).addClass("active");
        actuate.common.web.$("#" + this._getContentId(a, b)).show();
        this._renderContentMenu(a, b)
    },
    _renderMenus: function () {
        this._element.prependTo(actuate.common.web.$("#" + this._containerId));
        var a = this._element.find(".nav");
        for (var b = 0; b < this._configMenus.main.items.length; b++) {
            this._createMenuItem(b, this._configMenus.main.items[b], a, this._configMenus.main)
        }
    },
    _updateParentLabel: function (a, b, c) {
        var d = this._getHrefId(b, c);
        var e = this._element.find("#" + d)[0];
        var f = this._getSubMenuLabelTemplate(a);
        e.innerHTML = "";
        e.innerHTML = f
    },
    _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            c.render(this._getContentId(a, b))
        }
    },
    _getContentRenderer: function (a, b) {
        var c = b.items[a];
        if (c) {
            return c.renderer
        }
        if (b.items.length == 0) return;
        var d = a.split("_");
        c = b.items[d[0]];
        var e = 0;
        for (var f = 1; f < d.length; f++) {
            e = d[f];
            c = c.menu[e]
        }
        var g = c.type;
        if (g != "external") {
            this._updateParentLabel(c.text, d[0], b)
        }
        return c.renderer
    },
    _findMenuItem: function (a, b) {
        for (var c = 0; c < b.length; c++) {
            var d = b[c];
            if (d.name == a) {
                return d
            }
            var e = d.menu;
            if (e) {
                return this._findMenuItem(a, e)
            }
        }
        return null
    },
    updateParentMenuLabel: function (a, b) {
        var c = this._findMenuItem(a, b.items);
        if (c) {
            var d = c.index.split("_");
            this._updateParentLabel(c.text, d[0], b)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.CategoryNavList = actuate.common.web.Class.create();
actuate.common.web.widget.layout.CategoryNavList.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        this._categoryConfig = a.category;
        this._headerConfig = a.header;
        this._isconfigNav = this.isConfigNav(this._categoryConfig);
        if (this._isconfigNav) {
            this._navlist = new actuate.common.web.widget.layout.ConfigNavList(this._categoryConfig)
        } else {
            this._navlist = new actuate.common.web.widget.layout.NavList(this._categoryConfig)
        }
        var b = actuate.common.web.Method.bind(this._onCategoryClick, this);
        this._navlist.setOnCategoryClick(b);
        this._categoryId = actuate.common.web.util.Utility.createUniqueControlID();
        var c = this.getTemplate(this._categoryId);
        this._element = actuate.common.web.$(c)
    }, setCurrentMenu: function (a, b) {
        this._navlist.setCurrentMenu(a, b)
    }, isConfigNav: function (a) {
        var b = true;
        for (config in a) {
            if (a[config].menu) {
                b = false;
                break
            }
        }
        return b
    }, getTemplate: function (a) {
        var b = "<div id='acheader_{id}' class='view-header-bar'></div>";
        b += "<div id='{id}'>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this.render()
    }, refresh: function (a) {
        this._navlist.refresh(a)
    }, render: function () {
        if (this._headerConfig.items) {
            this.renderHeader(this._headerConfig)
        }
        var a = actuate.common.web.$("#" + this._categoryId);
        a.empty();
        this._navlist.appendTo(a)
    }, renderHeader: function (a) {
        var b = actuate.common.web.$("#acheader_" + this._categoryId);
        b.empty();
        var c = actuate.common.web.$("<div class='view-header-bar-inner'></div>");
        c.appendTo(b);
        var d = [a];
        var e = {store: d};
        this._header = new actuate.common.web.widget.layout.BaseHeaderbar(a);
        this._header.appendTo(c)
    }, _onCategoryClick: function () {
        if (this._onCategoryClick) {
            return this._onCategoryClick.apply(this, arguments)
        }
    }, setOnCategoryClick: function (a) {
        this._onCategoryClick = a
    }, onUnload: function () {
        this._navlist.onUnload()
    }, getNavigationList: function () {
        return this._navlist
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ComponentNav = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseNav, {
    initialize: function (a) {
        if (this.__extending) return;
        actuate.common.web.widget.layout.ComponentNav.superclass.initialize.call(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ConfigNavList = actuate.common.web.Class.create
();
actuate.common.web.widget.layout.ConfigNavList.prototype = {
    _wizardStateCallback: null,
    _config: null,
    _onCategoryClick: null,
    _activeMenu: null,
    _innerItemArray: new Array,
    _listener: null,
    initialize: function (a) {
        this._config = a;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this.initComponent()
    },
    initComponent: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        this._navlistId = a;
        var b = this.getTemplate();
        this._element = actuate.common.web.$(b)
    },
    appendTo: function (a) {
        this._element.appendTo(a);
        this.render()
    },
    getLeftNavId: function () {
        return "navleft" + this._navlistId
    },
    getRightNavId: function () {
        return "navcnt_" + this.getLeftNavId()
    },
    getTemplate: function () {
        var a = this.getLeftNavId();
        var b = "<div class='ac-main-content-area'>" + "<div class='ac-side-menu'>" + "<div id='navwrap" + a + "'>" + this.getLeftNavTemplate(a) + "</div>" + "</div>" + "<div class='ac-right-content-container ac-table-content-area' id='" + this.getRightNavId() + "'>" + "</div>" + "</div>";
        return b
    },
    getLeftNavTemplate: function (a) {
        var b = "<div class='vertical-side-menu' initially-selected-index='0' id='{id}' items=''>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    },
    render: function () {
        this._renderMenus();
        this._rendered = true
    },
    _renderMenus: function () {
        var a = "<ul></ul>";
        if (this._config != null) {
            var b = this.getLeftNavId();
            var c = actuate.common.web.$("#" + b);
            c.empty();
            outerList = actuate.common.web.$(a);
            outerList.appendTo(c);
            var d = 0;
            for (var e in this._config) {
                var f = this._config[e];
                if (f.isActive || !this._activeMenu) {
                    this.setActiveMenu(f)
                }
                if (!f.isHidden) {
                    this._renderListHeader(d, f, f.name, outerList)
                }
                d += 1
            }
        }
        this.renderContent(this._activeMenu)
    },
    _getMenuItemListId: function (a) {
        return this.getLeftNavId() + "_menuitem_" + a
    },
    _renderListHeader: function (a, b, c, d) {
        var e = this.getLeftNavId();
        var f = "";
        var g = "";
        if (b.enableMenu == false) {
            g = " disabled"
        }
        if (a == 0) {
            f = "<li class='selected" + g + "' id='" + this._getMenuItemListId(a) + "'></li>"
        } else {
            f = "<li class='" + g + "' id='" + this._getMenuItemListId(a) + "'></li>"
        }
        this._innerItemArray.push(this._getMenuItemListId(a));
        var h = actuate.common.web.$(f);
        h.appendTo(d);
        var i = "<a>" + b.text + "</a>";
        var j = actuate.common.web.$(i);
        j.appendTo(h);
        if (!b.menu) {
            h.click(actuate.common.web.Method.bind2(this.onMenuClick, this, b))
        }
    },
    enableMenu: function (a, b) {
        for (var c in this._config) {
            if (this._config[c].name === b) {
                actuate.common.web.$("#" + this._getMenuItemListId(c)).removeClass("disabled");
                if (a == false) {
                    actuate.common.web.$("#" + this._getMenuItemListId(c)).addClass("disabled")
                }
                break
            }
        }
    },
    setActiveMenu: function (a) {
        if (a.isActive || !this._activeMenu) {
            if (a.renderer) {
                this._activeMenu = a
            }
        }
    },
    renderContent: function (a) {
        if (a.renderer) {
            var b = this.getRightNavId();
            var c = actuate.common.web.$("#" + b);
            c.empty();
            if (a.text && !a.isHidden) {
                a.renderer.render(b, a.text)
            } else {
                a.renderer.render(b)
            }
        }
    },
    _findMenuItem: function (a, b) {
        if (!a) return null;
        if (a.name === b) {
            return a
        }
        if (a.menu) {
            var c = a.menu;
            for (var d in c) {
                var e = this._findMenuItem(c[d], b);
                if (e) {
                    return e
                }
            }
        }
        return null
    },
    refresh: function (a) {
        for (var b in this._config) {
            var c = this._findMenuItem(this._config[b], a);
            if (c) {
                this.renderContent(c);
                return true
            }
        }
    },
    getActiveMenu: function () {
        return this._activeMenu
    },
    getActiveMenuName: function () {
        return this._activeMenu.name
    },
    getMenuCount: function () {
        return this._config.length
    },
    getActiveMenuIdx: function () {
        var a = this._activeMenu.name;
        for (var b in this._config) {
            if (this._config[b].name === a) {
                return b
            }
        }
        return null
    },
    getNextMenu: function () {
        var a = this.getActiveMenuIdx();
        if (this._config.length > a - 1) {
            var b = this._config[Math.abs(this.getActiveMenuIdx()) + 1];
            if (b && b.name) {
                return b.name
            }
        }
        return null
    },
    goToNext: function () {
        var a = this.getNextMenu();
        if (a) {
            this.setCurrentMenu(a)
        }
    },
    _onCategoryClick: function (a, b, c) {
        if (actuate.common.web.$("#" + this._getMenuItemListId(a)).hasClass("disabled")) {
            return false
        }
        var d = this._listener.invokeListener("ON_CATEGORY_CLICK", b, this._activeMenu.name);
        return d
    },
    setCurrentMenu: function (a, b) {
        var c = null;
        for (var d in this._config) {
            if (this._config[d].name === a) {
                c = this._config[d];
                break
            }
        }
        if (!c) {
            return
        }
        if (b !== false) {
            var e = this._onCategoryClick(d, a, this._activeMenu.name);
            if (e == false) return
        }
        this.renderContent(c);
        this._activeMenu = c;
        for (var f in this._innerItemArray) {
            if (actuate.common.web.$("#" + this._innerItemArray[f]).hasClass("selected")) {
                actuate.common.web.$("#" + this._innerItemArray[f]).removeClass("selected")
            }
        }
        actuate.common.web.$("#" + this._getMenuItemListId(d)).addClass("selected");
        if (this._wizardStateCallback) {
            this._wizardStateCallback({activeIdx: this.getActiveMenuIdx()})
        }
    },
    setCurrent: function (a) {
        this.setCurrentMenu(a)
    },
    onMenuClick: function (a, b) {
        if (a) {
            this.setCurrent(a.name)
        }
    },
    onUnload: function () {
        this._element.remove()
    },
    setOnCategoryClick: function (a) {
        this.addListener("ON_CATEGORY_CLICK", a)
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.EditHeaderBar = actuate.common.web.Class.create();
actuate.common.web.widget.layout.EditHeaderBar.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = "<div class='view-header-content'></div>";
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendHeader()
    }, onUnload: function () {
        this._element.html("")
    }, _appendHeader: function () {
        this._backContainer = new actuate.common.web.$("<div class='view-header-bar-left'></div>");
        this._backContainer.appendTo(this._element);
        this._divContainer = new actuate.common.web.$("<div></div>");
        this._divContainer.appendTo(this._element);
        this._buttonContainer = new actuate.common.web.$("<div class='pull-right view-header-bar-content-right'></div>");
        this._buttonContainer.appendTo(this._divContainer);
        for (var a = 0; a < this._config.store[0].items.length; a++) {
            for (var b = 0; b < this._config.store[0].items[a].items.length; b++) {
                this._appendItems(this._config.store[0].items[a].items[b])
            }
        }
    }, _appendItems: function (a) {
        if (a) {
            var b = null;
            var c = actuate.common.web.Method.bind(this._toolbarHandler, this);
            a.handler = c;
            switch (a.type) {
                case"save":
                    a.element = this._buttonContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break;
                case"cancel":
                    a.element = this._buttonContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break;
                case"back":
                    a.element = this._backContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break;
                default:
                    a.element = this._divContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break
            }
        }
    }, _toolbarHandler: function (a, b, c, d) {
        if (a) {
            var e = null;
            if (d) {
                e = {event: d}
            }
            a(b, e)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.GlobalIconbar = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseMenubar, {
    _subContainerId: null, _showCloseButton: false, initialize: function (a, b) {
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._subContainerId = b;
        this._selectedMenu = {};
        this.initComponent()
    }, showCloseButton: function (a) {
        this._showCloseButton = a
    }, render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._rendered = true
        }
    }, onCloseButtonClick: function () {
        actuate.common.web.$("#" + this._containerId).hide()
    }, _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            c.render(this._getContentId(a, b), b.items[a])
        }
    }, _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleIconItem(a, b, d);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getMenuItemsTemplate(g, b.text);
        var i = actuate.common.web.$(h);
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d);
            j.append(f)
        }
    }, _createSingleIconItem: function (a, b, c) {
        var d = b.icon;
        var e = b.name;
        var f = null;
        var g = b.items;
        var h = "icon_" + this._getContentId(a, c);
        var i = actuate.common.web.$('<li id="' + h + '" class="icon-bar-icon-item" name="' + e + '">');
        this._idsOfMainItems.push(i);
        if (e == "vertical-divider") {
            f = actuate.common.web.$('<div class="divider-vertical"></div>');
            i.append(f)
        } else {
            f = actuate.common.web.$('<a class="dropdown-toggle" href="#" data-toggle="ac_dropdown" title="' + b.tooltip + '"><i class="' + d + '"></i></a>');
            f.click(actuate.common.web.Method.bind2(this.onIconMenuClick, this, a, c));
            i.append(f);
            if (g && g[0].length > 0) {
                var j = '<ul class="dropdown-menu dashboard-items-submenu-dropdown">';
                if (b.ultemplate) {
                    j = b.ultemplate
                }
                var k = actuate.common.web.$(j);
                var l = g[0];
                var m = null;
                var n = null;
                var o = null;
                for (var p = 0; p < l.length; p++) {
                    m = l[p].displayName;
                    n = l[p].icon;
                    o = actuate.common.web.$('<li id="' + this._getContentId(a, l[p]) + '">');
                    o.click(actuate.common.web.Method.bind2(this.onSubMenuClick, this, p, l[p]));
                    n = actuate.common.web.$('<i class="' + n + '"></i><div class="dashboard-items-popup-title">' + m + "</div>");
                    o.append(n);
                    k.append(o)
                }
                i.append(k)
            }
        }
        return i
    }, onIconMenuClick: function (a, b) {
        var c = "icon_" + this._getContentId(a, b);
        var d = actuate.common.web.$("#" + c);
        if (d && !d.hasClass("disabled")) {
            var e = actuate.common.web.$(".open");
            e.removeClass("open");
            var f = null;
            if (this._selectedMenu.idx == a) {
                f = actuate.common.web.$("#" + "icon_" + this._getContentId(a, b));
                if (b.items && b.items[a].items) {
                    if (f.hasClass("open")) f.removeClass("open"); else f.addClass("open")
                } else {
                    this._renderContentMenu(a, b)
                }
            } else {
                var g = b.items;
                for (var h = 0; h < g.length; h++) {
                    var i = g[h];
                    var j = actuate.common.web.$("#" + "icon_" + this._getContentId(h, b));
                    j.removeClass("open")
                }
                if (b.items && b.items[a].items) {
                    f = actuate.common.web.$("#" + "icon_" + this._getContentId(a, b));
                    f.addClass("open")
                } else {
                    this._renderContentMenu(a, b)
                }
            }
            this._selectedMenu.idx = a;
            this._selectedMenu.config = b
        }
        arguments[2].stopPropagation()
    }, _rendertoolbarSpecificItems: function () {
        if (this._showCloseButton) {
            var a = actuate.common.web.$('<i class="dashboard-close-button-icon icon-ygg-close-circle icon-large"></i>');
            a.click(actuate.common.web.Method.bind(this.onCloseButtonClick, this));
            var b = actuate.common.web.$("#mainIconDiv_" + this._containerId);
            if (b) b.append(a)
        }
    }, getTemplate: function () {
        var a = '<div class="iconbar">' + '<div class="iconbar-inner">' + '<ul id="sub{id}" class="nav nav-pills nav-icon-pills"></ul>' + "</div>" + "</div>";
        a = a.replace(/{id}/g, this._containerId);
        return a
    }, getIconItems: function () {
        return this._idsOfMainItems
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.GlobalMenubar = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseMenubar, {
    _title: "", _mainHiglightedSaveConfig: null, _mainProfileTemplate: null, initialize: function (a, b, c, d) {
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._title = b;
        if (c) this._mainHiglightedSaveConfig = c;
        if (d) this._mainProfileTemplate = d;
        this._selectedMenu = {};
        this.initComponent()
    }, onSaveClick: function () {
        var a = this._mainHiglightedSaveConfig.renderer;
        if (a) {
            a.render(null, this._mainHiglightedSaveConfig)
        }
    }, render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._renderProfile();
            if (this._mainHiglightedSaveConfig) {
                var a = actuate.common.web.$("#mainSave");
                if (a) a.click(actuate.common.web.Method.bind(this.onSaveClick, this))
            }
            this._rendered = true
        }
    }, _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            var d = a.split("_");
            menuItem = b.items[d[0]];
            var e = 0;
            for (var f = 1; f < d.length; f++) {
                e = d[f];
                menuItem = menuItem.menu[e]
            }
            var g = "memuItem_" + this._getContentId(a, b);
            var h = actuate.common.web.$("#li_" + g);
            if (h && !h.hasClass("disabled")) {
                if (c.render) c.render(menuItem, g)
            }
        }
    }, _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleMenuItem(a, b, d);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getMenuItemsTemplate(g, b.text, b.name);
        var i = actuate.common.web.$(h);
        this._idsOfMainItems.push(i);
        i.click(actuate.common.web.Method.bind2(this.onMainMenuClick, this, a, d));
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d);
            j.append(f)
        }
    }, _createSingleMenuItem: function (a, b, c) {
        var d = b.text;
        var e = b.type;
        var f = b.icon;
        var g = b.items;
        var h = null;
        var i = b.name;
        var j = actuate.common.web.$('<li id="li_memuItem_' + this._getContentId(a, c) + '" name=' + i + ">");
        this._idsOfSubItems.push(j);
        var k = null;
        if (i == "divider") {
            k = actuate.common.web.$('<div class="divider"></div>')
        } else {
            if (g && g[0].length > 0) {
                var l = g[0];
                k = actuate.common.web.$('<a href="#" id="memuItem_' + this._getContentId(a, l) + '" class="dropdown-toggle" data-toggle="ac_dropdown"><i class="icon-ygg-caret-right icon-large pull-right dropdown-menu-caret"></i><i class="' + f + '"></i>' + d + "</a>");
                h = actuate.common.web.$('<ul class="dropdown-menu sub-menu">');
                for (var m = 0; m < l.length; m++) {
                    var n = l[m];
                    var o = actuate.common.web.$('<li><a href="#" id="submemuItem_' + this._getContentId(m, n) + '"><i class="' + n.icon + '"></i>' + n.text + "</a></li>");
                    o.click(actuate.common.web.Method.bind2(this.onSubMenuClick, this, m, n));
                    h.append(o)
                }
            } else k = actuate.common.web.$('<a href="#" id="memuItem_' + this._getContentId(a, c) + '"><i class="' + f + '"></i>' + d + "</a>");
            k.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a, c))
        }
        j.append(k);
        if (h) j.append(h);
        return j
    }, getMenuItemsTemplate: function (a, b, c) {
        var d = '<li id="li_{id}" name="' + c + '" class="btn-group">' + '<a id="{id}" class="dropdown-toggle" data-toggle="ac_dropdown" href="#">' + b + "</a>" + '<ul id="sub{id}" class="dropdown-menu" aria-labelledby="{id}">' + "</ul>" + "</li>";
        d = d.replace(/{id}/g, a);
        d = d.replace(/\{label\}/g, b);
        return d
    }, getTemplate: function () {
        var a;
        if (this._mainHiglightedSaveConfig || this._mainProfileTemplate) {
            a = '<div class="filebar">' + '<div class="filebar-inner">' + '<div class="filebar-right">';
            if (this._mainProfileTemplate) {
                a += '<div id="' + this._getProfileId() + '"' + 'class="pull-right ac-filebar-actuate-menu"></div>'
            }
            if (this._mainHiglightedSaveConfig) {
                a += '<button type="button" id="mainSave" class="btn btn-primary pull-right">' + '<i class="' + this._mainHiglightedSaveConfig.icon + '"></i>' + this._mainHiglightedSaveConfig.text + "</button>"
            }
            a += '<h2 class="filebar-title pull-right ng-binding">' + this._title + "</h2>" + "</div>" + '<ul class="nav nav-pills nav-file-pills"></ul>' + "</div>" + "</div>"
        } else {
            a = '<div class="filebar">' + '<div class="filebar-inner">' + '<div class="filebar-right">' + '<h2 class="filebar-title pull-right ng-binding">' + this._title + "</h2>" + "</div>" + '<ul class="nav nav-pills nav-file-pills"></ul>' + "</div>" + "</div>"
        }
        return a
    }, _getProfileId: function () {
        return this.PROFILE_ID_PREFIX + this._containerId
    }, _renderProfile: function () {
        var a = this._getProfileId();
        var b = a + "_" + actuate.common.web.util.Utility.createUniqueControlID();
        var c = actuate.common.web.$(this._mainProfileTemplate);
        var d = actuate.common.web.$("#" + a);
        d.append(c)
    }, getMenuItems: function () {
        return this._idsOfMainItems
    }, getSubMenuItems: function () {
        return this._idsOfSubItems
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.GlobalNavMenu = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseNav, {
    PROFILE_ID_PREFIX: "act_menu_profile_",
    LOGOUT_ID_PREFIX: "act_menu_logout_",
    GLOBALMSG_ID_PREFIX: "act_menu_msg_",
    _logoutHandler: null,
    username: "",
    logoTemplate: null,
    initialize: function (a, b) {
        this._configMenus = {main: {name: "main", items: []}, profile: {name: "profile", items: []}};
        this._hideLogOut = false;
        if (b) {
            if (b.hideLogOut) this._hideLogOut = b.hideLogOut;
            if (b.helpConfig) this._helpConfig = b.helpConfig;
            if (b.isAJC) {
                this._isAJC = b.isAJC
            }
            if (b.username) this.username = b.username;
            if (b.dataUsageConfig) {
                this._dataUsageConfig = b.dataUsageConfig
            }
            if (b.globalMessageConfig) {
                this._globalMessageConfig = b.globalMessageConfig
            }
            if (b.logoTemplate) {
                this.logoTemplate = b.logoTemplate
            }
            if (b.isModern) {
                this.isModern = b.isModern
            }
        }
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    addProfileMenuItem: function (a) {
        this._configMenus.profile.items.push(a)
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._renderProfile();
            this._rendered = true
        }
    },
    _getSubMenuLabelTemplate: function (a) {
        return a + ' <i class="icon-ygg-caret-down"></i>'
    },
    getSubMenuTemplate: function (a, b) {
        var c = "<li>" + '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown" onclick="return false;">' + this._getSubMenuLabelTemplate(b) + "</a>" + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>" + "</li>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    _getGlobalMessageTemplate: function () {
        if (!this._globalMessageConfig) {
            this._globalMessageConfig = {}
        }
        var a = this._globalMessageConfig.msg;
        if (!a) {
            a = ""
        }
        var b = {color: "red", width: "90%", "text-align": "center", "line-height": "36px", "font-weight": 600};
        var c = "none";
        if (this._globalMessageConfig.show) {
            c = "block"
        }
        b.display = c;
        var d = "";
        var e = null;
        var f = this._globalMessageConfig.style;
        if (f) {
            for (e in f) {
                if (e) {
                    b[e] = f[e]
                }
            }
        }
        for (e in b) {
            if (e) {
                d += e + ":" + b[e] + ";"
            }
        }
        var g = this._getGlobalMsgId();
        var h = '<li id="' + g + '" class="pull-left" style="' + d + '">' + a + "</li>";
        return h
    },
    _showHideGlobalMessage: function (a, b) {
        var c = this._getGlobalMsgId();
        var d = document.getElementById(c);
        if (d) {
            if (b) {
                d.innerHTML = b
            }
            var e = "none";
            if (a) {
                e = "block"
            }
            d.style.display = e
        }
    },
    hideGlobalMessage: function () {
        this._showHideGlobalMessage(false, null)
    },
    showGlobalMessage: function (a) {
        if (!this._globalMessageConfig || this._globalMessageConfig.show !== true) {
            return
        }
        this._showHideGlobalMessage(true, a)
    },
    getLogoTemplate: function () {
        var a = '<i class="actuate"></i>';
        if (this.logoTemplate == null) {
            this.logoTemplate = a
        }
        return this.logoTemplate
    },
    getTemplate: function () {
        var a;
        if (this._helpConfig) {
            a = '<div class="acGlblNavBar">' + '<div class="navbar">' + '<div class="navbar-inner">' + '<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + "</a>" + this.getLogoTemplate() + '<ul class="nav"></ul>' + '<ul  id="' + this._getProfileId() + '"' + ' class="right-icons"></ul>' + "</div>" + "</div>";
            if (!this.isModern) {
                a += '<div class="application-nav">' + '<div class="application-nav-inner">' + '<ul class="nav nav-tabs">' + this._getGlobalMessageTemplate() + "</ul>" + "</div>" + "</div>" + "</div>"
            }
        } else if (this._isAJC) {
            a = '<div class="acGlblNavBar">' + '<div class="navbar">' + '<div class="navbar-inner">' + '<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + "</a>" + '<i class="ajc" style="position: absolute;left: calc(50% - 195px);right: calc(50% - 195px);"></i>' + '<ul class="nav"></ul>' + '<ul  id="' + this._getProfileId() + '"' + ' class="right-icons"></ul>' + "</div>" + "</div>" + "</div>"
        }
        return a
    },
    getUserProfileTemplate: function (a, b, c) {
        var d = "";
        if (!this._hideLogOut) {
            d = "<li>" + '<a id="help_" href="#"><i class="actuate_help"></i></a><a id="user-drop-down{id}" role="button" data-toggle="ac_dropdown"><i class="icon-large icon-ygg-user"></i> <i class="icon-ygg-caret-down"></i></a>' + '<ul id="sub{id}" class="dropdown-menu user-profile-submenu" role="menu" aria-labelledby="user-drop-down{id}">' + "</ul>" + "</li>";
            if (this.isModern) {
                d = "<li>" + '<a><span class="user-name">{username}</span>' + "</li>" + "<li>" + '<a id="help_" href="#"><i class="actuate_help"></i></a>' + "</li>" + "<li>" + '<a id="user-drop-down{id}" role="button" data-toggle="ac_dropdown"><i class="actuate_user"></i></a>' + '<ul id="sub{id}" class="dropdown-menu user-profile-submenu" role="menu" aria-labelledby="user-drop-down{id}">' + "</ul>" + "</li>"
            }
            if (this._dataUsageConfig) {
                d += '<li style="margin-right: 16px">' + '<a id="data-usage_{id}" href="#"  style="cursor:default">' + '<div>Trial: <span id="top-usage-days-to-expiration"></span> days left</div>';
                "</a>" + "</li>"
            }
            c = actuate.common.web.$("<div/>").text(c).html();
            d = d.replace(/{id}/g, a);
            d = d.replace(/\{label\}/g, b);
            d = d.replace(/\{username\}/g, c)
        }
        return d
    },
    getProfileTemplate: function (a, b) {
        var c = "";
        if (!this._hideLogOut) {
            c = "<li>" + '<a id="user-drop-down{id}" role="button" data-toggle="ac_dropdown"><span class="user-name">&nbsp;</span><i class="icon-large icon-ygg-user"></i> <i class="icon-ygg-caret-down"></i></a>' + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="user-drop-down{id}">' + "</ul>" + "</li>";
            if (this._dataUsageConfig) {
                c += '<li><div class="divider"></div></li>' + '<li><a id="data-usage_{id}" href="#" style="cursor:default">' + this._dataUsageConfig.text + "</a></li>"
            }
            c = c.replace(/{id}/g, a);
            c = c.replace(/\{label\}/g, b)
        }
        return c
    },
    _getLogoutId: function () {
        return this.LOGOUT_ID_PREFIX + this._containerId
    },
    _getProfileId: function () {
        return this.PROFILE_ID_PREFIX + this._containerId
    },
    _getGlobalMsgId: function () {
        return this.GLOBALMSG_ID_PREFIX + this._containerId
    },
    onHelpClicked: function () {
        if (this._helpConfig && this._helpConfig.renderer) this._helpConfig.renderer.render()
    },
    onDataUsageClicked: function () {
        if (this._dataUsageConfig && this._dataUsageConfig.renderer) this._dataUsageConfig.renderer.render()
    },
    _renderProfile: function () {
        var a = this._getProfileId();
        var b = a + "_" + actuate.common.web.util.Utility.createUniqueControlID();
        var c;
        if (!this.username || this.username.length === 0) {
            c = this.getProfileTemplate(b, null)
        } else {
            c = this.getUserProfileTemplate(b, null, this.username)
        }
        var d = actuate.common.web.$("#" + a);
        var e = document.getElementById(a);
        c = actuate.common.web.util.Utility.removeInlineStyles(c);
        e.innerHTML += c;
        var f = actuate.common.web.$("#help_");
        if (f) f.click(actuate.common.web.Method.bind(this.onHelpClicked, this));
        var g = actuate.common.web.$("#data-usage_" + b);
        if (g) {
            g.click(actuate.common.web.Method.bind(this.onDataUsageClicked, this));
            var h = {};
            g.parent().tooltip(h)
        }
        var i = d.find("#sub" + b);
        for (var j = 0; j < this._configMenus.profile.items.length; j++) {
            this._createMenuItem(j, this._configMenus.profile.items[j], i, this._configMenus.profile)
        }
    },
    getMenuLinkTemplate: function (a) {
        return '<a class="acmenu">' + a + "</a>"
    },
    setActiveLabel: function (a) {
        this.updateParentMenuLabel(a, this._configMenus.main)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.Grid = actuate.common.web.Class.create();
actuate.common.web.widget.layout.Grid.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, onUnload: function () {
        this._element.html("")
    }, _appendItems: function () {
        this._appendHeader();
        var a = this._config.store;
        if (!a) return;
        for (var b = 0; b < a.length; b++) {
            var c = {row: a[b], rowIndex: b};
            var d = new actuate.common.web.widget.control.Grid.Row(c);
            d.appendTo(this._element)
        }
    }, addRow: function (a) {
        var b = this._config.store;
        if (!b) {
            b = [];
            this._config.store = b
        }
        b.push(a);
        var c = {row: a, rowIndex: b.length};
        var d = new actuate.common.web.widget.control.Grid.Row(c);
        d.appendTo(this._element)
    }, _appendHeader: function () {
        var a = {row: this._config.headers};
        var b = new actuate.common.web.widget.control.Grid.Row(a);
        b.appendTo(this._element)
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="gridwrap_' + a + '" ' + ' class="acGridContainer"' + ">";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.LayoutListener = actuate.common.web.Class.create();
actuate.common.web.widget.layout.LayoutListener.prototype = {
    _listener: null, initialize: function () {
        this._listener = []
    }, addListener: function (a, b) {
        this._listener[a] = b
    }, removeListener: function (a) {
        delete this._listener[a]
    }, invokeListener: function () {
        var a = arguments[0];
        if (!a) return;
        var b = this._listener[a];
        if (b) {
            var c = [];
            for (var d = 1; d < arguments.length; d++) {
                c.push(arguments[d])
            }
            return b.apply(this, c)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.NavList = actuate.common.web.Class.create();
actuate.common.web.widget.layout.NavList.prototype = {
    _config: null,
    _onCategoryClick: null,
    _activeMenu: null,
    _innerItemArray: new Array,
    _overflowThreshold: 20,
    initialize: function (a) {
        this._config = a;
        this.initComponent()
    },
    initComponent: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        this._navlistId = a;
        var b = this.getTemplate();
        this._element = actuate.common.web.$(b)
    },
    appendTo: function (a) {
        this._element.appendTo(a);
        this.render()
    },
    getLeftNavId: function () {
        return "navleft" + this._navlistId
    },
    getRightNavId: function () {
        return "navcnt_" + this.getLeftNavId()
    },
    getTemplate: function () {
        var a = this.getLeftNavId();
        var b = "<div class='ac-main-content-area'>" + "<div class='ac-side-menu'>" + "<div id='navwrap" + a + "'>" + this.getLeftNavTemplate(a) + "</div>" + "</div>" + "<div class='ac-right-content-container ac-table-content-area' id='" + this.getRightNavId() + "'>" + "</div>" + "</div>";
        return b
    },
    getLeftNavTemplate: function (a) {
        var b = "<div class='accordion' id='{id}'>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    },
    render: function () {
        this._renderMenus();
        this._rendered = true
    },
    refreshLeftNavContents: function (a) {
        this._renderInnerListDiv(a.itemIndex, a.items, a.appendTo)
    },
    _renderMenus: function () {
        var a = "<div class='accordion-group'></div>";
        var b = null;
        var c = this;
        if (this._config) {
            var d = this.getLeftNavId();
            var e = actuate.common.web.$("#" + d);
            e.empty();
            for (var f = 0; f < this._config.length; f++) {
                var g = this._config[f];
                if (!g.isHidden && g.isActive || !this._activeMenu) {
                    this.setActiveMenu(g)
                }
                if (!g.isHidden) {
                    b = actuate.common.web.$(a);
                    b.appendTo(e);
                    this._renderListHeader(f, g, g.name, b);
                    if (g.menu != undefined) {
                        this._renderMenuItemDiv(f, g, b)
                    }
                }
            }
        }
        this.renderContent(this._activeMenu)
    },
    _getMenuItemId: function (a) {
        return this.getLeftNavId() + "_" + a
    },
    _getMenuInnerItemId: function (a) {
        return this.getLeftNavId() + "_inneritem_" + a
    },
    _renderListHeader: function (a, b, c, d) {
        var e = this.getLeftNavId();
        var f = "<div class='accordion-heading' title='" + b.text + "'></div>";
        var g = actuate.common.web.$(f);
        g.appendTo(d);
        var h = "<a data-parent='#" + e + "' href='#" + this._getMenuItemId(a) + "'>";
        if (b.menu != undefined) {
            h += "<a class='accordion-toggle  collapse in' data-toggle='collapse' data-parent='#" + e + "' href='#" + this._getMenuItemId(a) + "'> ";
            h += "<i class='icon-ygg-chevron-down accordion-toggle-icon'></i>"
        }
        h += b.text + "</a>";
        var i = actuate.common.web.$(h);
        i.appendTo(g);
        if (!b.menu) {
            i.click(actuate.common.web.Method.bind2(this.onMenuClick, this, b))
        }
    },
    _renderMenuItemDiv: function (a, b, c) {
        var d = this;
        var e = actuate.common.web.util.Utility.createUniqueControlID();
        var f = actuate.common.web.util.Utility.createUniqueControlID();
        var g = "<div id='" + this._getMenuItemId(a) + "' class='accordion-body collapse in'>" + "<div id='" + e + "'></div>" + "<div id='" + f + "' style='height:500px;'>" + "<ul class='accordion-inner selectable'>" + "</ul>" + "</div>" + "</div>";
        var h = actuate.common.web.$(g);
        h.appendTo(c);
        if (b.menu.length > this._overflowThreshold) {
            h.find("#" + f).css("overflow-y", "scroll")
        }
        if (b.searchconfig) {
            var i = actuate.common.web.$("#" + e);
            var j = {placeholder: b.searchconfig.placeHolder};
            var k = new actuate.common.web.widget.control.TextField(j);
            k.appendTo(i);
            k.css("width", "170px");
            var l;
            i.find("input").keyup(actuate.common.web.Method.bind2(function (a, c) {
                var e = i.find("input");
                clearTimeout(l);
                l = setTimeout(function () {
                    if (c.keyCode != 0) {
                        if (c.keyCode != 13) {
                            data = e[0].value
                        }
                        actuate.common.web.$(".search-delete-text-icon").css("display", "block")
                    } else {
                        data = e[0].value.substring(0, e.value.length - 1)
                    }
                    var f = {
                        refreshLeftNavContents: actuate.common.web.Method.bind(d.refreshLeftNavContents, d),
                        itemIndex: a,
                        name: b.name,
                        appendTo: h,
                        filter: data
                    };
                    b.searchconfig.searchCallBack(null, f)
                }, 500)
            }, i.find("input"), a))
        }
        this._renderInnerListDiv(a, b.menu, h)
    },
    _renderInnerListDiv: function (a, b, c) {
        if (c.length) {
            c.find("ul").empty()
        }
        if (b) {
            for (var d = 0; d < b.length; d++) {
                this._renderListInnerItems(b[d], d).appendTo(c.find("ul"))
            }
        }
    },
    setActiveMenu: function (a) {
        if (a.isActive || !this._activeMenu) {
            if (a.renderer) {
                this._activeMenu = a
            }
        }
    },
    _renderListInnerItems: function (a, b) {
        var c = "<li id='" + this._getMenuInnerItemId(b) + "'><a><div>" + a.text + "</div></a></li>";
        var d = actuate.common.web.$(c);
        if (a.isActive || !this._activeMenu) {
            d.addClass("selected")
        }
        var e = d.find("div");
        e.addClass("cliptext");
        var f = function () {
            e.attr("title", a.text)
        };
        d.mouseenter(f);
        this._innerItemArray.push(this._getMenuInnerItemId(b));
        d.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a));
        this.setActiveMenu(a);
        return d
    },
    renderContent: function (a) {
        if (a.renderer) {
            var b = this.getRightNavId();
            var c = actuate.common.web.$("#" + b);
            c.empty();
            if (a.text && !a.isHidden) {
                a.renderer.render(b, a.text)
            } else {
                a.renderer.render(b)
            }
        }
    },
    _findMenuItem: function (a, b) {
        if (!a) return null;
        if (a.name === b) {
            return a
        }
        if (a.menu) {
            var c = a.menu;
            for (var d in c) {
                var e = this._findMenuItem(c[d], b);
                if (e) {
                    return e
                }
            }
        }
        return null
    },
    refresh: function (a) {
        for (var b = 0; b < this._config.length; b++) {
            var c = this._findMenuItem(this._config[items], a);
            if (c) {
                this.renderContent(c);
                return true
            }
        }
    },
    onMenuClick: function (a, b) {
        if (this._onCategoryClick) {
            this._onCategoryClick(a.name)
        }
        this.renderContent(a);
        for (var c in this._innerItemArray) {
            if (actuate.common.web.$("#" + this._innerItemArray[c]).hasClass("selected")) {
                actuate.common.web.$("#" + this._innerItemArray[c]).removeClass("selected")
            }
        }
        actuate.common.web.$("#" + b.currentTarget.id).addClass("selected")
    },
    onUnload: function () {
        this._element.remove()
    },
    setOnCategoryClick: function (a) {
        this._onCategoryClick = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.NavMenu = actuate.common.web.Class.create();
actuate.common.web.widget.layout.NavMenu.prototype = {
    CONTENT_ID_PREFIX: "act_menu_cnt_",
    HREF_ID_PREFIX: "act_menu_href_",
    LOGOUT_ID_PREFIX: "act_menu_logout_",
    PROFILE_ID_PREFIX: "act_menu_profile_",
    _configMenus: null,
    _selectedMenu: null,
    _logoutHandler: null,
    initialize: function (a) {
        this._configMenus = {main: {name: "main", items: []}, profile: {name: "profile", items: []}};
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    initComponent: function () {
        var a = this.getTemplate();
        this._element = actuate.common.web.$(a);
        this._element.attr("id", "act_menu_panel-" + this._containerId + "-" + actuate.common.web.$(".act_menu_panel").length)
    },
    addMenuItem: function (a) {
        this._configMenus.main.items.push(a)
    },
    addProfileMenuItem: function (a) {
        this._configMenus.profile.items.push(a)
    },
    onMenuClick: function (a, b) {
        this._setActiveMenu(a, b)
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._renderProfile();
            this._rendered = true
        }
    },
    getTemplate: function () {
        var a = '<div class="">' + '<div class="navbar navbar-inverse navbar-fixed-top"><div class="navbar-inner">' + '<div class="container">' + '<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + "</a>" + '<a class="aclogo brand" href="#">ACTUATE</a>' + '<div class="nav-collapse collapse">' + '<div  id="' + this._getProfileId() + '"' + ' class="dropdown acprofile"></div>' + "</div>" + "</div>" + "</div></div>" + '<div class="acnavbar"><div class="navbar">' + '<div class="container">' + '<ul class="acmenu nav pull-right">' + "</ul>" + "</div>" + "</div></div>" + "</div>";
        return a
    },
    getProfileTemplate: function (a, b) {
        var c = '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown"><i class="icon-user icon-white"></i> <i class="accaret-white"></i></a>' + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    _getSubMenuLabelTemplate: function (a) {
        return a + ' <i class="caret"></i>'
    },
    getSubMenuTemplate: function (a, b) {
        var c = '<li><div class="dropdown submenu">' + '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown">' + this._getSubMenuLabelTemplate(b) + "</a>" + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>" + "</div></li>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    _createSingleMenuItem: function (a, b, c) {
        var d = b.text;
        var e = b.type;
        var f = actuate.common.web.$('<a class="acmenu">' + d + "</a>");
        f.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a, c));
        var g = actuate.common.web.$("<li>");
        g.append(f);
        if (e == "external") {
            f.append(actuate.common.web.$('<i class="icon-share"></i>'))
        }
        return g
    },
    _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleMenuItem(a, b, d);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getSubMenuTemplate(g, b.text);
        var i = actuate.common.web.$(h);
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d);
            j.append(f)
        }
    },
    _getContentId: function (a, b) {
        return this.CONTENT_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getHrefId: function (a, b) {
        return this.HREF_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getLogoutId: function () {
        return this.LOGOUT_ID_PREFIX + this._containerId
    },
    _getProfileId: function () {
        return this.PROFILE_ID_PREFIX + this._containerId
    },
    _setActiveMenu: function (a, b) {
        var c = this._selectedMenu.idx;
        if (this._selectedMenu.config) {
            actuate.common.web.$("#" + this._getHrefId(c, this._selectedMenu.config)).removeClass("active");
            actuate.common.web.$("#" + this._getContentId(c, this._selectedMenu.config)).hide()
        }
        this._selectedMenu.idx = a;
        this._selectedMenu.config = b;
        actuate.common.web.$("#" + this._getHrefId(a, b)).addClass("active");
        actuate.common.web.$("#" + this._getContentId(a, b)).show();
        this._renderContentMenu(a, b)
    },
    _renderProfile: function () {
        var a = this._getProfileId();
        var b = a + "_" + actuate.common.web.util.Utility.createUniqueControlID();
        var c = this.getProfileTemplate(b, null);
        var d = actuate.common.web.$(c);
        var e = actuate.common.web.$("#" + a);
        e.append(d);
        var f = e.find("#sub" + b);
        for (var g = 0; g < this._configMenus.profile.items.length; g++) {
            this._createMenuItem(g, this._configMenus.profile.items[g], f, this._configMenus.profile)
        }
    },
    _renderMenus: function () {
        this._element.prependTo(actuate.common.web.$("#" + this._containerId));
        var a = this._element.find(".nav");
        for (var b = 0; b < this._configMenus.main.items.length; b++) {
            this._createMenuItem(b, this._configMenus.main.items[b], a, this._configMenus.main)
        }
    },
    _updateParentLabel: function (a, b, c) {
        var d = this._getHrefId(b, c);
        var e = this._element.find("#" + d)[0];
        var f = this._getSubMenuLabelTemplate(a);
        e.innerHTML = "";
        e.innerHTML = f
    },
    _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        c.render(this._getContentId(a, b))
    },
    _getContentRenderer: function (a, b) {
        var c = b.items[a];
        if (c) {
            return c.renderer
        }
        var d = a.split("_");
        c = b.items[d[0]];
        var e = 0;
        for (var f = 1; f < d.length; f++) {
            e = d[f];
            c = c.menu[e]
        }
        this._updateParentLabel(c.text, d[0], b);
        return c.renderer
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.TabPanel = actuate.common.web.Class.create();
actuate.common.web.widget.layout.TabPanel.prototype = {
    CONTENT_ID_PREFIX: "act_tab_cnt_",
    _containerId: null,
    _element: null,
    _tabNames: null,
    _tabContentDivIds: null,
    _tabContents: null,
    _rendered: false,
    _defaultSize: null,
    _tabs: null,
    initialize: function (a, b) {
        this._tabNames = new Array;
        this._tabContentDivIds = new Array;
        this._tabContents = new Array;
        this._containerId = a;
        this.CONTENT_ID_PREFIX += a;
        this._component = b;
        var c = actuate.common.web.$('<div class="act-tab-panel tab-content"/>');
        this._tabPanelName = b + "_act_tab_panel-" + a + "-" + actuate.common.web.$(".act_tab_panel").length;
        c.attr("id", "act_tab_panel-" + a + "-" + actuate.common.web.$(".act_tab_panel").length);
        c.attr("name", this._tabPanelName);
        var d = actuate.common.web.$('<ul class="nav nav-tabs"></ul>');
        c.append(d);
        this._element = c;
        this._tabs = d
    },
    onSelect: function (a) {
        var b = a.data._this;
        var c = a.data.index;
        actuate.common.web.util.Logging.log("selected index " + c);
        for (var d = 0; d < b._tabContentDivIds.length; d++) {
            actuate.common.web.$("#" + b._tabContentDivIds[d]).removeClass("acwebtive");
            actuate.common.web.$("#link_" + b._tabContentDivIds[d]).removeClass("acwebtive")
        }
        actuate.common.web.$("#link_" + b._tabContentDivIds[c]).addClass("acwebtive");
        actuate.common.web.$("#" + b._tabContentDivIds[c]).addClass("acwebtive");
        b.renderTab(c)
    },
    render: function (a) {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering TabPanel - already rendered")
        } else {
            this._element.appendTo(actuate.common.web.$("#" + a));
            this._rendered = true
        }
        this.reSize(this._defaultSize);
        var b = this.getSelectedContent();
        if (b) {
            b.render(this.getSelectedContentDivId())
        }
    },
    renderTab: function (a) {
        this._tabContents[a].render(this._tabContentDivIds[a])
    },
    getSelectedTabIndex: function () {
        return actuate.common.web.$.inArray(this.getSelectedContentDivId(), this._tabContentDivIds)
    },
    getSelectedContent: function () {
        var a;
        if (this._tabContents.length == 0) {
            a = null
        } else {
            var b = this.getSelectedTabIndex();
            if (b != -1) {
                a = this._tabContents[b]
            } else {
                a = null
            }
        }
        return a
    },
    getSelectedContentDivId: function () {
        var a = actuate.common.web.$("div[name=" + this._tabPanelName + "]");
        var b = a.find(".tab-pane.acwebtive");
        var c = null;
        if (b) {
            c = b.attr("id")
        } else {
            actuate.common.web.util.Logging.log("Failed to find selected tab by '.tab-pane.acwebtive'")
        }
        return c
    },
    addTab: function (a, b, c, d) {
        if (actuate.common.web.$.inArray(a, this._tabNames) != -1) {
            actuate.common.web.util.Logging.log("Tab with the same name already exists: " + a);
            actuate.common.web.jQuery.error("Tab with the same name already exists: " + a)
        }
        var e = this._element;
        var f = this._tabContents.length;
        var g = this._component + "_" + this.CONTENT_ID_PREFIX + "-" + f;
        if (!d) {
            d = ""
        }
        var h = actuate.common.web.$('<div class="tab-pane ' + d + '" id="' + g + '"></div>');
        e.append(h);
        var i = actuate.common.web.Method.bind(this.onSelect, this);
        ahrefId = "#" + g;
        linkId = "link_" + g;
        var j = actuate.common.web.$("<li id=" + linkId + " class=" + d + '><a data-toggle="tab" href=' + ahrefId + ">" + b + "</a></li>");
        j.click({index: f, _this: this}, i);
        this._tabs.append(j);
        this._tabNames[f] = a;
        this._tabContents[f] = c;
        this._tabContentDivIds[f] = g;
        return f
    },
    removeTab: function (a) {
        this._element.tabs("remove", a);
        this._tabNames.splice(a, 1);
        this._tabContentDivIds.splice(a, 1);
        this._tabContents.splice(a, 1)
    },
    getTabContent: function (a) {
        return this._tabContents[a]
    },
    getTabIndex: function (a) {
        return actuate.common.web.$.inArray(a, this._tabNames)
    },
    clearTab: function (a) {
        actuate.common.web.$("#" + this._tabContentDivIds[a], actuate.common.web.$("#" + this._containerId)).html("")
    },
    setTabContent: function (a, b) {
        this._tabContents[a] = b;
        if (this.getSelectedTabIndex() == a) {
            this.renderTab(a)
        }
    },
    selectTab: function (a) {
        this._element.tabs("select", a)
    },
    setSize: function (a) {
        this._defaultSize = a
    },
    reSize: function (a) {
        if (this._rendered && a) {
            if (a.width) {
                this._element[0].style.width = a.width
            }
            if (a.height) {
                this._element[0].style.height = a.height
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.Table = actuate.common.web.Class.create();
actuate.common.web.widget.layout.Table.prototype = {
    _config: null, _rows: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._rows = [];
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, onUnload: function () {
        this._rows = null;
        this._element.html("");
        this._element.remove()
    }, _appendItems: function () {
        var a = this._getTableTag();
        this._tableEl = new actuate.common.web.$(a);
        this._tableEl.appendTo(this._element);
        this._appendHeader(this._tableEl);
        this._appendColgroup(this._tableEl);
        var b = this._config.store;
        if (!b) return;
        for (var c = 0; c < b.length; c++) {
            var d = c;
            var e = {
                row: this._configColumn(b[c]),
                rowIndex: d,
                template: "<tr class=''" + "{rowAttr}" + ">" + "</tr>",
                colHeaders: this._config.headers
            };
            var f = new actuate.common.web.widget.control.Grid.Row(e);
            this._appendRow(f, d)
        }
    }, getRow: function (a) {
        return this._rows[a]
    }, _appendRow: function (a, b) {
        a.appendTo(this._tableEl);
        this._rows[b] = a
    }, addRow: function (a) {
        var b = this._config.store;
        if (!b) {
            b = [];
            this._config.store = b
        }
        b.push(a);
        var c = b.length;
        var d = {
            row: this._configColumn(a),
            rowIndex: c,
            template: "<tr class='' " + "{rowAttr}" + ">" + "</tr>",
            colHeaders: this._config.headers
        };
        var e = new actuate.common.web.widget.control.Grid.Row(d);
        this._appendRow(e, c)
    }, _configColumn: function (a) {
        a.template = '<td class="' + "{class.name}" + '"data-name="' + "{data.name}" + '"data-label="' + "{data.label}" + '">' + "</td>";
        return a
    }, _configHeaderColumn: function (a) {
        if (!a) return null;
        a.template = "<th></th>";
        return a
    }, _appendHeader: function (a) {
        var b = {row: this._configHeaderColumn(this._config.headers), template: "<tr></tr>"};
        var c = new actuate.common.web.$("<thead></thead>");
        var d = new actuate.common.web.widget.control.Grid.Row(b);
        d.appendTo(c);
        c.appendTo(a)
    }, _appendColgroup: function (a) {
        if (this._config.widths) {
            var b = new actuate.common.web.$("<colgroup></colgroup>");
            for (var c in this._config.widths) {
                var d = new actuate.common.web.$('<col span="1" style="width: ' + this._config.widths[c] + ';">');
                d.appendTo(b)
            }
            b.appendTo(a)
        }
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getTableTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = "<table class='table table-hover table-bordered-bottom' id=\"tablwrap_" + a + '">';
        return b
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="tblwrap_' + a + '"' + ' class="acTblDivContainer"' + ">";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ToolbarItem = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ToolbarItem.prototype = {
    initialize: function (a) {
        this._config = a;
        this._appendItem(this._config)
    }, _appendItem: function (a) {
        var b = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var c = actuate.common.web.Method.bind2(this._itemHandler, this, b);
        a.listener.onItemClick = c;
        var d = new actuate.common.web.widget.control.GridItem(a);
        d.appendTo(a.element)
    }, _itemHandler: function () {
        if (this._config.handler) {
            this._config.handler.apply(this, arguments)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ToolbarLayout = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ToolbarLayout.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="toolbarwrap_' + a + "\" class='table-data-header'></div>";
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        if (this._config.headers.items) {
            this._header = new actuate.common.web.widget.layout.BaseHeaderbar(this._config.headers);
            this._header.appendTo(this._element)
        } else {
            this._appendToolbarItems()
        }
    }, onUnload: function () {
        this._element.html("")
    }, _appendToolbarItems: function () {
        this._wrapper = actuate.common.web.$("<div class='table-data-header-inner'></div>");
        this._wrapper.appendTo(this._element);
        this._pageObject = actuate.common.web.$("<ul class='pull-right text-pagination'></ul>");
        this._pageObject.appendTo(this._wrapper);
        this._menuObject = actuate.common.web.$("<ul class='data-table-inline-menu-items'></ul>");
        this._menuObject.appendTo(this._wrapper);
        for (var a = 0; a < this._config.store.length; a++) {
            for (var b = 0; b < this._config.store[a].items.length; b++) {
                this._appendItems(this._config.store[a].items[b])
            }
        }
    }, _appendItems: function (a) {
        var b = null;
        var c = actuate.common.web.Method.bind(this._toolbarHandler, this);
        for (var d = 0; d < a.items.length; d++) {
            a.items[d].handler = c;
            switch (a.items[d].type) {
                case"pageinfo":
                    a.items[d].element = this._pageObject;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a.items[d]);
                    break;
                case"emptyadd":
                    b = this._getEmptyAddComponent(a.items[d]);
                    b.appendTo(this._menuObject);
                    break;
                default:
                    var e = new actuate.common.web.$("<li class='inline-item'></li>");
                    e.appendTo(this._menuObject);
                    a.items[d].element = e;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a.items[d]);
                    break
            }
        }
    }, _getEmptyAddComponent: function (a) {
        var b = actuate.common.web.$("<li class='inline-item'></li>");
        return b
    }, _toolbarHandler: function (a, b, c, d) {
        if (a) {
            var e = null;
            if (d) {
                e = {event: d}
            }
            a(b, e)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ToolbarTable = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ToolbarTable.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        if (this._config.headers.items) {
            this._header = new actuate.common.web.widget.layout.BaseHeaderbar(this._config.headers);
            this._header.appendTo(this._element)
        } else {
            this._appendItems()
        }
    }, onUnload: function () {
        this._element.html("");
        this._element.remove()
    }, _appendItems: function () {
        var a = this._getTableTag();
        this._tableEl = new actuate.common.web.$(a);
        this._tableEl.appendTo(this._element);
        this._appendHeader(this._tableEl);
        var b = this._config.store;
        if (!b) return;
        for (var c = 0; c < b.length; c++) {
            var d = {
                row: this._configColumn(b[c]),
                rowIndex: c,
                template: "<tr class='pointer'" + "{rowAttr}" + ">" + "</tr>",
                colHeaders: this._config.headers
            };
            var e = new actuate.common.web.widget.control.Grid.Row(d);
            e.appendTo(this._tableEl)
        }
    }, addRow: function (a) {
        var b = this._config.store;
        if (!b) {
            b = [];
            this._config.store = b
        }
        b.push(a);
        var c = {
            row: this._configColumn(a),
            rowIndex: b.length,
            template: "<tr class='pointer' " + "{rowAttr}" + ">" + "</tr>",
            colHeaders: this._config.headers
        };
        var d = new actuate.common.web.widget.control.Grid.Row(c);
        d.appendTo(this._tableEl)
    }, _configColumn: function (a) {
        a.template = '<td data-name="' + "{data.name}" + '"data-label="' + "{data.label}" + '">' + "</td>";
        return a
    }, _configHeaderColumn: function (a) {
        if (!a) return null;
        a.template = "<th></th>";
        return a
    }, _appendHeader: function (a) {
        var b = {row: this._configHeaderColumn(this._config.headers), template: "<tr></tr>"};
        var c = new actuate.common.web.$("<thead></thead>");
        var d = new actuate.common.web.widget.control.Grid.Row(b);
        d.appendTo(c);
        c.appendTo(a)
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getTableTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = "<table class='toolbartable table-hover' id=\"tablwrap_" + a + '">';
        return b
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="tblwrap_' + a + '"' + ' class="acTblDivContainer"' + ">";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.DefaultNotification = actuate.common.web.Class.create();
actuate.common.web.widget.notification.DefaultNotification.prototype = {
    _prefix: "ac_notif_",
    _notifWrapCont: "ac_wrap_",
    _globalNotificationId: null,
    _delay: 15e3,
    initialize: function () {
        if (this.__extending) return;
        this._globalNotificationId = this._prefix + actuate.common.web.util.Utility.createUniqueControlID()
    },
    setNotificationMessage: function (a) {
        this._msg = a
    },
    getNotificationMessage: function () {
        return this._msg
    },
    getNotificationClass: function () {
        return "modal-notification"
    },
    getTemplate: function (a) {
        var b = this.getNotificationClass();
        var c = '<div class="modal ' + b + ' hide fade" tabindex="-1" role="dialog" aria-hidden="true" id="' + a + '">' + '<i class="icon-ygg-close modal-notification-close-icon" data-dismiss="modal"></i>' + this.getNotificationMessage() + "</div>";
        return c
    },
    render: function (a) {
        this._containerId = a;
        this._showNotification();
        this._delayHideNotification()
    },
    _getNotificationId: function () {
        if (this._containerId) {
            return this._prefix + this._containerId
        }
        return this._globalNotificationId
    },
    _getNotificationTemplate: function (a) {
        var b = '<div class="ac" id="' + this._getNotificationWrapperId() + '">' + this.getTemplate(a) + "</div>";
        return b
    },
    _getNotificationWrapperId: function () {
        return this._notifWrapCont + this._getNotificationId()
    },
    _initNotification: function () {
        this._removeNotification();
        var a = this._getNotificationId();
        var b = this._getNotificationTemplate(a);
        var c = actuate.common.web.$(b);
        var d = actuate.common.web.$("#" + this._containerId);
        if (d.length != 0) {
            c.appendTo(d)
        } else {
            c.appendTo(document.body)
        }
    },
    _getCurrentNotification: function () {
        var a = this._getNotificationId();
        var b = actuate.common.web.$("#" + a);
        return b
    },
    _showNotification: function () {
        this._initNotification();
        var a = this._getCurrentNotification();
        a.modal({backdrop: false});
        this.addNotificationListeners()
    },
    addNotificationListeners: function () {
        var a = actuate.common.web.Method.bind(this._clearTimeOut, this);
        var b = actuate.common.web.Method.bind(this._delayHideNotification, this);
        var c = this._getCurrentNotification()
    },
    _removeNotification: function () {
        var a = actuate.common.web.$("#" + this._getNotificationWrapperId());
        if (a.length != 0) {
            a.remove()
        }
    },
    _clearTimeOut: function () {
        if (this._timer) {
            window.clearTimeout(this._timer);
            this._timer = null
        }
        this._removeNotification()
    },
    _delayHideNotification: function () {
        var a = actuate.common.web.Method.bind(this._hideNotification, this);
        this._timer = window.setTimeout(a, this._delay)
    },
    _hideNotification: function () {
        var a = this._getCurrentNotification();
        a.modal("hide");
        this._clearTimeOut()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.ErrorNotification = actuate.common.web.Class.extendClass(actuate.common.web.widget.notification.DefaultNotification, {
    initialize: function () {
        if (this.__extending) return;
        actuate.common.web.widget.notification.ErrorNotification.superclass.initialize.call(this)
    }, getNotificationClass: function () {
        return "modal-notification-error"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.InfoNotification = actuate.common.web.Class.extendClass(actuate.common.web.widget.notification.DefaultNotification, {
    initialize: function () {
        if (this.__extending) return;
        actuate.common.web.widget.notification.InfoNotification.superclass.initialize.call(this)
    }, getNotificationClass: function () {
        return "modal-notification-info"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.Notification = actuate.common.web.Class.create();
actuate.common.web.widget.notification.Notification.prototype = {
    initialize: function () {
        if (this.__extending) return;
        this._defaultNotification = new actuate.common.web.widget.notification.DefaultNotification;
        this._errorNotification = new actuate.common.web.widget.notification.ErrorNotification;
        this._infoNotification = new actuate.common.web.widget.notification.InfoNotification
    }, _showNotification: function (a, b) {
        a.setNotificationMessage(b);
        a.render()
    }, showDefaultNotification: function (a) {
        this._showNotification(this._defaultNotification, a)
    }, showErrorNotification: function (a) {
        this._showNotification(this._errorNotification, a)
    }, showInfoNotification: function (a) {
        this._showNotification(this._infoNotification, a)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui");
actuate.common.web.widget.ui.AbstractNavList = actuate.common.web.Class.create();
actuate.common.web.widget.ui.AbstractNavList.prototype = {
    initialize: function (a) {
        if (this.__extending) return
    }, onCategoryClick: function (a) {
    }, getNavConfig: function () {
    }, getHeaderConfigItems: function () {
    }, onHeaderClickItems: function (a, b) {
    }, getTitle: function () {
    }, getIconText: function (a) {
    }, getLocalizedString: function (a) {
        return a
    }, getAddEditId: function () {
        return this._addEditId
    }, getMainId: function () {
        return this._mainId
    }, showAddEdit: function (a) {
        var b = actuate.common.web.$("#" + this._mainId);
        var c = actuate.common.web.$("#" + this._addEditId);
        if (a) {
            b.hide();
            c.show()
        } else {
            b.show();
            c.hide()
        }
    }, refresh: function (a) {
        this._nav.refresh(a)
    }, render: function (a) {
        var b = actuate.common.web.$("#" + a);
        b.empty();
        this._viewID = a;
        this._addEditId = "addedit_" + this._viewID;
        this._mainId = "main_" + this._viewID;
        var c = actuate.common.web.$('<div id="' + this._mainId + '"></div>');
        c.appendTo(b);
        var d = actuate.common.web.$('<div id="' + this._addEditId + '"></div>');
        d.appendTo(b);
        var e = {category: this.getNavConfig(), header: this.getDefaultConfigHeader()};
        this._nav = new actuate.common.web.widget.layout.CategoryNavList(e);
        this._nav.setOnCategoryClick(actuate.common.web.Method.bind(this.onCategoryClick, this));
        this._nav.appendTo(c)
    }, getHeaderConfigTlbarItems: function () {
        var a = "deactive";
        var b = actuate.common.web.Method.bind(this.onHeaderClickItems, this);
        var c = "<h2 class='view-header-title view-header-title-left'>" + "{value}" + "</h2>";
        var d = actuate.common.web.widget.control.GridUtil.generateItem(null, this.getTitle(), null, null, null, null, null, c);
        var e;
        if (typeof this.getSearchLabel != "undefined") {
            e = actuate.common.web.widget.control.GridUtil.generateItem("search", this.getSearchLabel(), "search", null, a, b, "btn", null)
        } else {
            e = actuate.common.web.widget.control.GridUtil.generateItem("search", null, "search", null, a, b, "btn", null)
        }
        var f = {
            items: [{colSize: 2, items: ""}, {colSize: 5, items: d}, {
                colSize: 4,
                css: "acsearch-right",
                items: e
            }]
        };
        return f
    }, getDefaultConfigHeader: function () {
        var a = "deactive";
        var b = "<h2 class='view-header-title view-header-title-left'>" + "{value}" + "</h2>";
        var c = actuate.common.web.widget.control.GridUtil.generateItem(null, this.getTitle(), null, null, null, null, null, b);
        var d = {items: [{colSize: 12, items: c}]};
        return d
    }, updateHeader: function (a) {
        this._nav.renderHeader(a)
    }, onUnload: function () {
        this._nav.onUnload()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.model");
actuate.common.web.widget.ui.model.ControlModel = actuate.common.web.Class.create();
actuate.common.web.widget.ui.model.ControlModel.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        this._items = a;
        this.initConfig()
    }, initConfig: function () {
        this._fields = [];
        this._config = [];
        this._initConfig(this._items)
    }, _initFields: function (a) {
        var b = {name: a.name, type: a.type ? a.type : "string"};
        this._fields.push(b);
        this._config[b.name] = b
    }, _initConfig: function (a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            this._initFields(c);
            if (a.items) {
                this._initConfig(a.items)
            }
        }
    }, setFields: function (a) {
        this._fields = a
    }, getType: function (a) {
        var b = this._config[a];
        if (undefined === b) return null;
        var c = b.type;
        return c
    }, getJson: function () {
        var a = {};
        for (var b = 0; b < this._fields.length; b++) {
            var c = this._fields[b];
            if (c.name !== "passwordConfirm") {
                a[c.name] = c.value
            }
        }
        return a
    }, resetDirty: function () {
        for (var a in this._config) {
            var b = this._config[a];
            if (b && b.name) {
                b.orgValue = b.value
            }
        }
    }, isDirty: function () {
        for (var a in this._config) {
            var b = this._config[a];
            if (b && b.name) {
                if (b.orgValue !== undefined) {
                    if (b.value !== b.orgValue) {
                        return true
                    }
                }
            }
        }
        return false
    }, setData: function (a, b) {
        var c = this._config[a];
        if (c.type === "string" || c.type === "text") {
            b += ""
        } else if (c.type === "boolean") {
            b = b === true || b === "true" || b === "True" ? true : false
        }
        c.value = b;
        if (c.orgValue === undefined) {
            c.orgValue = b
        }
    }, getData: function (a) {
        var b = this._config[a];
        if (b) {
            return b.value
        }
        return undefined
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.AbstractControlItems = actuate.common.web.Class.create();
actuate.common.web.widget.ui.view.common.AbstractControlItems.prototype = {
    _items: [], _config: null, _isDirty: null, initialize: function () {
        if (this.__extending) return;
        this.initControls()
    }, getConfiguration: function () {
        var a = this.getControlItems();
        var b = {labelClass: "dlgLabelBox", objectModel: new actuate.common.web.widget.ui.model.ControlModel(a)};
        return b
    }, getControlItems: function () {
        return []
    }, getLocalizedString: function (a) {
        return ""
    }, setHiddenItems: function (a) {
        this._hiddenItems = a
    }, isHiddenItem: function (a, b) {
        if (this._hiddenItems && this._hiddenItems[a]) {
            return true
        }
        if (b) {
            return b.isHidden()
        }
        return false
    }, initControls: function () {
        var a = this.getConfiguration();
        var b = this.getControlItems();
        this._config = a;
        this._items = [];
        var c = actuate.common.web.Method.bind(this.getLocalizedString, this);
        for (var d = 0; d < b.length; d++) {
            var e = b[d];
            var f = new actuate.common.web.widget.ui.view.common.ControlItem(e, c);
            this._items.push(f)
        }
    }, getItems: function () {
        return this._items
    }, getGroupItems: function (a) {
        return a.items
    }, validate: function () {
        var a = new Array;
        var b = null;
        var c = null;
        for (var d = 0; d < this._items.length; d++) {
            var e = this._items[d];
            if (e.isHidden()) {
                continue
            }
            var f = e.getControlInfo();
            var g = e.getValue();
            var h = this.getLocalizedString(f.labelKey);
            var i = e.validate();
            if (i === e.status.IS_EMPTY) {
                a.push({errorLabel: h, errorMessage: this.getLocalizedString("Msg.Dlg.Field.Is.Empty")})
            }
            if (f.fieldControl === "password") {
                if (f.name === "password") {
                    b = g
                } else if (f.name === "passwordConfirm" || f.name === "confirmpassword") {
                    c = g
                }
                if (b && c) {
                    if (b != c) {
                        a.push({errorLabel: " ", errorMessage: this.getLocalizedString("Msg.Passwords.Not.Match")})
                    }
                }
            }
            if (i === e.status.REG_EX_NOT_MATCH) {
                var j = f.regexTextKey ? f.regexTextKey : Msg.Dialog.Bad.Regex;
                a.push({errorLabel: " ", errorMessage: this.getLocalizedString(j)})
            }
        }
        if (a.length > 0) {
            return a
        } else {
            return true
        }
    }, _updateModelDataItem: function (a, b) {
        for (var c = 0; c < a.length; c++) {
            var d = a[c];
            if (d.isGroupItem()) {
                var e = d.getGroupItems();
                this._updateModelDataItem(e, b);
                continue
            }
            var f = d.getControlInfo();
            if (undefined === f.submitValue || f.submitValue) {
                var g = d.getValue();
                var h = d.getName();
                var i = b.getType(h);
                if (g && typeof g == "string" && f.fieldControl != "password") {
                    g = actuate.common.web.$.trim(g)
                }
                if (i === "date") {
                    g = this._makeJSONDate(g)
                }
                if (i != null) {
                    if (f.fieldType === "group" && f.fieldControl === "radio") {
                        g = d.getInputCtrl().getSelectedValue()
                    }
                    if (this._isDirty === null) {
                        this._isDirty = false
                    }
                    if (!this._isDirty && g != undefined) {
                        if (!this.isHiddenItem(h, d)) {
                            var j = b.getData(h);
                            if (j != undefined) {
                                if (j.toString() != g.toString()) {
                                    this._isDirty = true
                                }
                            }
                        }
                    }
                    b.setData(h, g)
                }
            }
        }
    }, resetDirty: function () {
        this._isDirty = null;
        var a = this._config.objectModel;
        if (a && a.resetDirty) {
            a.resetDirty()
        }
    }, isDirty: function () {
        if (this._isDirty === null) {
            var a = this.getData()
        }
        var b = this._config.objectModel;
        if (b && b.isDirty) {
            this._isDirty = b.isDirty()
        }
        return this._isDirty ? true : false
    }, getData: function () {
        var a = this._config.objectModel;
        this._updateModelDataItem(this._items, a);
        var b = a.getJson();
        return b
    }, _updateItemData: function (a, b) {
        for (var c = 0; c < a.length; c++) {
            var d = a[c];
            if (d.isGroupItem()) {
                var e = d.getGroupItems();
                this._updateItemData(e, b);
                continue
            }
            var f = d.getName();
            var g = b[f];
            if (undefined != g) {
                var h = this._config.objectModel.getType(f);
                switch (h) {
                    case"boolean":
                        g = this._getbooleanStringValue(g);
                        break;
                    case"date":
                        var i = this._makeStringDate(g);
                        g = i;
                        break
                }
                this._config.objectModel.setData(f, g);
                d.setValue(g)
            }
        }
    }, setData: function (a) {
        if (a != null) {
            this._updateItemData(this._items, a)
        }
    }, _getbooleanStringValue: function (a) {
        var b = this._getbooleanValue(a);
        return b + ""
    }, _getbooleanValue: function (a) {
        if (typeof a === "boolean") {
            return a
        }
        a = a + "";
        if (a.toLowerCase().charAt(0) !== "f") {
            return true
        }
        return false
    }, _makeJSONDate: function (a) {
        var b = a.split("/");
        var c = b[0] - 1;
        var d = b[1];
        var e = b[2] - 1900;
        var f = {minutes: 0, seconds: 0, hours: 0, month: c, year: e, date: d};
        return f
    }, _makeStringDate: function (a) {
        var b = "";
        b += a.month + 1;
        b += "/";
        b += a.date;
        b += "/";
        b += a.year + 1900;
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.AddEdit = actuate.common.web.Class.create();
actuate.common.web.widget.ui.view.common.AddEdit.prototype = {
    _config: null, initialize: function (a, b, c, d) {
        if (this.__extending) return;
        this._config = {containerId: a, title: b, content: c, handlers: d.handlers};
        this._initView()
    }, render: function () {
        var a = actuate.common.web.$("#" + this._config.containerId);
        a.html("");
        this._el.appendTo(a);
        this._createHeader(this._el);
        this._createContent(this._el);
        this._createFooter(this._el)
    }, _createHeader: function (a) {
        var b = actuate.common.web.$('<div id="header' + this._config.containerId + '" class="view-update-header"></div>');
        b.appendTo(a);
        var c = "<h1 class='acaddedit'>" + "{value}" + "</h1>";
        var d = this._config.handlers;
        var e = actuate.common.web.widget.control.GridUtil.generateItem(null, this._config.title, null, null, null, null, null, c);
        var f = actuate.common.web.widget.control.GridUtil.generateItem("back", d["backarrow"].title, "back", null, null, d["backarrow"].handler, "acaddedit-back", null);
        var g = actuate.common.web.widget.control.GridUtil.generateItem("save", d["save"].title, "save", null, null, d["save"].handler, "btn btn-inverse acAddEditPadRight", null);
        var h = actuate.common.web.widget.control.GridUtil.generateItem("cancel", d["cancel"].title, "cancel", null, null, d["cancel"].handler, "btn", null);
        var i = "<p class='acaddedit-emptyrow'></p>";
        var j = actuate.common.web.widget.control.GridUtil.generateItem(null, "", null, null, null, null, null, i);
        var k = {items: [{colSize: 10, items: [e]}, {colSize: 2, items: [g, h]}]};
        var l = {items: [{colSize: 12, items: [f]}]};
        var m = {items: [{colSize: 12, items: [j]}]};
        var n = {items: [{colSize: 2, items: [g, h]}]};
        var o = {store: [k, l, m]};
        var p = new actuate.common.web.widget.layout.Grid(o);
        p.appendTo(b)
    }, _createContent: function (a) {
        var b = "content" + this._config.containerId;
        var c = actuate.common.web.$('<div id="' + b + '" class="view-update-content"></div>');
        c.appendTo(a);
        if (this._config.content) {
            c.html("");
            this._config.content.render(b);
            this._rendered = true
        }
        return c
    }, getContent: function () {
        return this._config.content
    }, _createFooter: function (a) {
        var b = actuate.common.web.$('<div id="footer' + this._config.containerId + '" class="view-update-footer"></div>')
    }, _renderView: function () {
    }, _initView: function () {
        this._el = actuate.common.web.$('<div class="view-update"></div>')
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common.");
actuate.common.web.widget.ui.view.common.BaseDlgRenderer = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.AbstractControlItems, {
    _containerId: null, _rendered: null, initialize: function () {
        if (this.__extending) return;
        actuate.common.web.widget.ui.view.common.BaseDlgRenderer.superclass.initialize.call(this)
    }, refreshContent: function () {
    }, getControlItems: function () {
        return []
    }, getTemplate: function (a) {
        return null
    }, _initContainer: function () {
        var a = actuate.common.web.$("#" + this._containerId);
        a.html("");
        var b = this.getTemplate(this._containerId);
        if (b) {
            var c = actuate.common.web.$(b);
            c.appendTo(a)
        }
        return a
    }, setContainerId: function (a) {
        this._containerId = a
    }, render: function (a) {
        actuate.common.web.util.Logging.log("base dialog render: " + a);
        if (this._containerId != a) {
            actuate.common.web.util.Logging.log("Assigning new container Id for dialog: " + a);
            this._containerId = a
        }
        var b = this._initContainer();
        var c = actuate.common.web.$("<div></div>");
        c.appendTo(b);
        var d = this.getItems();
        for (var e = 0; e < d.length; e++) {
            this.renderItem(d[e], c)
        }
        var f = actuate.common.web.$('<div class="control-group" ><div></div><div class="controls" id="footerButtons' + a + '"></div></div>');
        f.appendTo(c);
        setTimeout(function () {
            if (actuate.common.web.$(".actuTextField") && actuate.common.web.$(".actuTextField").length > 0) actuate.common.web.$(".actuTextField")[0].focus()
        }, 0)
    }, renderItem: function (a, b) {
        this._renderRow(a, b)
    }, _renderGroup: function (a, b) {
        if (this.isHiddenItem(a.getName())) return;
        var c = a.getGroupItems();
        var d = actuate.common.web.$("<div></div>");
        d.appendTo(b);
        var e = actuate.common.web.$("<div></div>");
        a.getInputCtrl().appendTo(e);
        e.appendTo(d);
        var f = actuate.common.web.$("<div></div>");
        f.appendTo(d);
        for (var g = 0; g < c.length; g++) {
            var h = actuate.common.web.$("<div></div>");
            h.appendTo(b);
            this._renderGroupCols(c[g], h)
        }
    }, _renderRow: function (a, b) {
        if (a.isGroupItem()) {
            this._renderGroup(a, b);
            return
        }
        var c = actuate.common.web.$('<div class="control-group"></div>');
        c.appendTo(b);
        this._renderCols(a, c)
    }, _renderGroupCols: function (a, b) {
        if (this.isHiddenItem(a.getName())) return;
        var c = actuate.common.web.$("<div></div>");
        c.appendTo(b);
        var d = actuate.common.web.$("<div></div>");
        d.appendTo(b);
        this._renderUsingTable(a, d)
    }, _renderUsingTable: function (a, b) {
        var c = actuate.common.web.$('<table class="acbasedlg" style="margin-top:0px;"></table>');
        c.appendTo(b);
        var d = actuate.common.web.$("<tr></tr>");
        d.appendTo(c);
        var e = actuate.common.web.$("<td></td>");
        var f = actuate.common.web.$('<td class="acdlgcolumn"></td>');
        e.appendTo(d);
        f.appendTo(d);
        a.getInputCtrl().appendTo(e);
        if (!(a.isAnchor() || a.isLabelItem())) {
            a.getLblCtrl().appendTo(f)
        }
    }, _renderCols: function (a, b) {
        if (this.isHiddenItem(a.getName())) return;
        var c = actuate.common.web.$("<div></div>");
        var d = a.getLblCtrl();
        d.appendTo(c);
        d.addClass("control-label");
        c.appendTo(b);
        var e = actuate.common.web.$('<div class="controls"></div>');
        if (!a.isLabelItem()) {
            var f = a.getInputCtrl();
            f.appendTo(e);
            if (a.hasHint()) {
                a.getHintCtrl().appendTo(e);
                a.getHintCtrl().addClass("act-control-hint");
                a.getHintCtrl().css("display", "inline-block");
                a.getHintCtrl().css("margin-left", "10px")
            }
            var g = f.getID();
            if (g) {
                d.updateForValue(g)
            }
        }
        e.appendTo(b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.ControlItem = actuate.common.web.Class.create();
actuate.common.web.widget.ui.view.common.ControlItem.prototype = {
    status: {SUCCESS: "SUCCESS", IS_EMPTY: "IS_EMPTY", REG_EX_NOT_MATCH: "REG_EX_NOT_MATCH"},
    _item: null,
    _localizeKeyHandler: null,
    initialize: function (a, b) {
        if (this.__extending) return;
        this._localizeKeyHandler = b;
        this._item = this._createControl(a)
    },
    _createControl: function (a) {
        var b = this.createControlItem(a);
        var c = a.items;
        if (c) {
            b.items = [];
            for (var d = 0; d < c.length; d++) {
                var e = c[d];
                var f = new actuate.common.web.widget.ui.view.common.ControlItem(e, this._localizeKeyHandler);
                b.items.push(f)
            }
        }
        return b
    },
    getLocalizedString: function (a) {
        if (this._localizeKeyHandler) {
            return this._localizeKeyHandler(a)
        }
        return a
    },
    createControlItem: function (a) {
        var b = {
            inputCtrl: this.getControlType(a),
            lblCtrl: this.getControlLabel(a),
            hintCtrl: this.getControlHint(a),
            controlInfo: a
        };
        return b
    },
    getId: function () {
        return this._item.controlInfo.id
    },
    getName: function () {
        return this._item.controlInfo.name
    },
    getTitle: function () {
        return this._item.controlInfo.title
    },
    getValue: function () {
        return this.getInputCtrl().getValue()
    },
    setValue: function (a) {
        this.getInputCtrl().setValue(a)
    },
    focus: function () {
        this.getInputCtrl().focus()
    },
    getControlInfo: function () {
        return this._item.controlInfo
    },
    getInputCtrl: function () {
        return this._item.inputCtrl
    },
    getLblCtrl: function () {
        return this._item.lblCtrl
    },
    getHintCtrl: function () {
        return this._item.hintCtrl
    },
    isHidden: function () {
        return this._item.controlInfo.isHidden === true ? true : false
    },
    isAnchor: function () {
        return this._item.controlInfo.fieldControl === "anchor" ? true : false
    },
    getControlType: function (a) {
        var b = a.name;
        var c = {
            name: b,
            value: a.value ? a.value : "",
            cssClass: a.cssClass,
            width: a.width,
            height: a.height,
            fieldType: a.fieldType ? a.fieldType : "",
            placeholder: a.placeholder ? a.placeholder : "",
            disabled: a.disabled ? a.disabled : false,
            hint: a.hint
        };
        var d = null;
        switch (a.fieldControl) {
            case"password":
                d = new actuate.common.web.widget.control.Password(c);
                if (a.value == null) {
                    d.setValue("")
                } else {
                    d.setValue(a.value)
                }
                break;
            case"date":
                d = new actuate.common.web.widget.control.DatePicker(c);
                break;
            case"checkbox":
                d = new actuate.common.web.widget.control.CheckBox(c);
                if (a.checked) {
                    d.setValue(a.checked)
                } else if (a.selected) {
                    d.setValue(a.selected)
                }
                if (a.callBack) {
                    d.onSelect(a.callBack)
                }
                break;
            case"combobox":
                d = new actuate.common.web.widget.control.ComboBox(c);
                break;
            case"label":
                d = this.getControlLabel(a);
                break;
            case"listbox":
                if (a.style) {
                    c.style = a.style
                }
                d = new actuate.common.web.widget.control.ListBox(c);
                if (a.content) {
                    d.addToList(a.content, a.defaultOption, a.click)
                }
                break;
            case"multiselectlistbox":
                c.title = a.title;
                if (a.filter) {
                    c.filter = a.filter
                }
                d = new actuate.common.web.widget.control.MultiSelectListBox(c);
                if (a.content) {
                    d.addToList(a.content, a.defaultItems)
                }
                break;
            case"radio":
                var e = c;
                e.click = a.click;
                d = new actuate.common.web.widget.control.Radio(e);
                break;
            case"button":
                c.title = a.title ? a.title : "";
                c.click = a.click;
                c.buttonType = a.buttonType;
                d = new actuate.common.web.widget.control.Button(c);
                break;
            case"file":
                d = new actuate.common.web.widget.control.File(c);
                break;
            case"anchor":
                var f = c;
                f.text = this.getLocalizedString(a.labelKey);
                f.click = a.click;
                d = new actuate.common.web.widget.control.Anchor(f);
                break;
            case"hidden":
                d = new actuate.common.web.widget.control.HiddenField(c);
                break;
            default:
                if (a.title) {
                    c.title = a.title
                }
                d = new actuate.common.web.widget.control.TextField(c);
                if (a.value == "null") {
                    d.setValue("")
                } else {
                    d.setValue(a.value)
                }
        }
        return d
    },
    getControlLabel: function (a) {
        var b = "";
        if (a.labelKey) {
            b = this.getLocalizedString(a.labelKey)
        } else if (a.labelText) {
            b = a.labelText
        }
        if (!a.allowBlank && b && a.fieldControl !== "label") {
            b = "*" + b
        }
        if (b !== "") {
            b += ":"
        }
        var c = {"for": a.name, text: b, cssClass: a.labelClass, title: a.title ? a.title : ""};
        if (a.labelWidth) {
            c.width = a.labelWidth
        }
        var d = new actuate.common.web.widget.control.Label(c);
        return d
    },
    getControlHint: function (a) {
        var b = "";
        b = this.getLocalizedString(a.hint);
        var c = {"for": a.name, text: b, cssClass: a.labelClass};
        var d = new actuate.common.web.widget.control.Label(c);
        return d
    },
    isLabelItem: function () {
        return this._item.controlInfo && this._item.controlInfo.fieldControl === "label" ? true : false
    },
    hasHint: function () {
        return this._item.controlInfo && this._item.controlInfo.hint ? true : false
    },
    isGroupItem: function () {
        return this._item.controlInfo && this._item.controlInfo.items ? true : false
    },
    getGroupItems: function () {
        return this._item.items
    },
    validate: function () {
        var a = this.getValue();
        if (a && typeof a == "string") {
            a = actuate.common.web.$.trim(a)
        }
        if (!this._item.controlInfo.allowBlank && !a) {
            return this.status.IS_EMPTY
        }
        if (this._item.controlInfo.regex && !a.match(this._item.controlInfo.regex) && a != "") {
            return this.status.REG_EX_NOT_MATCH
        }
        return this.status.SUCCESS
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.DataUsage = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _usageData: null,
    _activationCode: null,
    _administrator: null,
    _iportalBaseURL: null,
    _helpDocBase: null,
    _productVesion: null,
    _productName: null,
    _oldacode: null,
    _activationUrl: null,
    _pingtestUrl: null,
    _locale: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._defaultLocale = "en_US";
        this._defaultTimeZone = "America/Chicago";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.DataUsage.superclass.initialize.call(this)
    },
    setData: function (a) {
        this._usageData = actuate.common.web.$.parseJSON(a.usageInfo)
    },
    getTemplate: function () {
        var a = '<div id="dataUsageTemp" class="usage-wrapper">' + '<div class="row">' + '<div class="span">' + '<div style="text-align:center">You have <span style="color:#2998fb"><span id="dialog-usage-days-to-expiration"></span> days</span> left for this trial</div><br>' + '<div>To extend your trial, please <a href="#" onclick=window.open("' + this._invokeListener("ON_GETLOCALIZATION_STRING", "activate_email_request") + '") >contact us</a> to purchase a new license' + "</div>" + "</div>";
        a += "</div>";
        return a
    },
    getProgressBarTemplate: function () {
        var a = '<div class="progress">' + '<div id="dialog-usage-bar" class="bar" role="progressbar">' + "</div>" + "</div>";
        return a
    },
    render: function (a) {
        actuate.common.web.widget.ui.view.common.DataUsage.superclass.render.call(this, a);
        this.updateDataUsage(this._usageData);
        actuate.common.web.$("#applybtn").click(actuate.common.web.Method.bind(this.showApplyConfirmation, this))
    },
    showApplyConfirmation: function () {
        actuate.common.web.$("#error").addClass("hide");
        this._activationCode = document.getElementById("activationCode").value;
        if (this._activationCode) {
            var a = {
                title: this._invokeListener("ON_GETLOCALIZATION_STRING", "Dlg.Title.Confirmation"),
                okButton: {
                    label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.applycode"),
                    handler: actuate.common.web.Method.bind(this.reactivate, this),
                    buttonType: "primary"
                },
                cancelButton: {
                    label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
                    handler: actuate.common.web.Method.bind(this._NOOP, this),
                    buttonType: "secondary"
                }
            };
            actuate.common.web.$("#closeicon").click();
            var b = this._invokeListener("ON_GETLOCALIZATION_STRING", "DataUsage.Msg.ActiveConfirm");
            var c = new actuate.common.web.widget.dialog.ExitDialog({
                id: "modal",
                msg: b,
                type: "confirmation",
                dialogConfig: a
            });
            c.render()
        } else {
            actuate.common.web.$("#error").removeClass("hide")
        }
    },
    _checkServer: function () {
        actuate.common.web.$("#checkConnectionDiv").remove();
        var a = document.createElement("div");
        a.className = "hide";
        a.id = "checkConnectionDiv";
        var b = window.crypto || window.msCrypto;
        var c = b.getRandomValues(new Uint32Array(1))[0] / Math.pow(2, 32);
        var d = this._pingtestUrl + "?" + c;
        a.innerHTML = '<img src="' + d + '" id ="checkConnectionImg" />';
        document.body.appendChild(a);
        actuate.common.web.$("#checkConnectionImg").load(actuate.common.web.Method.bind(this._applyActivation, this));
        actuate.common.web.$("#checkConnectionImg").error(actuate.common.web.Method.bind(this._showerror, this))
    },
    _showerror: function (a) {
        var b = {
            title: "Error",
            okButton: {
                label: this.getLocalizedString("Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this.okCallBack, this)
            }
        };
        var c = new Array;
        c.push({
            errorLabel: " ",
            errorMessage: this._invokeListener("ON_GETLOCALIZATION_STRING", "ACTIVATION_CODE_ERROR")
        });
        actuate.common.web.util.Utility.showMsgDlg("modal", c, "error", b)
    },
    _applyActivation: function () {
        var a = "locale=" + encodeURIComponent(this._locale) + "&acode=" + encodeURIComponent(this._activationCode);
        a += "&product=" + encodeURIComponent(this._productName) + "&version=" + encodeURIComponent(this._productVesion) + "&status=initial";
        a += "&oldacode=" + encodeURIComponent(this._oldacode);
        actuate.common.web.$.ajax({
            dataType: "jsonp",
            url: this._activationUrl + "?" + a,
            timeout: 3e4,
            success: actuate.common.web.Method.bind(function (a) {
                if (a === "ok") {
                    this.reactivate()
                } else {
                    var b = {
                        title: "Error",
                        okButton: {
                            label: this.getLocalizedString("Lbl.Btn.OK"),
                            handler: actuate.common.web.Method.bind(this.okCallBack, this)
                        }
                    };
                    var c = new Array;
                    a = decodeURIComponent(a);
                    a = a.replace("<A", "<A style='color:blue;text-decoration:underline'");
                    a = a.replace("<a", "<a style='color:blue;text-decoration:underline'");
                    c.push({errorLabel: " ", errorMessage: a});
                    actuate.common.web.util.Utility.showMsgDlg("modal", c, "error", b);
                    this._NOOP
                }
            }, this),
            error: actuate.common.web.Method.bind(function (a) {
                var b = "RESPONSE_INVALID";
                if (a.statusText === "timeout") {
                    b = "ERROR"
                }
                var c = {
                    title: "Error",
                    okButton: {
                        label: this.getLocalizedString("Lbl.Btn.OK"),
                        handler: actuate.common.web.Method.bind(this.okCallBack, this)
                    }
                };
                var d = new Array;
                d.push({
                    errorLabel: " ",
                    errorMessage: this._invokeListener("ON_GETLOCALIZATION_STRING", "ACTIVATION_CODE_" + b)
                });
                actuate.common.web.util.Utility.showMsgDlg("modal", d, "error", c);
                this._NOOP
            }, this)
        })
    },
    reactivate: function () {
        var a = this._iportalBaseURL + "reactivate.jsp?activationCode=" + encodeURIComponent(this._activationCode);
        window.location.href = a
    },
    updateDataUsage: function (a) {
        var b = actuate.common.web.$("#top-usage-days-to-expiration");
        if (b) {
            b.html(a.DaysToExpiration);
            var c = parseInt(a.DaysToExpiration);
            if (c <= 7) {
                b.parent()[0].style.color = "red"
            }
        }
        var d = actuate.common.web.$("#dialog-usage-days-to-expiration");
        if (d.length > 0) {
            d.html(a.DaysToExpiration)
        }
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b)
    },
    _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Export = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _helpDocBase: null, initialize: function (a) {
        if (this.__extending) return;
        this._helpDocBase = a.helpDocBase;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Export.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Export.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Export.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div style="max-width:480px;">' + "You can export your BIRT design to Excel, including its data, charts, formatting, and formulas. Your design's crosstabs will be exported as " + "pivot tables, preserving data hierarchies and the ability to drill down. BIRT iHub also supports export to other formats, " + "including Word, PowerPoint, and PDF." + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "export_help_link") + '") class="learnmore">Learn More</a>' + "</div>" + '<div class="exportimage"></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Export.superclass.render.call(this, a)
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Integrate = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _iportalBaseURL: null,
    _report: null,
    _volume: null,
    _reportBase: null,
    _username: null,
    _parameterMap: null,
    _helpDocBase: null,
    _wizard: null,
    _sampleExists: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Integrate.superclass.initialize.call(this);
        this._iportalBaseURL = a.iportalBaseURL;
        this._report = a.reportName;
        this._volume = a.volume;
        this._reportBase = a.reportBase;
        this._username = a.username;
        this._viewer = a.viewer;
        this._parameterMap = a.parameterMap;
        this._helpDocBase = a.helpDocBase;
        this._wizard = a.wizard;
        this._that = actuate.viewer.impl.Viewer;
        this._that._removeViewer("container1");
        this._that._removeViewer("container2")
    },
    initControls: function () {
    },
    _initControls: function () {
        actuate.common.web.widget.ui.view.common.Integrate.superclass.initControls.call(this);
        this._isControlsInitialized = true
    },
    setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Integrate.superclass.setData.call(this, a)
        }
    },
    getTemplate: function (a) {
        var b = '<div id="confirmation" class="ac"></div><div id="initial" style="width: 1000px;margin-bottom:25px" > Change the code and see what happens!' + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "integrate_help_link") + '") class="learnmore">Learn More</a></div>' + '<div id="sample" style="width: 1000px;margin-bottom:25px" class="ftype-hide">Change the code below and click Run, or edit the code in<a href="#" id="jsfiddle" class="learnmore">JSFIDDLE</a> and see it working there.' + '\t   <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "integrate_jsapi_doc") + '") class="learnmore">View our JSAPI library</a> for more ideas.</div>' + '<div style="margin-top:10px;position:relative;width:1000px;min-height: 450px;" id="maindiv">' + '<div class="ac"><div id="codediv" style="float:left;margin-bottom: 10px;border: solid 1px #dddddd;width:377px">' + '<div class="" style="position:relative;padding: 10px;text-align: right;background-color: #dddddd;">' + '<button type="button" class="btn btn-default ftype-hide" id="back" style="min-width: 80px;float:left;background:white;color:#555">Go Back</button>' + '<button type="button" class="btn btn-default" id="advanced" style="min-width: 85px;float:left;background:white;color:#555">See More</button>' + '<button type="button" class="btn btn-default" id="reset" style="min-width: 80px;margin-right: 5px;background:white;color:#555">Reset</button>' + '<button type="button" class="btn btn-primary" id="run" style="min-width: 80px;">Run</button>' + "</div>" + '<div id ="codearea" style="position:relative;background-color: #fff;"></div>' + "</div></div>" + '<div id="container1" style="float:left;margin-left:15px;border: solid 1px #dddddd;width:376px"></div>' + "</div>";
        actuate.common.web.$(".modal-header").addClass("ac");
        actuate.common.web.$(".modal-footer").addClass("ac");
        return b
    },
    _userReportCode: function () {
        this.isSample = false;
        code = "<!--*********CODE BELOW IS EDITABLE*****-->" + "\n\n" + "<!- You can use this code to embed your report into any web page. Add the username and password and uncomment the script tag below before running in your own web page.-->" + "\n\n" + "<!--" + "\n" + '<script type="text/javascript" language="JavaScript" src="' + this._iportalBaseURL + 'jsapi"></script>' + "\n" + "-->" + "\n\n" + '<script type="text/javascript">' + "\n\n" + "<!-- Enter your username and password here -->" + "\n" + '   var username = "";' + "\n" + '   var password = "";' + "\n" + "   if (actuate && actuate.isInitialized()){" + "\n" + "       myInit();" + "\n" + "   } else {" + "\n" + "       var reqOps = new actuate.RequestOptions( );" + "\n" + '       reqOps.setVolume("' + this._volume + '");' + "\n" + "       reqOps.setCustomParameters({});" + "\n" + '       actuate.load("viewer");' + "\n" + '        actuate.initialize("' + this._iportalBaseURL + '",reqOps,username,password,myInit);' + "\n" + "   };" + "\n" + "   function myInit() {" + "\n" + '        var viewer = new actuate.Viewer( "container1", null, null, true, true);';
        if (this._parameterMap) {
            var a = "\n" + " " + "var parameterValueMap={";
            var b = "";
            var c = false;
            for (var d in this._parameterMap) {
                a += b;
                c = true;
                if (this._parameterMap[d] != null) {
                    a += "'" + d + "':'" + this._parameterMap[d] + "'"
                } else {
                    a += "'" + d + "':null"
                }
                b = ","
            }
            if (c) {
                a += "};";
                a += "\n" + " " + "var parameterValues=[];";
                a += "\n" + " " + "for(var key in parameterValueMap){";
                a += "\n" + "     " + "var param=new actuate.viewer.impl.ParameterValue();";
                a += "\n" + "     " + "param.setName(key);";
                a += "\n" + "     " + "if(parameterValueMap[key]!=null) {";
                a += "\n" + "         " + "param.setValue(parameterValueMap[key]);";
                a += "\n" + "     " + "} else{";
                a += "\n" + "         " + "param.setValueIsNull(true); ";
                a += "\n" + "     " + "}";
                a += "\n" + "      " + "parameterValues.push(param);";
                a += "\n" + " " + "}";
                code += a + "\n" + " " + "viewer.setParameterValues(parameterValues);"
            }
        }
        code += "\n" + '       viewer.setReportName("' + this._reportBase + this._report + '");' + "\n\n" + "<!-- To display toolbar change value to true.-->" + "\n" + "       var options = new actuate.viewer.UIOptions( );" + "\n" + "       options.enableToolBar(false);" + "\n" + "       viewer.setUIOptions(options);" + "\n" + "       viewer.setSize(600,475);" + "\n\n" + "<!-- This renders the JSAPI viewer.  Uncomment the additional code to enable Interactive Viewer automatically -->" + "\n" + "       viewer.submit(/* function () { viewer.enableIV(); } */);" + "\n" + "}" + "\n" + "</script>" + "\n" + '<div id="container1"></div>';
        actuate.common.web.$("#codediv").children("#codearea").html('<textarea spellcheck="false" rows="14" style="font-size:13px;font-family:Source Code Pro;color:#333333;overflow-x:hidden;margin:0px;background-color:#fff;width:365px;height:417px;border:none;cursor: inherit;" id="codetextarea">' + code + "</textarea>")
    },
    _sampleReportCode: function () {
        this.isSample = true;
        jsapiCode = "\n\n" + "<!--" + "\n" + '<script type="text/javascript" language="JavaScript" src="' + this._iportalBaseURL + 'jsapi"></script>' + "\n" + "-->" + "\n\n" + '<script type="text/javascript">' + "\n\n" + "<!-- Enter your username and password here -->" + "\n" + '   var username = "";' + "\n" + '   var password = "";' + "\n" + "   var sortAsc =true;" + "\n" + "   if (actuate && actuate.isInitialized()) {" + "\n" + "       myInit();" + "\n" + "   } else {" + "\n" + "       var reqOps = new actuate.RequestOptions( );" + "\n" + '       reqOps.setVolume("' + this._volume + '");' + "\n" + "       reqOps.setCustomParameters({});" + "\n" + '       actuate.load("viewer");' + "\n" + '       actuate.initialize("' + this._iportalBaseURL + '",reqOps,username,password,myInit);' + "\n" + "  };" + "\n" + "  function myInit() {" + "\n" + '        var viewer = new actuate.Viewer( "container2");' + "\n" + '         viewer.setReportName("/F-Type Examples/Flight Delayed.RPTDOCUMENT");' + "\n" + "         var options = new actuate.viewer.UIOptions( );" + "\n" + "         options.enableToolBar( false );" + "\n" + "         viewer.setUIOptions( options );" + "\n" + "         viewer.setSize(475,375);" + "\n" + '         viewer.setReportletBookmark("Airline Delays Table");' + "\n" + "         viewer.submit(function () { " + "\n\n" + "<!-- This code applies a filter during JSAPI viewing, try changing filterColumn (Airport, City, State, and Delayed) AND filterValue.-->" + "\n" + '         var tableObj = viewer.getTable("Airline Delays Table");' + "\n" + '            var filterColumn = "State";' + "\n" + '            var filterValue = "CA";' + "\n" + "            tableObj.setFilters(new actuate.data.Filter(filterColumn, actuate.data.Filter.EQ, filterValue));" + "\n" + "            tableObj.setFilters(new actuate.data.Filter(filterColumn, actuate.data.Filter.TOP_N, 9));" + "\n" + "            tableObj.submit();" + "\n" + "         }, this );" + "\n\n" + "<!-- This code is called when the user clicks on the Sort button.  See HTML code further below to display this button.-->" + "\n" + '         var columnName = "Delayed";' + "\n" + '         actuate.common.web.$( "#sort" ).click(actuate.common.web.Method.bind( function () { ' + "\n" + "         \t\t\t\tif (!sortAsc) {sortAsc = true;} else {sortAsc=false;}" + "\n" + "                        var mySorter = new actuate.data.Sorter(columnName,sortAsc);" + "\n" + '                        var tableObj = viewer.getTable("Airline Delays Table");' + "\n" + "               \t        tableObj.setSorters(mySorter);" + "\n" + "               \t\t    tableObj.submit(function () {viewer.submit()});" + "\n" + "          }, this ) );" + "\n" + '          actuate.common.web.$( "#sort" ).text("Sort By " + columnName);' + "\n" + "        }" + "\n" + "</script>";
        htmlCode = "<!--*********CODE BELOW IS EDITABLE*****-->" + "\n\n" + "<!-- This code is a complete web page with the JSAPI viewer and contains just a few of the features you can use with the BIRT iHub JSAPI library. Add the username and password and uncomment the script tag below before running in your own web page. -->" + "\n\n" + "<!DOCTYPE html>" + "\n<html>" + "\n<head>" + jsapiCode + "\n</head>" + "\n<body>";
        divCode = "\n" + "<!-- Web page code starts here -->" + "\n\n" + '   <link rel="stylesheet" href="' + this._iportalBaseURL + 'samples/css/style.css">' + "\n" + '   <div class="demo" style="width:925px;height: 680px;zoom:.8;background: #DFEAF0;background-color: #DFEAF0;-moz-transform: scale(.80);-moz-transform-origin: 0 0;">' + "\n" + '   <div class="navbar navbar-custom" style="height:90px;padding-left:50px ">' + "\n" + '        <div class="container3">' + "\n" + '             <div class="navbar-header">' + "\n" + '                 <img src="' + this._iportalBaseURL + 'samples/images/plane2.png" style="float:left; margin-left:-220px;margin-top:10px;"/><a class="navbar-brand" href="#" style="margin-top:-9px"><h2 style="color:#E3EEF4; margin-top:30px;">Flight Delay Patterns</h2></a>' + "\n" + "             </div>" + "\n" + "    \t</div>" + "\n" + "    </div>" + "\n" + '    <div class="container-fluid" style="margin-top:12px;width: inherit; ">' + "\n" + '        <div class="row-fluid">' + "\n" + '            <div class="span4" style=" width: 250px; margin-left: 18px;">' + "\n" + '                <div class="container-fluid" style="  width: 208px;  ">' + "\n" + '                    <div class="row-fluid" style="margin-bottom:40px;">' + "\n" + '                        <img src="' + this._iportalBaseURL + 'samples/images/plane.png" height="150" width="200"/>' + "\n" + "                    </div>" + "\n" + '                    <div class="row-fluid" style="color:#A1ACB2; width:200px;margin-top: -36px;">' + "\n" + '                        <p style=" width: 200px;  ">' + "\n" + "                            The average percent of delayed airline arrivals across United States airports from 2004 - 2014 is 22%. We can compare this to the airport with the fewest flights delayed, Hilo International Airport in Hawaii at 7%, " + "\n" + "                            and the airport with the most flights delayed, Newark Liberty International in New Jersey at 34%. Among the causes of delays, late aircraft ranks the highest at 38% and security ranks the lowest at 0.2%." + "\n" + "                        </p>" + "\n" + "                    </div>" + "\n" + "                </div>" + "\n" + "            </div>" + "\n" + '            <div class="span8"  style="  width: 450px; margin-left: -15px; " >' + "\n" + '                <div class="container-fluid">' + "\n" + "<!-- Uncomment this section to enable the Sort button -->" + "\n" + "<!--" + "\n" + '                    <div class="row-fluid" style="margin-bottom:20px; margin-top:20px;">' + "\n" + "                        <p>" + "\n" + '                            <button type="button" class="btn btn-default btn-lg btn-custom" style="width:150px;" id="sort">Sort By Delayed</button>' + "\n" + "                        </p>" + "\n" + "                    </div>" + "\n" + "-->" + "\n" + '                    <div id="container2"></div>' + "\n" + "                </div>" + "\n" + "            </div>" + "\n" + "        </div>" + "\n" + "    </div>";
        "\n" + "  </div>";
        htmlCode += divCode + "\n</body>" + "\n</html>";
        actuate.common.web.$("#codediv").removeClass("ftype-hide");
        actuate.common.web.$("#container1").height(476);
        actuate.common.web.$("#codediv").children("#codearea").html('<textarea spellcheck="false" rows="14" style="font-size:13px;font-family:Source Code Pro;color:#333333;overflow-x:hidden;margin:0px;background-color:#fff;width:365px;height:419px;border:none;cursor: inherit;" id="codetextarea">' + htmlCode + "</textarea>")
    },
    _runLiveCode: function () {
        actuate.common.web.$("#container1").html("");
        this._that._removeViewer("container1");
        this._that._removeViewer("container2");
        var a = document.getElementById("codetextarea").value;
        actuate.common.web.$("#container1").html(a.replaceAll("\n", "").replace(/<!--(.*?)-->/g, ""))
    },
    _goBack: function () {
        this._userReportCode();
        if (this._sampleExists) {
            actuate.common.web.$("#advanced").removeClass("ftype-hide")
        }
        actuate.common.web.$("#back").addClass("ftype-hide");
        actuate.common.web.$("#sample").addClass("ftype-hide");
        actuate.common.web.$("#initial").removeClass("ftype-hide");
        this._runLiveCode()
    },
    _advanced: function () {
        this._sampleReportCode();
        actuate.common.web.$("#advanced").addClass("ftype-hide");
        actuate.common.web.$("#back").removeClass("ftype-hide");
        actuate.common.web.$("#initial").addClass("ftype-hide");
        actuate.common.web.$("#sample").removeClass("ftype-hide");
        this._runLiveCode()
    },
    _reset: function () {
        if (this.isSample) {
            this._sampleReportCode()
        } else {
            this._userReportCode()
        }
        this._runLiveCode()
    },
    _launchJSFiddle: function () {
        var a = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", "Dlg.Title.Confirmation"),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(function () {
                    this._wizard._ping("launch jsfiddler");
                    window.open(this._invokeListener("ON_GETLOCALIZATION_STRING", "integrate_js_editor"))
                }, this),
                buttonType: "primary"
            },
            cancelButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
                handler: actuate.common.web.Method.bind(this._NOOP, this),
                buttonType: "secondary"
            },
            isMsgDlg: true
        };
        var b = this._invokeListener("ON_GETLOCALIZATION_STRING", "Integrate.Msg.JSFiddleConfirm");
        var c = new actuate.common.web.widget.dialog.ExitDialog({
            id: "confirmation",
            msg: b,
            type: "confirmation",
            dialogConfig: a
        });
        c.setHideCloseButton(false);
        c.render()
    },
    getControlItems: function () {
        var a = [];
        return a
    },
    render: function (a, b) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Integrate.superclass.render.call(this, a);
        actuate.common.web.$("#run").click(actuate.common.web.Method.bind(this._runLiveCode, this));
        actuate.common.web.$("#reset").click(actuate.common.web.Method.bind(this._reset, this));
        actuate.common.web.$("#back").click(actuate.common.web.Method.bind(this._goBack, this));
        actuate.common.web.$("#jsfiddle").click(actuate.common.web.Method.bind(this._launchJSFiddle, this));
        var c = function (a) {
            if (a != null) {
                this._sampleExists = a["fileExists"];
                if (this._sampleExists) {
                    actuate.common.web.$("#advanced").click(actuate.common.web.Method.bind(this._advanced, this))
                } else {
                    actuate.common.web.$("#advanced").addClass("ftype-hide")
                }
            }
        };
        var d = {fileName: "/F-Type Examples/Flight Delayed.RPTDOCUMENT"};
        this._wizard._sendRequest("checkFile", "", d, actuate.common.web.Method.bind(c, this));
        this._renderIV();
        this._userReportCode();
        actuate.common.web.$("#" + b).removeAttr("tabindex");
        if (!actuate.util.browser.__isIE()) {
            actuate.common.web.$(".modal-footer").css("margin-top", "-25px")
        }
    },
    _renderIV: function () {
        var a = new actuate.Viewer("container1", null, null, true, true);
        a.setReportName(this._reportBase + this._report);
        if (this._parameterMap) {
            var b = [];
            for (var c in this._parameterMap) {
                var d = new actuate.viewer.impl.ParameterValue;
                d.setName(c);
                if (this._parameterMap[c] != null) {
                    d.setValue(this._parameterMap[c])
                } else {
                    d.setValueIsNull(true)
                }
                b.push(d)
            }
            if (b) {
                a.setParameterValues(b)
            }
        }
        var e = new actuate.viewer.UIOptions;
        e.enableToolBar(false);
        a.setUIOptions(e);
        a.setSize(600, 475);
        a.submit()
    },
    _renderItem: function (a, b) {
    },
    renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b)
    },
    _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Interact = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _helpDocBase: null, initialize: function (a) {
        if (this.__extending) return;
        this._helpDocBase = a.helpDocBase;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Interact.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Interact.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Interact.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div style="max-width:550px;">' + "Each report item automatically contains a menu of interactive options. Since users can easily personalize report " + "content and layout using this menu, one BIRT design can satisfy the needs of a wide variety of end users. Click " + "on an item in your own report to see these features&mdash;such as sorting, grouping, and filtering&mdash;in action." + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "interact_help_link") + '") class="learnmore">Learn More</a>' + "</div>" + '<div class="interactimage"></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Interact.superclass.render.call(this, a)
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.MyProfile = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _myProfileData: null, _freemium: null, initialize: function (a) {
        if (this.__extending) return;
        this._defaultLocale = "en_US";
        this._defaultTimeZone = "America/Chicago";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.MyProfile.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.MyProfile.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        this._myProfileData = a;
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.MyProfile.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = "<div>" + '<div class="control-group" id="userName{id}"></div>' + '<div class="control-group" id="roles{id}"></div>' + '<div class="control-group" id="description{id}"></div>' + '<div class="control-group" id="email{id}"></div>' + '<div class="control-group" id="language{id}"></div>' + '<div class="control-group" id="timeZone{id}"></div>' + '<div class="control-group" id="homeFolder{id}"></div>' + '<div class="control-group" id="dashboard{id}"></div>' + '<div id="ihub-myprofile-password-section-{id}">' + '<div><h2 class="control-title control-title-small control-title-top">' + this.getLocalizedString("Lbl.MyProfile.Password") + "</h2></div>" + '<div class="changePasswordstyle"><a href="#" id="togglePwd{id}" class="underlineStyle">' + this.getLocalizedString("Lbl.MyProfile.ChangePassword") + '</a><i id="itogglePwd{id}" style="cursor: pointer;" class="icon-large icon-ygg-caret-down"></i></div>' + "</div>" + '<div id="password{id}" class="hide">' + "<div><h5>" + this.getLocalizedString("Lbl.MyProfile.ChangePasswordHint") + "</h5></div>" + '<div class="control-group" id="existingPassword{id}"></div>' + '<div class="control-group" id="currentPassword{id}"></div>' + '<div class="control-group" id="newpasswordConfirm{id}"></div>' + "</div>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    }, getControlItems: function () {
        var a = [{
            fieldControl: "html",
            name: "userName",
            labelKey: "Lbl.MyProfile.UserName",
            html: this._myProfileData["userName"]
        }, {
            fieldControl: "text",
            name: "description",
            labelKey: "Lbl.MyProfile.Description",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "text",
            name: "email",
            labelKey: "Lbl.MyProfile.Email",
            allowBlank: true,
            regex: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
            regexTextKey: "Msg.Email.Not.Valid",
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "listbox",
            name: "language",
            labelKey: "Lbl.MyProfile.Language",
            content: actuate.common.web.util.TimeZoneLocaleUtil.getLocales(),
            allowBlank: true,
            disabled: this._myProfileData["isOCP"]
        }, {
            fieldControl: "listbox",
            name: "timeZone",
            labelKey: "Lbl.MyProfile.TimeZone",
            content: actuate.common.web.util.TimeZoneLocaleUtil.getTimeZones(),
            allowBlank: true,
            disabled: this._myProfileData["isOCP"]
        }, {
            fieldControl: "text",
            name: "homeFolder",
            labelKey: "Lbl.MyProfile.HomeFolder",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "text",
            name: "dashboard",
            labelKey: "Lbl.MyProfile.Dashboard",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "password",
            name: "existingPassword",
            labelKey: "Lbl.MyProfile.CurrentPassword",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "password",
            name: "currentPassword",
            labelKey: "Lbl.MyProfile.Password",
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"],
            allowBlank: true,
            value: "dummy"
        }, {
            fieldControl: "password",
            name: "newpasswordConfirm",
            labelKey: "Lbl.MyProfile.PasswordConfirm",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"],
            value: "dummy"
        }];
        if (this._myProfileData["isOCP"]) {
            a.push({
                fieldControl: "html",
                name: "roles",
                labelKey: "Lbl.MyProfile.Roles",
                html: this._myProfileData["roles"]
            })
        }
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls();
            this.setData(this._myProfileData)
        }
        actuate.common.web.widget.ui.view.common.MyProfile.superclass.render.call(this, a);
        actuate.common.web.$("#togglePwd" + a).click(actuate.common.web.Method.bind2(this._showHidePwd, this, a));
        actuate.common.web.$("#itogglePwd" + a).click(actuate.common.web.Method.bind2(this._showHidePwd, this, a));
        var b = actuate.common.web.$("#ihub-myprofile-password-section-" + a);
        if (b) {
            if (this._myProfileData.otdsEnabled) {
                b.addClass("hide")
            } else {
                if (b.hasClass("hide")) {
                    b.removeClass("hide")
                }
            }
        }
    }, _showHidePwd: function (a) {
        if (actuate.common.web.$("#password" + a).hasClass("hide")) {
            actuate.common.web.$("#password" + a).removeClass("hide");
            actuate.common.web.$("#itogglePwd" + a).removeClass("icon-ygg-caret-down");
            actuate.common.web.$("#itogglePwd" + a).addClass("icon-ygg-caret-up")
        } else {
            actuate.common.web.$("#password" + a).addClass("hide");
            actuate.common.web.$("#itogglePwd" + a).removeClass("icon-ygg-caret-up");
            actuate.common.web.$("#itogglePwd" + a).addClass("icon-ygg-caret-down")
        }
    }, _renderItem: function (a, b, c) {
        var d = a.getControlInfo();
        if (d.fieldControl === "radio") {
            a.getInputCtrl().appendTo(b);
            a.getInputCtrl()._element.css("margin-left", "10px");
            a.getLblCtrl().appendTo(b);
            a.getLblCtrl()._element.css("display", "inline");
            a.getLblCtrl()._element.css("margin-left", "10px");
            if (d.name === "userType" || d.name === "isExternal") {
                b.css("float", "left")
            }
        } else {
            a.getLblCtrl().appendTo(b);
            a.getLblCtrl()._element.css("margin-right", "10px");
            a.getLblCtrl()._element.css("margin-top", "5px");
            a.getLblCtrl()._element.css("text-align", "right");
            a.getLblCtrl()._element.css("width", "200px");
            a.getLblCtrl()._element.css("float", "left");
            a.getInputCtrl()._element.width(d.width);
            if (c && a.getInputCtrl()._listBoxButton && a.getInputCtrl()._listBoxButton.length > 0) {
                a.getInputCtrl()._listBoxButton[0].disabled = true
            }
            a.getInputCtrl().appendTo(b)
        }
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            var e = a.getControlInfo();
            if (e.fieldControl === "html") {
                d[0].innerHTML = e.html
            } else {
                var f = false;
                if ((e.name == "language" || e.name == "timeZone") && e.disabled) {
                    f = true
                }
                this._renderItem(a, d, f)
            }
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.ProductAbout = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _ProductAboutData: null, _freemium: null, initialize: function (a) {
        if (this.__extending) return;
        this._defaultLocale = "en_US";
        this._defaultTimeZone = "America/Chicago";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.ProductAbout.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.ProductAbout.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        this._ProductAboutData = a;
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.ProductAbout.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div style="max-width:385px;color:#333333">' + "<p>" + this.getLocalizedString("msg_version") + " " + this.getLocalizedString("version") + "</p>" + "<p>" + this.getLocalizedString("copyright") + "</p>" + "<p>" + this.getLocalizedString("Lbl.About.Patent") + "</p>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    }, getControlItems: function () {
        return []
    }, render: function (a) {
        actuate.common.web.widget.ui.view.common.ProductAbout.superclass.render.call(this, a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Scheduler = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _iportalBaseURL: null, _report: null, _reportBase: null, _timezoneOffset: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Scheduler.superclass.initialize.call(this);
        this._iportalBaseURL = a.iportalBaseURL;
        this._report = a.reportName;
        this._reportBase = a.reportBase;
        this._timezoneOffset = a.timezoneOffset
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Scheduler.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Scheduler.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = "<script> function setOnceDisabled(fm,value,time,timepattern,datepattern){setControlDisabled2(fm.onceDate,value);" + " dt = new Date();dt.setTime(dt.getTime() + 600000 + dt.getTimezoneOffset() * 60000 + eval(time));" + ' if(!value && fm.onceDate.value == ""){fm.onceDate.value = formatDate(dt, datepattern);' + " } setControlDisabled2(fm.onceTime,value);if(!value)" + " {fm.onceTime.value = formatDate(dt, timepattern);}}" + " function setRecurringDisabled(fm,value ){setControlDisabled2(fm.recurringDay,value);setControlDisabled2(fm.recurringTime,value);" + " if(!value){dt = new Date();dt.setTime(dt.getTime() + 600000 + dt.getTimezoneOffset() * 60000 + eval(timeZoneOffset));" + "fm.recurringTime.value = formatDate(dt, timePattern);}}" + " function setControlDisabled2(control,value){if (control.style){control.disabled = value;}" + " else{if (!control.onfocus)control.onfocus = control.blur;}}" + "</script>" + '<div class="centeralign" ><i class="icon-ygg-spinner icon-spin icon-large"></i></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a, b) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Scheduler.superclass.render.call(this, a);
        var c = this._iportalBaseURL + "submitjob.do";
        var d = "__from=uploader&jobType=async&__executableName=" + encode(this._reportBase) + encode(this._report);
        actuate.common.web.$.ajax({
            type: "POST", url: c, data: d, success: function (b) {
                if (b) {
                    document.getElementById(a).innerHTML = b;
                    setRecurringDisabled(document.AcSubmitJobActionForm, false)
                }
            }
        });
        if (actuate.util.browser.__isFirefox()) {
            actuate.common.web.$("#" + b).removeAttr("tabindex")
        }
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Share = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _helpDocBase: null, initialize: function (a) {
        if (this.__extending) return;
        this._helpDocBase = a.helpDocBase;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Share.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Share.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Share.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div  style="width:500px">' + "You can share your content with other users or groups, giving them access to individual BIRT design files and folders, as well as to the output of scheduled jobs. " + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "share_help_link") + '") class="learnmore">Learn More</a></div>' + "</div>" + '<div class="shareimage"></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Share.superclass.render.call(this, a)
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.FileResourceManager = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.FileResourceManager.prototype = {
    _file: null,
    _baseResourceID: 0,
    _systemResources: null,
    _reportResources: null,
    _$container: null,
    _$resourceDragNDropContainer: null,
    _$systemResourceHeaderRow: null,
    _$reportResourceHeaderRow: null,
    _helper: null,
    _complexTypeList: null,
    _resourcesChecked: null,
    _resourcesToBeChecked: null,
    _fileUploadServletPath: null,
    _listener: null,
    _helpDocBase: null,
    _rootFileHasError: false,
    ON_SYSTEM_RESOURCE_MISSING: "ON_SYSTEM_RESOURCE_MISSING",
    ON_SYSTEM_RESOURCE_READY: "ON_SYSTEM_RESOURCE_READY",
    ON_ROOT_FILE_ERROR: "ON_ROOT_FILE_ERROR",
    REPORT_RESOURCE_TYPE: "REPORT",
    SYSTEM_RESOURCE_TYPE: "SYSTEM",
    RESOURCE_STATUS_EXIST: "Exist",
    RESOURCE_STATUS_NONEXIST: "NonExist",
    RESOURCE_STATUS_UPLOADING: "Uploading",
    initialize: function (a) {
        this._file = a.file;
        this._iportalBaseURL = a.iportalBaseURL;
        this._helpDocBase = a.helpDocBase;
        this._$container = a.$container;
        this._helper = a.helper;
        this._complexTypeList = a.complexTypeList;
        this._fileUploadServletPath = a.fileUploadServletPath;
        this._systemResources = new actuate.util.HashMap;
        this._reportResources = new actuate.util.HashMap;
        this._resourcesChecked = new actuate.util.HashMap;
        this._resourcesToBeChecked = new actuate.util.HashMap;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    register: function (a, b) {
        this._listener.addListener(a, b)
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    _showResources: function (a, b) {
        var c = actuate.common.web.$(".resource-list");
        var d = a.size();
        var e = d > 0 ? d + "" : "";
        var f = b == this.SYSTEM_RESOURCE_TYPE;
        if (f) {
            if (d > 0 && !this._$systemResourceHeaderRow) {
                this._$systemResourceHeaderRow = this._createCategoryHeaderRow(e, b);
                c.prepend(this._$systemResourceHeaderRow)
            }
            var g = false;
            a.each(function (a) {
                var d = a.value;
                if (!d.rendered) {
                    d.rendered = true;
                    this._createResourceItemRow(c, d, b)
                }
                if (d.state.value == this.RESOURCE_STATUS_NONEXIST) {
                    g = true
                }
            }, this);
            if (g) {
                this._showSystemResourceMissingSection();
                this.fire(this.ON_SYSTEM_RESOURCE_MISSING)
            } else {
                this.fire(this.ON_SYSTEM_RESOURCE_READY)
            }
        } else {
            if (d > 0 && !this._$reportResourceHeaderRow) {
                this._$reportResourceHeaderRow = this._createCategoryHeaderRow(e, b);
                c.append(this._$reportResourceHeaderRow)
            }
            a.each(function (a) {
                var d = a.value;
                d.each(function (a) {
                    var d = a.value;
                    if (!d.rendered) {
                        d.rendered = true;
                        this._createResourceItemRow(c, d, b)
                    }
                }, this)
            }, this)
        }
    },
    _showSystemResourceMissingSection: function () {
        var a = actuate.common.web.$;
        var b = a(".exit-for-driver-row");
        var c = a(".need-help-row");
        b.css("display", "");
        c.css("display", "none");
        this._updateSystemResourceFolderLink();
        a(".exit-to-retrieve").on("click", actuate.Method.bind(this._handleExitToRetrieve, this))
    },
    _updateSystemResourceFolderLink: function () {
        var a = new actuate.util.HashMap;
        this._systemResources.each(function (b) {
            var c = b.value;
            var d = c.category.value;
            var e = c.serverPath;
            a.put(d, e)
        }, this);
        var b = '<div class="system-path-list">';
        a.each(function (a) {
            b += a.key + ": <br/>" + a.value + "<br/>"
        });
        b += "</div>";
        var c = localizedProfileMsg["ftypewizard_resourceManager_driverFolderStr"];
        actuate.common.web.$(".ihub-folder-link").popover({
            title: "iHub Folder",
            content: c + " <br/>" + b,
            trigger: "click",
            placement: "top"
        })
    },
    _createCategoryHeaderRow: function (a, b) {
        var c = "STATUS";
        var d = b == this.SYSTEM_RESOURCE_TYPE;
        var e = d ? "SYSTEM RESOURCES" : "BIRT RESOURCES";
        var f = d ? "system-resource-header" : "report-resource-header";
        e += " (" + a + ")";
        var g = "<tr>" + '<td colspan="3" class="birt-resource-summary-row ' + f + '">' + "<span>" + e + "</span>" + "</td>" + '<td class="birt-resource-summary-row" style="text-align:center">' + c + "</td>" + '<td class="birt-resource-summary-row"></td>' + "</tr>";
        return actuate.common.web.$(g)
    },
    _createResourceItemRow: function (a, b, c) {
        var d = c == this.REPORT_RESOURCE_TYPE;
        var e = d ? actuate.util.Utility.stripPath(b.path) : b.category.value;
        var f = d ? b.path : b.name;
        var g = b.state.value;
        var h = b.toFileSystem;
        var i = b.isScript === true;
        var j = g == this.RESOURCE_STATUS_EXIST;
        var k = actuate.util.Utility.getFileExtension(e);
        var l = this._iportalBaseURL + "/iportal/activePortal/images/filetypes/" + this._getFileIconName(k);
        var m = '<img src="' + l + '" class="file-type-icon"/>';
        var n = j ? '<i class="icon-ygg-check resource-check"></i>' : '<i class="icon-ygg-alert-triangle resource-not-available ftype-popover-source"></i>';
        if (d && h) {
            n = '<i class="icon-ygg-alert-triangle resource-alert ftype-popover-source"></i>'
        }
        if (i) {
            f = ""
        }
        var o = (d ? '<tr id= "{id}" >' : "<tr>") + '<td class="resource-icon">' + m + "</td>" + "<td>" + e + "</td>" + "<td>" + f + "</td>" + '<td class="resource-status">' + n + "</td>" + '<td class="resource-link"></td>' + "</tr>";
        if (d) o = o.replace(/{id}/g, this._getResourceId(b));
        var p = actuate.common.web.$(o);
        if (d) {
            a.append(p)
        } else {
            if (this._$reportResourceHeaderRow) this._$reportResourceHeaderRow.before(p); else a.append(p)
        }
        if (!j) {
            this._updateResourceNATooltip(d, i)
        }
        if (h) {
            this._updateAbsolutePathAlert()
        }
        this._updateOperationLink(p.find(".resource-link"), c, b)
    },
    _updateResourceNATooltip: function (a, b) {
        var c = "";
        var d = localizedProfileMsg["ftypewizard_resourceManager_naToolTipExpression"];
        var e = localizedProfileMsg["ftypewizard_resourceManager_naToolTipNotUploaded"];
        var f = localizedProfileMsg["ftypewizard_resourceManager_naToolTipNOTCopied"];
        if (a) {
            if (b) c = d; else c = e
        } else {
            c = f
        }
        var g = {title: c, trigger: "hover", placement: "top", animation: true};
        actuate.common.web.$(".resource-not-available").tooltip(g)
    },
    _updateAbsolutePathAlert: function () {
        var a = "BIRT iHub cannot resolve absolute paths on the file system. Place the resource in the project's resource folder. Then modify your BIRT design file to use a relative path.";
        var b = {title: a, trigger: "hover", placement: "top", animation: true};
        actuate.common.web.$(".resource-alert").tooltip(b)
    },
    _updateOperationLink: function (a, b, c) {
        var d = c.state.value;
        var e = c.serverPath;
        var f = actuate.common.web.$;
        var g;
        var h = localizedProfileMsg["ftypewizard_resourcePage_uploadLinkStr"];
        var i = localizedProfileMsg["ftypewizard_resourcePage_cancelLinkStr"];
        var j = localizedProfileMsg["ftypewizard_resourcePage_removeLinkStr"];
        var k = localizedProfileMsg["ftypewizard_resourceManager_removeTooltipStr"];
        var l = localizedProfileMsg["ftypewizard_resourceManager_uploadTooltipStr"];
        if (b == this.REPORT_RESOURCE_TYPE) {
            if (d == this.RESOURCE_STATUS_EXIST) {
                g = f('<a class="remove-resource-link ftype-tooltip-source">' + j + "</a>");
                a.html(g);
                g.on("click", actuate.common.web.Method.bind2(this._handleRemoveResource, this, c, g));
                var m = {title: k, placement: "top", animation: true};
                g.tooltip(m)
            } else if (d == this.RESOURCE_STATUS_NONEXIST) {
                if (c.toFileSystem || c.isScript) return;
                g = f('<a class="resource-upload-link">' + h + "</a>");
                a.html(g);
                this._setUpUploadLinks();
                var m = {title: l, placement: "top", animation: true};
                g.tooltip(m)
            } else if (d == this.RESOURCE_STATUS_UPLOADING) {
                g = f('<a class="cancel-upload-link">' + i + "</a>");
                a.html(g);
                g.on("click", actuate.common.web.Method.bind2(this._handleCancelUploading), this, e, g)
            }
        }
    },
    _handleCancelUploading: function () {
    },
    _handleExitToRetrieve: function () {
        top.location.href = this._iportalBaseURL + "ssologout.do"
    },
    _handleRemoveResource: function (a, b) {
        var c = a.serverPath;
        actuate.common.web.$(".tooltip").remove();
        var d = actuate.common.web.$("#" + this._getResourceId(a));
        var e = d.find(".resource-status");
        var f = d.find(".resource-link");
        var g = actuate.util.Utility.getFileExtension(c);
        var h = actuate.common.web.Method.bind(function (b) {
            var d = this._handleAuthentication(b);
            if (d && b.success) {
                var h = this._getReportResourceCache(c);
                h.state.value = this.RESOURCE_STATUS_NONEXIST;
                e.html('<i class="icon-ygg-alert-triangle resource-not-available"></i>');
                if (actuate.util.Utility.arrayContains(this._complexTypeList, g)) {
                    this._hardRerender()
                } else {
                    this._updateOperationLink(f, this.REPORT_RESOURCE_TYPE, a)
                }
            } else {
            }
            ;
        }, this);
        e.html("Deleting...");
        var i = {name: encodeURI(c)};
        this._sendRequest("/servlet/AsyncFileDelete", "delete", i, h)
    },
    _getReportResourceCache: function (a) {
        var b = null;
        var c = actuate.util.Utility.stripPath(a);
        var d = this._reportResources.get(c.toLowerCase());
        if (d) {
            b = d.get(a.toLowerCase())
        }
        return b
    },
    _getResourceId: function (a) {
        return "resourceItem-" + a.id
    },
    _getFileIconName: function (a) {
        var b = "";
        switch (a) {
            case"rptdesign":
            case"rptlibrary":
            case"rptdocument":
            case"html":
            case"doc":
            case"docx":
            case"pdf":
            case"rtf":
            case"csv":
            case"txt":
            case"xls":
            case"xlsx":
                b = a + "16x16.png";
                break;
            default:
                b = "default16x16.png"
        }
        return b
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_resourceManager_uploadCommentStr"];
        var b = localizedProfileMsg["ftypewizard_resourceManager_browseStr"];
        var c = localizedProfileMsg["ftypewizard_resourceManager_exitStr"];
        var d = localizedProfileMsg["ftypewizard_resourceManager_exitExplainStr"];
        var e = localizedProfileMsg["ftypewizard_resourceManager_learnMoreStr"];
        var f = localizedProfileMsg["ftypewizard_resourceManager_needHelpUploadStr"];
        var g = '<div class="upload-comment-section">' + '<input class="file-input-hidden" name="file" type="file" multiple />' + '<div class="row exit-for-driver-row" style="display:none">' + '<div class="span3" style="padding-top:8px;">' + '<a class="btn btn-success exit-to-retrieve">' + c + "</a>" + "</div>" + '<div class="span8">' + d + '<a class="explain-this-link learn-more-link">' + e + "</a>" + "</div>" + "</div>" + "</div>" + '<div class="resource-list-section ftype-tooltip-source">' + '<table class="table">' + '<tbody class="resource-list">' + "</tbody>" + "</table>" + "</div>" + '<div class="row need-help-row" style="padding-right:5px;">' + '<a class="explain-this-link learn-more-link pull-right">' + f + "</a>" + "</div>";
        return g
    },
    _hardRerender: function () {
        this._$container.html("");
        this._$systemResourceHeaderRow = null;
        this._$reportResourceHeaderRow = null;
        this._systemResources = new actuate.util.HashMap;
        this._reportResources = new actuate.util.HashMap;
        this._resourcesChecked = new actuate.util.HashMap;
        this._resourcesToBeChecked = new actuate.util.HashMap;
        this.render(this._$container)
    },
    _reRender: function () {
        this._resourcesChecked = new actuate.util.HashMap;
        this._resourcesToBeChecked = new actuate.util.HashMap;
        this.render(this._$container)
    },
    render: function (a) {
        if (a) {
            this._$container = a
        }
        var b = this._$container.find(".resource-list").length > 0;
        if (!b) {
            this._$container.append(actuate.common.web.$(this._getTemplate()));
            this._$resourceDragNDropContainer = this._$container.find(".resource-list-section")
        }
        var c = actuate.common.web.Method.bind(function () {
            if (this._rootFileHasError) {
                this._handleRootFileError();
                return
            }
            if (this._systemResources) this._showResources(this._systemResources, this.SYSTEM_RESOURCE_TYPE);
            if (this._reportResources) this._showResources(this._reportResources, this.REPORT_RESOURCE_TYPE);
            if (!b) {
                this._setUpDragNDropUpload();
                this._setUpLearnMoreLink()
            }
        }, this);
        this.loadResources(this._file, c)
    },
    _setUpDragNDropUpload: function () {
        var a = actuate.common.web.$;
        var b = this;
        var c = this._$resourceDragNDropContainer;
        var d = {title: "Drop files below", placement: "top", trigger: "", animation: true};
        c.tooltip(d);
        c.on("dragenter", function (a) {
            a.stopPropagation();
            a.preventDefault();
            b._showDDTooltip(c, true);
            c.css({border: "3px solid #82cd1e", opacity: .6})
        });
        c.on("dragleave", function (a) {
            a.stopPropagation();
            a.preventDefault();
            actuate.DDAreaOvering = false;
            b._showDDTooltip(c, false);
            c.css({border: "", opacity: 1})
        });
        c.on("dragover", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "3px solid #82cd1e", opacity: .6});
            actuate.DDAreaOvering = true
        });
        c.on("drop", function (a) {
            a.preventDefault();
            var c = a.originalEvent.dataTransfer.files;
            b._handleUploadFiles(c);
            actuate.DDAreaOvering = false
        });
        a(document).on("dragenter", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "3px dotted gray", opacity: .6});
            b._showDDTooltip(c, true);
            actuate.DDAreaOvering = true
        });
        a(document).on("dragover", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "3px dotted gray", opacity: .6});
            actuate.DDAreaOvering = true
        });
        a(document).on("drop", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "", opacity: 1});
            b._showDDTooltip(c, false);
            actuate.DDAreaOvering = false
        });
        a(document).on("dragleave", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "", opacity: 1});
            b._showDDTooltip(c, false);
            actuate.DDAreaOvering = false
        })
    },
    _showDDTooltip: function (a, b) {
        if (actuate.DDAreaTooltipShowing != b) {
            if (b) {
                actuate.DDAreaTooltipShowing = true;
                a.tooltip("show")
            } else {
                setTimeout(actuate.Method.bind2(this._hideDDTooltip, this, a), 50)
            }
        }
    },
    _hideDDTooltip: function (a) {
        if (actuate.DDAreaOvering == false) {
            a.tooltip("hide");
            actuate.DDAreaTooltipShowing = false
        }
    },
    _handleUploadFiles: function (a) {
        var b = this._findMatchingResourcesList(a);
        this._uploadResources(b.listToUpload);
        if (b.conflictList.length > 1) {
            this._resolveConflictingResources(b.conflictList)
        }
        this._$resourceDragNDropContainer.css("border", "")
    },
    _resolveConflictingResources: function (a) {
        var b = {resources: a};
        var c = new actuate.common.web.widget.ui.wizard.dialog.ResourceConflictDialog(b);
        c.register(c.EVENT_RESOLVE_CONFIRMED, actuate.Method.bind(this._uploadResources, this));
        c.setHideCloseButton(false);
        c.render()
    },
    _findMatchingResourcesList: function (a) {
        var b = {};
        var c = [];
        var d = [];
        for (var e = 0; e < a.length; e++) {
            var f = a[e];
            var g = this._reportResources.get(f.name.toLowerCase());
            if (g) {
                var h = [];
                g.each(function (a) {
                    var b = a.value;
                    if (b.state.value == this.RESOURCE_STATUS_NONEXIST && !b.toFileSystem) {
                        b.file = f;
                        h.push(b)
                    }
                }, this);
                if (h.length > 1) {
                    if (d.length == 0) {
                        d = d.concat(h)
                    }
                } else {
                    c = c.concat(h)
                }
            }
        }
        b.listToUpload = c;
        b.conflictList = d;
        return b
    },
    _uploadResources: function (a) {
        for (var b in a) {
            var c = a[b];
            var d = c.file;
            this._uploadSingleResource(c, d)
        }
    },
    _uploadSingleResource: function (a, b) {
        var c = new XMLHttpRequest;
        c.onload = actuate.common.web.Method.bind(function () {
            if (c.status == 200) {
                this._onUploadComplete(null, a)
            } else {
            }
            ;
        }, this);
        c.upload.addEventListener("loadstart", actuate.common.web.Method.bind(function () {
            this._onUploadStart(a)
        }, this));
        c.upload.addEventListener("progress", actuate.common.web.Method.bind(function (b) {
            if (b.lengthComputable) {
                this._onUploadProgress(a, b)
            } else {
            }
            ;
        }, this));
        var d = new FormData;
        this._prepareFormData(d);
        d.append("targetFile", b.name);
        d.append("workingFolder", actuate.util.Utility.stripFileName(a.serverPath));
        d.append("file", b);
        c.open("post", this._fileUploadServletPath);
        c.send(d)
    },
    _onUploadStart: function (a) {
        var b = actuate.common.web.$("#" + this._getResourceId(a));
        var c = b.find(".resource-status");
        var d = '<div class="progress resource-progress">' + '<div class="bar" role="progressbar">' + "</div>" + "</div>";
        c.html(d)
    },
    _onUploadProgress: function (a, b) {
        var c = b.loaded / b.total * 100;
        var d = actuate.common.web.$("#" + this._getResourceId(a));
        var e = d.find(".bar");
        e.css("width", c + "%")
    },
    _onUploadComplete: function (a, b) {
        b.state.value = this.RESOURCE_STATUS_EXIST;
        var c = actuate.common.web.Method.bind(function () {
            actuate.common.web.$(".tooltip").remove();
            var a = actuate.common.web.$("#" + this._getResourceId(b));
            var c = a.find(".resource-status");
            c.html('<i class="icon-ygg-check resource-check"></i>');
            var d = a.find(".resource-link");
            this._updateOperationLink(d, this.REPORT_RESOURCE_TYPE, b);
            this._reRender()
        }, this);
        window.setTimeout(c, 1e3)
    },
    _handleRootFileError: function () {
        this.fire(this.ON_ROOT_FILE_ERROR)
    },
    _prepareFormData: function (a) {
        a.append("__vp", "Default Volume");
        a.append("volume", "Default Volume");
        a.append("showBanner", "false");
        a.append("locale", "en_US");
        a.append("hiddenReplacementPolicy", "Create");
        a.append("copyDescription", "false");
        a.append("migrateDependencies", "false");
        a.append("copyAutoArchiveRules", "false");
        a.append("permission", "folder");
        a.append("ReplacementPolicy", "Create");
        a.append("permissionButton", "folder")
    },
    isResourcesComplete: function () {
        var a = true;
        var b = this._systemResources.size();
        var c = this._reportResources.size();
        if (b == 0 && c == 0 && this._rootFileHasError) {
            return false
        }
        if (b > 0) {
            this._systemResources.each(function (b) {
                var c = b.value;
                if (c.state.value == this.RESOURCE_STATUS_NONEXIST) a = false
            }, this)
        }
        if (c > 0) {
            this._reportResources.each(function (b) {
                var c = b.value;
                c.each(function (b) {
                    var c = b.value;
                    if (c.state.value == this.RESOURCE_STATUS_NONEXIST) a = false
                }, this)
            }, this)
        }
        return a
    },
    loadResources: function (a, b) {
        var c = actuate.common.web.Method.bind(function (a) {
            if (a == null) {
                a = {};
                if (this._systemResources.size() == 0 && this._reportResources.size() == 0) {
                    this._rootFileHasError = true
                }
            }
            var c = this._handleAuthentication(a);
            if (c) {
                this._updateSystemResources(a.systemResources);
                this._updateReportResources(a.reportResources);
                if (this._resourcesToBeChecked.size() > 0) {
                    var d = new Array;
                    var e = this._resourcesToBeChecked.keys();
                    for (var f in e) {
                        var g = e[f];
                        if (this._resourcesToBeChecked.get(g)) d.push(actuate.Method.bind2(this.loadResources, this, g, b))
                    }
                    actuate.util.Utility.chainCallbacksArray(d, function () {
                    })
                } else {
                    if (b) {
                        b()
                    }
                }
            }
        }, this);
        var d = a.toLowerCase();
        if (!this._resourcesChecked.get(d)) {
            this._resourcesToBeChecked.remove(d);
            this._resourcesChecked.put(d, true);
            var e = {report: d};
            this._sendRequest("checkreportresources", "GetData", e, c, c)
        } else if (this._resourcesToBeChecked.size() == 0) {
            if (b) {
                b()
            }
        }
    },
    _updateSystemResources: function (a) {
        if (a && a.systemResourceItem) {
            var b = a.systemResourceItem;
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                var e = this._getSystemResourceKey(d);
                var f = this._systemResources.get(e);
                if (!f) this._systemResources.put(e, d)
            }
        }
    },
    _updateReportResources: function (a) {
        if (a && a.reportResourceItem) {
            var b = a.reportResourceItem;
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                if (d.isScript == true) {
                    d.serverPath = d.path
                }
                var e = actuate.util.Utility.stripPath(d.path);
                var f = e.toLowerCase();
                var g = actuate.util.Utility.getFileExtension(d.path);
                var h = d.serverPath;
                var i = d.serverPath.toLowerCase();
                var j = this._reportResources.get(f);
                if (j) {
                    var k = j.get(i);
                    if (!k) {
                        d.id = this._baseResourceID++;
                        j.put(i, d)
                    }
                } else {
                    d.id = this._baseResourceID++;
                    j = new actuate.util.HashMap;
                    j.put(i, d);
                    this._reportResources.put(f, j)
                }
                if (actuate.util.Utility.arrayContains(this._complexTypeList, g) && d.state.value == this.RESOURCE_STATUS_EXIST) {
                    this._resourcesToBeChecked.put(i, true);
                    this._resourcesChecked.remove(i)
                }
            }
        }
    },
    _getSystemResourceKey: function (a) {
        return a.category.value + "-" + a.name
    },
    _handleAuthentication: function (a) {
        if (a && a["authenticated"] === false) {
            top.location.href = this._iportalBaseURL;
            return false
        }
        return true
    },
    _sendRequest: function (a, b, c, d, e, f) {
        var g = this._helper;
        g.setAjaxServletPath(a);
        var h = g.getRequestData(b, c, f);
        g.sendRequest(h, d, e)
    },
    _setUpLearnMoreLink: function () {
        var a = function () {
            var a = this._helpDocBase + "/start";
            window.open(a)
        };
        var b = actuate.common.web.$(".learn-more-link");
        b.on("click", actuate.Method.bind(a, this))
    },
    _setUpUploadLinks: function () {
        var a = actuate.common.web.$;
        a(".resource-upload-link").unbind("click");
        a(".resource-upload-link").click(function () {
            a(".file-input-hidden")[0].click()
        });
        a(".file-input-hidden").unbind("change");
        a(".file-input-hidden").change(actuate.common.web.Method.bind(function (b) {
            console.log("change!");
            this._handleUploadFiles(b.target.files);
            a(".file-input-hidden")[0].value = ""
        }, this))
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.FinalPage = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.FinalPage.prototype = {
    _renderTo: null,
    _element: null,
    _report: null,
    _wizard: null,
    _uploadBaseFolder: null,
    _exeReportURL: "executeinitialreport.do?__requesttype=immediate&__executableName=",
    _iportalBaseURL: null,
    _hasParameters: null,
    _username: null,
    _paramObj: null,
    _parameterMap: null,
    _viewer: null,
    pageID: "wizardFinalPage",
    _paramValues: null,
    initialize: function (a) {
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._wizard = a.wizard;
        this._uploadBaseFolder = a.uploadBaseFolder;
        this._iportalBaseURL = a.iportalBaseURL;
        this._username = a.username
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_finalPage_exitUploaderStr"];
        var b = localizedProfileMsg["ftypewizard_finalPage_toUploadStr"];
        var c = localizedProfileMsg["ftypewizard_finalPage_toResourceStr"];
        var d = '<script type="text/javascript" language="JavaScript" src="' + this._iportalBaseURL + 'jsapi"></script>' + '<div id="' + this.pageID + '">' + '<div id="integratepopup"></div>' + '<div id="popup" class="ac">' + '<div class="exit-section-text ftype-hide" id="explore">' + "Explore what you can do with your report." + "</div>" + '<div class="exit-section ftype-hide" id="parameterBtn">' + '<a class="btn btn-default btn-exit-uploader">' + a + "</a>" + "</div>" + '<div class="exit-section ftype-hide" id="ivBtn">' + '<button class="btn btn-success btn-exit-uploader_1">' + a + "</button>" + "</div>" + "</div>" + '<div class="container">' + '<div id="uploader" class="ftype-hide">' + '<div class="btn-big-div">' + '<button class="btn-big" id="interact" >' + '<img src="../../iportal/activePortal/images/interact.png">' + "<p>Interact<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big "  id="schedule">' + '<img src="../../iportal/activePortal/images/scheduleuploader.png">' + "<p>Schedule<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big " id="share">' + '<img src="../../iportal/activePortal/images/share.png">' + "<p>Share<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big " id="export" >' + '<img src="../../iportal/activePortal/images/excel.png">' + "<p>Excel<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big " id="integrate" >' + '<img src="../../iportal/activePortal/images/integrate.png">' + "<p>Integrate<p>" + "</button>" + "</div>" + "</div>" + '<div class="ftype-hide" id="viewerDiv" style="overflow: hidden;zoom:0.98;-moz-transform: scale(.98);"> ' + '<div id="container" style="background:white;border:solid 1px #dddddd;"> </div>' + "</div>" + '<div class="container parameter-frame ftype-hide" id="parameters">' + '<div class="parameter-title-section"> Set Parameters</div>' + '<div class="parameter-desc" >The BIRT design you are uploading includes content that depends on parameters. Please select a value for each parameter and then click "Next" to finish the upload process.</div>' + '<div class="parameter-container"><div id="containerParameter" ></div></div>' + '<div class="upload-exe-section" >' + '<button class="btn btn-success btn-next">Next</button>' + "</div>" + "</div>";
        "</div>" + "</div>";
        return d
    },
    render: function () {
        this._element = actuate.common.web.$(this._getTemplate());
        actuate.common.web.$("#" + this._renderTo).html(this._element);
        this._addListeners();
        actuate.common.web.$(".btn-next").click(actuate.common.web.Method.bind(this._processParameters, this));
        window.setTimeout(actuate.common.web.Method.bind(this._process, this), 200)
    },
    _process: function () {
        actuate.load("parameter");
        actuate.load("viewer");
        actuate.load("dialog");
        var a = new actuate.RequestOptions;
        a.setVolume("Default Volume");
        var b = this._report.substring(this._report.lastIndexOf(".") + 1);
        if (b.toUpperCase() != "RPTDOCUMENT") {
            var c = function (b) {
                if (b != null) {
                    this._hasParameters = b["hasParameters"]
                }
                if (this._hasParameters) {
                    actuate.common.web.$("#parameterBtn").removeClass("ftype-hide");
                    actuate.common.web.$("#ivBtn").addClass("ftype-hide");
                    actuate.common.web.$("#parameters").removeClass("ftype-hide");
                    actuate.initialize(this._iportalBaseURL, a, this._username, null, actuate.Method.bind(this._prepareParameters, this))
                } else {
                    actuate.initialize(this._iportalBaseURL, a, this._username, null, actuate.Method.bind(this._renderIV, this))
                }
            };
            var d = {report: this._uploadBaseFolder + this._report};
            this._wizard._sendRequest("reportParam", "", d, actuate.common.web.Method.bind(c, this))
        } else {
            this._hasParameters = false;
            actuate.initialize(this._iportalBaseURL, a, this._username, null, actuate.Method.bind(this._renderIV, this))
        }
    },
    _prepareParameters: function () {
        this._wizard._ping("parameter");
        _paramObj = new actuate.parameter.Parameter
        ("containerParameter", true);
        _paramObj.setReportName(this._uploadBaseFolder + this._report);
        _paramObj.submit()
    },
    _processParameters: function () {
        if (_paramObj) {
            var a = _paramObj.validateParameters();
            if (a) {
                var b = {
                    title: "Error",
                    okButton: {label: "OK", handler: actuate.common.web.Method.bind(this.okCallBack, this)}
                };
                var c = new Array;
                c.push({errorLabel: " ", errorMessage: a});
                actuate.common.web.util.Utility.showMsgDlg("wizardFinalPage", c, "severe", b);
                return
            }
            this._parameterMap = {};
            var d = actuate.Method.bind(this._renderIV, this);
            _paramObj.downloadParameterValues(d)
        }
    },
    _renderIV: function (a) {
        this._wizard._ping("features");
        actuate.common.web.$("#myFilesBody").removeClass("ac");
        actuate.common.web.$("#uploader").removeClass("ftype-hide");
        actuate.common.web.$("#viewerDiv").removeClass("ftype-hide");
        actuate.common.web.$("#parameters").addClass("ftype-hide");
        actuate.common.web.$("#explore").removeClass("ftype-hide");
        actuate.common.web.$("#ivBtn").removeClass("ftype-hide");
        actuate.common.web.$("#parameterBtn").addClass("ftype-hide");
        this._viewer = new actuate.Viewer("container", null, null, true);
        this._viewer.setReportName(this._uploadBaseFolder + this._report);
        if (this._hasParameters) {
            this._paramValues = a;
            for (var b = 0; b < a.length; b++) {
                var c = a[b].getName();
                var d = a[b].getValue();
                if (a[b].getValueIsNull()) {
                    d = null
                }
                this._parameterMap[c] = d
            }
            var e = [];
            for (var f in this._parameterMap) {
                var g = new actuate.viewer.impl.ParameterValue;
                g.setName(f);
                if (this._parameterMap[f] != null) {
                    g.setValue(this._parameterMap[f])
                } else {
                    g.setValueIsNull(true)
                }
                e.push(g)
            }
            if (e) {
                this._viewer.setParameterValues(e)
            }
        }
        var h = new actuate.viewer.UIOptions;
        this._viewer.setUIOptions(h);
        this._viewer.registerEventHandler(actuate.viewer.impl.EventConstants.ON_EXCEPTION, actuate.common.web.Method.bind(this._handleException, this));
        this._viewer.submit(actuate.common.web.Method.bind(function () {
            this._viewer.enableIV()
        }, this))
    },
    _handleException: function (a) {
        var b = {
            title: "Error", okButton: {
                label: "OK", handler: actuate.common.web.Method.bind(function () {
                    actuate.common.web.$("#myFilesBody").removeClass("ac");
                    var a = {
                        report: "Flight Delay Sample Report.rptdesign",
                        state: "final",
                        renderTo: "myFilesContainer",
                        helper: getContentHelper(),
                        fileUploadServletPath: '<html:rewrite page="/servlet/AsyncFileUpload"/>',
                        uploadBaseFolder: "/F-Type Examples/",
                        iportalBaseURL: this._iportalBaseURL,
                        canPing: this._wizard._canPing,
                        pingUrl: this._wizard._pingUrl,
                        aCode: this._wizard._aCode,
                        productName: this._wizard._productName,
                        buildNumber: this._wizard._buildNumber,
                        helpDocBase: this._wizard._helpDocBase
                    };
                    this._wizard._ping("launch sample");
                    var b = new actuate.common.web.widget.ui.wizard.UploadWizard(a);
                    b.launch()
                }, this)
            }
        };
        actuate.common.web.$("#myFilesBody").addClass("ac");
        var c = new Array;
        c.push({
            errorLabel: " ",
            errorMessage: "Your report failed to run. Please view one of our sample reports instead."
        });
        actuate.common.web.util.Utility.showMsgDlg("wizardFinalPage", c, "severe", b)
    },
    _launchIntegrate: function () {
        this._wizard._ping("integrate");
        this.hideCalendar();
        var a = function (a) {
            return localizedProfileMsg[a]
        };
        var b = function (a) {
            a.close()
        };
        var c = {
            iportalBaseURL: this._iportalBaseURL,
            volume: "Default Volume",
            reportBase: this._uploadBaseFolder,
            reportName: this._report,
            username: this._username,
            parameterMap: this._parameterMap,
            viewer: this._viewer,
            helpDocBase: this._wizard._helpDocBase,
            wizard: this._wizard
        };
        this._integrate = new actuate.common.web.widget.dialog.IntegrateDialog(c);
        this._integrate.addListener("ON_GETLOCALIZATION_STRING", a);
        this._integrate.addListener("ON_OK", actuate.common.web.Method.bind(b, this));
        this._integrate.render("integratepopup")
    },
    _launchExport: function () {
        this._wizard._ping("export");
        this.hideCalendar();
        this._backdrop = "";
        this._spin = "";
        if (this._viewer) {
            var a = function (a) {
                return localizedProfileMsg[a]
            };
            var b = function (a) {
                actuate.common.web.$(".contentPanel").click();
                var b = new actuate.viewer.RenderOptions;
                b.setOption(actuate.viewer.RenderOptions.IS_MULTISHEET, false);
                this._viewer.downloadReport("XLS", "", b);
                a.close();
                _backdrop = actuate.common.web.$('<div class="act-msgDlg"><div class="modal-backdrop"></div>');
                _backdrop.appendTo(document.body);
                _spin = actuate.common.web.$('<div class="modal fade in centeralign" style=" top: 40%; left: 60%; background: none; border: 0px; box-shadow: none; ">' + '<i class="icon-ygg-spinner icon-spin icon-large"></i></div>');
                _spin.appendTo(actuate.common.web.$("#modal"));
                window.setTimeout("this._backdrop.remove();this._spin.remove();", 2e3)
            };
            var c = function (a) {
                a.close()
            };
            var d = {helpDocBase: this._wizard._helpDocBase};
            this._export = new actuate.common.web.widget.dialog.ExportDialog(d);
            this._export.addListener("ON_GETLOCALIZATION_STRING", a);
            this._export.addListener("ON_OK", actuate.common.web.Method.bind(b, this));
            this._export.addListener("ON_CANCEL", c);
            this._export.render("popup")
        }
    },
    _launchInteract: function () {
        this._wizard._ping("interact");
        this.hideCalendar();
        var a = function (a) {
            return localizedProfileMsg[a]
        };
        var b = function (a) {
            a.close()
        };
        var c = {helpDocBase: this._wizard._helpDocBase};
        this._interact = new actuate.common.web.widget.dialog.InteractDialog(c);
        this._interact.addListener("ON_GETLOCALIZATION_STRING", a);
        this._interact.addListener("ON_OK", b);
        this._interact.render("popup")
    },
    _launchShare: function () {
        this._wizard._ping("share");
        this.hideCalendar();
        var a = function (a) {
            return localizedProfileMsg[a]
        };
        var b = function (a) {
            a.close()
        };
        var c = {helpDocBase: this._wizard._helpDocBase};
        this._share = new actuate.common.web.widget.dialog.ShareDialog(c);
        this._share.addListener("ON_GETLOCALIZATION_STRING", a);
        this._share.addListener("ON_OK", b);
        this._share.render("popup")
    },
    _launchScheduler: function () {
        this._wizard._ping("schedule");
        this.hideCalendar();
        var a = this._iportalBaseURL;
        var b = {
            iportalBaseURL: this._iportalBaseURL,
            volume: "Default Volume",
            reportBase: this._uploadBaseFolder,
            reportName: this._report,
            helpDocBase: this._wizard._helpDocBase
        };
        var c = function (a) {
            return localizedProfileMsg[a]
        };
        var d = function (b) {
            var c = null;
            var d = location.href;
            var e = d.indexOf("://");
            var f = d.substring(0, e);
            submitAjaxForm(document, a + "/submitjob.do", b, this._paramValues)
        };
        this._scheduler = new actuate.common.web.widget.dialog.SchedulerDialog(b);
        this._scheduler.addListener("ON_GETLOCALIZATION_STRING", c);
        this._scheduler.addListener("ON_OK", actuate.common.web.Method.bind(d, this));
        this._scheduler.render("popup")
    },
    _exit: function () {
        this._wizard.confirmExit("popup")
    },
    _addListeners: function () {
        actuate.common.web.$(".btn-exit-uploader").click(actuate.common.web.Method.bind(this._exit, this));
        actuate.common.web.$(".btn-exit-uploader_1").click(actuate.common.web.Method.bind(this._exit, this));
        actuate.common.web.$(".choose-different-report").click(actuate.common.web.Method.bind(this._chooseDifferentReport, this));
        actuate.common.web.$(".back-to-resource-upload").click(actuate.common.web.Method.bind(this._backToResourceUpload, this));
        actuate.common.web.$("#interact").click(actuate.common.web.Method.bind(this._launchInteract, this));
        actuate.common.web.$("#schedule").click(actuate.common.web.Method.bind(this._launchScheduler, this));
        actuate.common.web.$("#share").click(actuate.common.web.Method.bind(this._launchShare, this));
        actuate.common.web.$("#export").click(actuate.common.web.Method.bind(this._launchExport, this));
        actuate.common.web.$("#integrate").click(actuate.common.web.Method.bind(this._launchIntegrate, this))
    },
    _chooseDifferentReport: function () {
        this._wizard.transferStateTo("upload")
    },
    _backToResourceUpload: function () {
        this._wizard.transferStateTo("resource")
    },
    hideCalendar: function () {
        var a = "wrapperactuate_iv_ui_view_ivParameter_contentDiv_container_calendar.div";
        var b = document.getElementById(a);
        var c = null;
        if (b && b.calendarInstance) {
            b.style.display = "none"
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.ResourcePage = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.ResourcePage.prototype = {
    _listener: null,
    _renderTo: null,
    _element: null,
    _report: null,
    _wizard: null,
    _uploadBaseFolder: null,
    _helpDocBase: null,
    _iportalBaseURL: null,
    _manager: null,
    pageID: "wizardResourcePage",
    initialize: function (a) {
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._wizard = a.wizard;
        this._uploadBaseFolder = a.uploadBaseFolder;
        this._helpDocBase = a.helpDocBase;
        this._iportalBaseURL = a.iportalBaseURL;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_resourcePage_exitUploaderStr"];
        var b = localizedProfileMsg["ftypewizard_resourcePage_titleStr"];
        var c = localizedProfileMsg["ftypewizard_resourcePage_fileToInportStr"];
        var d = localizedProfileMsg["ftypewizard_resourcePage_chooseDifferentReportStr"];
        var e = localizedProfileMsg["ftypewizard_resourcePage_runReportBtnStr"];
        var f = this._iportalBaseURL + "/iportal/activePortal/images/filetypes/rptdesign16x16.png";
        var g = localizedProfileMsg["ftypewizard_resourcePage_uploadLinkStr"];
        var h = localizedProfileMsg["ftypewizard_resourcePage_removeLinkStr"];
        var i = localizedProfileMsg["ftypewizard_resourcePage_cancelLinkStr"];
        var j = '<div id="' + this.pageID + '">' + '<div class="exit-section">' + '<a class="btn btn-default btn-exit-uploader">' + a + "</a>" + "</div>" + '<div class="container container-resource">' + '<div class="title-section">' + b + "</div>" + '<div class="report-name-section">' + '<div class="row">' + '<div class="report-label span">' + '<div class="row">' + '<div class="file-to-import-label span">' + c + "</div>" + '<div class="span">' + '<img class="report-icon" src="' + f + '"/>' + '<span class="report-name"></span>' + "</div>" + "</div>" + "</div>" + '<div class="span">' + '<a class="choose-different-report" href="#">' + d + "</a>" + "</div>" + "</div>" + "</div>" + '<div class="manager-container">' + "</div>" + '<div class="next-section">' + '<a class="btn btn-success btn-next">' + e + "</a>" + "</div>" + "</div>" + "</div>";
        return j
    },
    _addListeners: function () {
        actuate.common.web.$(".btn-exit-uploader").click(actuate.common.web.Method.bind(this._exit, this));
        actuate.common.web.$(".choose-different-report").click(actuate.common.web.Method.bind(this._chooseDifferentReport, this));
        actuate.common.web.$(".btn-next").click(actuate.common.web.Method.bind(this._next, this))
    },
    _exit: function () {
        this._wizard.confirmExit(this.pageID)
    },
    _next: function () {
        if (!this._manager.isResourcesComplete()) {
            var a = localizedProfileMsg["ftypewizard_resourcePage_sureToProceedStr"];
            var b = localizedProfileMsg["ftypewizard_resourcePage_notUploadedAllStr"];
            var c = localizedProfileMsg["ftypewizard_resourcePage_proceedAnywayStr"];
            var d = {
                id: this.pageID,
                msg: a,
                type: "confirmation",
                dialogConfig: {
                    title: b,
                    okButton: {
                        label: c,
                        handler: actuate.Method.bind2(this._wizard.transferStateTo, this._wizard, "final")
                    },
                    cancelButton: {label: localizedProfileMsg["ftypewizard_resourcePage_cancelLinkStr"]}
                }
            };
            var e = new actuate.common.web.widget.dialog.ConfirmDialog(d);
            e.setHideCloseButton(false);
            e.render()
        } else {
            this._wizard.transferStateTo("final")
        }
    },
    _disableNext: function (a) {
        var b = actuate.common.web.$(".btn-next");
        if (a) {
            b.addClass("disabled");
            b.removeClass("btn-success");
            b.unbind("click")
        } else {
            b.removeClass("disabled");
            b.addClass("btn-success");
            b.unbind("click");
            b.on("click", actuate.Method.bind(this._next, this))
        }
    },
    _handleRootFileError: function () {
        var a = localizedProfileMsg["ftypewizard_resourcePage_errorTitle"];
        var b = localizedProfileMsg["ftypewizard_resourcePage_invalidFormatStr"];
        var c = localizedProfileMsg["ftypewizard_resourcePage_chooseDifferentFileStr"];
        var d = {
            id: this.pageID,
            msg: b,
            type: "error",
            dialogConfig: {
                title: a, okButton: {
                    label: c, handler: actuate.Method.bind(function () {
                        this._chooseDifferentReport()
                    }, this)
                }, cancelButton: {label: "Cancel"}
            }
        };
        var e = new actuate.common.web.widget.dialog.ConfirmDialog(d);
        e.setHideCloseButton(true);
        e.setHideCancelButton(true);
        e.render()
    },
    _chooseDifferentReport: function () {
        var a = actuate.Method.bind(function (a) {
            this._wizard.transferStateTo("upload")
        }, this);
        var b = function () {
        };
        var c = this._uploadBaseFolder + this._report;
        this._wizard.deleteFile(c, a, b)
    },
    render: function () {
        var a = this._uploadBaseFolder + this._report;
        var b = {
            file: a,
            iportalBaseURL: this._iportalBaseURL,
            helpDocBase: this._helpDocBase,
            helper: this._wizard.getHelper(),
            complexTypeList: ["rptdesign", "rptdocument", "rptlibrary"],
            fileUploadServletPath: this._wizard.getFileUploadServletPath()
        };
        this._manager = new actuate.common.web.widget.ui.wizard.FileResourceManager(b);
        this._manager.register(this._manager.ON_SYSTEM_RESOURCE_MISSING, actuate.Method.bind2(this._disableNext, this, true));
        this._manager.register(this._manager.ON_SYSTEM_RESOURCE_READY, actuate.Method.bind2(this._disableNext, this, false));
        this._manager.register(this._manager.ON_ROOT_FILE_ERROR, actuate.Method.bind(this._handleRootFileError, this));
        var c = actuate.common.web.Method.bind(function () {
            if (this._manager.isResourcesComplete()) {
                this._wizard.transferStateTo("final")
            } else {
                this._wizard._ping("resource");
                this._element = actuate.common.web.$(this._getTemplate());
                actuate.common.web.$("#" + this._renderTo).html(this._element);
                this._addListeners();
                actuate.common.web.$(".report-name").html(this._report);
                this._manager.render(actuate.common.web.$(".manager-container"))
            }
        }, this);
        this._manager.loadResources(a, c)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.UploadPage = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.UploadPage.prototype = {
    _listener: null,
    _renderTo: null,
    _element: null,
    _report: null,
    _wizard: null,
    pageID: "wizardUploadPage",
    initialize: function (a) {
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._wizard = a.wizard;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    setReport: function (a) {
        this._report = a;
        this._wizard.setReport(a)
    },
    getReport: function () {
        return this._report
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_uploadpage_exitUploaderStr"];
        var b = localizedProfileMsg["ftypewizard_uploadpage_uploadButtonStr"];
        var c = localizedProfileMsg["ftypewizard_uploadpage_chooseFileButtonStr"];
        var d = localizedProfileMsg["ftypewizard_uploadpage_titleStr"];
        var e = localizedProfileMsg["ftypewizard_uploadpage_topExplainStr"];
        var f = localizedProfileMsg["ftypewizard_uploadpage_bottomExplainStr1"];
        var g = localizedProfileMsg["ftypewizard_uploadpage_bottomExplainStr2"];
        var h = localizedProfileMsg["ftypewizard_uploadpage_downloadSampleReportStr"];
        var i = localizedProfileMsg["ftypewizard_uploadpage_moreExplainStr1"];
        var j = '<div id="' + this.pageID + '">' + '<div class="exit-section">' + '<a class="btn btn-default btn-exit-uploader">' + a + "</a>" + "</div>" + '<div class="container upload-frame">' + '<div class="row title-section">' + d + "</div>" + '<div class="row top-explain-section">' + e + "</div>" + '<div class="row top-detail-section">' + i + "</div>" + '<div class="row upload-section">' + '<div class="span span-content">' + '<input class="form-input path-input" type="text" placeholder="File Path" disabled >' + "</div>" + '<div class="span span-content browse-button-wrapper">' + '<a class="btn btn-default file-input-wrapper">' + c + '<input class="file-input-hidden" name="file" type="file"/>' + "</a>" + "</div>" + "</div>" + '<div class="row bottom-explain-section">' + '<div class="span span-content">' + f + '<a class="download-sample" href="#">' + h + "</a>" + g + "</div>" + "</div>" + '<div class="row upload-exe-section">' + '<a class="btn btn-success btn-upload-exe">' + b + "</a>" + "</div>" + "</div>" + "</div>";
        return j
    },
    _exit: function () {
        this._wizard.confirmExit(this.pageID)
    },
    _processReportUpload: function () {
        var a = function (a) {
            if (a.success) {
                this._wizard.transferStateTo("resource")
            } else {
                var b = localizedProfileMsg["ftypewizard_uploadpage_uploadFileError"];
                var c = a.errMsg;
                this._wizard.confirm(this.pageID, b, c, "error")
            }
        };
        var b = actuate.util.Utility.getFileExtension(this._report);
        b = b ? b.toLowerCase() : "";
        var c = localizedProfileMsg["ftypewizard_uploadpage_mustChoose"];
        if (!this._report) {
            var d = localizedProfileMsg["ftypewizard_uploadpage_noFileChosen"];
            this._wizard.confirm(this.pageID, d, c, "error")
        } else if (b != "rptdesign" && b != "rptdocument") {
            var d = localizedProfileMsg["ftypewizard_uploadpage_incorrectFileType"];
            this._wizard.confirm(this.pageID, d, c, "error")
        } else {
            this._wizard.uploadReport(actuate.common.web.$(".file-input-hidden")[0], actuate.common.web.Method.bind(a, this))
        }
    },
    _onDownloadSample: function () {
        var a = this._wizard.getHelpDocBase() + "/reports/sample1.zip";
        window.open(a)
    },
    _addListeners: function () {
        actuate.common.web.$(".btn-exit-uploader").click(actuate.Method.bind(this._exit, this));
        actuate.common.web.$(".btn-upload-exe").click(actuate.Method.bind(this._processReportUpload, this));
        actuate.common.web.$(".download-sample").click(actuate.Method.bind(this._onDownloadSample, this))
    },
    render: function () {
        this._report = null;
        this._element = actuate.common.web.$(this._getTemplate());
        actuate.common.web.$("#" + this._renderTo).html(this._element);
        this._addListeners();
        this._uploadButtonSetup()
    },
    _uploadButtonSetup: function () {
        var a = actuate.common.web.$;
        a(".file-input-wrapper").click(function () {
            a(".file-input-hidden")[0].click()
        });
        a(".file-input-hidden").on("change", actuate.common.web.Method.bind(function () {
            var a = actuate.common.web.$(".file-input-hidden").val();
            a = a.substring(a.lastIndexOf("\\") + 1, a.length);
            actuate.common.web.$(".path-input")[0].value = a;
            this.setReport(a)
        }, this))
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.UploadWizard = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.UploadWizard.prototype = {
    _state: null,
    _report: null,
    _listener: null,
    _renderTo: null,
    _helper: null,
    _uploadBaseFolder: null,
    _fileUploadServletPath: null,
    _iportalBaseURL: null,
    _hasparameters: false,
    _helpDocBase: null,
    _canPing: null,
    _pingUrl: null,
    _aCode: null,
    _productName: null,
    _buildNumber: null,
    initialize: function (a) {
        this._state = a.state;
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._helper = a.helper;
        this._uploadBaseFolder = a.uploadBaseFolder;
        this._fileUploadServletPath = a.fileUploadServletPath;
        this._iportalBaseURL = a.iportalBaseURL;
        this._helpDocBase = a.helpDocBase;
        this._canPing = a.canPing;
        this._pingUrl = a.pingUrl;
        this._aCode = a.aCode;
        this._productName = a.productName;
        this._buildNumber = a.buildNumber;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    setState: function (a) {
        this._state = a
    },
    getState: function () {
        return this._sate
    },
    setReport: function (a) {
        this._report = a
    },
    getReport: function () {
        return this._report
    },
    getHelper: function () {
        return this._helper
    },
    getFileUploadServletPath: function () {
        return this._fileUploadServletPath
    },
    getHelpDocBase: function () {
        return this._helpDocBase
    },
    register: function (a, b) {
        this._listener.addListener(a, b)
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    confirm: function (a, b, c, d) {
        var e = {
            id: a,
            msg: c,
            type: d,
            dialogConfig: {title: b, okButton: {label: "OK"}, cancelButton: {label: "Cancel"}},
            contentMaxWidth: 550
        };
        var f = new actuate.common.web.widget.dialog.ConfirmDialog(e);
        f.setHideCloseButton(false);
        f.setHideCancelButton(true);
        f.render()
    },
    transferStateTo: function (a) {
        var b = actuate.common.web.Method.bind(function (b) {
            var c = this._handleAuthentication(b);
            if (c) {
                this.setState(a);
                this.launch()
            }
        }, this);
        if (a == "upload") {
            this._report = null
        }
        var c = {state: a, report: this._report};
        this._sendRequest("ftypewizard", "update", c, b)
    },
    enable: function (a) {
        var b = actuate.common.web.Method.bind(function (b) {
            var c = this._handleAuthentication(b);
            if (c) {
                a()
            }
        }, this);
        var c = {disabled: false};
        this._sendRequest("ftypewizard", "update", c, b)
    },
    uploadReport: function (a, b) {
        var c = this;
        var d = function (a) {
            var d = c._handleAuthentication(a);
            if (d) {
                b(a)
            }
        };
        this.uploadFile(a.files, d)
    },
    uploadFile: function (a, b) {
        for (var c = 0; c < a.length; c++) {
            var d = actuate.util.Utility.getFileExtension(a[c].name).toLowerCase();
            if (d != "rptdesign" && d != "rptdocument") return;
            var e = new XMLHttpRequest;
            e.onload = function () {
                if (e.readyState == 4 && e.status === 200) b(actuate.common.web.$.parseJSON(e.responseText))
            };
            e.open("post", this._fileUploadServletPath);
            var f = new FormData;
            this.prepareFormData(f);
            f.append("targetFile", a[c].name);
            f.append("workingFolder", this._uploadBaseFolder);
            f.append("file", a[c]);
            e.send(f)
        }
    },
    deleteFile: function (a, b, c) {
        var d = actuate.Method.bind(function (a) {
            var c = this._handleAuthentication(a);
            if (c) {
                b(a)
            }
        }, this);
        var e = {name: a};
        this._sendRequest("/servlet/AsyncFileDelete", "delete", e, d, c)
    },
    checkReportResources: function (a, b) {
        var c = this;
        var d = function (a) {
            var d = c._handleAuthentication(a);
            if (d) {
                b(a)
            }
        };
        var e = {report: a};
        this._sendRequest("checkreportresources", "GetData", e, d)
    },
    prepareFormData: function (a) {
        a.append("__vp", "Default Volume");
        a.append("volume", "Default Volume");
        a.append("showBanner", "false");
        a.append("locale", "en_US");
        a.append("hiddenReplacementPolicy", "Create");
        a.append("copyDescription", "false");
        a.append("migrateDependencies", "false");
        a.append("copyAutoArchiveRules", "false");
        a.append("permission", "folder");
        a.append("ReplacementPolicy", "Create");
        a.append("permissionButton", "folder")
    },
    _setupTooltipAutoClear: function () {
        actuate.common.web.$("#myFilesBody").on("click", function (a) {
            if (a.target.className.indexOf("ftype-tooltip-source") < 0 && a.target.className.indexOf("ftype-popover-source") < 0) {
                actuate.common.web.$(".tooltip").remove();
                actuate.common.web.$(".ftype-popover-source").popover("hide")
            }
            var b = actuate.common.web.$(".resource-list-section");
            if (b.length > 0) {
                b.tooltip("hide");
                actuate.DDAreaTooltipShowing = false;
                b.css({border: "", opacity: 1})
            }
        })
    },
    launch: function () {
        this.enable(actuate.Method.bind(this._doLunch, this))
    },
    _doLunch: function () {
        actuate.common.web.$("#myFilesBody").addClass("ftype-wizard").addClass("ac");
        this._setupTooltipAutoClear();
        var a = this._state ? this._state : "upload";
        if (a == "upload") {
            var b = {report: this._report, renderTo: this._renderTo, wizard: this};
            this._ping(a);
            var c = new actuate.common.web.widget.ui.wizard.UploadPage(b);
            c.render()
        } else if (a == "resource") {
            var b = {
                report: this._report,
                renderTo: this._renderTo,
                uploadBaseFolder: this._uploadBaseFolder,
                iportalBaseURL: this._iportalBaseURL,
                helpDocBase: this._helpDocBase,
                wizard: this
            };
            var d = new actuate.common.web.widget.ui.wizard.ResourcePage(b);
            d.render()
        } else if (a == "final") {
            var b = {
                report: this._report,
                renderTo: this._renderTo,
                uploadBaseFolder: this._uploadBaseFolder,
                iportalBaseURL: this._iportalBaseURL,
                username: this._username,
                wizard: this
            };
            var e = new actuate.common.web.widget.ui.wizard.FinalPage(b);
            e.render()
        }
    },
    exit: function (a) {
        this._ping("exit");
        var b = {disabled: true, finished: a, state: "upload", report: ""};
        var c = function () {
            actuate.common.web.$("#myFilesBody").addClass("ac");
            window.setTimeout("top.location.reload();", 100)
        };
        this._sendRequest("ftypewizard", "update", b, c)
    },
    confirmExit: function (a) {
        var b = "When you next log in to BIRT iHub, you will return to this page.";
        var c = {
            id: a,
            msg: "",
            type: "confirmation",
            dialogConfig: {
                title: b,
                okButton: {label: "OK", handler: actuate.common.web.Method.bind2(this.exit, this)},
                cancelButton: {label: "Cancel"}
            }
        };
        var d = new actuate.common.web.widget.ui.wizard.dialog.ExitDialog(c);
        d.setHideCloseButton(false);
        d.render()
    },
    _handleAuthentication: function (a) {
        if (a["authenticated"] === false) {
            top.location.href = this._iportalBaseURL;
            return false
        }
        return true
    },
    _sendRequest: function (a, b, c, d, e, f) {
        var g = this._helper;
        g.setAjaxServletPath(a);
        var h = g.getRequestData(b, c, f);
        g.sendRequest(h, d, e)
    },
    _ping: function (activity) {
        if (eval(this._canPing)) {
            if (activity === "exit") {
                var cb = function (a) {
                    actuate.util.Utility.ping(this._pingUrl, this._aCode, this._productName, this._buildNumber, "tutorial", activity, btoa ? btoa(a.usageInfo) : a.usageInfo)
                };
                this._sendRequest("datausage", "GetData", null, actuate.common.web.Method.bind(cb, this))
            } else {
                actuate.util.Utility.ping(this._pingUrl, this._aCode, this._productName, this._buildNumber, "tutorial", activity, "")
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard.dialog");
actuate.common.web.widget.ui.wizard.dialog.ExitDialog = actuate.common.web.Class.extendClass(actuate.common.web.widget.dialog.ConfirmDialog, {
    initialize: function (a) {
        if (this.__extending) return;
        actuate.common.web.widget.ui.wizard.dialog.ExitDialog.superclass.initialize.call(this, a)
    }, _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width: 600px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 7px 50px 0;"></span>';
        var c = this._msg;
        var d = "Don't restart the tutorial&mdash;just let me log in to BIRT iHub directly from now on.";
        b += c;
        b += '<label class="checkbox doNotShow-section">' + '<input class="doNotShow" type="checkbox">' + d + "</label>";
        b += "</div>";
        return b
    }, render: function () {
        var a = null;
        var b = this;
        var c = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var d = function () {
            var c = false;
            var d = actuate.common.web.$(".doNotShow");
            if (d.length > 0) {
                c = d[0].checked
            }
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler(c)
            }
        };
        var e = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var f = {render: actuate.common.web.Method.bind(e, this)};
        var g = [{
            label: this._dialogConfig.cancelButton.label,
            handler: actuate.common.web.Method.bind(c, this),
            type: "secondary"
        }, {
            label: this._dialogConfig.okButton.label,
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        if (this._hideCancelButton) {
            g.shift()
        }
        var h = {buttons: g, modal: true};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, f, h);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard.dialog");
actuate.common.web.widget.ui.wizard.dialog.ResourceConflictDialog = actuate.common.web.Class.extendClass(actuate.common.web.widget.dialog.ConfirmDialog, {
    _resources: null, EVENT_RESOLVE_CONFIRMED: "EVENT_RESOLVE_CONFIRMED", initialize: function (a) {
        if (this.__extending) return;
        this._resources = new actuate.util.HashMap;
        this.setResources(a.resources);
        var b = {
            id: "wizardResourcePage",
            msg: "Which resource(s) should be filled by the " + actuate.util.Utility.stripPath(a.resources[0].path) + " you provided?",
            type: "confirmation",
            dialogConfig: {title: "Conflict found", okButton: {label: "OK"}, cancelButton: {label: "Cancel"}}
        };
        actuate.common.web.widget.ui.wizard.dialog.ExitDialog.superclass.initialize.call(this, b)
    }, _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width: 500px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 7px 50px 0;"></span>';
        var c = this._msg;
        b += c;
        b += '<div class="conflict-listing-section"></div>';
        b += "</div>";
        return b
    }, _renderContent: function () {
        var a = actuate.common.web.$;
        var b = "";
        this._resources.each(function (a) {
            var c = a.value;
            b += '<label class="checkbox">' + '<input id="' + this._getResourceEntryId(c.serverPath) + '" class="conflict-resource-entry" type="checkbox">' + c.path + "</label>"
        }, this);
        a(".conflict-listing-section").html(b)
    }, _getResourceEntryId: function (a) {
        return "resourceEntry" + a.split(" ").join("-").split(".").join("-").split("/").join("-")
    }, setResources: function (a) {
        if (a && a.length > 0) {
            for (var b in a) {
                var c = a[b];
                this._resources.put(this._getResourceEntryId(c.serverPath), c)
            }
        }
    }, render: function () {
        var a = null;
        var b = this;
        var c = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var d = function () {
            var c = false;
            var d = [];
            var e = actuate.common.web.$(".conflict-resource-entry");
            for (var f = 0; f < e.length; f++) {
                $entry = e[f];
                if ($entry.checked) {
                    d.push(this._resources.get($entry.id))
                }
            }
            this.fire(this.EVENT_RESOLVE_CONFIRMED, d);
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler(c)
            }
        };
        var e = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c);
            this._renderContent()
        };
        var f = {render: actuate.common.web.Method.bind(e, this)};
        var g = [{
            label: this._dialogConfig.cancelButton.label,
            handler: actuate.common.web.Method.bind(c, this),
            type: "secondary"
        }, {
            label: this._dialogConfig.okButton.label,
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        if (this._hideCancelButton) {
            g.shift()
        }
        var h = {buttons: g, modal: true};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, f, h);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Anchor = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _click: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._text = b.text;
        this._click = b.click;
        this._name = b.name;
        delete b.type;
        delete b.text;
        delete b.click;
        delete b.allowblank;
        actuate.common.web.widget.control.Anchor.superclass.initialize.call(this, b)
    },
    _initComponent: function () {
        actuate.common.web.widget.control.Anchor.superclass._initComponent.call(this);
        this.setText(this._text)
    },
    appendTo: function (a) {
        actuate.common.web.widget.control.Anchor.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(actuate.common.web.Method.bind2(this._onClick, this, this._name))
    },
    _onClick: function (a, b) {
        if (this._click) {
            this._click(a)
        }
    },
    setText: function (a) {
        this._text = a;
        this._element.text(this._text)
    },
    setValue: function (a) {
        this._element.attr("value", a);
        this.setText(a)
    },
    _getHTMLTag: function () {
        return "<a href='#'>"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Button = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _click: null,
    _buttonType: null,
    _class: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = {};
        b = actuate.common.web.$.extend({}, b, a);
        this._click = b.click;
        this._buttonType = b.buttonType;
        this._class = a.btnClass;
        delete b.click;
        actuate.common.web.widget.control.Button.superclass.initialize.call(this, b)
    },
    _getHTMLTag: function () {
        var a = "";
        var b = "";
        if (this._buttonType) {
            a = " btn-" + this._buttonType
        }
        if (this._class) {
            b = this._class;
            return '<button type="button" class="' + b + '">' + this.getTitle() + "</button>"
        } else {
            b = "btn " + a
        }
        return '<button type="button" class="' + b + '">' + this.getTitle() + "</button>"
    },
    appendTo: function (a) {
        actuate.common.web.widget.control.Button.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(this._click)
    },
    addListener: function (a, b) {
        if ("click" === a) {
            this._click = b
        } else {
            actuate.common.web.widget.control.Button.superclass.addListener.call(this, arguments)
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.CheckBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        b.type = "checkbox";
        var c = "actuCheckBox";
        if (b.cssClass) {
            c = "actuCheckBox " + b.cssClass
        }
        b.cssClass = c;
        actuate.common.web.widget.control.CheckBox.superclass.initialize.call(this, b)
    }, _getbooleanValue: function (a) {
        var b = true === a || "true" === a || "True" === a ? true : false;
        return b
    }, getValue: function () {
        var a = actuate.common.web.$(this._element).prop("checked");
        a = a ? true : false;
        return a
    }, setValue: function (a) {
        var b = this._getbooleanValue(a);
        actuate.common.web.$(this._element).prop("checked", b)
    }, onSelect: function (a) {
        this._callBack = a
    }, appendTo: function (a) {
        this._curSettings.appendTo = a;
        if (this._curSettings.appendTo) {
            if (this._lblElement) {
                this._lblElement.appendTo(this._curSettings.appendTo)
            }
            this._element.appendTo(this._curSettings.appendTo);
            if (this.getValue()) {
                this._imgCheckBox = actuate.common.web.$("<i name=imgcheckbox_" + this._curSettings.name + ' class="actuImgCheckBoxChecked"></i>')
            } else {
                this._imgCheckBox = actuate.common.web.$("<i name=imgcheckbox_" + this._curSettings.name + ' class="actuImgCheckBoxUnChecked"></i>')
            }
            this._imgCheckBox.click(actuate.common.web.Method.bind(this.onClick, this));
            this._imgCheckBox.appendTo(this._curSettings.appendTo)
        }
    }, onClick: function () {
        if (this._imgCheckBox.hasClass("actuImgCheckBoxUnChecked")) {
            this._imgCheckBox.removeClass("actuImgCheckBoxUnChecked");
            this._imgCheckBox.addClass("actuImgCheckBoxChecked");
            this.setValue(true)
        } else {
            this._imgCheckBox.removeClass("actuImgCheckBoxChecked");
            this._imgCheckBox.addClass("actuImgCheckBoxUnChecked");
            this.setValue(false)
        }
        if (this._callBack) {
            this._callBack(this._curSettings.name)
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.ComboBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _id: null,
    initialize: function (a, b, c) {
        if (this.__extending) return;
        var d = new actuate.common.web.widget.control.ListBox(a);
        d.addToList(b);
        if (c) {
            d.appendTo(c)
        }
        this._id = a.id;
        if (this._id) {
            actuate.common.web.$("#" + this._id).combobox()
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.DatePicker = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        actuate.common.web.widget.control.DatePicker.superclass.initialize.call(this, b)
    }, _initComponent: function () {
        actuate.common.web.widget.control.DatePicker.superclass._initComponent.call(this);
        this.addClass("actuTextField")
    }, appendTo: function (a) {
        actuate.common.web.widget.control.DatePicker.superclass.appendTo.call(this, a);
        var b = this.getID();
        actuate.common.web.$("#" + b).datepicker
        ()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.DropdownButton = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Button, {
    _config: null, _menuItems: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        actuate.common.web.widget.control.DropdownButton.superclass.initialize.call(this, a)
    }, _getCogHeaderTemplate: function () {
        var a = this.getID();
        var b = '<div id="' + a + '" class="ac-filebar-actuate-menu-inner" data-toggle="ac_dropdown">' + '<i class="icon-ygg-cog"></i>' + '<i class="icon-ygg-caret-down ac-filebar-actuate-menu-icon-caret"></i>' + "</div>" + this._addDropDownList();
        return b
    }, _getNormalDropdownTemplate: function () {
        var a = this.getID();
        var b = this._config.customClass ? " " + this._config.customClass : "";
        var c = this._config.display ? this._config.display : this.getTitle();
        var d = '<span><div class="btn-group">' + '<button id="' + a + '" class="btn ' + b + '" data-toggle="ac_dropdown">' + c + '<span class="icon-ygg-caret-down ac-filebar-actuate-menu-icon-caret"></span>' + "</button>" + this._addDropDownList() + "</div></span>";
        return d
    }, _createElement: function () {
        this._curSettings.id = this.getID();
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a);
        var b = this._curSettings.id;
        delete this._curSettings.id;
        this._element.attr(this._curSettings);
        this._curSettings.id = b
    }, getID: function () {
        if (this._curSettings.id) {
            return this._curSettings.id
        }
        return this.getUniqueID()
    }, _getHTMLTag: function (a) {
        var b = "";
        var c = a ? a.type : "none";
        var d = this.getID();
        switch (c) {
            case"none":
                var e = this.getTitle();
                this._templateType = !e ? "cog" : "normal";
                if (this._templateType === "cog") {
                    b += this._getCogHeaderTemplate()
                } else {
                    b += this._getNormalDropdownTemplate()
                }
                break;
            default:
                var f = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
                b = this._anchorHtml(c, f, a)
        }
        return b
    }, _anchorHtml: function (a, b, c) {
        var d = " data-name='" + a + "'";
        var e = "";
        if (c.cls) {
            e = " class='" + c.cls + "'"
        }
        var f = '<a title ="' + c.title + "\" href='#'" + d + e + ' id="' + b + '">';
        if (a != "back") {
            if (c.title) {
                f += " " + c.title
            }
        }
        f += "</a>";
        this._addItemHandler(b, c);
        return f
    }, _attachClickHandler: function () {
        var a = this;
        for (var b in this._menuItems) {
            actuate.common.web.$("#" + b).click(function () {
                a._menuItems[this.id].listener.onItemClick(a)
            })
        }
    }, _addItemHandler: function (a, b) {
        if (!this._menuItems) {
            this._menuItems = {}
        }
        this._menuItems[a] = b
    }, appendTo: function (a) {
        actuate.common.web.widget.control.DropdownButton.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(this._click);
        this._attachClickHandler()
    }, updateMenuItem: function (a) {
        var b = this._menuItems;
        if (b) {
            for (var c in b) {
                var d = b[c];
                if (!d.data || !d.data.name) continue;
                if (d.data.name == a.data.name) {
                    var e = c;
                    var f = actuate.common.web.$("#" + e);
                    f.text(a.title);
                    this.hideMenuItem(e, a.isHidden);
                    break
                }
            }
        }
    }, hideMenuItem: function (a, b) {
        var c = actuate.common.web.$("#" + a);
        var d = c.closest("li");
        if (b) {
            d.removeClass("show").addClass("hide")
        } else {
            d.removeClass("hide")
        }
    }, _addDropDownList: function () {
        var a = this.getID();
        var b = "";
        var c = "wrench" + a;
        if (this._config.items && this._config.items.items) {
            var d = this._config.items.items;
            var e = "dropdown-menu";
            if (this._config.listPosition) {
                if (this._config.listPosition === "left") {
                    e += " pull-right"
                }
            }
            b += '<ul id="' + c + '" class="' + e + '" role="menu" aria-labelledby="' + a + '">';
            for (var f = 0; f < d.length; f++) {
                var g = d[f];
                var h = "submenu" + f + "_" + a;
                var i = "";
                if (g.isHidden) {
                    i = ' class="hide"'
                }
                b += '<li id="' + h + '"' + i + ">";
                b += this._getHTMLTag(g);
                b += "</li>"
            }
            b += "</ul>"
        }
        return b
    }, _createWrenchOptions: function (a, b, c) {
        var d = '<div class="ac_dropdown">';
        var e = {icon: this._iconHtml(a)};
        d += this._wrenchIconHtml(a, b, c, null, null, e);
        d += this._addDropDownList(c);
        d += "</div>";
        return d
    }, _createNameValueAttr: function (a, b) {
        var c = " " + a + "='" + b + "'";
        return c
    }, _wrenchIconHtml: function (a, b, c, d, e, f) {
        var g = this._createNameValueAttr("data-name", b);
        var h = this._createNameValueAttr("role", "button");
        var i = this._createNameValueAttr("data-toggle", "ac_dropdown");
        var j = "";
        if (d) {
            j = " " + d
        }
        j = this._createNameValueAttr("class", "dropdown-toggle wrench td-none" + j);
        var k = "<a " + i + h + g + j + ' id="' + c + '">';
        for (var l in f) {
            k += f[l]
        }
        if (e) {
            k += " " + e
        }
        k += "</a>";
        return k
    }, _iconHtml: function (a) {
        if (!a) return "";
        var b = '<i class="' + a + '"></i>';
        return b
    }, getConfig: function () {
        return this._config
    }, hideDropdownCaret: function (a) {
        var b = this.getID();
        var c = actuate.common.web.$("#" + b);
        var d = "icon-ygg-caret-down";
        var e = c.find("span");
        if (this._templateType === "cog") {
            e = actuate.common.web.$(c.find("i")[1])
        }
        e.removeClass(d);
        if (!a) {
            e.addClass(d)
        }
    }, changeCustomClass: function (a) {
        var b = this.getID();
        if (this._config.customClass) {
            actuate.common.web.$("#" + b).removeClass(this._config.customClass).addClass(a)
        } else {
            actuate.common.web.$("#" + b).addClass(a)
        }
        this._config.customClass = a
    }, getMenuItems: function () {
        return this._menuItems
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.File = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        b.type = "file";
        b.cssClass = "actuFile";
        actuate.common.web.widget.control.File.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.GridUtil = {
    initialize: function () {
    }, generateItem: function (a, b, c, d, e, f, g, h, i, j) {
        var k = j;
        if (!j) {
            var l = {onItemClick: f};
            k = new actuate.common.web.widget.control.GridItemListener(l)
        }
        var m = k.isClickableItem();
        var n = {
            type: a,
            title: b,
            state: e,
            data: {name: c, label: d},
            listener: k,
            cls: g,
            template: h,
            isHidden: i,
            isClickable: m
        };
        return n
    }, getHeaderLabel: function (a) {
        var b = "";
        if (a && a.data) {
            b = a.data.label
        }
        return b
    }
};
actuate.common.web.widget.control.GridUtil.initialize();
actuate.common.web.widget.control.GridItemListener = actuate.common.web.Class.create();
actuate.common.web.widget.control.GridItemListener.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        if (a && a.onItemClick) {
            this._onItemClick = a.onItemClick
        }
    }, isClickableItem: function () {
        if (this._onItemClick) return true;
        return false
    }, onItemClick: function (a, b) {
        if (this._onItemClick) {
            return this._onItemClick.apply(this, arguments)
        }
    }, getIconLabel: function (a, b) {
        return null
    }, toggleIcon: function (a, b, c) {
        if (!b) return;
        var d = c.hasClass(b.active) ? b.deactive : b.active;
        switch (a) {
            case"flag":
            case"star":
            case"startstop":
                c.removeClass(b.deactive + " " + b.active);
                c.addClass(d);
                break;
            default:
                break
        }
        return d
    }
};
actuate.common.web.widget.control.GridItem = actuate.common.web.Class.create();
actuate.common.web.widget.control.GridItem.prototype = {
    _icons: {
        back: {"default": "icon-ygg-back back-icon"},
        flag: {"default": "icon-ygg-flag", active: "icon-ygg-flag", deactive: ""},
        next: {"default": "icon-ygg-chevron-right icon-large icon-no-underline"},
        prev: {"default": "icon-ygg-chevron-left icon-large icon-no-underline"},
        refresh: {"default": "icon-ygg-refresh"},
        search: {"default": "icon-ygg-search"},
        star: {
            "default": "pointer icon-ygg-star",
            active: "pointer icon-ygg-star",
            deactive: "pointer icon-ygg-star-empty"
        },
        startstop: {},
        wrench: {"default": "icon-ygg-caret-down icon-large pointer"},
        file: {"default": "icon-ygg-file-alt"},
        folder: {"default": "icon-ygg-folder-close"},
        volume: {"default": "icon-ygg-volume-add"},
        dot: {"default": "icon-ygg-dot icon-large"},
        check: {"default": "icon-ygg-menu-check icon-large"},
        alert: {"default": "icon-ygg-alert-triangle icon-large"},
        error: {"default": "icon-ygg-alert-triangle icon-large"}
    }, _config: null, _id: null, _handler: null, initialize: function (a) {
        this._config = a;
        this._createElement()
    }, getIconClass: function (a, b) {
        var c = this._icons[a];
        if (!c) return "";
        var d = b === "active" ? "active" : "deactive";
        var e = null;
        switch (a) {
            case"star":
                e = c[d];
                break
        }
        if (!e) e = c["default"];
        return e
    }, appendTo: function (a) {
        if (this._isHidden() === true) return;
        this._element.appendTo(a);
        this._attachClickHandler()
    }, _createElement: function () {
        if (this._isHidden() === true) return;
        var a = this._getHTMLTag(this._config);
        this._element = new actuate.common.web.$(a);
        this._click = actuate.common.web.Method.bind2(this._iconHandler, this, actuate.common.web.Method.bind(this._config.listener.onItemClick, this._config.listener))
    }, _isHidden: function () {
        return this._config.isHidden
    }, _iconHandler: function (a, b) {
        var c = actuate.common.web.$(actuate.common.web.$(b.currentTarget)[0]);
        var d = null;
        var e = null;
        var f = c.attr("data-name");
        var g = c.attr("id");
        if (typeof g === "string" && g.indexOf("selectItemsmask") > 0) {
            var h = c.attr("data-value");
            if (h === "unchecked") {
                h = "checked"
            } else {
                h = "unchecked"
            }
            c.attr("data-value", h)
        }
        if (f === "checkbox") {
            e = actuate.common.web.$(".checkbox-in-btn")
        } else {
            d = c.find("i")
        }
        var i = this._icons[f];
        var j = this._updateIconState(f, i, d, c);
        if (a) {
            var k = {};
            var l = c.attr("id");
            var m = f === "clear" && l.indexOf("searchClear") >= 0 ? true : false;
            if (f === "search" || m) {
                if (m) {
                    var n = l.lastIndexOf("searchClear");
                    if (n !== l.length - 1) {
                        l = l.substr(0, n)
                    }
                }
                var o = l + "searchTxt";
                var p = actuate.common.web.$("#" + o);
                if (m) {
                    p.val("")
                } else {
                    var q = p.val();
                    k.data = q
                }
            } else if (f === "checkbox") {
                var r = c.prop("checked");
                if (r) {
                    c.prop("checked", true)
                } else {
                    c.prop("checked", false)
                }
                e.prop("checked", false);
                j = r ? "checked" : "unchecked";
                k.data = j
            } else if (f === "star") {
                j = d.hasClass(i.active) ? "active" : "deactive";
                k.data = j
            } else if (f == "startstop") {
                var s = this._config.items;
                if (s) {
                    for (var t = 0; t < s.length; t++) {
                        var u = s[t];
                        if (u.type == "startstop") {
                            k.menuState = u.state;
                            break
                        }
                    }
                }
            }
            k.elementId = l;
            k.state = j;
            a(f, b, k)
        }
    }, _updateIconState: function (a, b, c, d) {
        var e = this._config.listener.toggleIcon(a, b, c);
        var f = this._iconHtml(e);
        var g = "active";
        switch (a) {
            case"startstop":
                g = e === b.active ? "active" : "deactive";
                var h = this._config.listener.getIconLabel(a, g);
                if (h) {
                    d[0].innerHTML = h
                }
                break;
            default:
                break
        }
        return g
    }, _getHTMLTag: function (a) {
        var b = a;
        var c = "";
        var d = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var e = true;
        var f = b.template ? b.template : this._getDefaultTemplate(a);
        switch (b.type) {
            case"add":
            case"back":
            case"cancel":
            case"checkbox":
            case"details":
            case"edit":
            case"flag":
            case"next":
            case"prev":
            case"refresh":
            case"save":
            case"search":
            case"selectItems":
            case"star":
            case"startstop":
            case"trash":
            case"wrench":
            case"file":
            case"folder":
            case"volume":
            case"onlineoffline":
            case"setaccess":
            case"dropDownButton":
            case"dot":
            case"check":
            case"alert":
            case"error":
            case"button":
                c = this._generateClickableHTML(d, b.type, b.state, b.cls, b.title, b.data.label);
                break;
            case"pageinfo":
                var g = b.template;
                c = this._pageInfoHtml(b.type, g, b.cls, b.title);
                break;
            default:
                if (b.isClickable) {
                    c = this._generateClickableHTML(d, b.type, b.state, b.cls, b.title)
                } else {
                    e = false;
                    c = this._getTemplate(f, b.data.name, b.data.label, b.title)
                }
                break
        }
        if (e) {
            this._id = d
        }
        return c
    }, _getDefaultHTMLTemplate: function (a, b) {
        var c = this._getTemplate(a, b.data.name, b.data.label, b.title);
        if (b.isClickable) {
            c = this._generateClickableHTML(iconId, b.type, b.state, b.cls, b.title)
        }
        return c
    }, _getDefaultTemplate: function (a) {
        var b = "";
        if (a.cls) {
            b = a.cls
        }
        var c = '<p class="acgridtext ' + b + '"';
        if (b.indexOf("cliptext") !== -1) {
            c += ' title="' + "{value}" + '"'
        }
        c += ' data-name="' + "{data.name}" + '" data-label="' + "{data.label}" + '">' + "{value}" + "</p>";
        return c
    }, _getTemplate: function (a, b, c, d) {
        var e = a.replace(/{data.name}/g, actuate.common.web.util.Utility.escapeHtml(b));
        e = e.replace(/{data.label}/g, actuate.common.web.util.Utility.escapeHtml(c));
        e = e.replace(/{value}/g, actuate.common.web.util.Utility.escapeHtml(d));
        return e
    }, _generateClickableHTML: function (a, b, c, d, e, f) {
        var g = this.getIconClass(b, c);
        var h = this._iconHtml(g, e);
        var i = "";
        switch (b) {
            case"save":
            case"cancel":
            case"button":
            case"refresh":
            case"add":
                i = this._createButtonHtml(b, a, d, e, c, f);
                break;
            case"checkbox":
                i = this._checkboxHtml(b, a, d, e, c);
                break;
            case"search":
                i = this._searchHtml(g, b, a, d, e);
                break;
            case"selectItems":
                i = this._selectItemsHtml(b, a, d, e, c);
                break;
            case"wrench":
                i = this._createWrenchOptions(g, b, a, d, e);
                break;
            case"dropDownButton":
                i = this._createdropDownButtonOptions(g, b, a, d, e, f);
                break;
            case"alert":
            case"error":
                i = this._createAlertErrorHtml(b, a, d, e, {icon: h});
                break;
            case"check":
            case"dot":
                i = this._createDotCheckHtml(b, a, d, e, {icon: h});
                break;
            default:
                i = this._anchorHtml(b, a, d, e, {icon: h});
                break
        }
        return i
    }, _pageInfoHtml: function (a, b, c, d) {
        var e = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var f = "<li>";
        var g = this.getIconClass("prev", "active");
        var h = this._iconHtml(g);
        f += this._anchorHtml("prev", e + "prev", null, null, {icon: h});
        var i = "pageinfo-" + b;
        f += "</li><li id='" + i + "' class='pageinfo-text'>";
        f += "</li><li>";
        g = this.getIconClass("next", "active");
        h = this._iconHtml(g);
        f += this._anchorHtml("next", e + "next", null, null, {icon: h});
        f += "</li>";
        return f
    }, _checkboxHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        this._addHandlerId(b);
        var g = null;
        if (e === "checked") {
            g = "<input id=" + b + ' type="checkbox" ' + e + ' class="table-select-checkbox" ' + f + ">&nbsp;</input>"
        } else {
            g = "<input id=" + b + ' type="checkbox" ' + e + ' class="table-select-checkbox" ' + f + ">&nbsp;</input>"
        }
        return g
    }, _addDropDownItemsToList: function () {
        var a = this._config.items;
        var b = '<ul class="dropdown-menu">';
        if (a && a.length) {
            for (var c = 0; c < a.length; c++) {
                var d = a[c].name;
                var e = a[c].title;
                var f = a[c].cls;
                var g = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
                var h = "";
                if (f) {
                    h += "<li class=" + f + ">"
                } else {
                    h += "<li>"
                }
                h += '<a id="' + g + '" data-name="' + d + '" href="#">' + e + "</a></li>";
                this._addHandlerId(g);
                b += h
            }
        }
        b += "</ul>";
        return b
    }, _createdropDownButtonOptions: function (a, b, c, d, e, f) {
        if (!f) {
            f = ""
        }
        var g = "<div title='" + f + '\' class="btn-group">';
        if (this._config.listener.addAdditionalCssToElement) {
            var h = this._config.listener.addAdditionalCssToElement(this._config.data.name, d);
            if (h) {
                g = "<div title='" + f + "' class=\"btn-group " + h + ' ">'
            }
        }
        if (!d) {
            d = ""
        }
        g += '<button type="button" class="btn ' + d + '" data-toggle="ac_dropdown">' + e + '&nbsp;&nbsp; &nbsp;<span class="caret"></span></button>';
        g += this._addDropDownItemsToList();
        g += "</div>";
        return g
    }, _createButtonHtml: function (a, b, c, d, e, f) {
        var g = this._createNameValueAttr("data-name", a);
        var h = "";
        var i = c;
        if (!c) {
            c = ""
        }
        if (!f) {
            f = ""
        }
        if (a == "add") {
            c = "btn-inner-green";
            h = "<i class='icon-ygg-add icon-large'></i>"
        } else if (a == "refresh") {
            c = "btn-inner-green";
            h = "<i class='icon-ygg-refresh icon-large'></i>"
        }
        var j = '<button title="' + f + '" type="button" ' + g + '  id="' + b + "\" class='btn " + c + "'>" + h + d + "</button>";
        if (this._config.listener.wrapHtmlTemplate) {
            j = this._config.listener.wrapHtmlTemplate(a, i, j)
        }
        this._addHandlerId(b);
        return j
    }, updateMenuItem: function (a) {
        var b = this._config.items;
        if (b) {
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                if (!d.data || !d.data.name) continue;
                if (d.data.name == a.data.name) {
                    var e = "submenu" + c + "_" + this._id;
                    var f = actuate.common.web.$("#" + e);
                    var g = f.find("a")[0];
                    g.innerHTML = a.title;
                    if (a.isHidden) {
                        f.removeClass("show").addClass("hide")
                    } else {
                        f.removeClass("hide")
                    }
                    break
                }
            }
        }
    }, _createWrenchOptions: function (a, b, c, d, e) {
        var f = c + "wrench";
        var g = '<div class="dropdown">';
        var h = {icon: this._iconHtml(a)};
        g += this._wrenchIconHtml(a, b, c, d, e, h);
        var i = this._config.items;
        if (i) {
            g += '<ul id="' + f + '" class="dropdown-menu" role="menu" aria-labelledby="' + c + '">';
            for (var j = 0; j < i.length; j++) {
                var k = i[j];
                var l = "submenu" + j + "_" + c;
                var m = "";
                if (k.isHidden) {
                    m = ' class="hide"'
                }
                g += '<li id="' + l + '"' + m + ">";
                g += this._getHTMLTag(k);
                g += "</li>"
            }
            g += "</ul>"
        }
        g += "</div>";
        return g
    }, _createNameValueAttr: function (a, b) {
        var c = " " + a + "='" + b + "'";
        return c
    }, _wrenchIconHtml: function (a, b, c, d, e, f) {
        var g = this._createNameValueAttr("data-name", b);
        var h = this._createNameValueAttr("role", "button");
        var i = this._createNameValueAttr("data-toggle", "ac_dropdown");
        var j = "";
        if (d) {
            j = " " + d
        }
        j = this._createNameValueAttr("class", "dropdown-toggle wrench td-none" + j);
        var k = "<a " + i + h + g + j + ' id="' + c + '">';
        for (var l in f) {
            k += f[l]
        }
        if (e) {
            k += " " + e
        }
        k += "</a>";
        return k
    }, _attachClickHandler: function () {
        if (!this._handler) return;
        for (var a = 0; a < this._handler.length; a++) {
            actuate.common.web.$("#" + this._handler[a]).click(this._click)
        }
    }, _addHandlerId: function (a) {
        if (!this._handler) {
            this._handler = []
        }
        this._handler.push(a)
    }, _anchorHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        var g = "";
        if (c) {
            g = " class='" + c + "'"
        }
        var h = "<a href='#'" + f + g + ' id="' + b + '">';
        for (var i in e) {
            h += e[i]
        }
        if (a != "back") {
            if (d) {
                h += " " + d
            }
        }
        h += "</a>";
        this._addHandlerId(b);
        return h
    }, _createAlertErrorHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        var g = "";
        if (c) {
            g = " class='" + c + "'"
        }
        var h = "<div style=\"text-align:center\"><a href='#'" + f + g + ' id="' + b + '">';
        for (var i in e) {
            h += e[i]
        }
        h += "</a></div>";
        this._addHandlerId(b);
        return h
    }, _createDotCheckHtml: function (a, b, c, d, e) {
        var f = " data-name='" + a + "'";
        var g = "";
        if (c) {
            g = " class='" + c + "'"
        }
        var h = "<div " + g + ' style="text-align:center">';
        for (var i in e) {
            h += e[i]
        }
        if (a != "back") {
            if (d) {
                h += " " + d
            }
        }
        h += "</div>";
        this._addHandlerId(b);
        return h
    }, _iconHtml: function (a, b) {
        if (!a) return "";
        var c = null;
        if (b) {
            c = '<i class="' + a + '" title="' + b + '"></i>'
        } else {
            c = '<i class="' + a + '"></i>'
        }
        return c
    }, _selectItemsHtml: function (a, b, c, d, e) {
        var f = "<div class='btn-group'>";
        f += "<button class='btn' data-toggle='ac_dropdown'>";
        var g = " data-name='" + a + "'";
        var h = b + "selectItems";
        f += "<span style='width:13px;height:13px'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>" + "<span class='caret'></span>";
        f += "</button>";
        f += this._addDropDownSelectToList(b, h);
        f += "<input data-value='unchecked' data-name='" + a + "' id='" + h + "mask' class='checkbox-in-btn selectItemsHtml' type='checkbox'" + e + " /> ";
        this._addHandlerId(h + "mask");
        return f
    }, _addDropDownSelectToList: function (a, b) {
        var c = '<ul class="dropdown-menu">';
        var d = "selectItems";
        var e = "Select All";
        var f = "Select None";
        if (this._config.data.label) {
            e = this._config.data.label.selectAll;
            f = this._config.data.label.selectNone
        }
        var g = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var h = "grdItem-" + actuate.common.web.util.Utility.createUniqueControlID();
        var i = "";
        i = "<li><a data-value='checked' id=\"" + g + '" data-name="' + d + '" >' + e + "</a></li>";
        this._addHandlerId(g);
        c += i;
        var j = "<li><a data-value='unchecked' id=\"" + h + '" data-name="' + d + '">' + f + "</a></li>";
        this._addHandlerId(h);
        c += j;
        c += "</ul></div>";
        this._click = actuate.common.web.Method.bind2(this._selectItemsHandler, this, this._config.listener.onItemClick);
        this._config.listener.onItemClick = this._click;
        return c
    }, _selectItemsHandler: function (a, b, c, d) {
        var e = null;
        e = actuate.common.web.$(".checkbox-in-btn");
        var f = e.attr("id");
        if (a) {
            var g = {};
            var h = c.target.getAttribute("data-value") === "checked" ? "checked" : "unchecked";
            if (h == "checked") {
                e.prop("checked", true)
            } else {
                e.prop("checked", false)
            }
            g.data = h;
            g.id = f;
            c.data = g;
            a(b, c, g)
        }
    }, _searchHtml: function (a, b, c, d, e) {
        var f = "search";
        var g = "";
        if (g) {
            f += "-" + g
        }
        var h = c + "searchTxt";
        var i = '<i class="icon-ygg-search"></i><input type="text" placeholder="' + e + '" class="' + f + '" id="' + h + '">';
        i += '<i class="icon-ygg-close-circle search-delete-text-icon" style="display:none;"></i></input>';
        var j = {icon: this._iconHtml(a)};
        return i
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control.Grid");
actuate.common.web.widget.control.Grid.Column = actuate.common.web.Class.create();
actuate.common.web.widget.control.Grid.Column.prototype = {
    initialize: function (a) {
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = this._config.css ? " " + this._config.css : "";
        var b = this._config.template ? this._config.template : '<div class="span' + this._config.colSize + a + '">';
        var c = this._config.colHeader;
        var d = "";
        var e = "";
        if (c && c.items && c.items.data) {
            d = c.items.data.name;
            e = c.items.data.label
        }
        b = this._getTemplate(d, e, b);
        return b
    }, _getTemplate: function (a, b, c) {
        var d = c.replace(/{data.name}/g, a);
        d = d.replace(/{data.label}/g, b);
        if (a === "actionItems" || a === "checkbox" || a === "star") {
            d = d.replace(/{class.name}/g, "check-column")
        } else if (a === "wrench") {
            d = d.replace(/{class.name}/g, "caret-column")
        } else {
            var e = this._config.css ? this._config.css : "";
            d = d.replace(/{class.name}/g, e)
        }
        return d
    }, getItems: function () {
        return this._config.items
    }, getGridControl: function () {
        return this._gridControl
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, _appendItems: function () {
        var a = this._config.items;
        this._gridControl = [];
        var b = 0;
        var c = null;
        if (actuate.common.web.$.isArray(a)) {
            for (var d in a) {
                c = this._appendItem(a[d], this._element);
                this._gridControl.push(c)
            }
        } else {
            c = this._appendItem(a, this._element);
            this._gridControl.push(c)
        }
    }, _appendItem: function (a, b) {
        var c = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var d = actuate.common.web.Method.bind2(this._colHandler, this, c);
        a.listener.onItemClick = d;
        var e = new actuate.common.web.widget.control.GridItem(a);
        e.appendTo(b);
        return e
    }, _colHandler: function () {
        if (this._config.handler) {
            this._config.handler.apply(this, arguments)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control.Grid");
actuate.common.web.widget.control.Grid.Row = actuate.common.web.Class.create();
actuate.common.web.widget.control.Grid.Row.prototype = {
    _ROW_INDEX_ATTR: "row-index", _DEFAULT_COLUMN_COUNT: 12, _cols: null, initialize: function (a) {
        this._cols = [];
        this._colIdx = 0;
        this._config = a;
        this._colCount = this._DEFAULT_COLUMN_COUNT;
        if (a.colCount) this._colCount = a.colCount;
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, getData: function (a) {
        var b = this._config.row;
        var c = this._generateRecord(b);
        var d = {data: c};
        return d
    }, _generateRecord: function (a) {
        var b = null;
        var c = a.items;
        for (var d in c) {
            var e = {};
            var f = c[d].items;
            if (actuate.common.web.$.isArray(f)) {
                var g = this._generateRecord(f);
                if (g) {
                    b = actuate.common.web.$.extend({}, b, g)
                }
            } else if (f) {
                e.name = f.data.name;
                e.value = f.title;
                if (e.name) {
                    if (!b) {
                        b = {}
                    }
                    b[e.name] = e.value
                }
            }
        }
        return b
    }, _appendItems: function () {
        if (!this._config.row) {
            return
        }
        var a = this._config.row["css"];
        if (a) {
            this._element.addClass(a)
        }
        var b = 0;
        var c = 0;
        var d = this._config.row["items"];
        var e = this._config.row["template"];
        var f = this._calcColSize(d);
        var g = this._config.colHeaders;
        var h = actuate.common.web.Method.bind(this._rowHandler, this);
        for (var i in d) {
            if (b >= this._colCount) break;
            var j = d[i].items;
            if (j.isHidden == true) continue;
            var k = d[i].colSize ? d[i].colSize : f;
            var l = null;
            var m = d[i].css;
            if (g && g.items) {
                l = g.items[i]
            }
            var n = {items: j, colSize: k, css: m, handler: h, template: e, colHeader: l};
            var o = new actuate.common.web.widget.control.Grid.Column(n);
            this._appendColumn(o, c++);
            b += k
        }
    }, getColumn: function (a) {
        return this._cols[a]
    }, _appendColumn: function (a, b) {
        a.appendTo(this._element);
        this._cols[b] = a
    }, _rowHandler: function (a, b, c, d) {
        if (a) {
            var e = null;
            e = {event: d, row: this.getData()};
            a(b, e)
        }
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = this._config.rowIndex;
        var b = this._getRowIndexAttr(a);
        var c = this._config.template ? this._config.template : "<div {rowAttr} class='row-fluid'>";
        var d = this._getTemplate(null, b, c);
        return d
    }, _getTemplate: function (a, b, c) {
        c = c.replace(/{rowAttr}/g, b);
        c = c.replace(/\{id\}/g, a);
        return c
    }, _getRowIndexAttr: function (a) {
        if (a === undefined) return "";
        return " " + this._ROW_INDEX_ATTR + "='" + a + "'"
    }, _getItemsLength: function (a) {
        if (!a) return 0;
        if (a.length) return a.length;
        var b = 0;
        for (var c in a) {
            b += Number(a.hasOwnProperty(c))
        }
        return b
    }, _calcColSize: function (a) {
        var b = 1;
        var c = this._getItemsLength(a);
        if (c < this._colCount) b = Math.floor(this._colCount / c);
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.HiddenField = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = {value: ""};
        b = actuate.common.web.$.extend({}, b, a);
        b.type = "hidden";
        actuate.common.web.widget.control.HiddenField.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Label = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _text: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._text = b.text;
        delete b.type;
        delete b.text;
        delete b.allowblank;
        actuate.common.web.widget.control.Label.superclass.initialize.call(this, b)
    },
    _initComponent: function () {
        actuate.common.web.widget.control.Label.superclass._initComponent.call(this);
        this.setText(this._text)
    },
    setText: function (a) {
        this._text = a;
        this._element.text(this._text)
    },
    setValue: function (a) {
        this._element.attr("value", a);
        this.setText(a)
    },
    getText: function () {
        return this._text
    },
    updateForValue: function (a) {
        this._element.attr("for", a)
    },
    _getHTMLTag: function () {
        return "<label>"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.ListBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        actuate.common.web.widget.control.ListBox.superclass.initialize.call(this, b)
    }, setSize: function (a) {
    }, _getStyle: function () {
        var a = this._curSettings.style;
        if (a) {
            return a
        }
        return ""
    }, _getLegacyHTMLTag: function (a, b) {
        var c = '<input type="hidden">' + '<a class="btn actuListBoxDisplayButton dropdown-toggle cliptext ' + a + ' " data-toggle="ac_dropdown" style="' + b + '"></a>' + '<a class="btn btn-secondary dropdown-toggle actuListBoxDropdownButton" data-toggle="ac_dropdown">' + '<span class="caret"></span>' + "</a>";
        return c
    }, _getMinTextWidth: function () {
        return 15
    }, _createStyleWidthText: function (a) {
        if (!a) return "";
        var b = "min-width: " + a + "px;";
        var c = "max-width: " + a + "px;";
        var d = 'style="' + b + c + '"';
        return d
    }, _dropDownListMinWidth: function (a) {
        var b = this._getUXPaddingWidth() + this._getMinTextWidth();
        var c = b;
        if (a && a > c) {
            c = a
        }
        if (c < b) {
            c = b
        }
        return c
    }, _getUXPaddingWidth: function () {
        var a = 1 + 1;
        var b = 12 + 12;
        var c = 4 + 4;
        var d = 3 + 3;
        var e = a + b + c + d;
        return e
    }, _getBtnBoxMinWidth: function (a) {
        if (!a) return 0;
        var b = this._getUXPaddingWidth();
        var c = this._getMinTextWidth();
        var d = a - b;
        if (this._width && d < c) {
            d = c
        }
        return d
    }, _getDefaultListBoxTemplate: function () {
        var a = this._width;
        a = this._getBtnBoxMinWidth(a);
        var b = this._createStyleWidthText(a);
        var c = '<button class="actuListBoxDropdownButton btn border-style-profile" data-toggle="ac_dropdown">' + '<span class="actuListBoxDisplayButton dropdown-trunc-text" ' + b + "></span>" + '&nbsp;&nbsp;<span class="caret"></span>' + "</button>";
        return c
    }, _getMainContMinWidth: function () {
        var a = this._getUXPaddingWidth();
        var b = this._getMinTextWidth();
        return a + b
    }, _getHTMLTag: function () {
        this._divElement = actuate.common.web.$('<div class="btn-group actuListBoxContainer"></div>');
        var a = this._getDefaultListBoxTemplate();
        this._listBoxButton = actuate.common.web.$(a);
        this._list = actuate.common.web.$('<ul class="actuListBoxDropdownList dropdown-menu"></ul>');
        this._listBoxButton.appendTo(this._divElement);
        this._list.appendTo(this._divElement);
        var b = this._css ? this._css : "";
        var c = '<div class="' + b + '"></div>';
        var d = actuate.common.web.$(c);
        this._divElement.appendTo(d);
        return d
    }, resetList: function (a, b, c) {
        this._list.empty();
        this.addToList(a, b, c)
    }, appendTo: function (a) {
        actuate.common.web.widget.control.ListBox.superclass.appendTo.call(this, a);
        this._divElement.click(actuate.common.web.Method.bind(this._scrollToElement, this));
        if (this._listOfItems && this._listItemList) {
            for (var b in this._listOfItems) {
                var c = this._listItemList[b];
                c.click({
                    value: b,
                    name: this._displayNameList[b]
                }, actuate.common.web.Method.bind(this._onSelect, this));
                c.hover(actuate.common.web.Method.bind(this._removeDefaultHighlight, this))
            }
        }
    }, addToList: function (a, b, c) {
        var d = true;
        this._listOfItems = a;
        this._idList = {};
        this._listItemList = {};
        this._displayNameList = {};
        for (var e in a) {
            var f = a[e];
            if (typeof b == "undefined" && d == true) {
                this.setValue(e, f);
                d = false
            } else if (e == b) {
                this.setValue(e, f)
            }
            var g = "aclist-" + actuate.common.web.util.Utility.createUniqueControlID();
            this._idList[e] = g;
            var h = actuate.common.web.$("<div/>").text(f).html();
            var i = actuate.common.web.$("<li id=" + g + '><a class="trunc" title="' + h + '">' + h + "</a></li>");
            this._list.append(i);
            this._listItemList[e] = i;
            this._displayNameList[e] = f
        }
        if (c) {
            this._callBack = c;
            actuate.common.web.Method.bind(this._callBack, this)
        }
    }, _removeDefaultHighlight: function () {
        if (this._scrollTo) {
            this._scrollTo.css("background-color", "");
            this._scrollTo.find("a").css("color", "")
        }
    }, getValue: function () {
        var a = this._divElement.attr("value");
        return a
    }, setValue: function (a) {
        this._divElement.attr("value", a);
        var b = this._listOfItems[a];
        if (!b) {
            b = a
        }
        var c = this._divElement.find(".actuListBoxDisplayButton");
        c.text(b);
        this._divElement.attr("title", b)
    }, _onSelect: function (a) {
        this._divElement.attr("value", a.data.value);
        var b = this._divElement.find(".actuListBoxDisplayButton");
        b.text(a.data.name);
        this._divElement.attr("title", a.data.name);
        if (this._callBack) {
            this._callBack(this.getValue())
        }
    }, _setDefaultBtnWidth: function () {
        var a = this._divElement[0];
        var b = a.offsetWidth;
        this._width = b;
        if (!this._width && !this._isWidthInitialized) {
            var c = this._divElement.find(".actuListBoxDisplayButton");
            this._isWidthInitialized = true;
            var d = this._getBtnBoxMinWidth(b);
            c.css({"min-width": d, "max-width": d})
        }
        return b
    }, _updateDropDownWidth: function () {
        var a = this._setDefaultBtnWidth();
        var b = this._divElement.find(".actuListBoxDropdownList").closest("ul");
        b.css({"min-width": a, "max-width": a})
    }, _scrollToElement: function () {
        this._updateDropDownWidth();
        var a = ".actuListBoxContainer." + this._curSettings.name;
        actuate.common.web.$(a).toggleClass("open");
        var b = this._list;
        var c = this._idList[this.getValue()];
        if (c) {
            this._scrollTo = this._divElement.find(".actuListBoxDropdownList").find("#" + c);
            b.scrollTop(this._scrollTo.offset().top - b.offset().top + b.scrollTop());
            this._scrollTo.css("background-color", "#303030");
            this._scrollTo.find("a").css("color", "#FFFFFF")
        }
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.MultiSelectListBox = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.Control, {
    _addedItems: null, _removedItems: null, initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._title = a.title;
        if (a.filter) {
            this._filterConfig = a.filter
        }
        delete b.title;
        delete b.filter;
        var c = {filter: this._filterConfig, title: this._title};
        this._multiListLayout = new actuate.common.web.widget.control.MultiSelectListBoxLayout(c);
        this._addedItems = {};
        this._removedItems = {};
        this._leftAllItems = {};
        this._rightAllItems = {};
        this._searchFilters = new Array;
        actuate.common.web.widget.control.MultiSelectListBox.superclass.initialize.call(this, b);
        this._addSearchBox()
    }, _getHTMLTag: function () {
        return this._multiListLayout.getLayoutTemplate()
    }, appendTo: function (a) {
        actuate.common.web.widget.control.MultiSelectListBox.superclass.appendTo.call(this, a);
        this.attachEvents()
    }, _getElementById: function (a) {
        return this.find("#" + a)
    }, _addSearchBox: function () {
        var a = false;
        var b = this._multiListLayout.getLeftSearchId();
        var c = this._getElementById(b);
        var d = this._multiListLayout.getRightSearchId();
        var e = this._getElementById(d);
        if (this._filterConfig && this._filterConfig.left) {
            this.renderSearchBox(c, this._filterConfig.left.callBack, this._refreshLeftListBoxList, this._filterConfig.left.title);
            a = true
        }
        if (this._filterConfig && this._filterConfig.right) {
            this.renderSearchBox(e, this._filterConfig.right.callBack, this._refreshRightListBoxList, this._filterConfig.right.title);
            a = true
        }
        if (!a) {
            e.remove();
            e.remove()
        }
    }, _unbindEvent: function (a, b) {
        a.unbind(b)
    }, attachEvents: function () {
        var a = this._getElementById(this._multiListLayout.getRightSelectId());
        var b = this._getElementById(this._multiListLayout.getLeftSelectId());
        var c = this._getElementById(this._multiListLayout.getAddBtnId());
        this._unbindEvent(c, "click");
        c.click(actuate.common.web.Method.bind2(this.addRemoveItems, this, b, a));
        var d = this._getElementById(this._multiListLayout.getRemoveBtnId());
        this._unbindEvent(d, "click");
        d.click(actuate.common.web.Method.bind2(this.addRemoveItems, this, a, b));
        for (var e = 0; e < this._searchFilters.length; e++) {
            var f = this._searchFilters[e];
            f.attachEvents()
        }
    }, renderSearchBox: function (a, b, c, d) {
        if (b) {
            var e = {
                width: "261px",
                placeholder: d,
                searchCallBack: b,
                customCss: "pull-left",
                refreshListCallBack: actuate.common.web.Method.bind(c, this)
            };
            var f = new actuate.common.web.widget.control.SearchBox(e);
            f.appendTo(a);
            this._searchFilters.push(f)
        }
    }, _refreshLeftListBoxList: function (a) {
        var b = this._getElementById(this._multiListLayout.getLeftSelectId());
        b.empty();
        var c = null;
        var d = null;
        var e = null;
        var f = null;
        var g = this._getElementById(this._multiListLayout.getLeftSearchId());
        var h = g.find("input");
        if (h) {
            var i = null;
            for (var j in this._removedItems) {
                d = this._removedItems[j].name;
                e = this._removedItems[j].value;
                i = h.val().length;
                if (d.substring(0, i).toLowerCase() == h.val().toLowerCase()) {
                    f = actuate.common.web.util.Utility.createUniqueControlID();
                    b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
                }
            }
        }
        var k = a.items;
        for (var l = 0; l < k.length; l++) {
            c = k[l];
            d = c.name;
            e = c.value;
            if (!this._rightAllItems[d] && !this._removedItems[d]) {
                this._leftAllItems[d] = d;
                f = actuate.common.web.util.Utility.createUniqueControlID();
                b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
            }
        }
    }, _refreshRightListBoxList: function (a) {
        var b = this._getElementById(this._multiListLayout.getRightSelectId
        ());
        b.empty();
        var c = null;
        var d = null;
        var e = null;
        var f = null;
        var g = this._getElementById(this._multiListLayout.getRightSearchId());
        var h = g.find("input");
        if (h) {
            var i = null;
            for (var j in this._addedItems) {
                d = this._addedItems[j].name;
                e = this._addedItems[j].value;
                i = h.val().length;
                if (d.substring(0, i).toLowerCase() == h.val().toLowerCase()) {
                    f = actuate.common.web.util.Utility.createUniqueControlID();
                    b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
                }
            }
        }
        var k = a.items;
        for (var l = 0; l < k.length; l++) {
            c = k[l];
            d = c.name;
            e = c.value;
            if (!this._leftAllItems[d] && !this._addedItems[d]) {
                this._rightAllItems[d] = d;
                f = actuate.common.web.util.Utility.createUniqueControlID();
                b.append('<option id="' + f + '" value="' + actuate.common.web.util.Utility.escapeHtml(e) + '" title="' + actuate.common.web.util.Utility.escapeHtml(d) + '">' + actuate.common.web.util.Utility.escapeHtml(d) + "</option>")
            }
        }
    }, addRemoveItems: function (a, b) {
        var c = a.attr("name");
        var d = a.val();
        if (d) {
            for (var e = 0; e < d.length; e++) {
                var f = actuate.common.web.util.Utility.createUniqueControlID();
                var g = actuate.common.web.util.Utility.escapeHtml(d[e]);
                var h = a.find('option[value="' + d[e] + '"]');
                optionName = h.text();
                h.remove();
                var i = actuate.common.web.util.Utility.escapeHtml(optionName);
                b.prepend('<option id="' + f + '" value="' + g + '" title="' + i + '">' + i + "</option>").css("width", b.css("width"));
                var j = {name: optionName, value: d[e]};
                if (c == "left") {
                    delete this._leftAllItems[optionName];
                    this._rightAllItems[optionName] = optionName;
                    if (this._removedItems && this._removedItems[d[e]]) {
                        delete this._removedItems[d[e]]
                    } else {
                        this._addedItems[d[e]] = j
                    }
                } else {
                    delete this._rightAllItems[d[e]];
                    this._leftAllItems[d[e]] = d[e];
                    if (this._addedItems && this._addedItems[d[e]]) {
                        delete this._addedItems[d[e]]
                    } else {
                        this._removedItems[d[e]] = j
                    }
                }
            }
        }
    }, addToList: function (a, b) {
        this._defaultItems = b;
        var c = {};
        var d = null;
        if (b) {
            var e = this._getElementById(this._multiListLayout.getRightSelectId());
            for (var f = 0; f < b.length; f++) {
                d = actuate.common.web.util.Utility.createUniqueControlID();
                c[b[f].name] = b[f].name;
                if (!this._rightAllItems[b[f].name]) {
                    this._rightAllItems[b[f].name] = b[f].name
                }
                e.append('<option id="' + d + '" value="' + b[f].value + '" title="' + b[f].name + '">' + b[f].name + "</option>")
            }
        }
        if (a) {
            var g = this._getElementById(this._multiListLayout.getLeftSelectId());
            for (var h = 0; h < a.length; h++) {
                d = actuate.common.web.util.Utility.createUniqueControlID();
                var i = a[h].name;
                if (!c[i]) {
                    if (!this._leftAllItems[i]) {
                        this._leftAllItems[i] = i
                    }
                    g.append('<option id="' + d + '" value="' + actuate.common.web.util.Utility.escapeHtml(a[h].value) + '" title="' + actuate.common.web.util.Utility.escapeHtml(a[h].name) + '">' + actuate.common.web.util.Utility.escapeHtml(i) + "</option>")
                }
            }
        }
    }, getValue: function () {
        var a = {};
        a.addedItems = this._convertObjectToArray(this._addedItems);
        a.removedItems = this._convertObjectToArray(this._removedItems);
        return a
    }, _convertObjectToArray: function (a) {
        return actuate.common.web.$.map(a, function (a, b) {
            return [a.value]
        })
    }
});
actuate.common.web.widget.control.MultiSelectListBoxLayout = actuate.common.web.Class.create();
actuate.common.web.widget.control.MultiSelectListBoxLayout.prototype = {
    _PREFIX_NAMES: {
        header: "header",
        search: "search",
        listBox: "listBox",
        leftList: "left",
        rightList: "right",
        addRight: "right",
        removeLeft: "left",
        colLayout: "colLayout",
        layoutLeft: "layoutLeft",
        layoutMid: "layoutMid",
        layoutRight: "layoutRight"
    }, initialize: function (a) {
        if (this.__extending) {
            return
        }
        this._layoutConfig = a
    }, _getHeaderTitleTemplate: function (a) {
        var b = '<h4 style="font-weight:900;" align="left">' + a + "</h4>";
        return b
    }, _getBtnSelectionTemplate: function (a) {
        var b = '<button id="' + a + '{id}" class="btn btn-success assign-group-move-btn"><i class="icon-ygg-sort-' + a + ' icon-large"></i></button>';
        return b
    }, _getSelectionTemplate: function () {
        var a = this._getBtnSelectionTemplate(this._PREFIX_NAMES.addRight);
        a += "<br/>";
        a += this._getBtnSelectionTemplate(this._PREFIX_NAMES.removeLeft);
        return a
    }, _getSearchTemplate: function (a) {
        var b = '<div style="margin-top: 10px; height: 50px;" id="' + this._PREFIX_NAMES.search + a + '{id}"></div>';
        return b
    }, _getListTemplate: function (a) {
        var b = '<select multiple="multiple" id="' + this._PREFIX_NAMES.listBox + a + '{id}" name=' + a + ' style="height:266px !important;margin-top: 10px;" size="20"></select>';
        b += this._getSearchTemplate(a);
        return b
    }, _getColLayoutTemplate: function (a, b, c, d, e, f) {
        var g = '<div class="' + a + ' control-group">';
        g += '<div class="layoutColumn" id="' + b + '{id}">';
        g += '<div class="layoutLeft" id="' + this._PREFIX_NAMES.layoutLeft + '{id}">' + c + "</div>";
        g += '<div class="layoutMid assign-column assign-column-thin" id="' + this._PREFIX_NAMES.layoutMid + '{id}">' + d + "</div>";
        g += '<div class="layoutRight" id="' + this._PREFIX_NAMES.layoutRight + '{id}">' + e + "</div>";
        if (f) {
            g += '<div class="helptext">' + f + "</div>"
        }
        g += "</div>";
        g += '<div style="clear:both;"></div>';
        g += "</div>";
        return g
    }, _getTopTemplate: function (a) {
        var b = this._getHeaderTitleTemplate(this._layoutConfig.title.left);
        var c = "&nbsp;";
        var d = this._getHeaderTitleTemplate(this._layoutConfig.title.right);
        var e = this._getColLayoutTemplate("header", this._PREFIX_NAMES.header, b, c, d);
        e = e.replace(/{id}/g, a);
        return e
    }, _getMiddleTemplate: function (a) {
        var b = null;
        if (this._layoutConfig.filter && this._layoutConfig.filter.helpText) {
            b = this._layoutConfig.filter.helpText
        }
        var c = this._getListTemplate(this._PREFIX_NAMES.leftList);
        var d = this._getSelectionTemplate();
        var e = this._getListTemplate(this._PREFIX_NAMES.rightList);
        var f = this._getColLayoutTemplate("content", this._PREFIX_NAMES.listBox, c, d, e, b);
        f = f.replace(/{id}/g, a);
        return f
    }, getAddBtnId: function () {
        return this._PREFIX_NAMES.addRight + this._midId
    }, getRemoveBtnId: function () {
        return this._PREFIX_NAMES.removeLeft + this._midId
    }, getLeftSelectId: function () {
        return this._PREFIX_NAMES.listBox + this._PREFIX_NAMES.leftList + this._midId
    }, getRightSelectId: function () {
        return this._PREFIX_NAMES.listBox + this._PREFIX_NAMES.rightList + this._midId
    }, getLeftSearchId: function () {
        return this._PREFIX_NAMES.search + this._PREFIX_NAMES.leftList + this._midId
    }, getRightSearchId: function () {
        return this._PREFIX_NAMES.search + this._PREFIX_NAMES.rightList + this._midId
    }, getLayoutTemplate: function () {
        var a = "_aclist_";
        this._topId = a + actuate.common.web.util.Utility.createUniqueControlID();
        var b = this._getTopTemplate(this._topId);
        this._midId = a + actuate.common.web.util.Utility.createUniqueControlID();
        b += this._getMiddleTemplate(this._midId);
        b = '<div class="multiSelectListBoxContainer control-group">' + b + "</div>";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Password = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = {value: ""};
        b = actuate.common.web.$.extend({}, b, a);
        b.type = "password";
        actuate.common.web.widget.control.Password.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.Radio = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    _click: null,
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        b.type = "radio";
        this._click = b.click;
        actuate.common.web.widget.control.Radio.superclass.initialize.call(this, b);
        if (a && a.value) {
            this.setValue(a.value)
        }
    },
    appendTo: function (a) {
        actuate.common.web.widget.control.Radio.superclass.appendTo.call(this, a);
        actuate.common.web.$(this._element).click(this._click)
    },
    setValue: function (a) {
        if (!this._element.attr("value")) {
            actuate.common.web.widget.control.Radio.superclass.setValue.call(this, a)
        } else if (this._element.attr("value") === a) {
            this._element.attr("checked", "checked")
        } else {
            this._element.removeAttr("checked")
        }
    },
    isChecked: function () {
        return this._element.attr("checked") === "checked"
    },
    getSelectedValue: function () {
        var a = this._element.attr("name");
        var b = actuate.common.web.$("input[name=" + a + "]:radio:checked");
        return b.val()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.SearchBox = actuate.common.web.Class.create();
actuate.common.web.widget.control.SearchBox.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        var b = actuate.common.web.$.extend({}, {}, a);
        this._filterConfig = a
    }, appendTo: function (a) {
        var b = this;
        var c = {width: this._filterConfig.width, placeholder: this._filterConfig.placeholder};
        var d = "";
        if (this._filterConfig.customCss) {
            d = this._filterConfig.customCss
        }
        var e = actuate.common.web.$('<div style="margin-right:2px;" class="header-bar-search-box ' + d + '"></div>');
        var f = new actuate.common.web.widget.control.TextField(c);
        f.appendTo(e);
        this._deleteIcon = actuate.common.web.$('<i class="icon-ygg-close-circle search-delete-text-icon" style="display:none;"></i>');
        this._deleteIcon.appendTo(e);
        e.appendTo(a);
        this._textBoxElement = a.find("input");
        this._textBoxElement.css("padding-left", "1px");
        this._textBoxElement.css("padding-right", "1px");
        this.attachEvents()
    }, attachEvents: function () {
        var a;
        var b = this;
        this._unbindEvent(this._textBoxElement, "keyup");
        this._textBoxElement.keyup(actuate.common.web.Method.bind2(function (c) {
            clearTimeout(a);
            a = setTimeout(function () {
                if (c.keyCode != 0) {
                    if (c.keyCode != 13) {
                        data = b._textBoxElement.val()
                    }
                    b._deleteIcon.css("display", "block")
                } else {
                    data = b._textBoxElement.val().substring(0, b._textBoxElement.val().length - 1)
                }
                var a = actuate.common.web.Method.bind(b._filterConfig.refreshListCallBack, b);
                var d = {filter: data, refreshListCallBack: a};
                b._filterConfig.searchCallBack(d)
            }, 500)
        }, this._textBoxElement));
        this._unbindEvent(this._deleteIcon, "click");
        this._deleteIcon.click(function (a) {
            data = "";
            b._textBoxElement.val("");
            var c = actuate.common.web.Method.bind(b._filterConfig.refreshListCallBack, b);
            var d = {filter: data, refreshListCallBack: c};
            b._filterConfig.searchCallBack(d);
            b._deleteIcon.css("display", "none")
        })
    }, _unbindEvent: function (a, b) {
        a.unbind(b)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.control");
actuate.common.web.widget.control.TextField = actuate.common.web.Class.extendClass(actuate.common.web.widget.control.InputTag, {
    initialize: function (a) {
        if (this.__extending) return;
        var b = {value: ""};
        b = actuate.common.web.$.extend({}, b, a);
        b.type = "text";
        actuate.common.web.widget.control.TextField.superclass.initialize.call(this, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.AddEditDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.AddEditDialog.prototype = {
    _config: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    }, showAddEdit: function (a) {
        var b = actuate.common.web.$("#" + this._config.mainId);
        var c = actuate.common.web.$("#" + this._config.id);
        if (a) {
            b.hide();
            c.show()
        } else {
            b.show();
            c.hide()
        }
    }, showDialog: function () {
        var a = this;
        var b = function (b, c) {
            switch (b) {
                case"save":
                    if (c) {
                        a.sendDlgData(c)
                    }
                    a.invokeListener("ON_SAVE_CLICK");
                    break;
                default:
                    a.showAddEdit(false);
                    if (b === "back") {
                        a.invokeListener("ON_BACKARROW_CLICK")
                    } else if (b === "cancel") {
                        a.invokeListener("ON_CANCEL_CLICK")
                    }
                    break
            }
        };
        var c = {
            id: a._config.id,
            titleKey: a._config.titleKey,
            title: a._config.title,
            operation: a._config.operation,
            renderer: a._config.renderer,
            callback: actuate.common.web.Method.bind(b, this)
        };
        a.showAddEdit(true);
        a.showActionDlgBasic(c)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, invokeListener: function (a) {
        this._listener.invokeListener(a, a)
    }, isSupportedFeature: function (a) {
        if (!this._config.features) return true;
        if ("backarrow" === a) {
            if (this._config.features.backarrow) {
                return true
            }
        } else if ("cancel" === a) {
            if (this._config.features.cancel) {
                return true
            }
        } else if ("save" === a) {
            if (this._config.features.save) {
                return true
            }
        }
        return false
    }, showActionDlgBasic: function (a) {
        var b = null;
        var c = function (c) {
            var d = null;
            if (c === "save") {
                var e = b.getContent().validate();
                if (e === true) {
                    d = b.getContent().getData()
                } else {
                    var f = this.getMsgDialogConfig("info");
                    actuate.common.web.util.Utility.showMsgDlg(a.id, e, "info", f)
                }
            }
            if (a.callback) {
                return a.callback(c, d)
            }
        };
        var d = {};
        if (this.isSupportedFeature("backarrow")) {
            d["backarrow"] = {
                handler: actuate.common.web.Method.bind2(c, this, "back"),
                title: this.getDefaultLabel("backarrow", a.renderer)
            }
        }
        if (this.isSupportedFeature("cancel")) {
            d["cancel"] = {
                handler: actuate.common.web.Method.bind2(c, this, "cancel"),
                title: this.getDefaultLabel("cancel", a.renderer)
            }
        }
        if (this.isSupportedFeature("save")) {
            d["save"] = {
                handler: actuate.common.web.Method.bind2(c, this, "save"),
                title: this.getDefaultLabel("save", a.renderer)
            }
        }
        var e = {handlers: d};
        var f = this.getLocalizedString(a.titleKey);
        if (a.title) {
            f = a.title
        }
        b = new actuate.common.web.widget.layout.AddEdit(a.id, f, a.renderer, e);
        b.render()
    }, sendRequest: function (a) {
        var b = this;
        var c = b._config.dataProcessor;
        a["authToken"] = c.getRequestOptions().getAuthId();
        var d = c.getRequestData(b._config.operation, a);
        var e = {msg: b.getLocalizedString("Lbl.SavingChanges")};
        c.sendRequest(d, actuate.common.web.Method.bind(b._onSuccess, b), actuate.common.web.Method.bind(b._onError, b), e)
    }, sendDlgData: function (a) {
        var b = this;
        var c = this.getConfirmDialogConfig("confirmation");
        c.okButton.handler = actuate.common.web.Method.bind2(this.sendRequest, this, a);
        var d = b.getLocalizedString("Lbl.SaveChanges");
        var e = new actuate.common.web.widget.dialog.ConfirmDialog({
            id: b._config.id,
            msg: d,
            type: "confirmation",
            dialogConfig: c
        });
        e.render()
    }, _onSuccess: function () {
        this.showAddEdit(false);
        this._config.dataProcessor.refreshContent()
    }, _onError: function (a) {
        var b = this.getMsgDialogConfig("error");
        actuate.common.web.util.Utility.showMsgDlg(this._config.id, a, "error", b)
    }, getDefaultLabel: function (a, b) {
        var c = "";
        if (b && b.getLabel) {
            c = b.getLabel(a);
            if (c) return c
        }
        switch (a) {
            case"backarrow":
                c = this.getLocalizedString("Lbl.Btn.Back");
                break;
            case"cancel":
                c = this.getLocalizedString("Lbl.Btn.Cancel");
                break;
            case"save":
                c = this.getLocalizedString("Lbl.Btn.Save");
                break
        }
        return c
    }, getConfirmDialogConfig: function (a) {
        var b = this._getTitle(a);
        var c = {
            title: this.getLocalizedString(b),
            okButton: {
                label: this.getLocalizedString("Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this.okCallBack, this)
            },
            cancelButton: {label: this.getLocalizedString("Lbl.Btn.Cancel")}
        };
        return c
    }, getMsgDialogConfig: function (a) {
        var b = this._getTitle(a);
        var c = {
            title: this.getLocalizedString(b),
            okButton: {
                label: this.getLocalizedString("Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this.okCallBack, this)
            }
        };
        return c
    }, okCallBack: function () {
    }, _getTitle: function (a) {
        var b = "Dlg.Title.Information";
        if (a === "warning") {
            b = "Dlg.Title.Warning"
        } else if (a === "error") {
            b = "Dlg.Title.Error"
        } else if (a === "severe") {
            b = "Dlg.Title.Severe"
        } else if (a === "confirmation") {
            b = "Dlg.Title.Confirmation"
        }
        return b
    }, getLocalizedString: function (a) {
        return a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ConfirmDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ConfirmDialog.prototype = {
    _type: null,
    _msg: null,
    _dialogID: null,
    _containerID: null,
    _callbackOK: null,
    _hideCloseButton: true,
    _hideCancelButton: false,
    _contentMaxWidth: 500,
    _infoMap: {
        error: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        info: {icon: "icon-info-sign", cls: "alert alert-info"},
        warning: {icon: "icon-warning-sign", cls: "alert alert-block"},
        severe: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        confirmation: {icon: "icon-warning-sign", cls: "alert alert-block"}
    },
    initialize: function (a) {
        if (this.__extending) return;
        this._type = "info";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        if (a) {
            this._containerID = a.id;
            if (a.type === "warning") {
                this._type = "warning"
            } else if (a.type === "error") {
                this._type = "error"
            } else if (a.type === "severe") {
                this._type = "severe"
            }
            this._containerID = a.id;
            this._msg = a.msg;
            this._dialogConfig = a.dialogConfig;
            if (a.isMsgDlg) {
                this._isMsgDlg = true
            }
            this._title = a.dialogConfig.title;
            if (a.contentMaxWidth) {
                this._contentMaxWidth = a.contentMaxWidth
            }
        }
        this._dialogID = this._containerID + "-" + actuate.common.web.util.Utility.createUniqueControlID() + "-" + actuate.common.web.$(".act_dlg").length;
        var b = actuate.common.web.$("<div id='" + this._dialogID + "'>");
        b.addClass(this._type);
        b.appendTo(actuate.common.web.$("#" + this._containerID))
    },
    register: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewProfile.addListener(a, b)
        }
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    render: function () {
        var a = null;
        var b = this;
        var c = false;
        if (this._dialogConfig.isMsgDlg) {
            c = true
        }
        var d = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var e = function () {
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler()
            }
        };
        var f = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var g = {render: actuate.common.web.Method.bind(f, this)};
        var h = this._dialogConfig.okButton.buttonType ? this._dialogConfig.okButton.buttonType : "secondary";
        var i = this._dialogConfig.cancelButton.buttonType ? this._dialogConfig.cancelButton.buttonType : "primary";
        var j = [{
            label: this._dialogConfig.okButton.label,
            handler: actuate.common.web.Method.bind(e, this),
            type: h
        }, {label: this._dialogConfig.cancelButton.label, handler: actuate.common.web.Method.bind(d, this), type: i}];
        if (this._dialogConfig.swapButtonsPosition) {
            j = [j[1], j[0]]
        }
        if (this._hideCancelButton) {
            j.shift()
        }
        var k = {buttons: j, modal: true, titleIconType: "warning", isMsgDlg: c};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, g, k);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    },
    _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width:' + this._contentMaxWidth + 'px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 3px 50px 0;"></span>';
        var c = this._msg;
        b += c;
        b += "</div>";
        return b
    },
    _escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    },
    setHideCloseButton: function (a) {
        this._hideCloseButton = a
    },
    setHideCancelButton: function (a) {
        this._hideCancelButton = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.DataUsageDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.DataUsageDialog.prototype = {
    _data: null,
    _listener: null,
    _administrator: null,
    _iportalBaseURL: null,
    _helpDocBase: null,
    _productVesion: null,
    _productName: null,
    _oldacode: null,
    _activationUrl: null,
    _pingtestUrl: null,
    _locale: null,
    initialize: function () {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._contentView = new actuate.common.web.widget.ui.view.common.DataUsage
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._contentView.addListener(a, b)
        }
    },
    _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    setData: function (a) {
        this._contentView.setData(a)
    },
    getData: function () {
        return this._contentView.getData()
    },
    _NOOP: function () {
        return
    },
    _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    },
    render: function (a) {
        var b = null;
        var c = {modal: true, showFooter: false, hideCloseButton: false, cls: "ftype-usage"};
        var d = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.DataUsage.Title");
        this._contentView._administrator = this._administrator;
        this._contentView._iportalBaseURL = this._iportalBaseURL;
        this._contentView._helpDocBase = this._helpDocBase;
        this._contentView._productVesion = this._productVesion;
        this._contentView._productName = this._productName;
        this._contentView._oldacode = this._oldacode;
        this._contentView._activationUrl = this._activationUrl;
        this._contentView._pingtestUrl = this._pingtestUrl;
        this._contentView._locale = this._locale;
        b = new actuate.common.web.widget.dialog.Dialog(a, d, this._contentView, c);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.Dialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.Dialog.prototype = {
    _autoOpen: false,
    _containerId: null,
    _element: null,
    _contentID: null,
    _dialogID: null,
    _content: null,
    _modal: false,
    _rendered: false,
    _width: null,
    _height: null,
    _buttons: null,
    _dlgEl: null,
    _hideCloseButton: true,
    _primaryHandler: null,
    _cls: "",
    _showFooter: true,
    _infoMap: {warning: {icon: "icon-ygg-check with-divider"}},
    initialize: function (a, b, c, d) {
        this._containerId = a;
        this._title = b;
        this._content = c;
        if (d) {
            if (d["modal"]) {
                this._modal = true
            }
            this._width = d["width"] || this._width;
            this._height = d["height"] || this._height;
            this._buttons = d["buttons"];
            this._autoOpen = d["autoOpen"];
            this._isMsgDlg = d["isMsgDlg"];
            this._titleIconType = d["titleIconType"];
            this._cls = d["cls"];
            this._showFooter = d["showFooter"];
            this._hideCloseButton = d["hideCloseButton"] === false ? false : true;
            if (d.minheight) {
                this._minheight = d.minheight
            }
            if (d.minwidth) {
                this._minwidth = d.minwidth
            }
        }
        if (this._autoOpen != true) {
            this._autoOpen = false
        }
        this._dialogID = "act_dlg-" + this._containerId + "-" + actuate.common.web.$(".act_dlg").length;
        this._element = actuate.common.web.$(this._getDialogTemplate())
    },
    _getDialogHeader: function () {
        var a = actuate.common.web.$('<div class="modal-header"></div>');
        var b = '<h3 class="green-highlight-color">';
        if (this._titleIconType) {
            b += '<i class="' + this._infoMap[this._titleIconType].icon + " green-highlight-color" + '"></i>'
        }
        b += this._title + "</h3>";
        var c = actuate.common.web.$(b);
        if (!this._hideCloseButton) {
            var d = actuate.common.web.$('<a id="closeicon" class="close close-dialog">&times;</a>');
            d.click(actuate.common.web.Method.bind(this.close, this));
            d.appendTo(c)
        }
        c.appendTo(a);
        return a
    },
    _getDialogTemplate: function () {
        return '<div id="' + this._dialogID + '" class="act-dlg"/>'
    },
    _getContentTemplate: function () {
        return '<div id="' + this._getContentDivId() + '" class="act-dlg-cnt form-horizontal modal-body modal-dialog-body"/>'
    },
    _getMasterDialogTemplate: function () {
        var a = "width: ";
        var b = "height: ";
        var c = "max-height: ";
        var d = "min-height: ";
        var e = "min-width: ";
        if (this._width) {
            a += this._width + "px;"
        } else {
            a += "auto;"
        }
        if (this._height) {
            b += this._height + "px;"
        } else {
            b += "auto;"
        }
        if (this._minheight) {
            d += this._minheight + "px;"
        } else {
            d += "auto;"
        }
        if (this._minwidth) {
            e += this._minwidth + "px;"
        } else {
            e += "auto;"
        }
        var f = "";
        if (a || b || d) {
            f = ' style="' + b + " " + d + " " + a + " " + e + '"'
        }
        var g = "";
        if (this._isMsgDlg === true) {
            g = "acmsgdlg "
        }
        var h = "";
        if (this._titleIconType == "warning") {
            h = "modal-warning"
        }
        return '<div id="' + this._getMasterDialogDivId() + '" class="dlg-warn ' + g + " " + h + " modal hide fade " + this._cls + '" tabindex="-1"' + f + "/>"
    },
    _getMasterDialogDivId: function () {
        return this._dialogID + "-main"
    },
    _getDialogFooter: function () {
        var a = actuate.common.web.$('<div class="modal-footer"></div>');
        for (var b = 0; this._buttons && b < this._buttons.length; b++) {
            var c = this._buttons[b];
            var d = c.label;
            var e = c.handler;
            var f = d;
            var g = {buttonType: c.type, title: f, click: e, width: "100px"};
            if (c.type === "inverse" || c.type === "primary") {
                this._primaryHandler = e
            }
            var h = new actuate.common.web.widget.control.Button(g);
            h.appendTo(a)
        }
        return a
    },
    setContent: function (a) {
        this._content = a;
        if (this._rendered) {
            this._renderDialogContent()
        }
    },
    getContent: function () {
        return this._content
    },
    _getContentDivId: function () {
        return this._dialogID + "-cnt"
    },
    _renderDialogContent: function () {
        if (this._content) {
            var a = this._getContentDivId();
            var b = actuate.common.web.$("#" + a);
            b.html("");
            this._content.render(a, this._getMasterDialogDivId());
            this._rendered = true;
            b.bind("keypress", actuate.common.web.Method.bind2(this._onEnterKey, this, this._primaryHandler))
        }
    },
    render: function () {
        if (!this._rendered) {
            this._renderDialogDiv();
            this._renderDialogContent()
        }
        var a = actuate.common.web.$(".modal-notification");
        if (a) {
            a.remove()
        }
        var b = actuate.common.web.$(window).height();
        var c = this._dlgEl.height();
        var d = actuate.common.web.$(window).width();
        var e = this._dlgEl.width();
        var f = actuate.common.web.$(window).scrollTop();
        var g = actuate.common.web.$(window).scrollLeft();
        var h = b / 2 - c / 2;
        if (h < 0) {
            h = 0
        }
        var i = d / 2 - e / 2;
        if (i < 0) {
            i = 0
        }
        this._dlgEl.offset({top: f + 1 / 2 * h, left: g + i})
    },
    _renderDialogDiv: function () {
        if (actuate.common.web.$("#" + this._getMasterDialogDivId()).length > 0) {
            actuate.common.web.$("#" + this._getMasterDialogDivId()).remove()
        }
        this._dlgEl = actuate.common.web.$(this._getMasterDialogTemplate());
        var a = this._getDialogHeader();
        a.appendTo(this._dlgEl);
        var b = actuate.common.web.$(this._getContentTemplate());
        b.appendTo(this._dlgEl);
        if (this._showFooter !== false) {
            var c = this._getDialogFooter();
            c.appendTo(this._dlgEl)
        }
        this._dlgEl.appendTo(this._element);
        var d = actuate.common.web.$("#" + this._containerId);
        this._element.appendTo(d);
        var e = "show";
        if (this._isMsgDlg === true) {
            e = {backdrop: false}
        }
        this._dlgEl.modal(e);
        this._dlgEl.keyup(actuate.common.web.Method.bind(this._onESCKey, this));
        this._dlgEl.draggable({handle: ".modal-header"});
        if (this._isMsgDlg === true) {
            this._backdrop = actuate.common.web.$(this._getMsgBackDropTemplate());
            this._backdrop.appendTo(actuate.common.web.$("#" + this._containerId))
        }
    },
    _getMsgBackDropTemplate: function () {
        var a = '<div class="act-msgDlg"><div class="modal-backdrop"></div></div>';
        return a
    },
    _getIgnoreEnterKey: function () {
        if (this._ignoreEnterKey === undefined) {
            var a = (new Date).getTime();
            if (this._startTimeDelay) {
                if (a < this._startTimeDelay) {
                    return false
                }
            }
            this._startTimeDelay = (new Date).getTime() + 600;
            return true
        }
        return this._ignoreEnterKey
    },
    okToListenOnEnterKey: function (a) {
        this._ignoreEnterKey = a
    },
    _onESCKey: function (a) {
        if (a.keyCode == 27) {
            this.close();
            return false
        }
    },
    _onEnterKey: function (a, b) {
        if (b.keyCode == 13 && a) {
            if (this._getIgnoreEnterKey() === true) {
                a()
            }
            return false
        }
    },
    close: function () {
        this._dlgEl.modal("hide");
        this._dlgEl.remove();
        this._element.remove();
        if (this._backdrop) {
            this._backdrop.remove()
        }
        if (document.getElementById("PopUpCalendar")) {
            hideCalendar()
        }
    },
    setHideCloseButton: function (a) {
        this._hideCloseButton = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ExitDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ExitDialog.prototype = {
    _type: null,
    _msg: null,
    _dialogID: null,
    _containerID: null,
    _callbackOK: null,
    _hideCloseButton: true,
    _hideCancelButton: false,
    _contentMaxWidth: 500,
    _infoMap: {
        error: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        info: {icon: "icon-info-sign", cls: "alert alert-info"},
        warning: {icon: "icon-warning-sign", cls: "alert alert-block"},
        severe: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        confirmation: {icon: "icon-warning-sign", cls: "alert alert-block"}
    },
    initialize: function (a) {
        if (this.__extending) return;
        this._type = "info";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        if (a) {
            this._containerID = a.id;
            if (a.type === "warning") {
                this._type = "warning"
            } else if (a.type === "error") {
                this._type = "error"
            } else if (a.type === "severe") {
                this._type = "severe"
            }
            this._containerID = a.id;
            this._msg = a.msg;
            this._dialogConfig = a.dialogConfig;
            if (a.isMsgDlg) {
                this._isMsgDlg = true
            }
            this._title = a.dialogConfig.title;
            if (a.contentMaxWidth) {
                this._contentMaxWidth = a.contentMaxWidth
            }
        }
        this._dialogID = this._containerID + "-" + actuate.common.web.util.Utility.createUniqueControlID() + "-" + actuate.common.web.$(".act_dlg").length;
        var b = actuate.common.web.$("<div id='" + this._dialogID + "'>");
        b.addClass(this._type);
        b.appendTo(actuate.common.web.$("#" + this._containerID))
    },
    register: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewProfile.addListener(a, b)
        }
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    render: function () {
        var a = null;
        var b = this;
        var c = false;
        if (this._dialogConfig.isMsgDlg) {
            c = true
        }
        var d = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var e = function () {
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler()
            }
        };
        var f = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var g = {render: actuate.common.web.Method.bind(f, this)};
        var h = this._dialogConfig.okButton.buttonType ? this._dialogConfig.okButton.buttonType : "secondary";
        var i = this._dialogConfig.cancelButton.buttonType ? this._dialogConfig.cancelButton.buttonType : "primary";
        var j = [{
            label: this._dialogConfig.cancelButton.label,
            handler: actuate.common.web.Method.bind(d, this),
            type: i
        }, {label: this._dialogConfig.okButton.label, handler: actuate.common.web.Method.bind(e, this), type: h}];
        if (this._hideCancelButton) {
            j.shift()
        }
        var k = {buttons: j, modal: true, isMsgDlg: c};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, g, k);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    },
    _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width:' + this._contentMaxWidth + 'px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 3px 50px 0;"></span>';
        var c = this._msg;
        b += c;
        b += "</div>";
        return b
    },
    _escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    },
    setHideCloseButton: function (a) {
        this._hideCloseButton = a
    },
    setHideCancelButton: function (a) {
        this._hideCancelButton = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ExportDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ExportDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewExport = new actuate.common.web.widget.ui.view.common.Export(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewExport.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewExport.setData(a)
    }, getData: function () {
        return this._viewExport.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._export, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = function () {
            this._invokeListener("ON_OK", b)
        };
        var d = function () {
            this._invokeListener("ON_CANCEL", b)
        };
        var e = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "secondary"
        }, {
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.ExportXLS"),
            handler: actuate.common.web.Method.bind(c, this),
            type: "primary"
        }];
        var f = {buttons: e, modal: true};
        var g = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Export.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, g, this._viewExport, f);
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.IntegrateDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.IntegrateDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewInteract = new actuate.common.web.widget.ui.view.common.Integrate(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        this._viewInteract.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewInteract.setData(a)
    }, getData: function () {
        return this._viewInteract.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Interact.Settings"),
            renderer: this._viewInteract
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Integrate.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.setHideCloseButton(false);
        b.render();
        var i = actuate.common.web.$("#" + b._getContentDivId());
        i.unbind("keypress")
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.InteractDialog = actuate.common.web.Class.create();
actuate
    .common.web.widget.dialog.InteractDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewInteract = new actuate.common.web.widget.ui.view.common.Interact(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewInteract.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewInteract.setData(a)
    }, getData: function () {
        return this._viewInteract.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Interact.Settings"),
            renderer: this._viewInteract
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Interact.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.MsgDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.MsgDialog.prototype = {
    _type: null,
    _msg: null,
    _containerID: null,
    _showDetail: true,
    _infoMap: {
        error: {icon: "icon-exclamation-sign", cls: "alert alert-error"},
        info: {icon: "icon-info-sign", cls: "alert alert-info"},
        warning: {icon: "icon-warning-sign", cls: "alert alert-block"},
        severe: {icon: "icon-exclamation-sign", cls: "alert alert-error"}
    },
    initialize: function (a) {
        if (this.__extending) return;
        this._type = "info";
        if (a) {
            this._containerID = a.id;
            if (a.type === "warning") {
                this._type = "warning"
            } else if (a.type === "error") {
                this._type = "error"
            } else if (a.type === "severe") {
                this._type = "severe"
            }
            this._containerID = a.id;
            this._msg = a.msg
        }
        if (a.showDetail !== undefined) {
            this._showDetail = a.showDetail
        }
        this._dialogConfig = a.dialogConfig
    },
    render: function () {
        var a = null;
        var b = this;
        var c = function () {
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler()
            }
        };
        var d = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var e = {render: actuate.common.web.Method.bind(d, this)};
        var f = [{label: this._dialogConfig.okButton.label, handler: c, type: "primary"}];
        var g = {buttons: f, modal: true, isMsgDlg: true, type: this._type};
        a = new actuate.common.web.widget.dialog.MsgDialogEx(this._containerID, this._dialogConfig.title, e, g);
        a.render()
    },
    _isEmptyString: function (a) {
        var b = a + "";
        if (b.length === 0) {
            return true
        }
        return false
    },
    _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = actuate.common.web.util.Utility.createUniqueControlID();
        var c = '<div id="' + b + '-msg">';
        c += '<span class="' + a.icon + '" style="float:left; margin:0 0px 50px 0;"></span>';
        var d = " ";
        var e;
        if (this._msg instanceof actuate.common.web.Exception) {
            var f = !this._isEmptyString(this._msg.getErrCode()) ? this._msg.getErrCode() + ": " : "";
            d = f + this._escapeHtml(this._msg.getMessage()) + "<br>";
            if (this._showDetail === true) {
                var g = this._msg.getParameters();
                if (g) {
                    for (e = 0; e < g.length; e++) {
                        d += "Parameter" + e + ": " + g[e] + "<br>"
                    }
                }
            }
        } else {
            for (e = 0; e < this._msg.length; e++) {
                var h = this._msg[e];
                if (h.successLabel && h.successMessage) {
                    label = h.successLabel;
                    message = h.successMessage
                } else {
                    label = h.errorLabel;
                    message = h.errorMessage
                }
                d += label + " " + message + "<br>"
            }
        }
        c += d;
        c += "</div>";
        return c
    },
    _escapeHtml: function (a) {
        var b = document.createElement("div");
        b.appendChild(document.createTextNode(a));
        return b.innerHTML
    }
};
actuate.common.web.widget.dialog.MsgDialogEx = actuate.common.web.Class.extendClass(actuate.common.web.widget.dialog.Dialog, {
    _dialogID: null,
    initialize: function (a, b, c, d) {
        if (this.__extending) return;
        this._dialogID = a + "-" + actuate.common.web.util.Utility.createUniqueControlID() + "-" + actuate.common.web.$(".act_dlg").length;
        this._wrapperEl = actuate.common.web.$("<div id='" + this._dialogID + "'>");
        this._wrapperEl.appendTo(actuate.common.web.$("#" + a));
        this._wrapperEl.addClass(d.type);
        d["hideCloseButton"] = false;
        actuate.common.web.widget.dialog.MsgDialogEx.superclass.initialize.call(this, this._dialogID, b, c, d)
    },
    close: function () {
        actuate.common.web.widget.dialog.MsgDialogEx.superclass.close.apply(this, arguments);
        this._wrapperEl.remove()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.MyProfileDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.MyProfileDialog.prototype = {
    _data: null, _listener: null, _freemium: null, initialize: function () {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewProfile = new actuate.common.web.widget.ui.view.common.MyProfile
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewProfile.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewProfile.setData(a)
    }, getData: function () {
        return this._viewProfile.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.MyProfile.Settings"),
            renderer: this._viewProfile
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
            handler: actuate.common.web.Method.bind(e, this),
            type: "secondary"
        }, {
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Save"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.MyProfile.Title");
        this._viewProfile._freemium = this._freemium;
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ProductAboutDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ProductAboutDialog.prototype = {
    _data: null, _listener: null, _freemium: null, initialize: function () {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._about = new actuate.common.web.widget.ui.view.common.ProductAbout
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._about.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._about.setData(a)
    }, getData: function () {
        return this._about.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.About.Title"), renderer: this._about};
        var d = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var e = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var f = {buttons: e, modal: true};
        var g = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.About.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, g, c.renderer, f);
        b.render();
        actuate.common.web.$(".modal-header")[0].children[0].style.fontSize = "22px"
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ProgressDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ProgressDialog.prototype = {
    _autoOpen: false,
    _containerId: null,
    _element: null,
    _contentID: null,
    _dialogID: null,
    _content: null,
    _modal: false,
    _rendered: false,
    _width: null,
    _height: null,
    _dlgEl: null,
    _hideCloseButton: true,
    _primaryHandler: null,
    _progressBarConfig: {},
    _delay: 1 * 1e3,
    _timer: null,
    _counterIdx: 0,
    initialize: function (a, b, c, d) {
        this._containerId = a;
        this._title = b;
        this._content = c;
        if (d) {
            if (d["modal"]) {
                this._modal = true
            }
            this._width = d["width"] || this._width;
            this._height = d["height"] || this._height;
            this._autoOpen = d["autoOpen"];
            this._hideCloseButton = d["hideCloseButton"] === false ? false : true;
            if (d.minheight) {
                this._minheight = d.minheight
            }
            if (d.minwidth) {
                this._minwidth = d.minwidth
            }
        }
        if (this._autoOpen != true) {
            this._autoOpen = false
        }
        this._dialogID = "act_dlg-" + this._containerId + "-" + actuate.common.web.$(".act_dlg").length;
        this._element = actuate.common.web.$(this._getDialogTemplate())
    },
    _getDialogTemplate: function () {
        return '<div id="' + this._dialogID + '" class="act-dlg"/>'
    },
    _getContentTemplate: function () {
        return '<div id="' + this._getContentDivId() + '" class="act-dlg-cnt modal-body"/>'
    },
    _getMasterDialogTemplate: function () {
        var a = "width: ";
        var b = "height: ";
        var c = "max-height: ";
        var d = "min-height: ";
        var e = "min-width: ";
        if (this._width) {
            a += this._width + "px;"
        } else {
            a += "auto;"
        }
        if (this._height) {
            b += this._height + "px;"
        } else {
            b += "auto;"
        }
        if (this._minheight) {
            d += this._minheight + "px;"
        } else {
            d += "auto;"
        }
        if (this._minwidth) {
            e += this._minwidth + "px;"
        } else {
            e += "auto;"
        }
        var f = "";
        if (a || b || d) {
            f = ' style="' + b + " " + d + " " + a + " " + e + '"'
        }
        return '<div id="' + this._getMasterDialogDivId() + '" class="modal hide fade" tabindex="-1"' + f + "/>"
    },
    _getMasterDialogDivId: function () {
        return this._dialogID + "-main"
    },
    _getContentDivId: function () {
        return this._dialogID + "-cnt"
    },
    _renderDialogContent: function () {
        var a = this._getContentDivId();
        var b = actuate.common.web.$("#" + a);
        b.html("");
        var c = "";
        if (this._content) {
            c = '<div><i class="icon-ygg-spinner icon-large icon-spin"></i> ' + this._content + " </div>"
        } else {
            c = '<div><i class="icon-ygg-spinner icon-large icon-spin"></i></div>'
        }
        actuate.common.web.$(c).appendTo(b);
        var d = actuate.common.web.$(window).height();
        var e = this._dlgEl.height();
        var f = actuate.common.web.$(window).width();
        var g = this._dlgEl.width();
        var h = actuate.common.web.$(window).scrollTop();
        var i = actuate.common.web.$(window).scrollLeft();
        var j = d / 2 - e / 2;
        var k = f / 2 - g / 2;
        this._dlgEl.offset({top: h + 1 / 2 * j, left: i + k})
    },
    render: function (a) {
        if (this._counterIdx <= 0) {
            this._rendered = false;
            this._showGlobalContainer();
            var b = actuate.common.web.Method.bind2(this._showProgressDlg, this, a);
            this._timer = window.setTimeout(b, this._delay)
        }
        this._counterIdx++
    },
    _showGlobalContainer: function () {
        var a = this._getGlobalContainerEl();
        a.empty();
        a.show()
    },
    _getGlobalContainerEl: function () {
        var a = actuate.common.web.$("#" + this._getGlobalId());
        if (a.length === 0) {
            var b = this._bodyHtmlTemplate();
            a = actuate.common.web.$(b);
            a.appendTo(document.body)
        }
        return a
    },
    _renderDialogDiv: function () {
        if (actuate.common.web.$("#" + this._getMasterDialogDivId()).length > 0) {
            actuate.common.web.$("#" + this._getMasterDialogDivId()).remove()
        }
        this._dlgEl = actuate.common.web.$(this._getMasterDialogTemplate());
        var a = actuate.common.web.$(this._getContentTemplate());
        a.appendTo(this._element);
        this._element.appendTo(this._dlgEl);
        var b = this._getGlobalContainerEl();
        this._dlgEl.appendTo(b);
        this._dlgEl.modal("show");
        this._dlgEl.draggable({handle: ".modal-header"})
    },
    _getGlobalId: function () {
        if (!this._progressBarConfig.globalId) {
            this._progressBarConfig.globalId = "acwebprogid" + actuate.common.web.util.Utility.createUniqueControlID()
        }
        return this._progressBarConfig.globalId
    },
    _bodyHtmlTemplate: function () {
        var a = this._getGlobalId();
        var b = '<div class="' + actuate.common.web.util.Utility.getRootCSSNamespace() + ' ac-progressbar" id="' + a + '"></div>';
        return b
    },
    _showProgressDlg: function (a) {
        if (this._rendered == false && this._timer != null) {
            this._clearTimeOut();
            this._rendered = true;
            this._content = "";
            if (a) {
                this._content = a
            }
            this._element.empty();
            this._renderDialogDiv();
            this._renderDialogContent()
        }
    },
    _clearTimeOut: function () {
        if (this._timer) {
            window.clearTimeout(this._timer);
            this._timer = null
        }
    },
    close: function () {
        this._counterIdx--;
        this._clearTimeOut();
        if (this._counterIdx <= 0) {
            this._rendered = false;
            if (this._dlgEl) {
                this._dlgEl.modal("hide");
                this._dlgEl.remove()
            }
            var a = actuate.common.web.$("#" + this._getGlobalId());
            if (a.length != 0) {
                a.hide()
            }
            this._counterIdx = 0
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.SchedulerDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.SchedulerDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewScheduler = new actuate.common.web.widget.ui.view.common.Scheduler(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewScheduler.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewScheduler.setData(a)
    }, getData: function () {
        return this._viewScheduler.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Scheduler.Settings"),
            renderer: this._viewScheduler
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
            handler: actuate.common.web.Method.bind(e, this),
            type: "secondary"
        }, {
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Schedule"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Scheduler.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b._width = "625px;";
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.dialog");
actuate.common.web.widget.dialog.ShareDialog = actuate.common.web.Class.create();
actuate.common.web.widget.dialog.ShareDialog.prototype = {
    _data: null, _listener: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this._viewShare = new actuate.common.web.widget.ui.view.common.Share(a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b);
        if (a === "ON_GETLOCALIZATION_STRING") {
            this._viewShare.addListener(a, b)
        }
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, setData: function (a) {
        this._viewShare.setData(a)
    }, getData: function () {
        return this._viewShare.getData()
    }, _NOOP: function () {
        return
    }, _getMsgDialogConfig: function (a) {
        var b = actuate.common.web.util.Utility.getValidationTitleKey(a);
        var c = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", b),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this._NOOP, this)
            }
        };
        return c
    }, render: function (a) {
        var b = null;
        var c = {
            titleKey: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Share.Settings"),
            renderer: this._viewShare
        };
        var d = function () {
            var c = b.getContent().validate();
            if (c === true) {
                var d = b.getContent().getData();
                this._invokeListener("ON_OK", b)
            } else {
                var e = this._getMsgDialogConfig("info");
                actuate.common.web.util.Utility.showMsgDlg(a, c, "info", e)
            }
        };
        var e = function () {
            this._invokeListener("ON_CANCEL");
            b.close()
        };
        var f = [{
            label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        var g = {buttons: f, modal: true};
        var h = this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Share.Title");
        b = new actuate.common.web.widget.dialog.Dialog(a, h, c.renderer, g);
        b.setHideCloseButton(false);
        b.render()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.AddEdit = actuate.common.web.Class.create();
actuate.common.web.widget.layout.AddEdit.prototype = {
    _config: null, initialize: function (a, b, c, d) {
        if (this.__extending) return;
        this._config = {containerId: a, title: b, content: c, handlers: d.handlers};
        this._initView()
    }, render: function () {
        var a = actuate.common.web.$("#" + this._config.containerId);
        a.html("");
        this._el.appendTo(a);
        this._createHeader(this._el);
        this._createContent(this._el)
    }, _createHeader: function (a) {
        var b = actuate.common.web.$('<div id="header' + this._config.containerId + '" class="view-header-bar"></div>');
        b.appendTo(a);
        var c = actuate.common.web.$('<div class="view-header-bar-inner"></div>');
        c.appendTo(b);
        var d = this._config.handlers;
        var e = "<h2 class='view-header-title view-header-title-left'>" + "{value}" + "</h2>";
        var f = actuate.common.web.widget.control.GridUtil.generateItem(null, this._config.title, null, null, null, null, null, e);
        var g = d["backarrow"] ? actuate.common.web.widget.control.GridUtil.generateItem("back", d["backarrow"].title, null, null, null, d["backarrow"].handler, "acaddedit-back", null) : null;
        var h = {items: [{items: [f]}, {items: [g]}]};
        var i = {store: [h]};
        var j = new actuate.common.web.widget.layout.EditHeaderBar(i);
        j.appendTo(c)
    }, _createContent: function (a) {
        var b = "content" + this._config.containerId;
        var c = actuate.common.web.$('<div id="' + b + '" class="view-update-content"></div>');
        c.appendTo(a);
        if (this._config.content) {
            c.html("");
            this._config.content.render(b, actuate.common.web.Method.bind(this._createFooter, this));
            this._rendered = true
        }
        return c
    }, getContent: function () {
        return this._config.content
    }, _createFooter: function (a) {
        var b = this._config.handlers;
        if (b.save && b.cancel) {
            actuate.common.web.$("<br>").appendTo(a);
            var c = actuate.common.web.$('<div id="footer' + this._config.containerId + '" class="view-update-footer"></div>');
            c.appendTo(a);
            var d = actuate.common.web.$('<div class="btn-group"></div>');
            var e = actuate.common.web.$('<div class="btn-group"></div>');
            d.appendTo(c);
            e.appendTo(c);
            var f = {onItemClick: b["save"].handler};
            var g = new actuate.common.web.widget.control.GridItemListener(f);
            var h = b["save"] ? actuate.common.web.widget.control.GridUtil.generateItem("save", b["save"].title, "save", null, null, null, "btn-primary header-right-button btn-wide", null, null, g) : null;
            f = {onItemClick: b["cancel"].handler};
            g = new actuate.common.web.widget.control.GridItemListener(f);
            var i = b["cancel"] ? actuate.common.web.widget.control.GridUtil.generateItem("cancel", b["cancel"].title, "cancel", null, null, null, "header-right-button btn-wide", null, null, g) : null;
            var j = new actuate.common.web.widget.control.GridItem(i);
            j.appendTo(d);
            var k = new actuate.common.web.widget.control.GridItem(h);
            k.appendTo(e)
        }
    }, _renderView: function () {
    }, _initView: function () {
        this._el = actuate.common.web.$('<div class="view-update"></div>')
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.BaseHeaderbar = actuate.common.web.Class.create();
actuate.common.web.widget.layout.BaseHeaderbar.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="headerwrap_' + a + "\" class='view-header-content'>";
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendHeader()
    }, onUnload: function () {
        this._element.html("")
    }, _appendHeader: function () {
        this._divObject = actuate.common.web.$("<div id='titleandsearch'></div>");
        for (var a = 0; a < this._config.items.length; a++) {
            this._appendItems(this._config.items[a])
        }
        this._divObject.appendTo(this._element);
        setTimeout(function () {
            if (actuate.common.web.$(".search") && actuate.common.web.$(".search").length > 0) actuate.common.web.$(".search")[0].focus()
        }, 0)
    }, _appendItems: function (a) {
        var b = null;
        switch (a.items.type) {
            case"add":
                b = this._getAddComponent(a.items);
                b.appendTo(this._element);
                break;
            case"search":
                b = this._getSearchComponent(a.items);
                b.prependTo(this._divObject);
                break;
            case"emptyadd":
                b = this._getEmptyAddComponent(a.items);
                b.prependTo(this._element);
                break;
            default:
                if (a.items.length != 0) {
                    b = this._getTextComponent(a.items);
                    b.appendTo(this._divObject)
                } else {
                    b = actuate.common.web.$("<a></a>");
                    b.appendTo(this._element)
                }
                break
        }
    }, _getAddComponent: function (a) {
        var b = actuate.common.web.$("<div class='view-header-bar-left'></div>");
        var c = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var d = actuate.common.web.Method.bind2(this._buttonHandler, this, c);
        var e = new actuate.common.web.widget.control.GridItem(a);
        e.appendTo(b);
        b.click(function () {
            d(a.type)
        });
        return b
    }, _getEmptyAddComponent: function (a) {
        var b = actuate.common.web.$("<div class='view-header-bar-left'><div class='hiddenplaceholder' style='visibility:hidden'>ACTUATE</div></div>");
        return b
    }, _getSearchComponent: function (a) {
        var b = actuate.common.web.$("<div class='header-bar-search-box'></div>");
        var c = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var d = actuate.common.web.Method.bind2(this._buttonHandler, a, c);
        a.listener.onItemClick = d;
        var e = new actuate.common.web.widget.control.GridItem(a);
        e.appendTo(b);
        var f = this;
        var g;
        b.find("input").keyup(function (c) {
            var e = b.find("input");
            clearTimeout(g);
            g = setTimeout(function () {
                if (c.keyCode != 0) {
                    if (c.keyCode != 13) {
                        a.data = e.val()
                    }
                    actuate.common.web.$(".search-delete-text-icon").css("display", "block")
                } else {
                    a.data = e.val().substring(0, e.val().length - 1)
                }
                d(a.type, a.data);
                if (a.data == "") {
                    actuate.common.web.$(".search-delete-text-icon").css("display", "none")
                }
            }, 500)
        });
        b.find(".search-delete-text-icon").click(function (b) {
            a.data = "";
            this.value = "";
            actuate.common.web.$(".header-bar-search-box").find("input").val("");
            d(a.type, a.data);
            actuate.common.web.$(".search-delete-text-icon").css("display", "none")
        });
        return b
    }, _getTextComponent: function (a) {
        var b = new actuate.common.web.widget.control.GridItem(a);
        return b
    }, _buttonHandler: function (a, b, c, d) {
        var e = null;
        if (a) {
            if (c != null) {
                e = {event: {data: c}}
            }
            a(b, e)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.BaseMenubar = actuate.common.web.Class.create();
actuate.common.web.widget.layout.BaseMenubar.prototype = {
    CONTENT_ID_PREFIX: "act_menu_cnt_",
    HREF_ID_PREFIX: "act_menu_href_",
    _configMenus: null,
    _selectedMenu: null,
    _idsOfMainItems: null,
    _idsOfSubItems: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    initComponent: function () {
        var a = this.getTemplate();
        var b = actuate.common.web.util.Utility.getRootCSSNamespace();
        a = '<div class="' + b + '">' + a + "</div>";
        this._element = actuate.common.web.$(a);
        this._element.attr("id", "act_menu_panel-" + this._containerId + "-" + actuate.common.web.$(".act_menu_panel").length)
    },
    addMenuItem: function (a) {
        this._configMenus.main.items.push(a)
    },
    onMainMenuClick: function (a, b) {
        var c = "li_" + this._getHrefId(a, b);
        var d = actuate.common.web.$("#" + c);
        if (d && d.hasClass("disabled")) {
            arguments[2].stopPropagation()
        } else {
            var e = b.items[a];
            var f = e.renderer;
            if (f) {
                var g = this._getArrayOfMenuItemIds(a, b);
                f.render(e, g)
            }
        }
    },
    onMenuClick: function (a, b) {
        this._setActiveMenu(a, b);
        this._renderContentMenu(a, b)
    },
    onSubMenuClick: function (a, b) {
        var c = b.renderer;
        if (c) {
            var d = "submemuItem_" + this._getContentId(a, b);
            c.render(d, b)
        }
    },
    _getArrayOfMenuItemIds: function (a, b) {
        var c = null;
        var d = b.items[a];
        var e = d.menu;
        if (e && e.length > 0) {
            c = new Array;
            for (var f = 0; f < e.length; f++) c.push("li_memuItem_" + this._getContentId(a + "_" + f, b))
        }
        return c
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._rendered = true
        }
    },
    getTemplate: function () {
        var a = '<div class="acnavbar"><div class="navbar">' + '<ul class="acmenu nav">' + "</ul>" + "</div>";
        return a
    },
    _getContentId: function (a, b) {
        return this.CONTENT_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getHrefId: function (a, b) {
        return this.HREF_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _setActiveMenu: function (a, b) {
        var c = this._selectedMenu.idx;
        if (this._selectedMenu.config) {
            actuate.common.web.$("#" + this._getHrefId(c, this._selectedMenu.config)).removeClass("active");
            actuate.common.web.$("#" + this._getContentId(c, this._selectedMenu.config)).hide()
        }
        this._selectedMenu.idx = a;
        this._selectedMenu.config = b;
        actuate.common.web.$("#" + this._getHrefId(a, b)).addClass("active");
        actuate.common.web.$("#" + this._getContentId(a, b)).show()
    },
    _renderMenus: function () {
        this._element.prependTo(actuate.common.web.$("#" + this._containerId));
        var a = this._element.find(".nav");
        this._idsOfMainItems = new Array;
        this._idsOfSubItems = new Array;
        for (var b = 0; b < this._configMenus.main.items.length; b++) {
            this._createMenuItem(b, this._configMenus.main.items[b], a, this._configMenus.main)
        }
        this._rendertoolbarSpecificItems()
    },
    _rendertoolbarSpecificItems: function () {
    },
    _updateParentLabel: function (a, b, c) {
        var d = this._getHrefId(b, c);
        var e = this._element.find("#" + d)[0];
        e.innerHTML = "";
        e.innerHTML = a
    },
    _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            c.render(this._getContentId(a, b))
        }
    },
    _getContentRenderer: function (a, b) {
        var c = b.items[a];
        if (c) {
            return c.renderer
        }
        if (b.items.length == 0) return;
        var d = a.split("_");
        c = b.items[d[0]];
        var e = 0;
        for (var f = 1; f < d.length; f++) {
            e = d[f];
            c = c.menu[e]
        }
        var g = c.type;
        if (g != "external") {
            this._updateParentLabel(c.text, d[0], b)
        }
        return c.renderer
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.BaseNav = actuate.common.web.Class.create();
actuate.common.web.widget.layout.BaseNav.prototype = {
    CONTENT_ID_PREFIX: "act_menu_cnt_",
    HREF_ID_PREFIX: "act_menu_href_",
    _configMenus: null,
    _selectedMenu: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    initComponent: function () {
        var a = this.getTemplate();
        var b = actuate.common.web.util.Utility.getRootCSSNamespace();
        a = '<div class="' + b + '">' + a + "</div>";
        this._element = actuate.common.web.$(a);
        this._element.attr("id", "act_menu_panel-" + this._containerId + "-" + actuate.common.web.$(".act_menu_panel").length)
    },
    addMenuItem: function (a) {
        this._configMenus.main.items.push(a)
    },
    onMenuClick: function (a, b) {
        this._setActiveMenu(a, b)
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._rendered = true
        }
    },
    getTemplate: function () {
        var a = '<div class="application-nav">' + '<div class="application-nav-inner">' + '<ul class="nav-right pull-right">' + "</ul>" + '<ul class="nav nav-tabs">' + "</ul>" + "</div>" + "</div>";
        return a
    },
    _getSubMenuLabelTemplate: function (a) {
        return a + ' <i class="caret"></i>'
    },
    getSubMenuTemplate: function (a, b) {
        var c = '<li><div class="dropdown submenu">' + '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown">' + this._getSubMenuLabelTemplate(b) + "</a>" + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>" + "</div></li>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    getMenuLinkTemplate: function (a) {
        return '<a class="acmenu" data-toggle="pill">' + a + "</a>"
    },
    _createSingleMenuItem: function (a, b, c, d) {
        var e = actuate.common.web.$("<li>");
        if (b.cssClass && b.cssClass == "divider") {
            e.addClass("divider")
        } else {
            var f = b.text;
            var g = b.type;
            var h = actuate.common.web.$(this.getMenuLinkTemplate(f));
            h.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a, c));
            e.append(h);
            e.addClass(b.cssClass);
            if (g == "external") {
                h.append(actuate.common.web.$('<i class="icon-share"></i>'))
            }
            var i = this._getContentId(a, c);
            var j = actuate.common.web.util.Utility.getRootCSSNamespace();
            var k = actuate.common.web.$('<div id="' + i + '" class="' + j + '"></div>');
            actuate.common.web.$("#" + this._containerId).append(k)
        }
        if (a == 0 && d === true) {
            e.addClass("active")
        }
        b.index = a;
        return e
    },
    _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleMenuItem(a, b, d, false);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getSubMenuTemplate(g, b.text);
        var i = actuate.common.web.$(h);
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d, true);
            j.append(f)
        }
    },
    _getContentId: function (a, b) {
        return this.CONTENT_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getHrefId: function (a, b) {
        return this.HREF_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _setActiveMenu: function (a, b) {
        var c = this._selectedMenu.idx;
        if (this._selectedMenu.config) {
            actuate.common.web.$("#" + this._getHrefId(c, this._selectedMenu.config)).removeClass("active");
            actuate.common.web.$("#" + this._getContentId(c, this._selectedMenu.config)).hide()
        }
        this._selectedMenu.idx = a;
        this._selectedMenu.config = b;
        actuate.common.web.$("#" + this._getHrefId(a, b)).addClass("active");
        actuate.common.web.$("#" + this._getContentId(a, b)).show();
        this._renderContentMenu(a, b)
    },
    _renderMenus: function () {
        this._element.prependTo(actuate.common.web.$("#" + this._containerId));
        var a = this._element.find(".nav");
        for (var b = 0; b < this._configMenus.main.items.length; b++) {
            this._createMenuItem(b, this._configMenus.main.items[b], a, this._configMenus.main)
        }
    },
    _updateParentLabel: function (a, b, c) {
        var d = this._getHrefId(b, c);
        var e = this._element.find("#" + d)[0];
        var f = this._getSubMenuLabelTemplate(a);
        e.innerHTML = "";
        e.innerHTML = f
    },
    _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            c.render(this._getContentId(a, b))
        }
    },
    _getContentRenderer: function (a, b) {
        var c = b.items[a];
        if (c) {
            return c.renderer
        }
        if (b.items.length == 0) return;
        var d = a.split("_");
        c = b.items[d[0]];
        var e = 0;
        for (var f = 1; f < d.length; f++) {
            e = d[f];
            c = c.menu[e]
        }
        var g = c.type;
        if (g != "external") {
            this._updateParentLabel(c.text, d[0], b)
        }
        return c.renderer
    },
    _findMenuItem: function (a, b) {
        for (var c = 0; c < b.length; c++) {
            var d = b[c];
            if (d.name == a) {
                return d
            }
            var e = d.menu;
            if (e) {
                return this._findMenuItem(a, e)
            }
        }
        return null
    },
    updateParentMenuLabel: function (a, b) {
        var c = this._findMenuItem(a, b.items);
        if (c) {
            var d = c.index.split("_");
            this._updateParentLabel(c.text, d[0], b)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.CategoryNavList = actuate.common.web.Class.create();
actuate.common.web.widget.layout.CategoryNavList.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        this._categoryConfig = a.category;
        this._headerConfig = a.header;
        this._isconfigNav = this.isConfigNav(this._categoryConfig);
        if (this._isconfigNav) {
            this._navlist = new actuate.common.web.widget.layout.ConfigNavList(this._categoryConfig)
        } else {
            this._navlist = new actuate.common.web.widget.layout.NavList(this._categoryConfig)
        }
        var b = actuate.common.web.Method.bind(this._onCategoryClick, this);
        this._navlist.setOnCategoryClick(b);
        this._categoryId = actuate.common.web.util.Utility.createUniqueControlID();
        var c = this.getTemplate(this._categoryId);
        this._element = actuate.common.web.$(c)
    }, setCurrentMenu: function (a, b) {
        this._navlist.setCurrentMenu(a, b)
    }, isConfigNav: function (a) {
        var b = true;
        for (config in a) {
            if (a[config].menu) {
                b = false;
                break
            }
        }
        return b
    }, getTemplate: function (a) {
        var b = "<div id='acheader_{id}' class='view-header-bar'></div>";
        b += "<div id='{id}'>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this.render()
    }, refresh: function (a) {
        this._navlist.refresh(a)
    }, render: function () {
        if (this._headerConfig.items) {
            this.renderHeader(this._headerConfig)
        }
        var a = actuate.common.web.$("#" + this._categoryId);
        a.empty();
        this._navlist.appendTo(a)
    }, renderHeader: function (a) {
        var b = actuate.common.web.$("#acheader_" + this._categoryId);
        b.empty();
        var c = actuate.common.web.$("<div class='view-header-bar-inner'></div>");
        c.appendTo(b);
        var d = [a];
        var e = {store: d};
        this._header = new actuate.common.web.widget.layout.BaseHeaderbar(a);
        this._header.appendTo(c)
    },
    _onCategoryClick: function () {
        if (this._onCategoryClick) {
            return this._onCategoryClick.apply(this, arguments)
        }
    }, setOnCategoryClick: function (a) {
        this._onCategoryClick = a
    }, onUnload: function () {
        this._navlist.onUnload()
    }, getNavigationList: function () {
        return this._navlist
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ComponentNav = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseNav, {
    initialize: function (a) {
        if (this.__extending) return;
        actuate.common.web.widget.layout.ComponentNav.superclass.initialize.call(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ConfigNavList = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ConfigNavList.prototype = {
    _wizardStateCallback: null,
    _config: null,
    _onCategoryClick: null,
    _activeMenu: null,
    _innerItemArray: new Array,
    _listener: null,
    initialize: function (a) {
        this._config = a;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        this.initComponent()
    },
    initComponent: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        this._navlistId = a;
        var b = this.getTemplate();
        this._element = actuate.common.web.$(b)
    },
    appendTo: function (a) {
        this._element.appendTo(a);
        this.render()
    },
    getLeftNavId: function () {
        return "navleft" + this._navlistId
    },
    getRightNavId: function () {
        return "navcnt_" + this.getLeftNavId()
    },
    getTemplate: function () {
        var a = this.getLeftNavId();
        var b = "<div class='ac-main-content-area'>" + "<div class='ac-side-menu'>" + "<div id='navwrap" + a + "'>" + this.getLeftNavTemplate(a) + "</div>" + "</div>" + "<div class='ac-right-content-container ac-table-content-area' id='" + this.getRightNavId() + "'>" + "</div>" + "</div>";
        return b
    },
    getLeftNavTemplate: function (a) {
        var b = "<div class='vertical-side-menu' initially-selected-index='0' id='{id}' items=''>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    },
    render: function () {
        this._renderMenus();
        this._rendered = true
    },
    _renderMenus: function () {
        var a = "<ul></ul>";
        if (this._config != null) {
            var b = this.getLeftNavId();
            var c = actuate.common.web.$("#" + b);
            c.empty();
            outerList = actuate.common.web.$(a);
            outerList.appendTo(c);
            var d = 0;
            for (var e in this._config) {
                var f = this._config[e];
                if (f.isActive || !this._activeMenu) {
                    this.setActiveMenu(f)
                }
                if (!f.isHidden) {
                    this._renderListHeader(d, f, f.name, outerList)
                }
                d += 1
            }
        }
        this.renderContent(this._activeMenu)
    },
    _getMenuItemListId: function (a) {
        return this.getLeftNavId() + "_menuitem_" + a
    },
    _renderListHeader: function (a, b, c, d) {
        var e = this.getLeftNavId();
        var f = "";
        var g = "";
        if (b.enableMenu == false) {
            g = " disabled"
        }
        if (a == 0) {
            f = "<li class='selected" + g + "' id='" + this._getMenuItemListId(a) + "'></li>"
        } else {
            f = "<li class='" + g + "' id='" + this._getMenuItemListId(a) + "'></li>"
        }
        this._innerItemArray.push(this._getMenuItemListId(a));
        var h = actuate.common.web.$(f);
        h.appendTo(d);
        var i = "<a>" + b.text + "</a>";
        var j = actuate.common.web.$(i);
        j.appendTo(h);
        if (!b.menu) {
            h.click(actuate.common.web.Method.bind2(this.onMenuClick, this, b))
        }
    },
    enableMenu: function (a, b) {
        for (var c in this._config) {
            if (this._config[c].name === b) {
                actuate.common.web.$("#" + this._getMenuItemListId(c)).removeClass("disabled");
                if (a == false) {
                    actuate.common.web.$("#" + this._getMenuItemListId(c)).addClass("disabled")
                }
                break
            }
        }
    },
    setActiveMenu: function (a) {
        if (a.isActive || !this._activeMenu) {
            if (a.renderer) {
                this._activeMenu = a
            }
        }
    },
    renderContent: function (a) {
        if (a.renderer) {
            var b = this.getRightNavId();
            var c = actuate.common.web.$("#" + b);
            c.empty();
            if (a.text && !a.isHidden) {
                a.renderer.render(b, a.text)
            } else {
                a.renderer.render(b)
            }
        }
    },
    _findMenuItem: function (a, b) {
        if (!a) return null;
        if (a.name === b) {
            return a
        }
        if (a.menu) {
            var c = a.menu;
            for (var d in c) {
                var e = this._findMenuItem(c[d], b);
                if (e) {
                    return e
                }
            }
        }
        return null
    },
    refresh: function (a) {
        for (var b in this._config) {
            var c = this._findMenuItem(this._config[b], a);
            if (c) {
                this.renderContent(c);
                return true
            }
        }
    },
    getActiveMenu: function () {
        return this._activeMenu
    },
    getActiveMenuName: function () {
        return this._activeMenu.name
    },
    getMenuCount: function () {
        return this._config.length
    },
    getActiveMenuIdx: function () {
        var a = this._activeMenu.name;
        for (var b in this._config) {
            if (this._config[b].name === a) {
                return b
            }
        }
        return null
    },
    getNextMenu: function () {
        var a = this.getActiveMenuIdx();
        if (this._config.length > a - 1) {
            var b = this._config[Math.abs(this.getActiveMenuIdx()) + 1];
            if (b && b.name) {
                return b.name
            }
        }
        return null
    },
    goToNext: function () {
        var a = this.getNextMenu();
        if (a) {
            this.setCurrentMenu(a)
        }
    },
    _onCategoryClick: function (a, b, c) {
        if (actuate.common.web.$("#" + this._getMenuItemListId(a)).hasClass("disabled")) {
            return false
        }
        var d = this._listener.invokeListener("ON_CATEGORY_CLICK", b, this._activeMenu.name);
        return d
    },
    setCurrentMenu: function (a, b) {
        var c = null;
        for (var d in this._config) {
            if (this._config[d].name === a) {
                c = this._config[d];
                break
            }
        }
        if (!c) {
            return
        }
        if (b !== false) {
            var e = this._onCategoryClick(d, a, this._activeMenu.name);
            if (e == false) return
        }
        this.renderContent(c);
        this._activeMenu = c;
        for (var f in this._innerItemArray) {
            if (actuate.common.web.$("#" + this._innerItemArray[f]).hasClass("selected")) {
                actuate.common.web.$("#" + this._innerItemArray[f]).removeClass("selected")
            }
        }
        actuate.common.web.$("#" + this._getMenuItemListId(d)).addClass("selected");
        if (this._wizardStateCallback) {
            this._wizardStateCallback({activeIdx: this.getActiveMenuIdx()})
        }
    },
    setCurrent: function (a) {
        this.setCurrentMenu(a)
    },
    onMenuClick: function (a, b) {
        if (a) {
            this.setCurrent(a.name)
        }
    },
    onUnload: function () {
        this._element.remove()
    },
    setOnCategoryClick: function (a) {
        this.addListener("ON_CATEGORY_CLICK", a)
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.EditHeaderBar = actuate.common.web.Class.create();
actuate.common.web.widget.layout.EditHeaderBar.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = "<div class='view-header-content'></div>";
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendHeader()
    }, onUnload: function () {
        this._element.html("")
    }, _appendHeader: function () {
        this._backContainer = new actuate.common.web.$("<div class='view-header-bar-left'></div>");
        this._backContainer.appendTo(this._element);
        this._divContainer = new actuate.common.web.$("<div></div>");
        this._divContainer.appendTo(this._element);
        this._buttonContainer = new actuate.common.web.$("<div class='pull-right view-header-bar-content-right'></div>");
        this._buttonContainer.appendTo(this._divContainer);
        for (var a = 0; a < this._config.store[0].items.length; a++) {
            for (var b = 0; b < this._config.store[0].items[a].items.length; b++) {
                this._appendItems(this._config.store[0].items[a].items[b])
            }
        }
    }, _appendItems: function (a) {
        if (a) {
            var b = null;
            var c = actuate.common.web.Method.bind(this._toolbarHandler, this);
            a.handler = c;
            switch (a.type) {
                case"save":
                    a.element = this._buttonContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break;
                case"cancel":
                    a.element = this._buttonContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break;
                case"back":
                    a.element = this._backContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break;
                default:
                    a.element = this._divContainer;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a);
                    break
            }
        }
    }, _toolbarHandler: function (a, b, c, d) {
        if (a) {
            var e = null;
            if (d) {
                e = {event: d}
            }
            a(b, e)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.GlobalIconbar = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseMenubar, {
    _subContainerId: null, _showCloseButton: false, initialize: function (a, b) {
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._subContainerId = b;
        this._selectedMenu = {};
        this.initComponent()
    }, showCloseButton: function (a) {
        this._showCloseButton = a
    }, render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._rendered = true
        }
    }, onCloseButtonClick: function () {
        actuate.common.web.$("#" + this._containerId).hide()
    }, _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            c.render(this._getContentId(a, b), b.items[a])
        }
    }, _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleIconItem(a, b, d);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getMenuItemsTemplate(g, b.text);
        var i = actuate.common.web.$(h);
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d);
            j.append(f)
        }
    }, _createSingleIconItem: function (a, b, c) {
        var d = b.icon;
        var e = b.name;
        var f = null;
        var g = b.items;
        var h = "icon_" + this._getContentId(a, c);
        var i = actuate.common.web.$('<li id="' + h + '" class="icon-bar-icon-item" name="' + e + '">');
        this._idsOfMainItems.push(i);
        if (e == "vertical-divider") {
            f = actuate.common.web.$('<div class="divider-vertical"></div>');
            i.append(f)
        } else {
            f = actuate.common.web.$('<a class="dropdown-toggle" href="#" data-toggle="ac_dropdown" title="' + b.tooltip + '"><i class="' + d + '"></i></a>');
            f.click(actuate.common.web.Method.bind2(this.onIconMenuClick, this, a, c));
            i.append(f);
            if (g && g[0].length > 0) {
                var j = '<ul class="dropdown-menu dashboard-items-submenu-dropdown">';
                if (b.ultemplate) {
                    j = b.ultemplate
                }
                var k = actuate.common.web.$(j);
                var l = g[0];
                var m = null;
                var n = null;
                var o = null;
                for (var p = 0; p < l.length; p++) {
                    m = l[p].displayName;
                    n = l[p].icon;
                    o = actuate.common.web.$('<li id="' + this._getContentId(a, l[p]) + '">');
                    o.click(actuate.common.web.Method.bind2(this.onSubMenuClick, this, p, l[p]));
                    n = actuate.common.web.$('<i class="' + n + '"></i><div class="dashboard-items-popup-title">' + m + "</div>");
                    o.append(n);
                    k.append(o)
                }
                i.append(k)
            }
        }
        return i
    }, onIconMenuClick: function (a, b) {
        var c = "icon_" + this._getContentId(a, b);
        var d = actuate.common.web.$("#" + c);
        if (d && !d.hasClass("disabled")) {
            var e = actuate.common.web.$(".open");
            e.removeClass("open");
            var f = null;
            if (this._selectedMenu.idx == a) {
                f = actuate.common.web.$("#" + "icon_" + this._getContentId(a, b));
                if (b.items && b.items[a].items) {
                    if (f.hasClass("open")) f.removeClass("open"); else f.addClass("open")
                } else {
                    this._renderContentMenu(a, b)
                }
            } else {
                var g = b.items;
                for (var h = 0; h < g.length; h++) {
                    var i = g[h];
                    var j = actuate.common.web.$("#" + "icon_" + this._getContentId(h, b));
                    j.removeClass("open")
                }
                if (b.items && b.items[a].items) {
                    f = actuate.common.web.$("#" + "icon_" + this._getContentId(a, b));
                    f.addClass("open")
                } else {
                    this._renderContentMenu(a, b)
                }
            }
            this._selectedMenu.idx = a;
            this._selectedMenu.config = b
        }
        arguments[2].stopPropagation()
    }, _rendertoolbarSpecificItems: function () {
        if (this._showCloseButton) {
            var a = actuate.common.web.$('<i class="dashboard-close-button-icon icon-ygg-close-circle icon-large"></i>');
            a.click(actuate.common.web.Method.bind(this.onCloseButtonClick, this));
            var b = actuate.common.web.$("#mainIconDiv_" + this._containerId);
            if (b) b.append(a)
        }
    }, getTemplate: function () {
        var a = '<div class="iconbar">' + '<div class="iconbar-inner">' + '<ul id="sub{id}" class="nav nav-pills nav-icon-pills"></ul>' + "</div>" + "</div>";
        a = a.replace(/{id}/g, this._containerId);
        return a
    }, getIconItems: function () {
        return this._idsOfMainItems
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.GlobalMenubar = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseMenubar, {
    _title: "", _mainHiglightedSaveConfig: null, _mainProfileTemplate: null, initialize: function (a, b, c, d) {
        this._configMenus = {main: {name: "main", items: []}};
        this._containerId = a;
        this._title = b;
        if (c) this._mainHiglightedSaveConfig = c;
        if (d) this._mainProfileTemplate = d;
        this._selectedMenu = {};
        this.initComponent()
    }, onSaveClick: function () {
        var a = this._mainHiglightedSaveConfig.renderer;
        if (a) {
            a.render(null, this._mainHiglightedSaveConfig)
        }
    }, render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._renderProfile();
            if (this._mainHiglightedSaveConfig) {
                var a = actuate.common.web.$("#mainSave");
                if (a) a.click(actuate.common.web.Method.bind(this.onSaveClick, this))
            }
            this._rendered = true
        }
    }, _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        if (c) {
            var d = a.split("_");
            menuItem = b.items[d[0]];
            var e = 0;
            for (var f = 1; f < d.length; f++) {
                e = d[f];
                menuItem = menuItem.menu[e]
            }
            var g = "memuItem_" + this._getContentId(a, b);
            var h = actuate.common.web.$("#li_" + g);
            if (h && !h.hasClass("disabled")) {
                if (c.render) c.render(menuItem, g)
            }
        }
    }, _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleMenuItem(a, b, d);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getMenuItemsTemplate(g, b.text, b.name);
        var i = actuate.common.web.$(h);
        this._idsOfMainItems.push(i);
        i.click(actuate.common.web.Method.bind2(this.onMainMenuClick, this, a, d));
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d);
            j.append(f)
        }
    }, _createSingleMenuItem: function (a, b, c) {
        var d = b.text;
        var e = b.type;
        var f = b.icon;
        var g = b.items;
        var h = null;
        var i = b.name;
        var j = actuate.common.web.$('<li id="li_memuItem_' + this._getContentId(a, c) + '" name=' + i + ">");
        this._idsOfSubItems.push(j);
        var k = null;
        if (i == "divider") {
            k = actuate.common.web.$('<div class="divider"></div>')
        } else {
            if (g && g[0].length > 0) {
                var l = g[0];
                k = actuate.common.web.$('<a href="#" id="memuItem_' + this._getContentId(a, l) + '" class="dropdown-toggle" data-toggle="ac_dropdown"><i class="icon-ygg-caret-right icon-large pull-right dropdown-menu-caret"></i><i class="' + f + '"></i>' + d + "</a>");
                h = actuate.common.web.$('<ul class="dropdown-menu sub-menu">');
                for (var m = 0; m < l.length; m++) {
                    var n = l[m];
                    var o = actuate.common.web.$('<li><a href="#" id="submemuItem_' + this._getContentId(m, n) + '"><i class="' + n.icon + '"></i>' + n.text + "</a></li>");
                    o.click(actuate.common.web.Method.bind2(this.onSubMenuClick, this, m, n));
                    h.append(o)
                }
            } else k = actuate.common.web.$('<a href="#" id="memuItem_' + this._getContentId(a, c) + '"><i class="' + f + '"></i>' + d + "</a>");
            k.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a, c))
        }
        j.append(k);
        if (h) j.append(h);
        return j
    }, getMenuItemsTemplate: function (a, b, c) {
        var d = '<li id="li_{id}" name="' + c + '" class="btn-group">' + '<a id="{id}" class="dropdown-toggle" data-toggle="ac_dropdown" href="#">' + b + "</a>" + '<ul id="sub{id}" class="dropdown-menu" aria-labelledby="{id}">' + "</ul>" + "</li>";
        d = d.replace(/{id}/g, a);
        d = d.replace(/\{label\}/g, b);
        return d
    }, getTemplate: function () {
        var a;
        if (this._mainHiglightedSaveConfig || this._mainProfileTemplate) {
            a = '<div class="filebar">' + '<div class="filebar-inner">' + '<div class="filebar-right">';
            if (this._mainProfileTemplate) {
                a += '<div id="' + this._getProfileId() + '"' + 'class="pull-right ac-filebar-actuate-menu"></div>'
            }
            if (this._mainHiglightedSaveConfig) {
                a += '<button type="button" id="mainSave" class="btn btn-primary pull-right">' + '<i class="' + this._mainHiglightedSaveConfig.icon + '"></i>' + this._mainHiglightedSaveConfig.text + "</button>"
            }
            a += '<h2 class="filebar-title pull-right ng-binding">' + this._title + "</h2>" + "</div>" + '<ul class="nav nav-pills nav-file-pills"></ul>' + "</div>" + "</div>"
        } else {
            a = '<div class="filebar">' + '<div class="filebar-inner">' + '<div class="filebar-right">' + '<h2 class="filebar-title pull-right ng-binding">' + this._title + "</h2>" + "</div>" + '<ul class="nav nav-pills nav-file-pills"></ul>' + "</div>" + "</div>"
        }
        return a
    }, _getProfileId: function () {
        return this.PROFILE_ID_PREFIX + this._containerId
    }, _renderProfile: function () {
        var a = this._getProfileId();
        var b = a + "_" + actuate.common.web.util.Utility.createUniqueControlID();
        var c = actuate.common.web.$(this._mainProfileTemplate);
        var d = actuate.common.web.$("#" + a);
        d.append(c)
    }, getMenuItems: function () {
        return this._idsOfMainItems
    }, getSubMenuItems: function () {
        return this._idsOfSubItems
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.GlobalNavMenu = actuate.common.web.Class.extendClass(actuate.common.web.widget.layout.BaseNav, {
    PROFILE_ID_PREFIX: "act_menu_profile_",
    LOGOUT_ID_PREFIX: "act_menu_logout_",
    GLOBALMSG_ID_PREFIX: "act_menu_msg_",
    _logoutHandler: null,
    username: "",
    logoTemplate: null,
    initialize: function (a, b) {
        this._configMenus = {main: {name: "main", items: []}, profile: {name: "profile", items: []}};
        this._hideLogOut = false;
        if (b) {
            if (b.hideLogOut) this._hideLogOut = b.hideLogOut;
            if (b.helpConfig) this._helpConfig = b.helpConfig;
            if (b.isAJC) {
                this._isAJC = b.isAJC
            }
            if (b.username) this.username = b.username;
            if (b.dataUsageConfig) {
                this._dataUsageConfig = b.dataUsageConfig
            }
            if (b.globalMessageConfig) {
                this._globalMessageConfig = b.globalMessageConfig
            }
            if (b.logoTemplate) {
                this.logoTemplate = b.logoTemplate
            }
            if (b.isModern) {
                this.isModern = b.isModern
            }
        }
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    addProfileMenuItem: function (a) {
        this._configMenus.profile.items.push(a)
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._renderProfile();
            this._rendered = true
        }
    },
    _getSubMenuLabelTemplate: function (a) {
        return a + ' <i class="icon-ygg-caret-down"></i>'
    },
    getSubMenuTemplate: function (a, b) {
        var c = "<li>" + '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown" onclick="return false;">' + this._getSubMenuLabelTemplate(b) + "</a>" + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>" + "</li>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    _getGlobalMessageTemplate: function () {
        if (!this._globalMessageConfig) {
            this._globalMessageConfig = {}
        }
        var a = this._globalMessageConfig.msg;
        if (!a) {
            a = ""
        }
        var b = {color: "red", width: "90%", "text-align": "center", "line-height": "36px", "font-weight": 600};
        var c = "none";
        if (this._globalMessageConfig.show) {
            c = "block"
        }
        b.display = c;
        var d = "";
        var e = null;
        var f = this._globalMessageConfig.style;
        if (f) {
            for (e in f) {
                if (e) {
                    b[e] = f[e]
                }
            }
        }
        for (e in b) {
            if (e) {
                d += e + ":" + b[e] + ";"
            }
        }
        var g = this._getGlobalMsgId();
        var h = '<li id="' + g + '" class="pull-left" style="' + d + '">' + a + "</li>";
        return h
    },
    _showHideGlobalMessage: function (a, b) {
        var c = this._getGlobalMsgId();
        var d = document.getElementById(c);
        if (d) {
            if (b) {
                d.innerHTML = b
            }
            var e = "none";
            if (a) {
                e = "block"
            }
            d.style.display = e
        }
    },
    hideGlobalMessage: function () {
        this._showHideGlobalMessage(false, null)
    },
    showGlobalMessage: function (a) {
        if (!this._globalMessageConfig || this._globalMessageConfig.show !== true) {
            return
        }
        this._showHideGlobalMessage(true, a)
    },
    getLogoTemplate: function () {
        var a = '<i class="actuate"></i>';
        if (this.logoTemplate == null) {
            this.logoTemplate = a
        }
        return this.logoTemplate
    },
    getTemplate: function () {
        var a;
        if (this._helpConfig) {
            a = '<div class="acGlblNavBar">' + '<div class="navbar">' + '<div class="navbar-inner">' + '<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + "</a>" + this.getLogoTemplate() + '<ul class="nav"></ul>' + '<ul  id="' + this._getProfileId() + '"' + ' class="right-icons"></ul>' + "</div>" + "</div>";
            if (!this.isModern) {
                a += '<div class="application-nav">' + '<div class="application-nav-inner">' + '<ul class="nav nav-tabs">' + this._getGlobalMessageTemplate() + "</ul>" + "</div>" + "</div>" + "</div>"
            }
        } else if (this._isAJC) {
            a = '<div class="acGlblNavBar">' + '<div class="navbar">' + '<div class="navbar-inner">' + '<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + "</a>" + '<i class="ajc" style="position: absolute;left: calc(50% - 195px);right: calc(50% - 195px);"></i>' + '<ul class="nav"></ul>' + '<ul  id="' + this._getProfileId() + '"' + ' class="right-icons"></ul>' + "</div>" + "</div>" + "</div>"
        }
        return a
    },
    getUserProfileTemplate: function (a, b, c) {
        var d = "";
        if (!this._hideLogOut) {
            d = "<li>" + '<a id="help_" href="#"><i class="actuate_help"></i></a><a id="user-drop-down{id}" role="button" data-toggle="ac_dropdown"><i class="icon-large icon-ygg-user"></i> <i class="icon-ygg-caret-down"></i></a>' + '<ul id="sub{id}" class="dropdown-menu user-profile-submenu" role="menu" aria-labelledby="user-drop-down{id}">' + "</ul>" + "</li>";
            if (this.isModern) {
                d = "<li>" + '<a><span class="user-name">{username}</span>' + "</li>" + "<li>" + '<a id="help_" href="#"><i class="actuate_help"></i></a>' + "</li>" + "<li>" + '<a id="user-drop-down{id}" role="button" data-toggle="ac_dropdown"><i class="actuate_user"></i></a>' + '<ul id="sub{id}" class="dropdown-menu user-profile-submenu" role="menu" aria-labelledby="user-drop-down{id}">' + "</ul>" + "</li>"
            }
            if (this._dataUsageConfig) {
                d += '<li style="margin-right: 16px">' + '<a id="data-usage_{id}" href="#"  style="cursor:default">' + '<div>Trial: <span id="top-usage-days-to-expiration"></span> days left</div>';
                "</a>" + "</li>"
            }
            c = actuate.common.web.$("<div/>").text(c).html();
            d = d.replace(/{id}/g, a);
            d = d.replace(/\{label\}/g, b);
            d = d.replace(/\{username\}/g, c)
        }
        return d
    },
    getProfileTemplate: function (a, b) {
        var c = "";
        if (!this._hideLogOut) {
            c = "<li>" + '<a id="user-drop-down{id}" role="button" data-toggle="ac_dropdown"><span class="user-name">&nbsp;</span><i class="icon-large icon-ygg-user"></i> <i class="icon-ygg-caret-down"></i></a>' + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="user-drop-down{id}">' + "</ul>" + "</li>";
            if (this._dataUsageConfig) {
                c += '<li><div class="divider"></div></li>' + '<li><a id="data-usage_{id}" href="#" style="cursor:default">' + this._dataUsageConfig.text + "</a></li>"
            }
            c = c.replace(/{id}/g, a);
            c = c.replace(/\{label\}/g, b)
        }
        return c
    },
    _getLogoutId: function () {
        return this.LOGOUT_ID_PREFIX + this._containerId
    },
    _getProfileId: function () {
        return this.PROFILE_ID_PREFIX + this._containerId
    },
    _getGlobalMsgId: function () {
        return this.GLOBALMSG_ID_PREFIX + this._containerId
    },
    onHelpClicked: function () {
        if (this._helpConfig && this._helpConfig.renderer) this._helpConfig.renderer.render()
    },
    onDataUsageClicked: function () {
        if (this._dataUsageConfig && this._dataUsageConfig.renderer) this._dataUsageConfig.renderer.render()
    },
    _renderProfile: function () {
        var a = this._getProfileId();
        var b = a + "_" + actuate.common.web.util.Utility.createUniqueControlID();
        var c;
        if (!this.username || this.username.length === 0) {
            c = this.getProfileTemplate(b, null)
        } else {
            c = this.getUserProfileTemplate(b, null, this.username)
        }
        var d = actuate.common.web.$("#" + a);
        var e = document.getElementById(a);
        c = actuate.common.web.util.Utility.removeInlineStyles(c);
        e.innerHTML += c;
        var f = actuate.common.web.$("#help_");
        if (f) f.click(actuate.common.web.Method.bind(this.onHelpClicked, this));
        var g = actuate.common.web.$("#data-usage_" + b);
        if (g) {
            g.click(actuate.common.web.Method.bind(this.onDataUsageClicked, this));
            var h = {};
            g.parent().tooltip(h)
        }
        var i = d.find("#sub" + b);
        for (var j = 0; j < this._configMenus.profile.items.length; j++) {
            this._createMenuItem(j, this._configMenus.profile.items[j], i, this._configMenus.profile)
        }
    },
    getMenuLinkTemplate: function (a) {
        return '<a class="acmenu">' + a + "</a>"
    },
    setActiveLabel: function (a) {
        this.updateParentMenuLabel(a, this._configMenus.main)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.Grid = actuate.common.web.Class.create();
actuate.common.web.widget.layout.Grid.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, onUnload: function () {
        this._element.html("")
    }, _appendItems: function () {
        this._appendHeader();
        var a = this._config.store;
        if (!a) return;
        for (var b = 0; b < a.length; b++) {
            var c = {row: a[b], rowIndex: b};
            var d = new actuate.common.web.widget.control.Grid.Row(c);
            d.appendTo(this._element)
        }
    }, addRow: function (a) {
        var b = this._config.store;
        if (!b) {
            b = [];
            this._config.store = b
        }
        b.push(a);
        var c = {row: a, rowIndex: b.length};
        var d = new actuate.common.web.widget.control.Grid.Row(c);
        d.appendTo(this._element)
    }, _appendHeader: function () {
        var a = {row: this._config.headers};
        var b = new actuate.common.web.widget.control.Grid.Row(a);
        b.appendTo(this._element)
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="gridwrap_' + a + '" ' + ' class="acGridContainer"' + ">";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.LayoutListener = actuate.common.web.Class.create();
actuate.common.web.widget.layout.LayoutListener.prototype = {
    _listener: null, initialize: function () {
        this._listener = []
    }, addListener: function (a, b) {
        this._listener[a] = b
    }, removeListener: function (a) {
        delete this._listener[a]
    }, invokeListener: function () {
        var a = arguments[0];
        if (!a) return;
        var b = this._listener[a];
        if (b) {
            var c = [];
            for (var d = 1; d < arguments.length; d++) {
                c.push(arguments[d])
            }
            return b.apply(this, c)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.NavList = actuate.common.web.Class.create();
actuate.common.web.widget.layout.NavList.prototype = {
    _config: null,
    _onCategoryClick: null,
    _activeMenu: null,
    _innerItemArray: new Array,
    _overflowThreshold: 20,
    initialize: function (a) {
        this._config = a;
        this.initComponent()
    },
    initComponent: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        this._navlistId = a;
        var b = this.getTemplate();
        this._element = actuate.common.web.$(b)
    },
    appendTo: function (a) {
        this._element.appendTo(a);
        this.render()
    },
    getLeftNavId: function () {
        return "navleft" + this._navlistId
    },
    getRightNavId: function () {
        return "navcnt_" + this.getLeftNavId()
    },
    getTemplate: function () {
        var a = this.getLeftNavId();
        var b = "<div class='ac-main-content-area'>" + "<div class='ac-side-menu'>" + "<div id='navwrap" + a + "'>" + this.getLeftNavTemplate(a) + "</div>" + "</div>" + "<div class='ac-right-content-container ac-table-content-area' id='" + this.getRightNavId() + "'>" + "</div>" + "</div>";
        return b
    },
    getLeftNavTemplate: function (a) {
        var b = "<div class='accordion' id='{id}'>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    },
    render: function () {
        this._renderMenus();
        this._rendered = true
    },
    refreshLeftNavContents: function (a) {
        this._renderInnerListDiv(a.itemIndex, a.items, a.appendTo)
    },
    _renderMenus: function () {
        var a = "<div class='accordion-group'></div>";
        var b = null;
        var c = this;
        if (this._config) {
            var d = this.getLeftNavId();
            var e = actuate.common.web.$("#" + d);
            e.empty();
            for (var f = 0; f < this._config.length; f++) {
                var g = this._config[f];
                if (!g.isHidden && g.isActive || !this._activeMenu) {
                    this.setActiveMenu(g)
                }
                if (!g.isHidden) {
                    b = actuate.common.web.$(a);
                    b.appendTo(e);
                    this._renderListHeader(f, g, g.name, b);
                    if (g.menu != undefined) {
                        this._renderMenuItemDiv(f, g, b)
                    }
                }
            }
        }
        this.renderContent(this._activeMenu)
    },
    _getMenuItemId: function (a) {
        return this.getLeftNavId() + "_" + a
    },
    _getMenuInnerItemId: function (a) {
        return this.getLeftNavId() + "_inneritem_" + a
    },
    _renderListHeader: function (a, b, c, d) {
        var e = this.getLeftNavId();
        var f = "<div class='accordion-heading' title='" + b.text + "'></div>";
        var g = actuate.common.web.$(f);
        g.appendTo(d);
        var h = "<a data-parent='#" + e + "' href='#" + this._getMenuItemId(a) + "'>";
        if (b.menu != undefined) {
            h += "<a class='accordion-toggle  collapse in' data-toggle='collapse' data-parent='#" + e + "' href='#" + this._getMenuItemId(a) + "'> ";
            h += "<i class='icon-ygg-chevron-down accordion-toggle-icon'></i>"
        }
        h += b.text + "</a>";
        var i = actuate.common.web.$(h);
        i.appendTo(g);
        if (!b.menu) {
            i.click(actuate.common.web.Method.bind2(this.onMenuClick, this, b))
        }
    },
    _renderMenuItemDiv: function (a, b, c) {
        var d = this;
        var e = actuate.common.web.util.Utility.createUniqueControlID();
        var f = actuate.common.web.util.Utility.createUniqueControlID();
        var g = "<div id='" + this._getMenuItemId(a) + "' class='accordion-body collapse in'>" + "<div id='" + e + "'></div>" + "<div id='" + f + "' style='height:500px;'>" + "<ul class='accordion-inner selectable'>" + "</ul>" + "</div>" + "</div>";
        var h = actuate.common.web.$(g);
        h.appendTo(c);
        if (b.menu.length > this._overflowThreshold) {
            h.find("#" + f).css("overflow-y", "scroll")
        }
        if (b.searchconfig) {
            var i = actuate.common.web.$("#" + e);
            var j = {placeholder: b.searchconfig.placeHolder};
            var k = new actuate.common.web.widget.control.TextField(j);
            k.appendTo(i);
            k.css("width", "170px");
            var l;
            i.find("input").keyup(actuate.common.web.Method.bind2(function (a, c) {
                var e = i.find("input");
                clearTimeout(l);
                l = setTimeout(function () {
                    if (c.keyCode != 0) {
                        if (c.keyCode != 13) {
                            data = e[0].value
                        }
                        actuate.common.web.$(".search-delete-text-icon").css("display", "block")
                    } else {
                        data = e[0].value.substring(0, e.value.length - 1)
                    }
                    var f = {
                        refreshLeftNavContents: actuate.common.web.Method.bind(d.refreshLeftNavContents, d),
                        itemIndex: a,
                        name: b.name,
                        appendTo: h,
                        filter: data
                    };
                    b.searchconfig.searchCallBack(null, f)
                }, 500)
            }, i.find("input"), a))
        }
        this._renderInnerListDiv(a, b.menu, h)
    },
    _renderInnerListDiv: function (a, b, c) {
        if (c.length) {
            c.find("ul").empty()
        }
        if (b) {
            for (var d = 0; d < b.length; d++) {
                this._renderListInnerItems(b[d], d).appendTo(c.find("ul"))
            }
        }
    },
    setActiveMenu: function (a) {
        if (a.isActive || !this._activeMenu) {
            if (a.renderer) {
                this._activeMenu = a
            }
        }
    },
    _renderListInnerItems: function (a, b) {
        var c = "<li id='" + this._getMenuInnerItemId(b) + "'><a><div>" + a.text + "</div></a></li>";
        var d = actuate.common.web.$(c);
        if (a.isActive || !this._activeMenu) {
            d.addClass("selected")
        }
        var e = d.find("div");
        e.addClass("cliptext");
        var f = function () {
            e.attr("title", a.text)
        };
        d.mouseenter(f);
        this._innerItemArray.push(this._getMenuInnerItemId(b));
        d.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a));
        this.setActiveMenu(a);
        return d
    },
    renderContent: function (a) {
        if (a.renderer) {
            var b = this.getRightNavId();
            var c = actuate.common.web.$("#" + b);
            c.empty();
            if (a.text && !a.isHidden) {
                a.renderer.render(b, a.text)
            } else {
                a.renderer.render(b)
            }
        }
    },
    _findMenuItem: function (a, b) {
        if (!a) return null;
        if (a.name === b) {
            return a
        }
        if (a.menu) {
            var c = a.menu;
            for (var d in c) {
                var e = this._findMenuItem(c[d], b);
                if (e) {
                    return e
                }
            }
        }
        return null
    },
    refresh: function (a) {
        for (var b = 0; b < this._config.length; b++) {
            var c = this._findMenuItem(this._config[items], a);
            if (c) {
                this.renderContent(c);
                return true
            }
        }
    },
    onMenuClick: function (a, b) {
        if (this._onCategoryClick) {
            this._onCategoryClick(a.name)
        }
        this.renderContent(a);
        for (var c in this._innerItemArray) {
            if (actuate.common.web.$("#" + this._innerItemArray[c]).hasClass("selected")) {
                actuate.common.web.$("#" + this._innerItemArray[c]).removeClass("selected")
            }
        }
        actuate.common.web.$("#" + b.currentTarget.id).addClass("selected")
    },
    onUnload: function () {
        this._element.remove()
    },
    setOnCategoryClick: function (a) {
        this._onCategoryClick = a
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.NavMenu = actuate.common.web.Class.create();
actuate.common.web.widget.layout.NavMenu.prototype = {
    CONTENT_ID_PREFIX: "act_menu_cnt_",
    HREF_ID_PREFIX: "act_menu_href_",
    LOGOUT_ID_PREFIX: "act_menu_logout_",
    PROFILE_ID_PREFIX: "act_menu_profile_",
    _configMenus: null,
    _selectedMenu: null,
    _logoutHandler: null,
    initialize: function (a) {
        this._configMenus = {main: {name: "main", items: []}, profile: {name: "profile", items: []}};
        this._containerId = a;
        this._selectedMenu = {};
        this.initComponent()
    },
    initComponent: function () {
        var a = this.getTemplate();
        this._element = actuate.common.web.$(a);
        this._element.attr("id", "act_menu_panel-" + this._containerId + "-" + actuate.common.web.$(".act_menu_panel").length)
    },
    addMenuItem: function (a) {
        this._configMenus.main.items.push(a)
    },
    addProfileMenuItem: function (a) {
        this._configMenus.profile.items.push(a)
    },
    onMenuClick: function (a, b) {
        this._setActiveMenu(a, b)
    },
    render: function () {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering Menu - already rendered")
        } else {
            this._renderMenus();
            this._setActiveMenu(0, this._configMenus.main);
            this._renderProfile();
            this._rendered = true
        }
    },
    getTemplate: function () {
        var a = '<div class="">' + '<div class="navbar navbar-inverse navbar-fixed-top"><div class="navbar-inner">' + '<div class="container">' + '<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + '<span class="icon-bar"></span>' + "</a>" + '<a class="aclogo brand" href="#">ACTUATE</a>' + '<div class="nav-collapse collapse">' + '<div  id="' + this._getProfileId() + '"' + ' class="dropdown acprofile"></div>' + "</div>" + "</div>" + "</div></div>" + '<div class="acnavbar"><div class="navbar">' + '<div class="container">' + '<ul class="acmenu nav pull-right">' + "</ul>" + "</div>" + "</div></div>" + "</div>";
        return a
    },
    getProfileTemplate: function (a, b) {
        var c = '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown"><i class="icon-user icon-white"></i> <i class="accaret-white"></i></a>' + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    _getSubMenuLabelTemplate: function (a) {
        return a + ' <i class="caret"></i>'
    },
    getSubMenuTemplate: function (a, b) {
        var c = '<li><div class="dropdown submenu">' + '<a id="{id}" role="button" class="dropdown-toggle" data-toggle="ac_dropdown">' + this._getSubMenuLabelTemplate(b) + "</a>" + '<ul id="sub{id}" class="dropdown-menu" role="menu" aria-labelledby="{id}">' + "</ul>" + "</div></li>";
        c = c.replace(/{id}/g, a);
        c = c.replace(/\{label\}/g, b);
        return c
    },
    _createSingleMenuItem: function (a, b, c) {
        var d = b.text;
        var e = b.type;
        var f = actuate.common.web.$('<a class="acmenu">' + d + "</a>");
        f.click(actuate.common.web.Method.bind2(this.onMenuClick, this, a, c));
        var g = actuate.common.web.$("<li>");
        g.append(f);
        if (e == "external") {
            f.append(actuate.common.web.$('<i class="icon-share"></i>'
            ))
        }
        return g
    },
    _createMenuItem: function (a, b, c, d) {
        var e = b.menu;
        var f = null;
        if (!e) {
            f = this._createSingleMenuItem(a, b, d);
            c.append(f);
            return
        }
        var g = this._getHrefId(a, d);
        var h = this.getSubMenuTemplate(g, b.text);
        var i = actuate.common.web.$(h);
        c.append(i);
        var j = i.find("#sub" + g);
        for (var k = 0; k < e.length; k++) {
            var l = e[k];
            f = this._createSingleMenuItem(a + "_" + k, l, d);
            j.append(f)
        }
    },
    _getContentId: function (a, b) {
        return this.CONTENT_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getHrefId: function (a, b) {
        return this.HREF_ID_PREFIX + this._containerId + b.name + "-" + a
    },
    _getLogoutId: function () {
        return this.LOGOUT_ID_PREFIX + this._containerId
    },
    _getProfileId: function () {
        return this.PROFILE_ID_PREFIX + this._containerId
    },
    _setActiveMenu: function (a, b) {
        var c = this._selectedMenu.idx;
        if (this._selectedMenu.config) {
            actuate.common.web.$("#" + this._getHrefId(c, this._selectedMenu.config)).removeClass("active");
            actuate.common.web.$("#" + this._getContentId(c, this._selectedMenu.config)).hide()
        }
        this._selectedMenu.idx = a;
        this._selectedMenu.config = b;
        actuate.common.web.$("#" + this._getHrefId(a, b)).addClass("active");
        actuate.common.web.$("#" + this._getContentId(a, b)).show();
        this._renderContentMenu(a, b)
    },
    _renderProfile: function () {
        var a = this._getProfileId();
        var b = a + "_" + actuate.common.web.util.Utility.createUniqueControlID();
        var c = this.getProfileTemplate(b, null);
        var d = actuate.common.web.$(c);
        var e = actuate.common.web.$("#" + a);
        e.append(d);
        var f = e.find("#sub" + b);
        for (var g = 0; g < this._configMenus.profile.items.length; g++) {
            this._createMenuItem(g, this._configMenus.profile.items[g], f, this._configMenus.profile)
        }
    },
    _renderMenus: function () {
        this._element.prependTo(actuate.common.web.$("#" + this._containerId));
        var a = this._element.find(".nav");
        for (var b = 0; b < this._configMenus.main.items.length; b++) {
            this._createMenuItem(b, this._configMenus.main.items[b], a, this._configMenus.main)
        }
    },
    _updateParentLabel: function (a, b, c) {
        var d = this._getHrefId(b, c);
        var e = this._element.find("#" + d)[0];
        var f = this._getSubMenuLabelTemplate(a);
        e.innerHTML = "";
        e.innerHTML = f
    },
    _renderContentMenu: function (a, b) {
        var c = this._getContentRenderer(a, b);
        c.render(this._getContentId(a, b))
    },
    _getContentRenderer: function (a, b) {
        var c = b.items[a];
        if (c) {
            return c.renderer
        }
        var d = a.split("_");
        c = b.items[d[0]];
        var e = 0;
        for (var f = 1; f < d.length; f++) {
            e = d[f];
            c = c.menu[e]
        }
        this._updateParentLabel(c.text, d[0], b);
        return c.renderer
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.TabPanel = actuate.common.web.Class.create();
actuate.common.web.widget.layout.TabPanel.prototype = {
    CONTENT_ID_PREFIX: "act_tab_cnt_",
    _containerId: null,
    _element: null,
    _tabNames: null,
    _tabContentDivIds: null,
    _tabContents: null,
    _rendered: false,
    _defaultSize: null,
    _tabs: null,
    initialize: function (a, b) {
        this._tabNames = new Array;
        this._tabContentDivIds = new Array;
        this._tabContents = new Array;
        this._containerId = a;
        this.CONTENT_ID_PREFIX += a;
        this._component = b;
        var c = actuate.common.web.$('<div class="act-tab-panel tab-content"/>');
        this._tabPanelName = b + "_act_tab_panel-" + a + "-" + actuate.common.web.$(".act_tab_panel").length;
        c.attr("id", "act_tab_panel-" + a + "-" + actuate.common.web.$(".act_tab_panel").length);
        c.attr("name", this._tabPanelName);
        var d = actuate.common.web.$('<ul class="nav nav-tabs"></ul>');
        c.append(d);
        this._element = c;
        this._tabs = d
    },
    onSelect: function (a) {
        var b = a.data._this;
        var c = a.data.index;
        actuate.common.web.util.Logging.log("selected index " + c);
        for (var d = 0; d < b._tabContentDivIds.length; d++) {
            actuate.common.web.$("#" + b._tabContentDivIds[d]).removeClass("acwebtive");
            actuate.common.web.$("#link_" + b._tabContentDivIds[d]).removeClass("acwebtive")
        }
        actuate.common.web.$("#link_" + b._tabContentDivIds[c]).addClass("acwebtive");
        actuate.common.web.$("#" + b._tabContentDivIds[c]).addClass("acwebtive");
        b.renderTab(c)
    },
    render: function (a) {
        if (this._rendered) {
            actuate.common.web.util.Logging.log("Not rendering TabPanel - already rendered")
        } else {
            this._element.appendTo(actuate.common.web.$("#" + a));
            this._rendered = true
        }
        this.reSize(this._defaultSize);
        var b = this.getSelectedContent();
        if (b) {
            b.render(this.getSelectedContentDivId())
        }
    },
    renderTab: function (a) {
        this._tabContents[a].render(this._tabContentDivIds[a])
    },
    getSelectedTabIndex: function () {
        return actuate.common.web.$.inArray(this.getSelectedContentDivId(), this._tabContentDivIds)
    },
    getSelectedContent: function () {
        var a;
        if (this._tabContents.length == 0) {
            a = null
        } else {
            var b = this.getSelectedTabIndex();
            if (b != -1) {
                a = this._tabContents[b]
            } else {
                a = null
            }
        }
        return a
    },
    getSelectedContentDivId: function () {
        var a = actuate.common.web.$("div[name=" + this._tabPanelName + "]");
        var b = a.find(".tab-pane.acwebtive");
        var c = null;
        if (b) {
            c = b.attr("id")
        } else {
            actuate.common.web.util.Logging.log("Failed to find selected tab by '.tab-pane.acwebtive'")
        }
        return c
    },
    addTab: function (a, b, c, d) {
        if (actuate.common.web.$.inArray(a, this._tabNames) != -1) {
            actuate.common.web.util.Logging.log("Tab with the same name already exists: " + a);
            actuate.common.web.jQuery.error("Tab with the same name already exists: " + a)
        }
        var e = this._element;
        var f = this._tabContents.length;
        var g = this._component + "_" + this.CONTENT_ID_PREFIX + "-" + f;
        if (!d) {
            d = ""
        }
        var h = actuate.common.web.$('<div class="tab-pane ' + d + '" id="' + g + '"></div>');
        e.append(h);
        var i = actuate.common.web.Method.bind(this.onSelect, this);
        ahrefId = "#" + g;
        linkId = "link_" + g;
        var j = actuate.common.web.$("<li id=" + linkId + " class=" + d + '><a data-toggle="tab" href=' + ahrefId + ">" + b + "</a></li>");
        j.click({index: f, _this: this}, i);
        this._tabs.append(j);
        this._tabNames[f] = a;
        this._tabContents[f] = c;
        this._tabContentDivIds[f] = g;
        return f
    },
    removeTab: function (a) {
        this._element.tabs("remove", a);
        this._tabNames.splice(a, 1);
        this._tabContentDivIds.splice(a, 1);
        this._tabContents.splice(a, 1)
    },
    getTabContent: function (a) {
        return this._tabContents[a]
    },
    getTabIndex: function (a) {
        return actuate.common.web.$.inArray(a, this._tabNames)
    },
    clearTab: function (a) {
        actuate.common.web.$("#" + this._tabContentDivIds[a], actuate.common.web.$("#" + this._containerId)).html("")
    },
    setTabContent: function (a, b) {
        this._tabContents[a] = b;
        if (this.getSelectedTabIndex() == a) {
            this.renderTab(a)
        }
    },
    selectTab: function (a) {
        this._element.tabs("select", a)
    },
    setSize: function (a) {
        this._defaultSize = a
    },
    reSize: function (a) {
        if (this._rendered && a) {
            if (a.width) {
                this._element[0].style.width = a.width
            }
            if (a.height) {
                this._element[0].style.height = a.height
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.Table = actuate.common.web.Class.create();
actuate.common.web.widget.layout.Table.prototype = {
    _config: null, _rows: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._rows = [];
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        this._appendItems()
    }, onUnload: function () {
        this._rows = null;
        this._element.html("");
        this._element.remove()
    }, _appendItems: function () {
        var a = this._getTableTag();
        this._tableEl = new actuate.common.web.$(a);
        this._tableEl.appendTo(this._element);
        this._appendHeader(this._tableEl);
        this._appendColgroup(this._tableEl);
        var b = this._config.store;
        if (!b) return;
        for (var c = 0; c < b.length; c++) {
            var d = c;
            var e = {
                row: this._configColumn(b[c]),
                rowIndex: d,
                template: "<tr class=''" + "{rowAttr}" + ">" + "</tr>",
                colHeaders: this._config.headers
            };
            var f = new actuate.common.web.widget.control.Grid.Row(e);
            this._appendRow(f, d)
        }
    }, getRow: function (a) {
        return this._rows[a]
    }, _appendRow: function (a, b) {
        a.appendTo(this._tableEl);
        this._rows[b] = a
    }, addRow: function (a) {
        var b = this._config.store;
        if (!b) {
            b = [];
            this._config.store = b
        }
        b.push(a);
        var c = b.length;
        var d = {
            row: this._configColumn(a),
            rowIndex: c,
            template: "<tr class='' " + "{rowAttr}" + ">" + "</tr>",
            colHeaders: this._config.headers
        };
        var e = new actuate.common.web.widget.control.Grid.Row(d);
        this._appendRow(e, c)
    }, _configColumn: function (a) {
        a.template = '<td class="' + "{class.name}" + '"data-name="' + "{data.name}" + '"data-label="' + "{data.label}" + '">' + "</td>";
        return a
    }, _configHeaderColumn: function (a) {
        if (!a) return null;
        a.template = "<th></th>";
        return a
    }, _appendHeader: function (a) {
        var b = {row: this._configHeaderColumn(this._config.headers), template: "<tr></tr>"};
        var c = new actuate.common.web.$("<thead></thead>");
        var d = new actuate.common.web.widget.control.Grid.Row(b);
        d.appendTo(c);
        c.appendTo(a)
    }, _appendColgroup: function (a) {
        if (this._config.widths) {
            var b = new actuate.common.web.$("<colgroup></colgroup>");
            for (var c in this._config.widths) {
                var d = new actuate.common.web.$('<col span="1" style="width: ' + this._config.widths[c] + ';">');
                d.appendTo(b)
            }
            b.appendTo(a)
        }
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getTableTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = "<table class='table table-hover table-bordered-bottom' id=\"tablwrap_" + a + '">';
        return b
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="tblwrap_' + a + '"' + ' class="acTblDivContainer"' + ">";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ToolbarItem = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ToolbarItem.prototype = {
    initialize: function (a) {
        this._config = a;
        this._appendItem(this._config)
    }, _appendItem: function (a) {
        var b = actuate.common.web.Method.bind(a.listener.onItemClick, a.listener);
        var c = actuate.common.web.Method.bind2(this._itemHandler, this, b);
        a.listener.onItemClick = c;
        var d = new actuate.common.web.widget.control.GridItem(a);
        d.appendTo(a.element)
    }, _itemHandler: function () {
        if (this._config.handler) {
            this._config.handler.apply(this, arguments)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ToolbarLayout = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ToolbarLayout.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="toolbarwrap_' + a + "\" class='table-data-header'></div>";
        return b
    }, appendTo: function (a) {
        this._element.appendTo(a);
        if (this._config.headers.items) {
            this._header = new actuate.common.web.widget.layout.BaseHeaderbar(this._config.headers);
            this._header.appendTo(this._element)
        } else {
            this._appendToolbarItems()
        }
    }, onUnload: function () {
        this._element.html("")
    }, _appendToolbarItems: function () {
        this._wrapper = actuate.common.web.$("<div class='table-data-header-inner'></div>");
        this._wrapper.appendTo(this._element);
        this._pageObject = actuate.common.web.$("<ul class='pull-right text-pagination'></ul>");
        this._pageObject.appendTo(this._wrapper);
        this._menuObject = actuate.common.web.$("<ul class='data-table-inline-menu-items'></ul>");
        this._menuObject.appendTo(this._wrapper);
        for (var a = 0; a < this._config.store.length; a++) {
            for (var b = 0; b < this._config.store[a].items.length; b++) {
                this._appendItems(this._config.store[a].items[b])
            }
        }
    }, _appendItems: function (a) {
        var b = null;
        var c = actuate.common.web.Method.bind(this._toolbarHandler, this);
        for (var d = 0; d < a.items.length; d++) {
            a.items[d].handler = c;
            switch (a.items[d].type) {
                case"pageinfo":
                    a.items[d].element = this._pageObject;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a.items[d]);
                    break;
                case"emptyadd":
                    b = this._getEmptyAddComponent(a.items[d]);
                    b.appendTo(this._menuObject);
                    break;
                default:
                    var e = new actuate.common.web.$("<li class='inline-item'></li>");
                    e.appendTo(this._menuObject);
                    a.items[d].element = e;
                    b = new actuate.common.web.widget.layout.ToolbarItem(a.items[d]);
                    break
            }
        }
    }, _getEmptyAddComponent: function (a) {
        var b = actuate.common.web.$("<li class='inline-item'></li>");
        return b
    }, _toolbarHandler: function (a, b, c, d) {
        if (a) {
            var e = null;
            if (d) {
                e = {event: d}
            }
            a(b, e)
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.layout");
actuate.common.web.widget.layout.ToolbarTable = actuate.common.web.Class.create();
actuate.common.web.widget.layout.ToolbarTable.prototype = {
    _config: null, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        this._createElement()
    }, appendTo: function (a) {
        this._element.appendTo(a);
        if (this._config.headers.items) {
            this._header = new actuate.common.web.widget.layout.BaseHeaderbar(this._config.headers);
            this._header.appendTo(this._element)
        } else {
            this._appendItems()
        }
    }, onUnload: function () {
        this._element.html("");
        this._element.remove()
    }, _appendItems: function () {
        var a = this._getTableTag();
        this._tableEl = new actuate.common.web.$(a);
        this._tableEl.appendTo(this._element);
        this._appendHeader(this._tableEl);
        var b = this._config.store;
        if (!b) return;
        for (var c = 0; c < b.length; c++) {
            var d = {
                row: this._configColumn(b[c]),
                rowIndex: c,
                template: "<tr class='pointer'" + "{rowAttr}" + ">" + "</tr>",
                colHeaders: this._config.headers
            };
            var e = new actuate.common.web.widget.control.Grid.Row(d);
            e.appendTo(this._tableEl)
        }
    }, addRow: function (a) {
        var b = this._config.store;
        if (!b) {
            b = [];
            this._config.store = b
        }
        b.push(a);
        var c = {
            row: this._configColumn(a),
            rowIndex: b.length,
            template: "<tr class='pointer' " + "{rowAttr}" + ">" + "</tr>",
            colHeaders: this._config.headers
        };
        var d = new actuate.common.web.widget.control.Grid.Row(c);
        d.appendTo(this._tableEl)
    }, _configColumn: function (a) {
        a.template = '<td data-name="' + "{data.name}" + '"data-label="' + "{data.label}" + '">' + "</td>";
        return a
    }, _configHeaderColumn: function (a) {
        if (!a) return null;
        a.template = "<th></th>";
        return a
    }, _appendHeader: function (a) {
        var b = {row: this._configHeaderColumn(this._config.headers), template: "<tr></tr>"};
        var c = new actuate.common.web.$("<thead></thead>");
        var d = new actuate.common.web.widget.control.Grid.Row(b);
        d.appendTo(c);
        c.appendTo(a)
    }, _createElement: function () {
        var a = this._getHTMLTag();
        this._element = new actuate.common.web.$(a)
    }, _getTableTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = "<table class='toolbartable table-hover' id=\"tablwrap_" + a + '">';
        return b
    }, _getHTMLTag: function () {
        var a = actuate.common.web.util.Utility.createUniqueControlID();
        var b = '<div id="tblwrap_' + a + '"' + ' class="acTblDivContainer"' + ">";
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.DefaultNotification = actuate.common.web.Class.create();
actuate.common.web.widget.notification.DefaultNotification.prototype = {
    _prefix: "ac_notif_",
    _notifWrapCont: "ac_wrap_",
    _globalNotificationId: null,
    _delay: 15e3,
    initialize: function () {
        if (this.__extending) return;
        this._globalNotificationId = this._prefix + actuate.common.web.util.Utility.createUniqueControlID()
    },
    setNotificationMessage: function (a) {
        this._msg = a
    },
    getNotificationMessage: function () {
        return this._msg
    },
    getNotificationClass: function () {
        return "modal-notification"
    },
    getTemplate: function (a) {
        var b = this.getNotificationClass();
        var c = '<div class="modal ' + b + ' hide fade" tabindex="-1" role="dialog" aria-hidden="true" id="' + a + '">' + '<i class="icon-ygg-close modal-notification-close-icon" data-dismiss="modal"></i>' + this.getNotificationMessage() + "</div>";
        return c
    },
    render: function (a) {
        this._containerId = a;
        this._showNotification();
        this._delayHideNotification()
    },
    _getNotificationId: function () {
        if (this._containerId) {
            return this._prefix + this._containerId
        }
        return this._globalNotificationId
    },
    _getNotificationTemplate: function (a) {
        var b = '<div class="ac" id="' + this._getNotificationWrapperId() + '">' + this.getTemplate(a) + "</div>";
        return b
    },
    _getNotificationWrapperId: function () {
        return this._notifWrapCont + this._getNotificationId()
    },
    _initNotification: function () {
        this._removeNotification();
        var a = this._getNotificationId();
        var b = this._getNotificationTemplate(a);
        var c = actuate.common.web.$(b);
        var d = actuate.common.web.$("#" + this._containerId);
        if (d.length != 0) {
            c.appendTo(d)
        } else {
            c.appendTo(document.body)
        }
    },
    _getCurrentNotification: function () {
        var a = this._getNotificationId();
        var b = actuate.common.web.$("#" + a);
        return b
    },
    _showNotification: function () {
        this._initNotification();
        var a = this._getCurrentNotification();
        a.modal({backdrop: false});
        this.addNotificationListeners()
    },
    addNotificationListeners: function () {
        var a = actuate.common.web.Method.bind(this._clearTimeOut, this);
        var b = actuate.common.web.Method.bind(this._delayHideNotification, this);
        var c = this._getCurrentNotification()
    },
    _removeNotification: function () {
        var a = actuate.common.web.$("#" + this._getNotificationWrapperId());
        if (a.length != 0) {
            a.remove()
        }
    },
    _clearTimeOut: function () {
        if (this._timer) {
            window.clearTimeout(this._timer);
            this._timer = null
        }
        this._removeNotification()
    },
    _delayHideNotification: function () {
        var a = actuate.common.web.Method.bind(this._hideNotification, this);
        this._timer = window.setTimeout(a, this._delay)
    },
    _hideNotification: function () {
        var a = this._getCurrentNotification();
        a.modal("hide");
        this._clearTimeOut()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.ErrorNotification = actuate.common.web.Class.extendClass(actuate.common.web.widget.notification.DefaultNotification, {
    initialize: function () {
        if (this.__extending) return;
        actuate.common.web.widget.notification.ErrorNotification.superclass.initialize.call(this)
    }, getNotificationClass: function () {
        return "modal-notification-error"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.InfoNotification = actuate.common.web.Class.extendClass(actuate.common.web.widget.notification.DefaultNotification, {
    initialize: function () {
        if (this.__extending) return;
        actuate.common.web.widget.notification.InfoNotification.superclass.initialize.call(this)
    }, getNotificationClass: function () {
        return "modal-notification-info"
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.notification");
actuate.common.web.widget.notification.Notification = actuate.common.web.Class.create();
actuate.common.web.widget.notification.Notification.prototype = {
    initialize: function () {
        if (this.__extending) return;
        this._defaultNotification = new actuate.common.web.widget.notification.DefaultNotification;
        this._errorNotification = new actuate.common.web.widget.notification.ErrorNotification;
        this._infoNotification = new actuate.common.web.widget.notification.InfoNotification
    }, _showNotification: function (a, b) {
        a.setNotificationMessage(b);
        a.render()
    }, showDefaultNotification: function (a) {
        this._showNotification(this._defaultNotification, a)
    }, showErrorNotification: function (a) {
        this._showNotification(this._errorNotification, a)
    }, showInfoNotification: function (a) {
        this._showNotification(this._infoNotification, a)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui");
actuate.common.web.widget.ui.AbstractNavList = actuate.common.web.Class.create();
actuate.common.web.widget.ui.AbstractNavList.prototype = {
    initialize: function (a) {
        if (this.__extending) return
    }, onCategoryClick: function (a) {
    }, getNavConfig: function () {
    }, getHeaderConfigItems: function () {
    }, onHeaderClickItems: function (a, b) {
    }, getTitle: function () {
    }, getIconText: function (a) {
    }, getLocalizedString: function (a) {
        return a
    }, getAddEditId: function () {
        return this._addEditId
    }, getMainId: function () {
        return this._mainId
    }, showAddEdit: function (a) {
        var b = actuate.common.web.$("#" + this._mainId);
        var c = actuate.common.web.$("#" + this._addEditId);
        if (a) {
            b.hide();
            c.show()
        } else {
            b.show();
            c.hide()
        }
    }, refresh: function (a) {
        this._nav.refresh(a)
    }, render: function (a) {
        var b = actuate.common.web.$("#" + a);
        b.empty();
        this._viewID = a;
        this._addEditId = "addedit_" + this._viewID;
        this._mainId = "main_" + this._viewID;
        var c = actuate.common.web.$('<div id="' + this._mainId + '"></div>');
        c.appendTo(b);
        var d = actuate.common.web.$('<div id="' + this._addEditId + '"></div>');
        d.appendTo(b);
        var e = {category: this.getNavConfig(), header: this.getDefaultConfigHeader()};
        this._nav = new actuate.common.web.widget.layout.CategoryNavList(e);
        this._nav.setOnCategoryClick(actuate.common.web.Method.bind(this.onCategoryClick, this));
        this._nav.appendTo(c)
    }, getHeaderConfigTlbarItems: function () {
        var a = "deactive";
        var b = actuate.common.web.Method.bind(this.onHeaderClickItems, this);
        var c = "<h2 class='view-header-title view-header-title-left'>" + "{value}" + "</h2>";
        var d = actuate.common.web.widget.control.GridUtil.generateItem(null, this.getTitle(), null, null, null, null, null, c);
        var e;
        if (typeof this.getSearchLabel != "undefined") {
            e = actuate.common.web.widget.control.GridUtil.generateItem("search", this.getSearchLabel(), "search", null, a, b, "btn", null)
        } else {
            e = actuate.common.web.widget.control.GridUtil.generateItem("search", null, "search", null, a, b, "btn", null)
        }
        var f = {
            items: [{colSize: 2, items: ""}, {colSize: 5, items: d}, {
                colSize: 4,
                css: "acsearch-right",
                items: e
            }]
        };
        return f
    }, getDefaultConfigHeader: function () {
        var a = "deactive";
        var b = "<h2 class='view-header-title view-header-title-left'>" + "{value}" + "</h2>";
        var c = actuate.common.web.widget.control.GridUtil.generateItem(null, this.getTitle(), null, null, null, null, null, b);
        var d = {items: [{colSize: 12, items: c}]};
        return d
    }, updateHeader: function (a) {
        this._nav.renderHeader(a)
    }, onUnload: function () {
        this._nav.onUnload()
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.model");
actuate.common.web.widget.ui.model.ControlModel = actuate.common.web.Class.create();
actuate.common.web.widget.ui.model.ControlModel.prototype = {
    initialize: function (a) {
        if (this.__extending) return;
        this._items = a;
        this.initConfig()
    }, initConfig: function () {
        this._fields = [];
        this._config = [];
        this._initConfig(this._items)
    }, _initFields: function (a) {
        var b = {name: a.name, type: a.type ? a.type : "string"};
        this._fields.push(b);
        this._config[b.name] = b
    }, _initConfig: function (a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            this._initFields(c);
            if (a.items) {
                this._initConfig(a.items)
            }
        }
    }, setFields: function (a) {
        this._fields = a
    }, getType: function (a) {
        var b = this._config[a];
        if (undefined === b) return null;
        var c = b.type;
        return c
    }, getJson: function () {
        var a = {};
        for (var b = 0; b < this._fields.length; b++) {
            var c = this._fields[b];
            if (c.name !== "passwordConfirm") {
                a[c.name] = c.value
            }
        }
        return a
    }, resetDirty: function () {
        for (var a in this._config) {
            var b = this._config[a];
            if (b && b.name) {
                b.orgValue = b.value
            }
        }
    }, isDirty: function () {
        for (var a in this._config) {
            var b = this._config[a];
            if (b && b.name) {
                if (b.orgValue !== undefined) {
                    if (b.value !== b.orgValue) {
                        return true
                    }
                }
            }
        }
        return false
    }, setData: function (a, b) {
        var c = this._config[a];
        if (c.type === "string" || c.type === "text") {
            b += ""
        } else if (c.type === "boolean") {
            b = b === true || b === "true" || b === "True" ? true : false
        }
        c.value = b;
        if (c.orgValue === undefined) {
            c.orgValue = b
        }
    }, getData: function (a) {
        var b = this._config[a];
        if (b) {
            return b.value
        }
        return undefined
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.AbstractControlItems = actuate.common.web.Class.create();
actuate.common.web.widget.ui.view.common.AbstractControlItems.prototype = {
    _items: [], _config: null, _isDirty: null, initialize: function () {
        if (this.__extending) return;
        this.initControls()
    }, getConfiguration: function () {
        var a = this.getControlItems();
        var b = {labelClass: "dlgLabelBox", objectModel: new actuate.common.web.widget.ui.model.ControlModel(a)};
        return b
    }, getControlItems: function () {
        return []
    }, getLocalizedString: function (a) {
        return ""
    }, setHiddenItems: function (a) {
        this._hiddenItems = a
    }, isHiddenItem: function (a, b) {
        if (this._hiddenItems && this._hiddenItems[a]) {
            return true
        }
        if (b) {
            return b.isHidden()
        }
        return false
    }, initControls: function () {
        var a = this.getConfiguration();
        var b = this.getControlItems();
        this._config = a;
        this._items = [];
        var c = actuate.common.web.Method.bind(this.getLocalizedString, this);
        for (var d = 0; d < b.length; d++) {
            var e = b[d];
            var f = new actuate.common.web.widget.ui.view.common.ControlItem(e, c);
            this._items.push(f)
        }
    }, getItems: function () {
        return this._items
    }, getGroupItems: function (a) {
        return a.items
    }, validate: function () {
        var a = new Array;
        var b = null;
        var c = null;
        for (var d = 0; d < this._items.length; d++) {
            var e = this._items[d];
            if (e.isHidden()) {
                continue
            }
            var f = e.getControlInfo();
            var g = e.getValue();
            var h = this.getLocalizedString(f.labelKey);
            var i = e.validate();
            if (i === e.status.IS_EMPTY) {
                a.push({errorLabel: h, errorMessage: this.getLocalizedString("Msg.Dlg.Field.Is.Empty")})
            }
            if (f.fieldControl === "password") {
                if (f.name === "password") {
                    b = g
                } else if (f.name === "passwordConfirm" || f.name === "confirmpassword") {
                    c = g
                }
                if (b && c) {
                    if (b != c) {
                        a.push({errorLabel: " ", errorMessage: this.getLocalizedString("Msg.Passwords.Not.Match")})
                    }
                }
            }
            if (i === e.status.REG_EX_NOT_MATCH) {
                var j = f.regexTextKey ? f.regexTextKey : Msg.Dialog.Bad.Regex;
                a.push({errorLabel: " ", errorMessage: this.getLocalizedString(j)})
            }
        }
        if (a.length > 0) {
            return a
        } else {
            return true
        }
    }, _updateModelDataItem: function (a, b) {
        for (var c = 0; c < a.length; c++) {
            var d = a[c];
            if (d.isGroupItem()) {
                var e = d.getGroupItems();
                this._updateModelDataItem(e, b);
                continue
            }
            var f = d.getControlInfo();
            if (undefined === f.submitValue || f.submitValue) {
                var g = d.getValue();
                var h = d.getName();
                var i = b.getType(h);
                if (g && typeof g == "string" && f.fieldControl != "password") {
                    g = actuate.common.web.$.trim(g)
                }
                if (i === "date") {
                    g = this._makeJSONDate(g)
                }
                if (i != null) {
                    if (f.fieldType === "group" && f.fieldControl === "radio") {
                        g = d.getInputCtrl().getSelectedValue()
                    }
                    if (this._isDirty === null) {
                        this._isDirty = false
                    }
                    if (!this._isDirty && g != undefined) {
                        if (!this.isHiddenItem(h, d)) {
                            var j = b.getData(h);
                            if (j != undefined) {
                                if (j.toString() != g.toString()) {
                                    this._isDirty = true
                                }
                            }
                        }
                    }
                    b.setData(h, g)
                }
            }
        }
    }, resetDirty: function () {
        this._isDirty = null;
        var a = this._config.objectModel;
        if (a && a.resetDirty) {
            a.resetDirty()
        }
    }, isDirty: function () {
        if (this._isDirty === null) {
            var a = this.getData()
        }
        var b = this._config.objectModel;
        if (b && b.isDirty) {
            this._isDirty = b.isDirty()
        }
        return this._isDirty ? true : false
    }, getData: function () {
        var a = this._config.objectModel;
        this._updateModelDataItem(this._items, a);
        var b = a.getJson();
        return b
    }, _updateItemData: function (a, b) {
        for (var c = 0; c < a.length; c++) {
            var d = a[c];
            if (d.isGroupItem()) {
                var e = d.getGroupItems();
                this._updateItemData(e, b);
                continue
            }
            var f = d.getName();
            var g = b[f];
            if (undefined != g) {
                var h = this._config.objectModel.getType(f);
                switch (h) {
                    case"boolean":
                        g = this._getbooleanStringValue(g);
                        break;
                    case"date":
                        var i = this._makeStringDate(g);
                        g = i;
                        break
                }
                this._config.objectModel.setData(f, g);
                d.setValue(g)
            }
        }
    }, setData: function (a) {
        if (a != null) {
            this._updateItemData(this._items, a)
        }
    }, _getbooleanStringValue: function (a) {
        var b = this._getbooleanValue(a);
        return b + ""
    }, _getbooleanValue: function (a) {
        if (typeof a === "boolean") {
            return a
        }
        a = a + "";
        if (a.toLowerCase().charAt(0) !== "f") {
            return true
        }
        return false
    }, _makeJSONDate: function (a) {
        var b = a.split("/");
        var c = b[0] - 1;
        var d = b[1];
        var e = b[2] - 1900;
        var f = {minutes: 0, seconds: 0, hours: 0, month: c, year: e, date: d};
        return f
    }, _makeStringDate: function (a) {
        var b = "";
        b += a.month + 1;
        b += "/";
        b += a.date;
        b += "/";
        b += a.year + 1900;
        return b
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.AddEdit = actuate.common.web.Class.create();
actuate.common.web.widget.ui.view.common.AddEdit.prototype = {
    _config: null, initialize: function (a, b, c, d) {
        if (this.__extending) return;
        this._config = {containerId: a, title: b, content: c, handlers: d.handlers};
        this._initView()
    }, render: function () {
        var a = actuate.common.web.$("#" + this._config.containerId);
        a.html("");
        this._el.appendTo(a);
        this._createHeader(this._el);
        this._createContent(this._el);
        this._createFooter(this._el)
    }, _createHeader: function (a) {
        var b = actuate.common.web.$('<div id="header' + this._config.containerId + '" class="view-update-header"></div>');
        b.appendTo(a);
        var c = "<h1 class='acaddedit'>" + "{value}" + "</h1>";
        var d = this._config.handlers;
        var e = actuate.common.web.widget.control.GridUtil.generateItem(null, this._config.title, null, null, null, null, null, c);
        var f = actuate.common.web.widget.control.GridUtil.generateItem("back", d["backarrow"].title, "back", null, null, d["backarrow"].handler, "acaddedit-back", null);
        var g = actuate.common.web.widget.control.GridUtil.generateItem("save", d["save"].title, "save", null, null, d["save"].handler, "btn btn-inverse acAddEditPadRight", null);
        var h = actuate.common.web.widget.control.GridUtil.generateItem("cancel", d["cancel"].title, "cancel", null, null, d["cancel"].handler, "btn", null);
        var i = "<p class='acaddedit-emptyrow'></p>";
        var j = actuate.common.web.widget.control.GridUtil.generateItem(null, "", null, null, null, null, null, i);
        var k = {items: [{colSize: 10, items: [e]}, {colSize: 2, items: [g, h]}]};
        var l = {items: [{colSize: 12, items: [f]}]};
        var m = {items: [{colSize: 12, items: [j]}]};
        var n = {items: [{colSize: 2, items: [g, h]}]};
        var o = {store: [k, l, m]};
        var p = new actuate.common.web.widget.layout.Grid(o);
        p.appendTo(b)
    }, _createContent: function (a) {
        var b = "content" + this._config.containerId;
        var c = actuate.common.web.$('<div id="' + b + '" class="view-update-content"></div>');
        c.appendTo(a);
        if (this._config.content) {
            c.html("");
            this._config.content.render(b);
            this._rendered = true
        }
        return c
    }, getContent: function () {
        return this._config.content
    }, _createFooter: function (a) {
        var b = actuate.common.web.$('<div id="footer' + this._config.containerId + '" class="view-update-footer"></div>')
    }, _renderView: function () {
    }, _initView: function () {
        this._el = actuate.common.web.$('<div class="view-update"></div>')
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common.");
actuate.common.web.widget.ui.view.common.BaseDlgRenderer = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.AbstractControlItems, {
    _containerId: null, _rendered: null, initialize: function () {
        if (this.__extending) return;
        actuate.common.web.widget.ui.view.common.BaseDlgRenderer.superclass.initialize.call(this)
    }, refreshContent: function () {
    }, getControlItems: function () {
        return []
    }, getTemplate: function (a) {
        return null
    }, _initContainer: function () {
        var a = actuate.common.web.$("#" + this._containerId);
        a.html("");
        var b = this.getTemplate(this._containerId);
        if (b) {
            var c = actuate.common.web.$(b);
            c.appendTo(a)
        }
        return a
    }, setContainerId: function (a) {
        this._containerId = a
    }, render: function (a) {
        actuate.common.web.util.Logging.log("base dialog render: " + a);
        if (this._containerId != a) {
            actuate.common.web.util.Logging.log("Assigning new container Id for dialog: " + a);
            this._containerId = a
        }
        var b = this._initContainer();
        var c = actuate.common.web.$("<div></div>");
        c.appendTo(b);
        var d = this.getItems();
        for (var e = 0; e < d.length; e++) {
            this.renderItem(d[e], c)
        }
        var f = actuate.common.web.$('<div class="control-group" ><div></div><div class="controls" id="footerButtons' + a + '"></div></div>');
        f.appendTo(c);
        setTimeout(function () {
            if (actuate.common.web.$(".actuTextField") && actuate.common.web.$(".actuTextField").length > 0) actuate.common.web.$(".actuTextField")[0].focus()
        }, 0)
    }, renderItem: function (a, b) {
        this._renderRow(a, b)
    }, _renderGroup: function (a, b) {
        if (this.isHiddenItem(a.getName())) return;
        var c = a.getGroupItems();
        var d = actuate.common.web.$("<div></div>");
        d.appendTo(b);
        var e = actuate.common.web.$("<div></div>");
        a.getInputCtrl().appendTo(e);
        e.appendTo(d);
        var f = actuate.common.web.$("<div></div>");
        f.appendTo(d);
        for (var g = 0; g < c.length; g++) {
            var h = actuate.common.web.$("<div></div>");
            h.appendTo(b);
            this._renderGroupCols(c[g], h)
        }
    }, _renderRow: function (a, b) {
        if (a.isGroupItem()) {
            this._renderGroup(a, b);
            return
        }
        var c = actuate.common.web.$('<div class="control-group"></div>');
        c.appendTo(b);
        this._renderCols(a, c)
    }, _renderGroupCols: function (a, b) {
        if (this.isHiddenItem(a.getName())) return;
        var c = actuate.common.web.$("<div></div>");
        c.appendTo(b);
        var d = actuate.common.web.$("<div></div>");
        d.appendTo(b);
        this._renderUsingTable(a, d)
    }, _renderUsingTable: function (a, b) {
        var c = actuate.common.web.$('<table class="acbasedlg" style="margin-top:0px;"></table>');
        c.appendTo(b);
        var d = actuate.common.web.$("<tr></tr>");
        d.appendTo(c);
        var e = actuate.common.web.$("<td></td>");
        var f = actuate.common.web.$('<td class="acdlgcolumn"></td>');
        e.appendTo(d);
        f.appendTo(d);
        a.getInputCtrl().appendTo(e);
        if (!(a.isAnchor() || a.isLabelItem())) {
            a.getLblCtrl().appendTo(f)
        }
    }, _renderCols: function (a, b) {
        if (this.isHiddenItem(a.getName())) return;
        var c = actuate.common.web.$("<div></div>");
        var d = a.getLblCtrl();
        d.appendTo(c);
        d.addClass("control-label");
        c.appendTo(b);
        var e = actuate.common.web.$('<div class="controls"></div>');
        if (!a.isLabelItem()) {
            var f = a.getInputCtrl();
            f.appendTo(e);
            if (a.hasHint()) {
                a.getHintCtrl().appendTo(e);
                a.getHintCtrl().addClass("act-control-hint");
                a.getHintCtrl().css("display", "inline-block");
                a.getHintCtrl().css("margin-left", "10px")
            }
            var g = f.getID();
            if (g) {
                d.updateForValue(g)
            }
        }
        e.appendTo(b)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.ControlItem = actuate.common.web.Class.create();
actuate.common.web.widget.ui.view.common.ControlItem.prototype = {
    status: {SUCCESS: "SUCCESS", IS_EMPTY: "IS_EMPTY", REG_EX_NOT_MATCH: "REG_EX_NOT_MATCH"},
    _item: null,
    _localizeKeyHandler: null,
    initialize: function (a, b) {
        if (this.__extending) return;
        this._localizeKeyHandler = b;
        this._item = this._createControl(a)
    },
    _createControl: function (a) {
        var b = this.createControlItem(a);
        var c = a.items;
        if (c) {
            b.items = [];
            for (var d = 0; d < c.length; d++) {
                var e = c[d];
                var f = new actuate.common.web.widget.ui.view.common.ControlItem(e, this._localizeKeyHandler);
                b.items.push(f)
            }
        }
        return b
    },
    getLocalizedString: function (a) {
        if (this._localizeKeyHandler) {
            return this._localizeKeyHandler(a)
        }
        return a
    },
    createControlItem: function (a) {
        var b = {
            inputCtrl: this.getControlType(a),
            lblCtrl: this.getControlLabel(a),
            hintCtrl: this.getControlHint(a),
            controlInfo: a
        };
        return b
    },
    getId: function () {
        return this._item.controlInfo.id
    },
    getName: function () {
        return this._item.controlInfo.name
    },
    getTitle: function () {
        return this._item.controlInfo.title
    },
    getValue: function () {
        return this.getInputCtrl().getValue()
    },
    setValue: function (
        a) {
        this.getInputCtrl().setValue(a)
    },
    focus: function () {
        this.getInputCtrl().focus()
    },
    getControlInfo: function () {
        return this._item.controlInfo
    },
    getInputCtrl: function () {
        return this._item.inputCtrl
    },
    getLblCtrl: function () {
        return this._item.lblCtrl
    },
    getHintCtrl: function () {
        return this._item.hintCtrl
    },
    isHidden: function () {
        return this._item.controlInfo.isHidden === true ? true : false
    },
    isAnchor: function () {
        return this._item.controlInfo.fieldControl === "anchor" ? true : false
    },
    getControlType: function (a) {
        var b = a.name;
        var c = {
            name: b,
            value: a.value ? a.value : "",
            cssClass: a.cssClass,
            width: a.width,
            height: a.height,
            fieldType: a.fieldType ? a.fieldType : "",
            placeholder: a.placeholder ? a.placeholder : "",
            disabled: a.disabled ? a.disabled : false,
            hint: a.hint
        };
        var d = null;
        switch (a.fieldControl) {
            case"password":
                d = new actuate.common.web.widget.control.Password(c);
                if (a.value == null) {
                    d.setValue("")
                } else {
                    d.setValue(a.value)
                }
                break;
            case"date":
                d = new actuate.common.web.widget.control.DatePicker(c);
                break;
            case"checkbox":
                d = new actuate.common.web.widget.control.CheckBox(c);
                if (a.checked) {
                    d.setValue(a.checked)
                } else if (a.selected) {
                    d.setValue(a.selected)
                }
                if (a.callBack) {
                    d.onSelect(a.callBack)
                }
                break;
            case"combobox":
                d = new actuate.common.web.widget.control.ComboBox(c);
                break;
            case"label":
                d = this.getControlLabel(a);
                break;
            case"listbox":
                if (a.style) {
                    c.style = a.style
                }
                d = new actuate.common.web.widget.control.ListBox(c);
                if (a.content) {
                    d.addToList(a.content, a.defaultOption, a.click)
                }
                break;
            case"multiselectlistbox":
                c.title = a.title;
                if (a.filter) {
                    c.filter = a.filter
                }
                d = new actuate.common.web.widget.control.MultiSelectListBox(c);
                if (a.content) {
                    d.addToList(a.content, a.defaultItems)
                }
                break;
            case"radio":
                var e = c;
                e.click = a.click;
                d = new actuate.common.web.widget.control.Radio(e);
                break;
            case"button":
                c.title = a.title ? a.title : "";
                c.click = a.click;
                c.buttonType = a.buttonType;
                d = new actuate.common.web.widget.control.Button(c);
                break;
            case"file":
                d = new actuate.common.web.widget.control.File(c);
                break;
            case"anchor":
                var f = c;
                f.text = this.getLocalizedString(a.labelKey);
                f.click = a.click;
                d = new actuate.common.web.widget.control.Anchor(f);
                break;
            case"hidden":
                d = new actuate.common.web.widget.control.HiddenField(c);
                break;
            default:
                if (a.title) {
                    c.title = a.title
                }
                d = new actuate.common.web.widget.control.TextField(c);
                if (a.value == "null") {
                    d.setValue("")
                } else {
                    d.setValue(a.value)
                }
        }
        return d
    },
    getControlLabel: function (a) {
        var b = "";
        if (a.labelKey) {
            b = this.getLocalizedString(a.labelKey)
        } else if (a.labelText) {
            b = a.labelText
        }
        if (!a.allowBlank && b && a.fieldControl !== "label") {
            b = "*" + b
        }
        if (b !== "") {
            b += ":"
        }
        var c = {"for": a.name, text: b, cssClass: a.labelClass, title: a.title ? a.title : ""};
        if (a.labelWidth) {
            c.width = a.labelWidth
        }
        var d = new actuate.common.web.widget.control.Label(c);
        return d
    },
    getControlHint: function (a) {
        var b = "";
        b = this.getLocalizedString(a.hint);
        var c = {"for": a.name, text: b, cssClass: a.labelClass};
        var d = new actuate.common.web.widget.control.Label(c);
        return d
    },
    isLabelItem: function () {
        return this._item.controlInfo && this._item.controlInfo.fieldControl === "label" ? true : false
    },
    hasHint: function () {
        return this._item.controlInfo && this._item.controlInfo.hint ? true : false
    },
    isGroupItem: function () {
        return this._item.controlInfo && this._item.controlInfo.items ? true : false
    },
    getGroupItems: function () {
        return this._item.items
    },
    validate: function () {
        var a = this.getValue();
        if (a && typeof a == "string") {
            a = actuate.common.web.$.trim(a)
        }
        if (!this._item.controlInfo.allowBlank && !a) {
            return this.status.IS_EMPTY
        }
        if (this._item.controlInfo.regex && !a.match(this._item.controlInfo.regex) && a != "") {
            return this.status.REG_EX_NOT_MATCH
        }
        return this.status.SUCCESS
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.DataUsage = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _usageData: null,
    _activationCode: null,
    _administrator: null,
    _iportalBaseURL: null,
    _helpDocBase: null,
    _productVesion: null,
    _productName: null,
    _oldacode: null,
    _activationUrl: null,
    _pingtestUrl: null,
    _locale: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._defaultLocale = "en_US";
        this._defaultTimeZone = "America/Chicago";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.DataUsage.superclass.initialize.call(this)
    },
    setData: function (a) {
        this._usageData = actuate.common.web.$.parseJSON(a.usageInfo)
    },
    getTemplate: function () {
        var a = '<div id="dataUsageTemp" class="usage-wrapper">' + '<div class="row">' + '<div class="span">' + '<div style="text-align:center">You have <span style="color:#2998fb"><span id="dialog-usage-days-to-expiration"></span> days</span> left for this trial</div><br>' + '<div>To extend your trial, please <a href="#" onclick=window.open("' + this._invokeListener("ON_GETLOCALIZATION_STRING", "activate_email_request") + '") >contact us</a> to purchase a new license' + "</div>" + "</div>";
        a += "</div>";
        return a
    },
    getProgressBarTemplate: function () {
        var a = '<div class="progress">' + '<div id="dialog-usage-bar" class="bar" role="progressbar">' + "</div>" + "</div>";
        return a
    },
    render: function (a) {
        actuate.common.web.widget.ui.view.common.DataUsage.superclass.render.call(this, a);
        this.updateDataUsage(this._usageData);
        actuate.common.web.$("#applybtn").click(actuate.common.web.Method.bind(this.showApplyConfirmation, this))
    },
    showApplyConfirmation: function () {
        actuate.common.web.$("#error").addClass("hide");
        this._activationCode = document.getElementById("activationCode").value;
        if (this._activationCode) {
            var a = {
                title: this._invokeListener("ON_GETLOCALIZATION_STRING", "Dlg.Title.Confirmation"),
                okButton: {
                    label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.applycode"),
                    handler: actuate.common.web.Method.bind(this.reactivate, this),
                    buttonType: "primary"
                },
                cancelButton: {
                    label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
                    handler: actuate.common.web.Method.bind(this._NOOP, this),
                    buttonType: "secondary"
                }
            };
            actuate.common.web.$("#closeicon").click();
            var b = this._invokeListener("ON_GETLOCALIZATION_STRING", "DataUsage.Msg.ActiveConfirm");
            var c = new actuate.common.web.widget.dialog.ExitDialog({
                id: "modal",
                msg: b,
                type: "confirmation",
                dialogConfig: a
            });
            c.render()
        } else {
            actuate.common.web.$("#error").removeClass("hide")
        }
    },
    _checkServer: function () {
        actuate.common.web.$("#checkConnectionDiv").remove();
        var a = document.createElement("div");
        a.className = "hide";
        a.id = "checkConnectionDiv";
        var b = window.crypto || window.msCrypto;
        var c = b.getRandomValues(new Uint32Array(1))[0] / Math.pow(2, 32);
        var d = this._pingtestUrl + "?" + c;
        a.innerHTML = '<img src="' + d + '" id ="checkConnectionImg" />';
        document.body.appendChild(a);
        actuate.common.web.$("#checkConnectionImg").load(actuate.common.web.Method.bind(this._applyActivation, this));
        actuate.common.web.$("#checkConnectionImg").error(actuate.common.web.Method.bind(this._showerror, this))
    },
    _showerror: function (a) {
        var b = {
            title: "Error",
            okButton: {
                label: this.getLocalizedString("Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(this.okCallBack, this)
            }
        };
        var c = new Array;
        c.push({
            errorLabel: " ",
            errorMessage: this._invokeListener("ON_GETLOCALIZATION_STRING", "ACTIVATION_CODE_ERROR")
        });
        actuate.common.web.util.Utility.showMsgDlg("modal", c, "error", b)
    },
    _applyActivation: function () {
        var a = "locale=" + encodeURIComponent(this._locale) + "&acode=" + encodeURIComponent(this._activationCode);
        a += "&product=" + encodeURIComponent(this._productName) + "&version=" + encodeURIComponent(this._productVesion) + "&status=initial";
        a += "&oldacode=" + encodeURIComponent(this._oldacode);
        actuate.common.web.$.ajax({
            dataType: "jsonp",
            url: this._activationUrl + "?" + a,
            timeout: 3e4,
            success: actuate.common.web.Method.bind(function (a) {
                if (a === "ok") {
                    this.reactivate()
                } else {
                    var b = {
                        title: "Error",
                        okButton: {
                            label: this.getLocalizedString("Lbl.Btn.OK"),
                            handler: actuate.common.web.Method.bind(this.okCallBack, this)
                        }
                    };
                    var c = new Array;
                    a = decodeURIComponent(a);
                    a = a.replace("<A", "<A style='color:blue;text-decoration:underline'");
                    a = a.replace("<a", "<a style='color:blue;text-decoration:underline'");
                    c.push({errorLabel: " ", errorMessage: a});
                    actuate.common.web.util.Utility.showMsgDlg("modal", c, "error", b);
                    this._NOOP
                }
            }, this),
            error: actuate.common.web.Method.bind(function (a) {
                var b = "RESPONSE_INVALID";
                if (a.statusText === "timeout") {
                    b = "ERROR"
                }
                var c = {
                    title: "Error",
                    okButton: {
                        label: this.getLocalizedString("Lbl.Btn.OK"),
                        handler: actuate.common.web.Method.bind(this.okCallBack, this)
                    }
                };
                var d = new Array;
                d.push({
                    errorLabel: " ",
                    errorMessage: this._invokeListener("ON_GETLOCALIZATION_STRING", "ACTIVATION_CODE_" + b)
                });
                actuate.common.web.util.Utility.showMsgDlg("modal", d, "error", c);
                this._NOOP
            }, this)
        })
    },
    reactivate: function () {
        var a = this._iportalBaseURL + "reactivate.jsp?activationCode=" + encodeURIComponent(this._activationCode);
        window.location.href = a
    },
    updateDataUsage: function (a) {
        var b = actuate.common.web.$("#top-usage-days-to-expiration");
        if (b) {
            b.html(a.DaysToExpiration);
            var c = parseInt(a.DaysToExpiration);
            if (c <= 7) {
                b.parent()[0].style.color = "red"
            }
        }
        var d = actuate.common.web.$("#dialog-usage-days-to-expiration");
        if (d.length > 0) {
            d.html(a.DaysToExpiration)
        }
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b)
    },
    _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Export = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _helpDocBase: null, initialize: function (a) {
        if (this.__extending) return;
        this._helpDocBase = a.helpDocBase;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Export.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Export.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Export.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div style="max-width:480px;">' + "You can export your BIRT design to Excel, including its data, charts, formatting, and formulas. Your design's crosstabs will be exported as " + "pivot tables, preserving data hierarchies and the ability to drill down. BIRT iHub also supports export to other formats, " + "including Word, PowerPoint, and PDF." + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "export_help_link") + '") class="learnmore">Learn More</a>' + "</div>" + '<div class="exportimage"></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Export.superclass.render.call(this, a)
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Integrate = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _iportalBaseURL: null,
    _report: null,
    _volume: null,
    _reportBase: null,
    _username: null,
    _parameterMap: null,
    _helpDocBase: null,
    _wizard: null,
    _sampleExists: null,
    initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Integrate.superclass.initialize.call(this);
        this._iportalBaseURL = a.iportalBaseURL;
        this._report = a.reportName;
        this._volume = a.volume;
        this._reportBase = a.reportBase;
        this._username = a.username;
        this._viewer = a.viewer;
        this._parameterMap = a.parameterMap;
        this._helpDocBase = a.helpDocBase;
        this._wizard = a.wizard;
        this._that = actuate.viewer.impl.Viewer;
        this._that._removeViewer("container1");
        this._that._removeViewer("container2")
    },
    initControls: function () {
    },
    _initControls: function () {
        actuate.common.web.widget.ui.view.common.Integrate.superclass.initControls.call(this);
        this._isControlsInitialized = true
    },
    setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Integrate.superclass.setData.call(this, a)
        }
    },
    getTemplate: function (a) {
        var b = '<div id="confirmation" class="ac"></div><div id="initial" style="width: 1000px;margin-bottom:25px" > Change the code and see what happens!' + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "integrate_help_link") + '") class="learnmore">Learn More</a></div>' + '<div id="sample" style="width: 1000px;margin-bottom:25px" class="ftype-hide">Change the code below and click Run, or edit the code in<a href="#" id="jsfiddle" class="learnmore">JSFIDDLE</a> and see it working there.' + '\t   <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "integrate_jsapi_doc") + '") class="learnmore">View our JSAPI library</a> for more ideas.</div>' + '<div style="margin-top:10px;position:relative;width:1000px;min-height: 450px;" id="maindiv">' + '<div class="ac"><div id="codediv" style="float:left;margin-bottom: 10px;border: solid 1px #dddddd;width:377px">' + '<div class="" style="position:relative;padding: 10px;text-align: right;background-color: #dddddd;">' + '<button type="button" class="btn btn-default ftype-hide" id="back" style="min-width: 80px;float:left;background:white;color:#555">Go Back</button>' + '<button type="button" class="btn btn-default" id="advanced" style="min-width: 85px;float:left;background:white;color:#555">See More</button>' + '<button type="button" class="btn btn-default" id="reset" style="min-width: 80px;margin-right: 5px;background:white;color:#555">Reset</button>' + '<button type="button" class="btn btn-primary" id="run" style="min-width: 80px;">Run</button>' + "</div>" + '<div id ="codearea" style="position:relative;background-color: #fff;"></div>' + "</div></div>" + '<div id="container1" style="float:left;margin-left:15px;border: solid 1px #dddddd;width:376px"></div>' + "</div>";
        actuate.common.web.$(".modal-header").addClass("ac");
        actuate.common.web.$(".modal-footer").addClass("ac");
        return b
    },
    _userReportCode: function () {
        this.isSample = false;
        code = "<!--*********CODE BELOW IS EDITABLE*****-->" + "\n\n" + "<!- You can use this code to embed your report into any web page. Add the username and password and uncomment the script tag below before running in your own web page.-->" + "\n\n" + "<!--" + "\n" + '<script type="text/javascript" language="JavaScript" src="' + this._iportalBaseURL + 'jsapi"></script>' + "\n" + "-->" + "\n\n" + '<script type="text/javascript">' + "\n\n" + "<!-- Enter your username and password here -->" + "\n" + '   var username = "";' + "\n" + '   var password = "";' + "\n" + "   if (actuate && actuate.isInitialized()){" + "\n" + "       myInit();" + "\n" + "   } else {" + "\n" + "       var reqOps = new actuate.RequestOptions( );" + "\n" + '       reqOps.setVolume("' + this._volume + '");' + "\n" + "       reqOps.setCustomParameters({});" + "\n" + '       actuate.load("viewer");' + "\n" + '        actuate.initialize("' + this._iportalBaseURL + '",reqOps,username,password,myInit);' + "\n" + "   };" + "\n" + "   function myInit() {" + "\n" + '        var viewer = new actuate.Viewer( "container1", null, null, true, true);';
        if (this._parameterMap) {
            var a = "\n" + " " + "var parameterValueMap={";
            var b = "";
            var c = false;
            for (var d in this._parameterMap) {
                a += b;
                c = true;
                if (this._parameterMap[d] != null) {
                    a += "'" + d + "':'" + this._parameterMap[d] + "'"
                } else {
                    a += "'" + d + "':null"
                }
                b = ","
            }
            if (c) {
                a += "};";
                a += "\n" + " " + "var parameterValues=[];";
                a += "\n" + " " + "for(var key in parameterValueMap){";
                a += "\n" + "     " + "var param=new actuate.viewer.impl.ParameterValue();";
                a += "\n" + "     " + "param.setName(key);";
                a += "\n" + "     " + "if(parameterValueMap[key]!=null) {";
                a += "\n" + "         " + "param.setValue(parameterValueMap[key]);";
                a += "\n" + "     " + "} else{";
                a += "\n" + "         " + "param.setValueIsNull(true); ";
                a += "\n" + "     " + "}";
                a += "\n" + "      " + "parameterValues.push(param);";
                a += "\n" + " " + "}";
                code += a + "\n" + " " + "viewer.setParameterValues(parameterValues);"
            }
        }
        code += "\n" + '       viewer.setReportName("' + this._reportBase + this._report + '");' + "\n\n" + "<!-- To display toolbar change value to true.-->" + "\n" + "       var options = new actuate.viewer.UIOptions( );" + "\n" + "       options.enableToolBar(false);" + "\n" + "       viewer.setUIOptions(options);" + "\n" + "       viewer.setSize(600,475);" + "\n\n" + "<!-- This renders the JSAPI viewer.  Uncomment the additional code to enable Interactive Viewer automatically -->" + "\n" + "       viewer.submit(/* function () { viewer.enableIV(); } */);" + "\n" + "}" + "\n" + "</script>" + "\n" + '<div id="container1"></div>';
        actuate.common.web.$("#codediv").children("#codearea").html('<textarea spellcheck="false" rows="14" style="font-size:13px;font-family:Source Code Pro;color:#333333;overflow-x:hidden;margin:0px;background-color:#fff;width:365px;height:417px;border:none;cursor: inherit;" id="codetextarea">' + code + "</textarea>")
    },
    _sampleReportCode: function () {
        this.isSample = true;
        jsapiCode = "\n\n" + "<!--" + "\n" + '<script type="text/javascript" language="JavaScript" src="' + this._iportalBaseURL + 'jsapi"></script>' + "\n" + "-->" + "\n\n" + '<script type="text/javascript">' + "\n\n" + "<!-- Enter your username and password here -->" + "\n" + '   var username = "";' + "\n" + '   var password = "";' + "\n" + "   var sortAsc =true;" + "\n" + "   if (actuate && actuate.isInitialized()) {" + "\n" + "       myInit();" + "\n" + "   } else {" + "\n" + "       var reqOps = new actuate.RequestOptions( );" + "\n" + '       reqOps.setVolume("' + this._volume + '");' + "\n" + "       reqOps.setCustomParameters({});" + "\n" + '       actuate.load("viewer");' + "\n" + '       actuate.initialize("' + this._iportalBaseURL + '",reqOps,username,password,myInit);' + "\n" + "  };" + "\n" + "  function myInit() {" + "\n" + '        var viewer = new actuate.Viewer( "container2");' + "\n" + '         viewer.setReportName("/F-Type Examples/Flight Delayed.RPTDOCUMENT");' + "\n" + "         var options = new actuate.viewer.UIOptions( );" + "\n" + "         options.enableToolBar( false );" + "\n" + "         viewer.setUIOptions( options );" + "\n" + "         viewer.setSize(475,375);" + "\n" + '         viewer.setReportletBookmark("Airline Delays Table");' + "\n" + "         viewer.submit(function () { " + "\n\n" + "<!-- This code applies a filter during JSAPI viewing, try changing filterColumn (Airport, City, State, and Delayed) AND filterValue.-->" + "\n" + '         var tableObj = viewer.getTable("Airline Delays Table");' + "\n" + '            var filterColumn = "State";' + "\n" + '            var filterValue = "CA";' + "\n" + "            tableObj.setFilters(new actuate.data.Filter(filterColumn, actuate.data.Filter.EQ, filterValue));" + "\n" + "            tableObj.setFilters(new actuate.data.Filter(filterColumn, actuate.data.Filter.TOP_N, 9));" + "\n" + "            tableObj.submit();" + "\n" + "         }, this );" + "\n\n" + "<!-- This code is called when the user clicks on the Sort button.  See HTML code further below to display this button.-->" + "\n" + '         var columnName = "Delayed";' + "\n" + '         actuate.common.web.$( "#sort" ).click(actuate.common.web.Method.bind( function () { ' + "\n" + "         \t\t\t\tif (!sortAsc) {sortAsc = true;} else {sortAsc=false;}" + "\n" + "                        var mySorter = new actuate.data.Sorter(columnName,sortAsc);" + "\n" + '                        var tableObj = viewer.getTable("Airline Delays Table");' + "\n" + "               \t        tableObj.setSorters(mySorter);" + "\n" + "               \t\t    tableObj.submit(function () {viewer.submit()});" + "\n" + "          }, this ) );" + "\n" + '          actuate.common.web.$( "#sort" ).text("Sort By " + columnName);' + "\n" + "        }" + "\n" + "</script>";
        htmlCode = "<!--*********CODE BELOW IS EDITABLE*****-->" + "\n\n" + "<!-- This code is a complete web page with the JSAPI viewer and contains just a few of the features you can use with the BIRT iHub JSAPI library. Add the username and password and uncomment the script tag below before running in your own web page. -->" + "\n\n" + "<!DOCTYPE html>" + "\n<html>" + "\n<head>" + jsapiCode + "\n</head>" + "\n<body>";
        divCode = "\n" + "<!-- Web page code starts here -->" + "\n\n" + '   <link rel="stylesheet" href="' + this._iportalBaseURL + 'samples/css/style.css">' + "\n" + '   <div class="demo" style="width:925px;height: 680px;zoom:.8;background: #DFEAF0;background-color: #DFEAF0;-moz-transform: scale(.80);-moz-transform-origin: 0 0;">' + "\n" + '   <div class="navbar navbar-custom" style="height:90px;padding-left:50px ">' + "\n" + '        <div class="container3">' + "\n" + '             <div class="navbar-header">' + "\n" + '                 <img src="' + this._iportalBaseURL + 'samples/images/plane2.png" style="float:left; margin-left:-220px;margin-top:10px;"/><a class="navbar-brand" href="#" style="margin-top:-9px"><h2 style="color:#E3EEF4; margin-top:30px;">Flight Delay Patterns</h2></a>' + "\n" + "             </div>" + "\n" + "    \t</div>" + "\n" + "    </div>" + "\n" + '    <div class="container-fluid" style="margin-top:12px;width: inherit; ">' + "\n" + '        <div class="row-fluid">' + "\n" + '            <div class="span4" style=" width: 250px; margin-left: 18px;">' + "\n" + '                <div class="container-fluid" style="  width: 208px;  ">' + "\n" + '                    <div class="row-fluid" style="margin-bottom:40px;">' + "\n" + '                        <img src="' + this._iportalBaseURL + 'samples/images/plane.png" height="150" width="200"/>' + "\n" + "                    </div>" + "\n" + '                    <div class="row-fluid" style="color:#A1ACB2; width:200px;margin-top: -36px;">' + "\n" + '                        <p style=" width: 200px;  ">' + "\n" + "                            The average percent of delayed airline arrivals across United States airports from 2004 - 2014 is 22%. We can compare this to the airport with the fewest flights delayed, Hilo International Airport in Hawaii at 7%, " + "\n" + "                            and the airport with the most flights delayed, Newark Liberty International in New Jersey at 34%. Among the causes of delays, late aircraft ranks the highest at 38% and security ranks the lowest at 0.2%." + "\n" + "                        </p>" + "\n" + "                    </div>" + "\n" + "                </div>" + "\n" + "            </div>" + "\n" + '            <div class="span8"  style="  width: 450px; margin-left: -15px; " >' + "\n" + '                <div class="container-fluid">' + "\n" + "<!-- Uncomment this section to enable the Sort button -->" + "\n" + "<!--" + "\n" + '                    <div class="row-fluid" style="margin-bottom:20px; margin-top:20px;">' + "\n" + "                        <p>" + "\n" + '                            <button type="button" class="btn btn-default btn-lg btn-custom" style="width:150px;" id="sort">Sort By Delayed</button>' + "\n" + "                        </p>" + "\n" + "                    </div>" + "\n" + "-->" + "\n" + '                    <div id="container2"></div>' + "\n" + "                </div>" + "\n" + "            </div>" + "\n" + "        </div>" + "\n" + "    </div>";
        "\n" + "  </div>";
        htmlCode += divCode + "\n</body>" + "\n</html>";
        actuate.common.web.$("#codediv").removeClass("ftype-hide");
        actuate.common.web.$("#container1").height(476);
        actuate.common.web.$("#codediv").children("#codearea").html('<textarea spellcheck="false" rows="14" style="font-size:13px;font-family:Source Code Pro;color:#333333;overflow-x:hidden;margin:0px;background-color:#fff;width:365px;height:419px;border:none;cursor: inherit;" id="codetextarea">' + htmlCode + "</textarea>")
    },
    _runLiveCode: function () {
        actuate.common.web.$("#container1").html("");
        this._that._removeViewer("container1");
        this._that._removeViewer("container2");
        var a = document.getElementById("codetextarea").value;
        actuate.common.web.$("#container1").html(a.replaceAll("\n", "").replace(/<!--(.*?)-->/g, ""))
    },
    _goBack: function () {
        this._userReportCode();
        if (this._sampleExists) {
            actuate.common.web.$("#advanced").removeClass("ftype-hide")
        }
        actuate.common.web.$("#back").addClass("ftype-hide");
        actuate.common.web.$("#sample").addClass("ftype-hide");
        actuate.common.web.$("#initial").removeClass("ftype-hide");
        this._runLiveCode()
    },
    _advanced: function () {
        this._sampleReportCode();
        actuate.common.web.$("#advanced").addClass("ftype-hide");
        actuate.common.web.$("#back").removeClass("ftype-hide");
        actuate.common.web.$("#initial").addClass("ftype-hide");
        actuate.common.web.$("#sample").removeClass("ftype-hide");
        this._runLiveCode()
    },
    _reset: function () {
        if (this.isSample) {
            this._sampleReportCode()
        } else {
            this._userReportCode()
        }
        this._runLiveCode()
    },
    _launchJSFiddle: function () {
        var a = {
            title: this._invokeListener("ON_GETLOCALIZATION_STRING", "Dlg.Title.Confirmation"),
            okButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.OK"),
                handler: actuate.common.web.Method.bind(function () {
                    this._wizard._ping("launch jsfiddler");
                    window.open(this._invokeListener("ON_GETLOCALIZATION_STRING", "integrate_js_editor"))
                }, this),
                buttonType: "primary"
            },
            cancelButton: {
                label: this._invokeListener("ON_GETLOCALIZATION_STRING", "Lbl.Btn.Cancel"),
                handler: actuate.common.web.Method.bind(this._NOOP, this),
                buttonType: "secondary"
            },
            isMsgDlg: true
        };
        var b = this._invokeListener("ON_GETLOCALIZATION_STRING", "Integrate.Msg.JSFiddleConfirm");
        var c = new actuate.common.web.widget.dialog.ExitDialog({
            id: "confirmation",
            msg: b,
            type: "confirmation",
            dialogConfig: a
        });
        c.setHideCloseButton(false);
        c.render()
    },
    getControlItems: function () {
        var a = [];
        return a
    },
    render: function (a, b) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Integrate.superclass.render.call(this, a);
        actuate.common.web.$("#run").click(actuate.common.web.Method.bind(this._runLiveCode, this));
        actuate.common.web.$("#reset").click(actuate.common.web.Method.bind(this._reset, this));
        actuate.common.web.$("#back").click(actuate.common.web.Method.bind(this._goBack, this));
        actuate.common.web.$("#jsfiddle").click(actuate.common.web.Method.bind(this._launchJSFiddle, this));
        var c = function (a) {
            if (a != null) {
                this._sampleExists = a["fileExists"];
                if (this._sampleExists) {
                    actuate.common.web.$("#advanced").click(actuate.common.web.Method.bind(this._advanced, this))
                } else {
                    actuate.common.web.$("#advanced").addClass("ftype-hide")
                }
            }
        };
        var d = {fileName: "/F-Type Examples/Flight Delayed.RPTDOCUMENT"};
        this._wizard._sendRequest("checkFile", "", d, actuate.common.web.Method.bind(c, this));
        this._renderIV();
        this._userReportCode();
        actuate.common.web.$("#" + b).removeAttr("tabindex");
        if (!actuate.util.browser.__isIE()) {
            actuate.common.web.$(".modal-footer").css("margin-top", "-25px")
        }
    },
    _renderIV: function () {
        var a = new actuate.Viewer("container1", null, null, true, true);
        a.setReportName(this._reportBase + this._report);
        if (this._parameterMap) {
            var b = [];
            for (var c in this._parameterMap) {
                var d = new actuate.viewer.impl.ParameterValue;
                d.setName(c);
                if (this._parameterMap[c] != null) {
                    d.setValue(this._parameterMap[c])
                } else {
                    d.setValueIsNull(true)
                }
                b.push(d)
            }
            if (b) {
                a.setParameterValues(b)
            }
        }
        var e = new actuate.viewer.UIOptions;
        e.enableToolBar(false);
        a.setUIOptions(e);
        a.setSize(600, 475);
        a.submit()
    },
    _renderItem: function (a, b) {
    },
    renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    },
    addListener: function (a, b) {
        this._listener.addListener(a, b)
    },
    _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Interact = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _helpDocBase: null, initialize: function (a) {
        if (this.__extending) return;
        this._helpDocBase = a.helpDocBase;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Interact.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Interact.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Interact.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div style="max-width:550px;">' + "Each report item automatically contains a menu of interactive options. Since users can easily personalize report " + "content and layout using this menu, one BIRT design can satisfy the needs of a wide variety of end users. Click " + "on an item in your own report to see these features&mdash;such as sorting, grouping, and filtering&mdash;in action." + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "interact_help_link") + '") class="learnmore">Learn More</a>' + "</div>" + '<div class="interactimage"></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Interact.superclass.render.call(this, a)
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.MyProfile = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _myProfileData: null, _freemium: null, initialize: function (a) {
        if (this.__extending) return;
        this._defaultLocale = "en_US";
        this._defaultTimeZone = "America/Chicago";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.MyProfile.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.MyProfile.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        this._myProfileData = a;
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.MyProfile.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = "<div>" + '<div class="control-group" id="userName{id}"></div>' + '<div class="control-group" id="roles{id}"></div>' + '<div class="control-group" id="description{id}"></div>' + '<div class="control-group" id="email{id}"></div>' + '<div class="control-group" id="language{id}"></div>' + '<div class="control-group" id="timeZone{id}"></div>' + '<div class="control-group" id="homeFolder{id}"></div>' + '<div class="control-group" id="dashboard{id}"></div>' + '<div id="ihub-myprofile-password-section-{id}">' + '<div><h2 class="control-title control-title-small control-title-top">' + this.getLocalizedString("Lbl.MyProfile.Password") + "</h2></div>" + '<div class="changePasswordstyle"><a href="#" id="togglePwd{id}" class="underlineStyle">' + this.getLocalizedString("Lbl.MyProfile.ChangePassword") + '</a><i id="itogglePwd{id}" style="cursor: pointer;" class="icon-large icon-ygg-caret-down"></i></div>' + "</div>" + '<div id="password{id}" class="hide">' + "<div><h5>" + this.getLocalizedString("Lbl.MyProfile.ChangePasswordHint") + "</h5></div>" + '<div class="control-group" id="existingPassword{id}"></div>' + '<div class="control-group" id="currentPassword{id}"></div>' + '<div class="control-group" id="newpasswordConfirm{id}"></div>' + "</div>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    }, getControlItems: function () {
        var a = [{
            fieldControl: "html",
            name: "userName",
            labelKey: "Lbl.MyProfile.UserName",
            html: this._myProfileData["userName"]
        }, {
            fieldControl: "text",
            name: "description",
            labelKey: "Lbl.MyProfile.Description",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "text",
            name: "email",
            labelKey: "Lbl.MyProfile.Email",
            allowBlank: true,
            regex: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
            regexTextKey: "Msg.Email.Not.Valid",
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "listbox",
            name: "language",
            labelKey: "Lbl.MyProfile.Language",
            content: actuate.common.web.util.TimeZoneLocaleUtil.getLocales(),
            allowBlank: true,
            disabled: this._myProfileData["isOCP"]
        }, {
            fieldControl: "listbox",
            name: "timeZone",
            labelKey: "Lbl.MyProfile.TimeZone",
            content: actuate.common.web.util.TimeZoneLocaleUtil.getTimeZones(),
            allowBlank: true,
            disabled: this
                ._myProfileData["isOCP"]
        }, {
            fieldControl: "text",
            name: "homeFolder",
            labelKey: "Lbl.MyProfile.HomeFolder",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "text",
            name: "dashboard",
            labelKey: "Lbl.MyProfile.Dashboard",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "password",
            name: "existingPassword",
            labelKey: "Lbl.MyProfile.CurrentPassword",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"]
        }, {
            fieldControl: "password",
            name: "currentPassword",
            labelKey: "Lbl.MyProfile.Password",
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"],
            allowBlank: true,
            value: "dummy"
        }, {
            fieldControl: "password",
            name: "newpasswordConfirm",
            labelKey: "Lbl.MyProfile.PasswordConfirm",
            allowBlank: true,
            disabled: this._myProfileData["disableUIFields"] || this._myProfileData["isOCP"],
            value: "dummy"
        }];
        if (this._myProfileData["isOCP"]) {
            a.push({
                fieldControl: "html",
                name: "roles",
                labelKey: "Lbl.MyProfile.Roles",
                html: this._myProfileData["roles"]
            })
        }
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls();
            this.setData(this._myProfileData)
        }
        actuate.common.web.widget.ui.view.common.MyProfile.superclass.render.call(this, a);
        actuate.common.web.$("#togglePwd" + a).click(actuate.common.web.Method.bind2(this._showHidePwd, this, a));
        actuate.common.web.$("#itogglePwd" + a).click(actuate.common.web.Method.bind2(this._showHidePwd, this, a));
        var b = actuate.common.web.$("#ihub-myprofile-password-section-" + a);
        if (b) {
            if (this._myProfileData.otdsEnabled) {
                b.addClass("hide")
            } else {
                if (b.hasClass("hide")) {
                    b.removeClass("hide")
                }
            }
        }
    }, _showHidePwd: function (a) {
        if (actuate.common.web.$("#password" + a).hasClass("hide")) {
            actuate.common.web.$("#password" + a).removeClass("hide");
            actuate.common.web.$("#itogglePwd" + a).removeClass("icon-ygg-caret-down");
            actuate.common.web.$("#itogglePwd" + a).addClass("icon-ygg-caret-up")
        } else {
            actuate.common.web.$("#password" + a).addClass("hide");
            actuate.common.web.$("#itogglePwd" + a).removeClass("icon-ygg-caret-up");
            actuate.common.web.$("#itogglePwd" + a).addClass("icon-ygg-caret-down")
        }
    }, _renderItem: function (a, b, c) {
        var d = a.getControlInfo();
        if (d.fieldControl === "radio") {
            a.getInputCtrl().appendTo(b);
            a.getInputCtrl()._element.css("margin-left", "10px");
            a.getLblCtrl().appendTo(b);
            a.getLblCtrl()._element.css("display", "inline");
            a.getLblCtrl()._element.css("margin-left", "10px");
            if (d.name === "userType" || d.name === "isExternal") {
                b.css("float", "left")
            }
        } else {
            a.getLblCtrl().appendTo(b);
            a.getLblCtrl()._element.css("margin-right", "10px");
            a.getLblCtrl()._element.css("margin-top", "5px");
            a.getLblCtrl()._element.css("text-align", "right");
            a.getLblCtrl()._element.css("width", "200px");
            a.getLblCtrl()._element.css("float", "left");
            a.getInputCtrl()._element.width(d.width);
            if (c && a.getInputCtrl()._listBoxButton && a.getInputCtrl()._listBoxButton.length > 0) {
                a.getInputCtrl()._listBoxButton[0].disabled = true
            }
            a.getInputCtrl().appendTo(b)
        }
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            var e = a.getControlInfo();
            if (e.fieldControl === "html") {
                d[0].innerHTML = e.html
            } else {
                var f = false;
                if ((e.name == "language" || e.name == "timeZone") && e.disabled) {
                    f = true
                }
                this._renderItem(a, d, f)
            }
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.ProductAbout = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _ProductAboutData: null, _freemium: null, initialize: function (a) {
        if (this.__extending) return;
        this._defaultLocale = "en_US";
        this._defaultTimeZone = "America/Chicago";
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.ProductAbout.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.ProductAbout.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        this._ProductAboutData = a;
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.ProductAbout.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div style="max-width:385px;color:#333333">' + "<p>" + this.getLocalizedString("msg_version") + " " + this.getLocalizedString("version") + "</p>" + "<p>" + this.getLocalizedString("copyright") + "</p>" + "<p>" + this.getLocalizedString("Lbl.About.Patent") + "</p>" + "</div>";
        b = b.replace(/{id}/g, a);
        return b
    }, getControlItems: function () {
        return []
    }, render: function (a) {
        actuate.common.web.widget.ui.view.common.ProductAbout.superclass.render.call(this, a)
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Scheduler = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _iportalBaseURL: null, _report: null, _reportBase: null, _timezoneOffset: null, initialize: function (a) {
        if (this.__extending) return;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Scheduler.superclass.initialize.call(this);
        this._iportalBaseURL = a.iportalBaseURL;
        this._report = a.reportName;
        this._reportBase = a.reportBase;
        this._timezoneOffset = a.timezoneOffset
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Scheduler.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Scheduler.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = "<script> function setOnceDisabled(fm,value,time,timepattern,datepattern){setControlDisabled2(fm.onceDate,value);" + " dt = new Date();dt.setTime(dt.getTime() + 600000 + dt.getTimezoneOffset() * 60000 + eval(time));" + ' if(!value && fm.onceDate.value == ""){fm.onceDate.value = formatDate(dt, datepattern);' + " } setControlDisabled2(fm.onceTime,value);if(!value)" + " {fm.onceTime.value = formatDate(dt, timepattern);}}" + " function setRecurringDisabled(fm,value ){setControlDisabled2(fm.recurringDay,value);setControlDisabled2(fm.recurringTime,value);" + " if(!value){dt = new Date();dt.setTime(dt.getTime() + 600000 + dt.getTimezoneOffset() * 60000 + eval(timeZoneOffset));" + "fm.recurringTime.value = formatDate(dt, timePattern);}}" + " function setControlDisabled2(control,value){if (control.style){control.disabled = value;}" + " else{if (!control.onfocus)control.onfocus = control.blur;}}" + "</script>" + '<div class="centeralign" ><i class="icon-ygg-spinner icon-spin icon-large"></i></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a, b) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Scheduler.superclass.render.call(this, a);
        var c = this._iportalBaseURL + "submitjob.do";
        var d = "__from=uploader&jobType=async&__executableName=" + encode(this._reportBase) + encode(this._report);
        actuate.common.web.$.ajax({
            type: "POST", url: c, data: d, success: function (b) {
                if (b) {
                    document.getElementById(a).innerHTML = b;
                    setRecurringDisabled(document.AcSubmitJobActionForm, false)
                }
            }
        });
        if (actuate.util.browser.__isFirefox()) {
            actuate.common.web.$("#" + b).removeAttr("tabindex")
        }
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.view.common");
actuate.common.web.widget.ui.view.common.Share = actuate.common.web.Class.extendClass(actuate.common.web.widget.ui.view.common.BaseDlgRenderer, {
    _helpDocBase: null, initialize: function (a) {
        if (this.__extending) return;
        this._helpDocBase = a.helpDocBase;
        this._listener = new actuate.common.web.widget.layout.LayoutListener;
        actuate.common.web.widget.ui.view.common.Share.superclass.initialize.call(this)
    }, initControls: function () {
    }, _initControls: function () {
        actuate.common.web.widget.ui.view.common.Share.superclass.initControls.call(this);
        this._isControlsInitialized = true
    }, setData: function (a) {
        if (this._isControlsInitialized && a) {
            actuate.common.web.widget.ui.view.common.Share.superclass.setData.call(this, a)
        }
    }, getTemplate: function (a) {
        var b = '<div  style="width:500px">' + "You can share your content with other users or groups, giving them access to individual BIRT design files and folders, as well as to the output of scheduled jobs. " + '      <a href="#" onclick=window.open("' + this._helpDocBase + this._invokeListener("ON_GETLOCALIZATION_STRING", "share_help_link") + '") class="learnmore">Learn More</a></div>' + "</div>" + '<div class="shareimage"></div>';
        return b
    }, getControlItems: function () {
        var a = [];
        return a
    }, render: function (a) {
        if (!this._isControlsInitialized) {
            this._initControls()
        }
        actuate.common.web.widget.ui.view.common.Share.superclass.render.call(this, a)
    }, _renderItem: function (a, b) {
    }, renderItem: function (a, b) {
        var c = (a.getId() || a.getName()) + this._containerId;
        var d = actuate.common.web.$("#" + c);
        if (d.length) {
            this._renderItem(a, d)
        }
    }, addListener: function (a, b) {
        this._listener.addListener(a, b)
    }, _invokeListener: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    }, getLocalizedString: function () {
        var a = [];
        a.push("ON_GETLOCALIZATION_STRING");
        for (var b = 0; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        return this._invokeListener.apply(this, a)
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.FileResourceManager = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.FileResourceManager.prototype = {
    _file: null,
    _baseResourceID: 0,
    _systemResources: null,
    _reportResources: null,
    _$container: null,
    _$resourceDragNDropContainer: null,
    _$systemResourceHeaderRow: null,
    _$reportResourceHeaderRow: null,
    _helper: null,
    _complexTypeList: null,
    _resourcesChecked: null,
    _resourcesToBeChecked: null,
    _fileUploadServletPath: null,
    _listener: null,
    _helpDocBase: null,
    _rootFileHasError: false,
    ON_SYSTEM_RESOURCE_MISSING: "ON_SYSTEM_RESOURCE_MISSING",
    ON_SYSTEM_RESOURCE_READY: "ON_SYSTEM_RESOURCE_READY",
    ON_ROOT_FILE_ERROR: "ON_ROOT_FILE_ERROR",
    REPORT_RESOURCE_TYPE: "REPORT",
    SYSTEM_RESOURCE_TYPE: "SYSTEM",
    RESOURCE_STATUS_EXIST: "Exist",
    RESOURCE_STATUS_NONEXIST: "NonExist",
    RESOURCE_STATUS_UPLOADING: "Uploading",
    initialize: function (a) {
        this._file = a.file;
        this._iportalBaseURL = a.iportalBaseURL;
        this._helpDocBase = a.helpDocBase;
        this._$container = a.$container;
        this._helper = a.helper;
        this._complexTypeList = a.complexTypeList;
        this._fileUploadServletPath = a.fileUploadServletPath;
        this._systemResources = new actuate.util.HashMap;
        this._reportResources = new actuate.util.HashMap;
        this._resourcesChecked = new actuate.util.HashMap;
        this._resourcesToBeChecked = new actuate.util.HashMap;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    register: function (a, b) {
        this._listener.addListener(a, b)
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    _showResources: function (a, b) {
        var c = actuate.common.web.$(".resource-list");
        var d = a.size();
        var e = d > 0 ? d + "" : "";
        var f = b == this.SYSTEM_RESOURCE_TYPE;
        if (f) {
            if (d > 0 && !this._$systemResourceHeaderRow) {
                this._$systemResourceHeaderRow = this._createCategoryHeaderRow(e, b);
                c.prepend(this._$systemResourceHeaderRow)
            }
            var g = false;
            a.each(function (a) {
                var d = a.value;
                if (!d.rendered) {
                    d.rendered = true;
                    this._createResourceItemRow(c, d, b)
                }
                if (d.state.value == this.RESOURCE_STATUS_NONEXIST) {
                    g = true
                }
            }, this);
            if (g) {
                this._showSystemResourceMissingSection();
                this.fire(this.ON_SYSTEM_RESOURCE_MISSING)
            } else {
                this.fire(this.ON_SYSTEM_RESOURCE_READY)
            }
        } else {
            if (d > 0 && !this._$reportResourceHeaderRow) {
                this._$reportResourceHeaderRow = this._createCategoryHeaderRow(e, b);
                c.append(this._$reportResourceHeaderRow)
            }
            a.each(function (a) {
                var d = a.value;
                d.each(function (a) {
                    var d = a.value;
                    if (!d.rendered) {
                        d.rendered = true;
                        this._createResourceItemRow(c, d, b)
                    }
                }, this)
            }, this)
        }
    },
    _showSystemResourceMissingSection: function () {
        var a = actuate.common.web.$;
        var b = a(".exit-for-driver-row");
        var c = a(".need-help-row");
        b.css("display", "");
        c.css("display", "none");
        this._updateSystemResourceFolderLink();
        a(".exit-to-retrieve").on("click", actuate.Method.bind(this._handleExitToRetrieve, this))
    },
    _updateSystemResourceFolderLink: function () {
        var a = new actuate.util.HashMap;
        this._systemResources.each(function (b) {
            var c = b.value;
            var d = c.category.value;
            var e = c.serverPath;
            a.put(d, e)
        }, this);
        var b = '<div class="system-path-list">';
        a.each(function (a) {
            b += a.key + ": <br/>" + a.value + "<br/>"
        });
        b += "</div>";
        var c = localizedProfileMsg["ftypewizard_resourceManager_driverFolderStr"];
        actuate.common.web.$(".ihub-folder-link").popover({
            title: "iHub Folder",
            content: c + " <br/>" + b,
            trigger: "click",
            placement: "top"
        })
    },
    _createCategoryHeaderRow: function (a, b) {
        var c = "STATUS";
        var d = b == this.SYSTEM_RESOURCE_TYPE;
        var e = d ? "SYSTEM RESOURCES" : "BIRT RESOURCES";
        var f = d ? "system-resource-header" : "report-resource-header";
        e += " (" + a + ")";
        var g = "<tr>" + '<td colspan="3" class="birt-resource-summary-row ' + f + '">' + "<span>" + e + "</span>" + "</td>" + '<td class="birt-resource-summary-row" style="text-align:center">' + c + "</td>" + '<td class="birt-resource-summary-row"></td>' + "</tr>";
        return actuate.common.web.$(g)
    },
    _createResourceItemRow: function (a, b, c) {
        var d = c == this.REPORT_RESOURCE_TYPE;
        var e = d ? actuate.util.Utility.stripPath(b.path) : b.category.value;
        var f = d ? b.path : b.name;
        var g = b.state.value;
        var h = b.toFileSystem;
        var i = b.isScript === true;
        var j = g == this.RESOURCE_STATUS_EXIST;
        var k = actuate.util.Utility.getFileExtension(e);
        var l = this._iportalBaseURL + "/iportal/activePortal/images/filetypes/" + this._getFileIconName(k);
        var m = '<img src="' + l + '" class="file-type-icon"/>';
        var n = j ? '<i class="icon-ygg-check resource-check"></i>' : '<i class="icon-ygg-alert-triangle resource-not-available ftype-popover-source"></i>';
        if (d && h) {
            n = '<i class="icon-ygg-alert-triangle resource-alert ftype-popover-source"></i>'
        }
        if (i) {
            f = ""
        }
        var o = (d ? '<tr id= "{id}" >' : "<tr>") + '<td class="resource-icon">' + m + "</td>" + "<td>" + e + "</td>" + "<td>" + f + "</td>" + '<td class="resource-status">' + n + "</td>" + '<td class="resource-link"></td>' + "</tr>";
        if (d) o = o.replace(/{id}/g, this._getResourceId(b));
        var p = actuate.common.web.$(o);
        if (d) {
            a.append(p)
        } else {
            if (this._$reportResourceHeaderRow) this._$reportResourceHeaderRow.before(p); else a.append(p)
        }
        if (!j) {
            this._updateResourceNATooltip(d, i)
        }
        if (h) {
            this._updateAbsolutePathAlert()
        }
        this._updateOperationLink(p.find(".resource-link"), c, b)
    },
    _updateResourceNATooltip: function (a, b) {
        var c = "";
        var d = localizedProfileMsg["ftypewizard_resourceManager_naToolTipExpression"];
        var e = localizedProfileMsg["ftypewizard_resourceManager_naToolTipNotUploaded"];
        var f = localizedProfileMsg["ftypewizard_resourceManager_naToolTipNOTCopied"];
        if (a) {
            if (b) c = d; else c = e
        } else {
            c = f
        }
        var g = {title: c, trigger: "hover", placement: "top", animation: true};
        actuate.common.web.$(".resource-not-available").tooltip(g)
    },
    _updateAbsolutePathAlert: function () {
        var a = "BIRT iHub cannot resolve absolute paths on the file system. Place the resource in the project's resource folder. Then modify your BIRT design file to use a relative path.";
        var b = {title: a, trigger: "hover", placement: "top", animation: true};
        actuate.common.web.$(".resource-alert").tooltip(b)
    },
    _updateOperationLink: function (a, b, c) {
        var d = c.state.value;
        var e = c.serverPath;
        var f = actuate.common.web.$;
        var g;
        var h = localizedProfileMsg["ftypewizard_resourcePage_uploadLinkStr"];
        var i = localizedProfileMsg["ftypewizard_resourcePage_cancelLinkStr"];
        var j = localizedProfileMsg["ftypewizard_resourcePage_removeLinkStr"];
        var k = localizedProfileMsg["ftypewizard_resourceManager_removeTooltipStr"];
        var l = localizedProfileMsg["ftypewizard_resourceManager_uploadTooltipStr"];
        if (b == this.REPORT_RESOURCE_TYPE) {
            if (d == this.RESOURCE_STATUS_EXIST) {
                g = f('<a class="remove-resource-link ftype-tooltip-source">' + j + "</a>");
                a.html(g);
                g.on("click", actuate.common.web.Method.bind2(this._handleRemoveResource, this, c, g));
                var m = {title: k, placement: "top", animation: true};
                g.tooltip(m)
            } else if (d == this.RESOURCE_STATUS_NONEXIST) {
                if (c.toFileSystem || c.isScript) return;
                g = f('<a class="resource-upload-link">' + h + "</a>");
                a.html(g);
                this._setUpUploadLinks();
                var m = {title: l, placement: "top", animation: true};
                g.tooltip(m)
            } else if (d == this.RESOURCE_STATUS_UPLOADING) {
                g = f('<a class="cancel-upload-link">' + i + "</a>");
                a.html(g);
                g.on("click", actuate.common.web.Method.bind2(this._handleCancelUploading), this, e, g)
            }
        }
    },
    _handleCancelUploading: function () {
    },
    _handleExitToRetrieve: function () {
        top.location.href = this._iportalBaseURL + "ssologout.do"
    },
    _handleRemoveResource: function (a, b) {
        var c = a.serverPath;
        actuate.common.web.$(".tooltip").remove();
        var d = actuate.common.web.$("#" + this._getResourceId(a));
        var e = d.find(".resource-status");
        var f = d.find(".resource-link");
        var g = actuate.util.Utility.getFileExtension(c);
        var h = actuate.common.web.Method.bind(function (b) {
            var d = this._handleAuthentication(b);
            if (d && b.success) {
                var h = this._getReportResourceCache(c);
                h.state.value = this.RESOURCE_STATUS_NONEXIST;
                e.html('<i class="icon-ygg-alert-triangle resource-not-available"></i>');
                if (actuate.util.Utility.arrayContains(this._complexTypeList, g)) {
                    this._hardRerender()
                } else {
                    this._updateOperationLink(f, this.REPORT_RESOURCE_TYPE, a)
                }
            } else {
            }
            ;
        }, this);
        e.html("Deleting...");
        var i = {name: encodeURI(c)};
        this._sendRequest("/servlet/AsyncFileDelete", "delete", i, h)
    },
    _getReportResourceCache: function (a) {
        var b = null;
        var c = actuate.util.Utility.stripPath(a);
        var d = this._reportResources.get(c.toLowerCase());
        if (d) {
            b = d.get(a.toLowerCase())
        }
        return b
    },
    _getResourceId: function (a) {
        return "resourceItem-" + a.id
    },
    _getFileIconName: function (a) {
        var b = "";
        switch (a) {
            case"rptdesign":
            case"rptlibrary":
            case"rptdocument":
            case"html":
            case"doc":
            case"docx":
            case"pdf":
            case"rtf":
            case"csv":
            case"txt":
            case"xls":
            case"xlsx":
                b = a + "16x16.png";
                break;
            default:
                b = "default16x16.png"
        }
        return b
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_resourceManager_uploadCommentStr"];
        var b = localizedProfileMsg["ftypewizard_resourceManager_browseStr"];
        var c = localizedProfileMsg["ftypewizard_resourceManager_exitStr"];
        var d = localizedProfileMsg["ftypewizard_resourceManager_exitExplainStr"];
        var e = localizedProfileMsg["ftypewizard_resourceManager_learnMoreStr"];
        var f = localizedProfileMsg["ftypewizard_resourceManager_needHelpUploadStr"];
        var g = '<div class="upload-comment-section">' + '<input class="file-input-hidden" name="file" type="file" multiple />' + '<div class="row exit-for-driver-row" style="display:none">' + '<div class="span3" style="padding-top:8px;">' + '<a class="btn btn-success exit-to-retrieve">' + c + "</a>" + "</div>" + '<div class="span8">' + d + '<a class="explain-this-link learn-more-link">' + e + "</a>" + "</div>" + "</div>" + "</div>" + '<div class="resource-list-section ftype-tooltip-source">' + '<table class="table">' + '<tbody class="resource-list">' + "</tbody>" + "</table>" + "</div>" + '<div class="row need-help-row" style="padding-right:5px;">' + '<a class="explain-this-link learn-more-link pull-right">' + f + "</a>" + "</div>";
        return g
    },
    _hardRerender: function () {
        this._$container.html("");
        this._$systemResourceHeaderRow = null;
        this._$reportResourceHeaderRow = null;
        this._systemResources = new actuate.util.HashMap;
        this._reportResources = new actuate.util.HashMap;
        this._resourcesChecked = new actuate.util.HashMap;
        this._resourcesToBeChecked = new actuate.util.HashMap;
        this.render(this._$container)
    },
    _reRender: function () {
        this._resourcesChecked = new actuate.util.HashMap;
        this._resourcesToBeChecked = new actuate.util.HashMap;
        this.render(this._$container)
    },
    render: function (a) {
        if (a) {
            this._$container = a
        }
        var b = this._$container.find(".resource-list").length > 0;
        if (!b) {
            this._$container.append(actuate.common.web.$(this._getTemplate()));
            this._$resourceDragNDropContainer = this._$container.find(".resource-list-section")
        }
        var c = actuate.common.web.Method.bind(function () {
            if (this._rootFileHasError) {
                this._handleRootFileError();
                return
            }
            if (this._systemResources) this._showResources(this._systemResources, this.SYSTEM_RESOURCE_TYPE);
            if (this._reportResources) this._showResources(this._reportResources, this.REPORT_RESOURCE_TYPE);
            if (!b) {
                this._setUpDragNDropUpload();
                this._setUpLearnMoreLink()
            }
        }, this);
        this.loadResources(this._file, c)
    },
    _setUpDragNDropUpload: function () {
        var a = actuate.common.web.$;
        var b = this;
        var c = this._$resourceDragNDropContainer;
        var d = {title: "Drop files below", placement: "top", trigger: "", animation: true};
        c.tooltip(d);
        c.on("dragenter", function (a) {
            a.stopPropagation();
            a.preventDefault();
            b._showDDTooltip(c, true);
            c.css({border: "3px solid #82cd1e", opacity: .6})
        });
        c.on("dragleave", function (a) {
            a.stopPropagation();
            a.preventDefault();
            actuate.DDAreaOvering = false;
            b._showDDTooltip(c, false);
            c.css({border: "", opacity: 1})
        });
        c.on("dragover", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "3px solid #82cd1e", opacity: .6});
            actuate.DDAreaOvering = true
        });
        c.on("drop", function (a) {
            a.preventDefault();
            var c = a.originalEvent.dataTransfer.files;
            b._handleUploadFiles(c);
            actuate.DDAreaOvering = false
        });
        a(document).on("dragenter", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "3px dotted gray", opacity: .6});
            b._showDDTooltip(c, true);
            actuate.DDAreaOvering = true
        });
        a(document).on("dragover", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "3px dotted gray", opacity: .6});
            actuate.DDAreaOvering = true
        });
        a(document).on("drop", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "", opacity: 1});
            b._showDDTooltip(c, false);
            actuate.DDAreaOvering = false
        });
        a(document).on("dragleave", function (a) {
            a.stopPropagation();
            a.preventDefault();
            c.css({border: "", opacity: 1});
            b._showDDTooltip(c, false);
            actuate.DDAreaOvering = false
        })
    },
    _showDDTooltip: function (a, b) {
        if (actuate.DDAreaTooltipShowing != b) {
            if (b) {
                actuate.DDAreaTooltipShowing = true;
                a.tooltip("show")
            } else {
                setTimeout(actuate.Method.bind2(this._hideDDTooltip, this, a), 50)
            }
        }
    },
    _hideDDTooltip: function (a) {
        if (actuate.DDAreaOvering == false) {
            a.tooltip("hide");
            actuate.DDAreaTooltipShowing = false
        }
    },
    _handleUploadFiles: function (a) {
        var b = this._findMatchingResourcesList(a);
        this._uploadResources(b.listToUpload);
        if (b.conflictList.length > 1) {
            this._resolveConflictingResources(b.conflictList)
        }
        this._$resourceDragNDropContainer.css("border", "")
    },
    _resolveConflictingResources: function (a) {
        var b = {resources: a};
        var c = new actuate.common.web.widget.ui.wizard.dialog.ResourceConflictDialog(b);
        c.register(c.EVENT_RESOLVE_CONFIRMED, actuate.Method.bind(this._uploadResources, this));
        c.setHideCloseButton(false);
        c.render()
    },
    _findMatchingResourcesList: function (a) {
        var b = {};
        var c = [];
        var d = [];
        for (var e = 0; e < a.length; e++) {
            var f = a[e];
            var g = this._reportResources.get(f.name.toLowerCase());
            if (g) {
                var h = [];
                g.each(function (a) {
                    var b = a.value;
                    if (b.state.value == this.RESOURCE_STATUS_NONEXIST && !b.toFileSystem) {
                        b.file = f;
                        h.push(b)
                    }
                }, this);
                if (h.length > 1) {
                    if (d.length == 0) {
                        d = d.concat(h)
                    }
                } else {
                    c = c.concat(h)
                }
            }
        }
        b.listToUpload = c;
        b.conflictList = d;
        return b
    },
    _uploadResources: function (a) {
        for (var b in a) {
            var c = a[b];
            var d = c.file;
            this._uploadSingleResource(c, d)
        }
    },
    _uploadSingleResource: function (a, b) {
        var c = new XMLHttpRequest;
        c.onload = actuate.common.web.Method.bind(function () {
            if (c.status == 200) {
                this._onUploadComplete(null, a)
            } else {
            }
            ;
        }, this);
        c.upload.addEventListener("loadstart", actuate.common.web.Method.bind(function () {
            this._onUploadStart(a)
        }, this));
        c.upload.addEventListener("progress", actuate.common.web.Method.bind(function (b) {
            if (b.lengthComputable) {
                this._onUploadProgress(a, b)
            } else {
            }
            ;
        }, this));
        var d = new FormData;
        this._prepareFormData(d);
        d.append("targetFile", b.name);
        d.append("workingFolder", actuate.util.Utility.stripFileName(a.serverPath));
        d.append("file", b);
        c.open("post", this._fileUploadServletPath);
        c.send(d)
    },
    _onUploadStart: function (a) {
        var b = actuate.common.web.$("#" + this._getResourceId(a));
        var c = b.find(".resource-status");
        var d = '<div class="progress resource-progress">' + '<div class="bar" role="progressbar">' + "</div>" + "</div>";
        c.html(d)
    },
    _onUploadProgress: function (a, b) {
        var c = b.loaded / b.total * 100;
        var d = actuate.common.web.$("#" + this._getResourceId(a));
        var e = d.find(".bar");
        e.css("width", c + "%")
    },
    _onUploadComplete: function (a, b) {
        b.state.value = this.RESOURCE_STATUS_EXIST;
        var c = actuate.common.web.Method.bind(function () {
            actuate.common.web.$(".tooltip").remove();
            var a = actuate.common.web.$("#" + this._getResourceId(b));
            var c = a.find(".resource-status");
            c.html('<i class="icon-ygg-check resource-check"></i>');
            var d = a.find(".resource-link");
            this._updateOperationLink(d, this.REPORT_RESOURCE_TYPE, b);
            this._reRender()
        }, this);
        window.setTimeout(c, 1e3)
    },
    _handleRootFileError: function () {
        this.fire(this.ON_ROOT_FILE_ERROR)
    },
    _prepareFormData: function (a) {
        a.append("__vp", "Default Volume");
        a.append("volume", "Default Volume");
        a.append("showBanner", "false");
        a.append("locale", "en_US");
        a.append("hiddenReplacementPolicy", "Create");
        a.append("copyDescription", "false");
        a.append("migrateDependencies", "false");
        a.append("copyAutoArchiveRules", "false");
        a.append("permission", "folder");
        a.append("ReplacementPolicy", "Create");
        a.append("permissionButton", "folder")
    },
    isResourcesComplete: function () {
        var a = true;
        var b = this._systemResources.size();
        var c = this._reportResources.size();
        if (b == 0 && c == 0 && this._rootFileHasError) {
            return false
        }
        if (b > 0) {
            this._systemResources.each(function (b) {
                var c = b.value;
                if (c.state.value == this.RESOURCE_STATUS_NONEXIST) a = false
            }, this)
        }
        if (c > 0) {
            this._reportResources.each(function (b) {
                var c = b.value;
                c.each(function (b) {
                    var c = b.value;
                    if (c.state.value == this.RESOURCE_STATUS_NONEXIST) a = false
                }, this)
            }, this)
        }
        return a
    },
    loadResources: function (a, b) {
        var c = actuate.common.web.Method.bind(function (a) {
            if (a == null) {
                a = {};
                if (this._systemResources.size() == 0 && this._reportResources.size() == 0) {
                    this._rootFileHasError = true
                }
            }
            var c = this._handleAuthentication(a);
            if (c) {
                this._updateSystemResources(a.systemResources);
                this._updateReportResources(a.reportResources);
                if (this._resourcesToBeChecked.size() > 0) {
                    var d = new Array;
                    var e = this._resourcesToBeChecked.keys();
                    for (var f in e) {
                        var g = e[f];
                        if (this._resourcesToBeChecked.get(g)) d.push(actuate.Method.bind2(this.loadResources, this, g, b))
                    }
                    actuate.util.Utility.chainCallbacksArray(d, function () {
                    })
                } else {
                    if (b) {
                        b()
                    }
                }
            }
        }, this);
        var d = a.toLowerCase();
        if (!this._resourcesChecked.get(d)) {
            this._resourcesToBeChecked.remove(d);
            this._resourcesChecked.put(d, true);
            var e = {report: d};
            this._sendRequest("checkreportresources", "GetData", e, c, c)
        } else if (this._resourcesToBeChecked.size() == 0) {
            if (b) {
                b()
            }
        }
    },
    _updateSystemResources: function (a) {
        if (a && a.systemResourceItem) {
            var b = a.systemResourceItem;
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                var e = this._getSystemResourceKey(d);
                var f = this._systemResources.get(e);
                if (!f) this._systemResources.put(e, d)
            }
        }
    },
    _updateReportResources: function (a) {
        if (a && a.reportResourceItem) {
            var b = a.reportResourceItem;
            for (var c = 0; c < b.length; c++) {
                var d = b[c];
                if (d.isScript == true) {
                    d.serverPath = d.path
                }
                var e = actuate.util.Utility.stripPath(d.path);
                var f = e.toLowerCase();
                var g = actuate.util.Utility.getFileExtension(d.path);
                var h = d.serverPath;
                var i = d.serverPath.toLowerCase();
                var j = this._reportResources.get(f);
                if (j) {
                    var k = j.get(i);
                    if (!k) {
                        d.id = this._baseResourceID++;
                        j.put(i, d)
                    }
                } else {
                    d.id = this._baseResourceID++;
                    j = new actuate.util.HashMap;
                    j.put(i, d);
                    this._reportResources.put(f, j)
                }
                if (actuate.util.Utility.arrayContains(this._complexTypeList, g) && d.state.value == this.RESOURCE_STATUS_EXIST) {
                    this._resourcesToBeChecked.put(i, true);
                    this._resourcesChecked.remove(i)
                }
            }
        }
    },
    _getSystemResourceKey: function (a) {
        return a.category.value + "-" + a.name
    },
    _handleAuthentication: function (a) {
        if (a && a["authenticated"] === false) {
            top.location.href = this._iportalBaseURL;
            return false
        }
        return true
    },
    _sendRequest: function (a, b, c, d, e, f) {
        var g = this._helper;
        g.setAjaxServletPath(a);
        var h = g.getRequestData(b, c, f);
        g.sendRequest(h, d, e)
    },
    _setUpLearnMoreLink: function () {
        var a = function () {
            var a = this._helpDocBase + "/start";
            window.open(a)
        };
        var b = actuate.common.web.$(".learn-more-link");
        b.on("click", actuate.Method.bind(a, this))
    },
    _setUpUploadLinks: function () {
        var a = actuate.common.web.$;
        a(".resource-upload-link").unbind("click");
        a(".resource-upload-link").click(function () {
            a(".file-input-hidden")[0].click()
        });
        a(".file-input-hidden").unbind("change");
        a(".file-input-hidden").change(actuate.common.web.Method.bind(function (b) {
            console.log("change!");
            this._handleUploadFiles(b.target.files);
            a(".file-input-hidden")[0].value = ""
        }, this))
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.FinalPage = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.FinalPage.prototype = {
    _renderTo: null,
    _element: null,
    _report: null,
    _wizard: null,
    _uploadBaseFolder: null,
    _exeReportURL: "executeinitialreport.do?__requesttype=immediate&__executableName=",
    _iportalBaseURL: null,
    _hasParameters: null,
    _username: null,
    _paramObj: null,
    _parameterMap: null,
    _viewer: null,
    pageID: "wizardFinalPage",
    _paramValues: null,
    initialize: function (a) {
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._wizard = a.wizard;
        this._uploadBaseFolder = a.uploadBaseFolder;
        this._iportalBaseURL = a.iportalBaseURL;
        this._username = a.username
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_finalPage_exitUploaderStr"];
        var b = localizedProfileMsg["ftypewizard_finalPage_toUploadStr"];
        var c = localizedProfileMsg["ftypewizard_finalPage_toResourceStr"];
        var d = '<script type="text/javascript" language="JavaScript" src="' + this._iportalBaseURL + 'jsapi"></script>' + '<div id="' + this.pageID + '">' + '<div id="integratepopup"></div>' + '<div id="popup" class="ac">' + '<div class="exit-section-text ftype-hide" id="explore">' + "Explore what you can do with your report." + "</div>" + '<div class="exit-section ftype-hide" id="parameterBtn">' + '<a class="btn btn-default btn-exit-uploader">' + a + "</a>" + "</div>" + '<div class="exit-section ftype-hide" id="ivBtn">' + '<button class="btn btn-success btn-exit-uploader_1">' + a + "</button>" + "</div>" + "</div>" + '<div class="container">' + '<div id="uploader" class="ftype-hide">' + '<div class="btn-big-div">' + '<button class="btn-big" id="interact" >' + '<img src="../../iportal/activePortal/images/interact.png">' + "<p>Interact<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big "  id="schedule">' + '<img src="../../iportal/activePortal/images/scheduleuploader.png">' + "<p>Schedule<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big " id="share">' + '<img src="../../iportal/activePortal/images/share.png">' + "<p>Share<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big " id="export" >' + '<img src="../../iportal/activePortal/images/excel.png">' + "<p>Excel<p>" + "</button>" + "</div>" + '<div class="btn-big-div">' + '<button class="btn-big " id="integrate" >' + '<img src="../../iportal/activePortal/images/integrate.png">' + "<p>Integrate<p>" + "</button>" + "</div>" + "</div>" + '<div class="ftype-hide" id="viewerDiv" style="overflow: hidden;zoom:0.98;-moz-transform: scale(.98);"> ' + '<div id="container" style="background:white;border:solid 1px #dddddd;"> </div>' + "</div>" + '<div class="container parameter-frame ftype-hide" id="parameters">' + '<div class="parameter-title-section"> Set Parameters</div>' + '<div class="parameter-desc" >The BIRT design you are uploading includes content that depends on parameters. Please select a value for each parameter and then click "Next" to finish the upload process.</div>' + '<div class="parameter-container"><div id="containerParameter" ></div></div>' + '<div class="upload-exe-section" >' + '<button class="btn btn-success btn-next">Next</button>' + "</div>" + "</div>";
        "</div>" + "</div>";
        return d
    },
    render: function () {
        this._element = actuate.common.web.$(this._getTemplate());
        actuate.common.web.$("#" + this._renderTo).html(this._element);
        this._addListeners();
        actuate.common.web.$(".btn-next").click(actuate.common.web.Method.bind(this._processParameters, this));
        window.setTimeout(actuate.common.web.Method.bind(this._process, this), 200)
    },
    _process: function () {
        actuate.load("parameter");
        actuate.load("viewer");
        actuate.load("dialog");
        var a = new actuate.RequestOptions;
        a.setVolume("Default Volume");
        var b = this._report.substring(this._report.lastIndexOf(".") + 1);
        if (b.toUpperCase() != "RPTDOCUMENT") {
            var c = function (b) {
                if (b != null) {
                    this._hasParameters = b["hasParameters"]
                }
                if (this._hasParameters) {
                    actuate.common.web.$("#parameterBtn").removeClass("ftype-hide"
                    );
                    actuate.common.web.$("#ivBtn").addClass("ftype-hide");
                    actuate.common.web.$("#parameters").removeClass("ftype-hide");
                    actuate.initialize(this._iportalBaseURL, a, this._username, null, actuate.Method.bind(this._prepareParameters, this))
                } else {
                    actuate.initialize(this._iportalBaseURL, a, this._username, null, actuate.Method.bind(this._renderIV, this))
                }
            };
            var d = {report: this._uploadBaseFolder + this._report};
            this._wizard._sendRequest("reportParam", "", d, actuate.common.web.Method.bind(c, this))
        } else {
            this._hasParameters = false;
            actuate.initialize(this._iportalBaseURL, a, this._username, null, actuate.Method.bind(this._renderIV, this))
        }
    },
    _prepareParameters: function () {
        this._wizard._ping("parameter");
        _paramObj = new actuate.parameter.Parameter("containerParameter", true);
        _paramObj.setReportName(this._uploadBaseFolder + this._report);
        _paramObj.submit()
    },
    _processParameters: function () {
        if (_paramObj) {
            var a = _paramObj.validateParameters();
            if (a) {
                var b = {
                    title: "Error",
                    okButton: {label: "OK", handler: actuate.common.web.Method.bind(this.okCallBack, this)}
                };
                var c = new Array;
                c.push({errorLabel: " ", errorMessage: a});
                actuate.common.web.util.Utility.showMsgDlg("wizardFinalPage", c, "severe", b);
                return
            }
            this._parameterMap = {};
            var d = actuate.Method.bind(this._renderIV, this);
            _paramObj.downloadParameterValues(d)
        }
    },
    _renderIV: function (a) {
        this._wizard._ping("features");
        actuate.common.web.$("#myFilesBody").removeClass("ac");
        actuate.common.web.$("#uploader").removeClass("ftype-hide");
        actuate.common.web.$("#viewerDiv").removeClass("ftype-hide");
        actuate.common.web.$("#parameters").addClass("ftype-hide");
        actuate.common.web.$("#explore").removeClass("ftype-hide");
        actuate.common.web.$("#ivBtn").removeClass("ftype-hide");
        actuate.common.web.$("#parameterBtn").addClass("ftype-hide");
        this._viewer = new actuate.Viewer("container", null, null, true);
        this._viewer.setReportName(this._uploadBaseFolder + this._report);
        if (this._hasParameters) {
            this._paramValues = a;
            for (var b = 0; b < a.length; b++) {
                var c = a[b].getName();
                var d = a[b].getValue();
                if (a[b].getValueIsNull()) {
                    d = null
                }
                this._parameterMap[c] = d
            }
            var e = [];
            for (var f in this._parameterMap) {
                var g = new actuate.viewer.impl.ParameterValue;
                g.setName(f);
                if (this._parameterMap[f] != null) {
                    g.setValue(this._parameterMap[f])
                } else {
                    g.setValueIsNull(true)
                }
                e.push(g)
            }
            if (e) {
                this._viewer.setParameterValues(e)
            }
        }
        var h = new actuate.viewer.UIOptions;
        this._viewer.setUIOptions(h);
        this._viewer.registerEventHandler(actuate.viewer.impl.EventConstants.ON_EXCEPTION, actuate.common.web.Method.bind(this._handleException, this));
        this._viewer.submit(actuate.common.web.Method.bind(function () {
            this._viewer.enableIV()
        }, this))
    },
    _handleException: function (a) {
        var b = {
            title: "Error", okButton: {
                label: "OK", handler: actuate.common.web.Method.bind(function () {
                    actuate.common.web.$("#myFilesBody").removeClass("ac");
                    var a = {
                        report: "Flight Delay Sample Report.rptdesign",
                        state: "final",
                        renderTo: "myFilesContainer",
                        helper: getContentHelper(),
                        fileUploadServletPath: '<html:rewrite page="/servlet/AsyncFileUpload"/>',
                        uploadBaseFolder: "/F-Type Examples/",
                        iportalBaseURL: this._iportalBaseURL,
                        canPing: this._wizard._canPing,
                        pingUrl: this._wizard._pingUrl,
                        aCode: this._wizard._aCode,
                        productName: this._wizard._productName,
                        buildNumber: this._wizard._buildNumber,
                        helpDocBase: this._wizard._helpDocBase
                    };
                    this._wizard._ping("launch sample");
                    var b = new actuate.common.web.widget.ui.wizard.UploadWizard(a);
                    b.launch()
                }, this)
            }
        };
        actuate.common.web.$("#myFilesBody").addClass("ac");
        var c = new Array;
        c.push({
            errorLabel: " ",
            errorMessage: "Your report failed to run. Please view one of our sample reports instead."
        });
        actuate.common.web.util.Utility.showMsgDlg("wizardFinalPage", c, "severe", b)
    },
    _launchIntegrate: function () {
        this._wizard._ping("integrate");
        this.hideCalendar();
        var a = function (a) {
            return localizedProfileMsg[a]
        };
        var b = function (a) {
            a.close()
        };
        var c = {
            iportalBaseURL: this._iportalBaseURL,
            volume: "Default Volume",
            reportBase: this._uploadBaseFolder,
            reportName: this._report,
            username: this._username,
            parameterMap: this._parameterMap,
            viewer: this._viewer,
            helpDocBase: this._wizard._helpDocBase,
            wizard: this._wizard
        };
        this._integrate = new actuate.common.web.widget.dialog.IntegrateDialog(c);
        this._integrate.addListener("ON_GETLOCALIZATION_STRING", a);
        this._integrate.addListener("ON_OK", actuate.common.web.Method.bind(b, this));
        this._integrate.render("integratepopup")
    },
    _launchExport: function () {
        this._wizard._ping("export");
        this.hideCalendar();
        this._backdrop = "";
        this._spin = "";
        if (this._viewer) {
            var a = function (a) {
                return localizedProfileMsg[a]
            };
            var b = function (a) {
                actuate.common.web.$(".contentPanel").click();
                var b = new actuate.viewer.RenderOptions;
                b.setOption(actuate.viewer.RenderOptions.IS_MULTISHEET, false);
                this._viewer.downloadReport("XLS", "", b);
                a.close();
                _backdrop = actuate.common.web.$('<div class="act-msgDlg"><div class="modal-backdrop"></div>');
                _backdrop.appendTo(document.body);
                _spin = actuate.common.web.$('<div class="modal fade in centeralign" style=" top: 40%; left: 60%; background: none; border: 0px; box-shadow: none; ">' + '<i class="icon-ygg-spinner icon-spin icon-large"></i></div>');
                _spin.appendTo(actuate.common.web.$("#modal"));
                window.setTimeout("this._backdrop.remove();this._spin.remove();", 2e3)
            };
            var c = function (a) {
                a.close()
            };
            var d = {helpDocBase: this._wizard._helpDocBase};
            this._export = new actuate.common.web.widget.dialog.ExportDialog(d);
            this._export.addListener("ON_GETLOCALIZATION_STRING", a);
            this._export.addListener("ON_OK", actuate.common.web.Method.bind(b, this));
            this._export.addListener("ON_CANCEL", c);
            this._export.render("popup")
        }
    },
    _launchInteract: function () {
        this._wizard._ping("interact");
        this.hideCalendar();
        var a = function (a) {
            return localizedProfileMsg[a]
        };
        var b = function (a) {
            a.close()
        };
        var c = {helpDocBase: this._wizard._helpDocBase};
        this._interact = new actuate.common.web.widget.dialog.InteractDialog(c);
        this._interact.addListener("ON_GETLOCALIZATION_STRING", a);
        this._interact.addListener("ON_OK", b);
        this._interact.render("popup")
    },
    _launchShare: function () {
        this._wizard._ping("share");
        this.hideCalendar();
        var a = function (a) {
            return localizedProfileMsg[a]
        };
        var b = function (a) {
            a.close()
        };
        var c = {helpDocBase: this._wizard._helpDocBase};
        this._share = new actuate.common.web.widget.dialog.ShareDialog(c);
        this._share.addListener("ON_GETLOCALIZATION_STRING", a);
        this._share.addListener("ON_OK", b);
        this._share.render("popup")
    },
    _launchScheduler: function () {
        this._wizard._ping("schedule");
        this.hideCalendar();
        var a = this._iportalBaseURL;
        var b = {
            iportalBaseURL: this._iportalBaseURL,
            volume: "Default Volume",
            reportBase: this._uploadBaseFolder,
            reportName: this._report,
            helpDocBase: this._wizard._helpDocBase
        };
        var c = function (a) {
            return localizedProfileMsg[a]
        };
        var d = function (b) {
            var c = null;
            var d = location.href;
            var e = d.indexOf("://");
            var f = d.substring(0, e);
            submitAjaxForm(document, a + "/submitjob.do", b, this._paramValues)
        };
        this._scheduler = new actuate.common.web.widget.dialog.SchedulerDialog(b);
        this._scheduler.addListener("ON_GETLOCALIZATION_STRING", c);
        this._scheduler.addListener("ON_OK", actuate.common.web.Method.bind(d, this));
        this._scheduler.render("popup")
    },
    _exit: function () {
        this._wizard.confirmExit("popup")
    },
    _addListeners: function () {
        actuate.common.web.$(".btn-exit-uploader").click(actuate.common.web.Method.bind(this._exit, this));
        actuate.common.web.$(".btn-exit-uploader_1").click(actuate.common.web.Method.bind(this._exit, this));
        actuate.common.web.$(".choose-different-report").click(actuate.common.web.Method.bind(this._chooseDifferentReport, this));
        actuate.common.web.$(".back-to-resource-upload").click(actuate.common.web.Method.bind(this._backToResourceUpload, this));
        actuate.common.web.$("#interact").click(actuate.common.web.Method.bind(this._launchInteract, this));
        actuate.common.web.$("#schedule").click(actuate.common.web.Method.bind(this._launchScheduler, this));
        actuate.common.web.$("#share").click(actuate.common.web.Method.bind(this._launchShare, this));
        actuate.common.web.$("#export").click(actuate.common.web.Method.bind(this._launchExport, this));
        actuate.common.web.$("#integrate").click(actuate.common.web.Method.bind(this._launchIntegrate, this))
    },
    _chooseDifferentReport: function () {
        this._wizard.transferStateTo("upload")
    },
    _backToResourceUpload: function () {
        this._wizard.transferStateTo("resource")
    },
    hideCalendar: function () {
        var a = "wrapperactuate_iv_ui_view_ivParameter_contentDiv_container_calendar.div";
        var b = document.getElementById(a);
        var c = null;
        if (b && b.calendarInstance) {
            b.style.display = "none"
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.ResourcePage = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.ResourcePage.prototype = {
    _listener: null,
    _renderTo: null,
    _element: null,
    _report: null,
    _wizard: null,
    _uploadBaseFolder: null,
    _helpDocBase: null,
    _iportalBaseURL: null,
    _manager: null,
    pageID: "wizardResourcePage",
    initialize: function (a) {
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._wizard = a.wizard;
        this._uploadBaseFolder = a.uploadBaseFolder;
        this._helpDocBase = a.helpDocBase;
        this._iportalBaseURL = a.iportalBaseURL;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_resourcePage_exitUploaderStr"];
        var b = localizedProfileMsg["ftypewizard_resourcePage_titleStr"];
        var c = localizedProfileMsg["ftypewizard_resourcePage_fileToInportStr"];
        var d = localizedProfileMsg["ftypewizard_resourcePage_chooseDifferentReportStr"];
        var e = localizedProfileMsg["ftypewizard_resourcePage_runReportBtnStr"];
        var f = this._iportalBaseURL + "/iportal/activePortal/images/filetypes/rptdesign16x16.png";
        var g = localizedProfileMsg["ftypewizard_resourcePage_uploadLinkStr"];
        var h = localizedProfileMsg["ftypewizard_resourcePage_removeLinkStr"];
        var i = localizedProfileMsg["ftypewizard_resourcePage_cancelLinkStr"];
        var j = '<div id="' + this.pageID + '">' + '<div class="exit-section">' + '<a class="btn btn-default btn-exit-uploader">' + a + "</a>" + "</div>" + '<div class="container container-resource">' + '<div class="title-section">' + b + "</div>" + '<div class="report-name-section">' + '<div class="row">' + '<div class="report-label span">' + '<div class="row">' + '<div class="file-to-import-label span">' + c + "</div>" + '<div class="span">' + '<img class="report-icon" src="' + f + '"/>' + '<span class="report-name"></span>' + "</div>" + "</div>" + "</div>" + '<div class="span">' + '<a class="choose-different-report" href="#">' + d + "</a>" + "</div>" + "</div>" + "</div>" + '<div class="manager-container">' + "</div>" + '<div class="next-section">' + '<a class="btn btn-success btn-next">' + e + "</a>" + "</div>" + "</div>" + "</div>";
        return j
    },
    _addListeners: function () {
        actuate.common.web.$(".btn-exit-uploader").click(actuate.common.web.Method.bind(this._exit, this));
        actuate.common.web.$(".choose-different-report").click(actuate.common.web.Method.bind(this._chooseDifferentReport, this));
        actuate.common.web.$(".btn-next").click(actuate.common.web.Method.bind(this._next, this))
    },
    _exit: function () {
        this._wizard.confirmExit(this.pageID)
    },
    _next: function () {
        if (!this._manager.isResourcesComplete()) {
            var a = localizedProfileMsg["ftypewizard_resourcePage_sureToProceedStr"];
            var b = localizedProfileMsg["ftypewizard_resourcePage_notUploadedAllStr"];
            var c = localizedProfileMsg["ftypewizard_resourcePage_proceedAnywayStr"];
            var d = {
                id: this.pageID,
                msg: a,
                type: "confirmation",
                dialogConfig: {
                    title: b,
                    okButton: {
                        label: c,
                        handler: actuate.Method.bind2(this._wizard.transferStateTo, this._wizard, "final")
                    },
                    cancelButton: {label: localizedProfileMsg["ftypewizard_resourcePage_cancelLinkStr"]}
                }
            };
            var e = new actuate.common.web.widget.dialog.ConfirmDialog(d);
            e.setHideCloseButton(false);
            e.render()
        } else {
            this._wizard.transferStateTo("final")
        }
    },
    _disableNext: function (a) {
        var b = actuate.common.web.$(".btn-next");
        if (a) {
            b.addClass("disabled");
            b.removeClass("btn-success");
            b.unbind("click")
        } else {
            b.removeClass("disabled");
            b.addClass("btn-success");
            b.unbind("click");
            b.on("click", actuate.Method.bind(this._next, this))
        }
    },
    _handleRootFileError: function () {
        var a = localizedProfileMsg["ftypewizard_resourcePage_errorTitle"];
        var b = localizedProfileMsg["ftypewizard_resourcePage_invalidFormatStr"];
        var c = localizedProfileMsg["ftypewizard_resourcePage_chooseDifferentFileStr"];
        var d = {
            id: this.pageID,
            msg: b,
            type: "error",
            dialogConfig: {
                title: a, okButton: {
                    label: c, handler: actuate.Method.bind(function () {
                        this._chooseDifferentReport()
                    }, this)
                }, cancelButton: {label: "Cancel"}
            }
        };
        var e = new actuate.common.web.widget.dialog.ConfirmDialog(d);
        e.setHideCloseButton(true);
        e.setHideCancelButton(true);
        e.render()
    },
    _chooseDifferentReport: function () {
        var a = actuate.Method.bind(function (a) {
            this._wizard.transferStateTo("upload")
        }, this);
        var b = function () {
        };
        var c = this._uploadBaseFolder + this._report;
        this._wizard.deleteFile(c, a, b)
    },
    render: function () {
        var a = this._uploadBaseFolder + this._report;
        var b = {
            file: a,
            iportalBaseURL: this._iportalBaseURL,
            helpDocBase: this._helpDocBase,
            helper: this._wizard.getHelper(),
            complexTypeList: ["rptdesign", "rptdocument", "rptlibrary"],
            fileUploadServletPath: this._wizard.getFileUploadServletPath()
        };
        this._manager = new actuate.common.web.widget.ui.wizard.FileResourceManager(b);
        this._manager.register(this._manager.ON_SYSTEM_RESOURCE_MISSING, actuate.Method.bind2(this._disableNext, this, true));
        this._manager.register(this._manager.ON_SYSTEM_RESOURCE_READY, actuate.Method.bind2(this._disableNext, this, false));
        this._manager.register(this._manager.ON_ROOT_FILE_ERROR, actuate.Method.bind(this._handleRootFileError, this));
        var c = actuate.common.web.Method.bind(function () {
            if (this._manager.isResourcesComplete()) {
                this._wizard.transferStateTo("final")
            } else {
                this._wizard._ping("resource");
                this._element = actuate.common.web.$(this._getTemplate());
                actuate.common.web.$("#" + this._renderTo).html(this._element);
                this._addListeners();
                actuate.common.web.$(".report-name").html(this._report);
                this._manager.render(actuate.common.web.$(".manager-container"))
            }
        }, this);
        this._manager.loadResources(a, c)
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.UploadPage = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.UploadPage.prototype = {
    _listener: null,
    _renderTo: null,
    _element: null,
    _report: null,
    _wizard: null,
    pageID: "wizardUploadPage",
    initialize: function (a) {
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._wizard = a.wizard;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    setReport: function (a) {
        this._report = a;
        this._wizard.setReport(a)
    },
    getReport: function () {
        return this._report
    },
    _getTemplate: function () {
        var a = localizedProfileMsg["ftypewizard_uploadpage_exitUploaderStr"];
        var b = localizedProfileMsg["ftypewizard_uploadpage_uploadButtonStr"];
        var c = localizedProfileMsg["ftypewizard_uploadpage_chooseFileButtonStr"];
        var d = localizedProfileMsg["ftypewizard_uploadpage_titleStr"];
        var e = localizedProfileMsg["ftypewizard_uploadpage_topExplainStr"];
        var f = localizedProfileMsg["ftypewizard_uploadpage_bottomExplainStr1"];
        var g = localizedProfileMsg["ftypewizard_uploadpage_bottomExplainStr2"];
        var h = localizedProfileMsg["ftypewizard_uploadpage_downloadSampleReportStr"];
        var i = localizedProfileMsg["ftypewizard_uploadpage_moreExplainStr1"];
        var j = '<div id="' + this.pageID + '">' + '<div class="exit-section">' + '<a class="btn btn-default btn-exit-uploader">' + a + "</a>" + "</div>" + '<div class="container upload-frame">' + '<div class="row title-section">' + d + "</div>" + '<div class="row top-explain-section">' + e + "</div>" + '<div class="row top-detail-section">' + i + "</div>" + '<div class="row upload-section">' + '<div class="span span-content">' + '<input class="form-input path-input" type="text" placeholder="File Path" disabled >' + "</div>" + '<div class="span span-content browse-button-wrapper">' + '<a class="btn btn-default file-input-wrapper">' + c + '<input class="file-input-hidden" name="file" type="file"/>' + "</a>" + "</div>" + "</div>" + '<div class="row bottom-explain-section">' + '<div class="span span-content">' + f + '<a class="download-sample" href="#">' + h + "</a>" + g + "</div>" + "</div>" + '<div class="row upload-exe-section">' + '<a class="btn btn-success btn-upload-exe">' + b + "</a>" + "</div>" + "</div>" + "</div>";
        return j
    },
    _exit: function () {
        this._wizard.confirmExit(this.pageID)
    },
    _processReportUpload: function () {
        var a = function (a) {
            if (a.success) {
                this._wizard.transferStateTo("resource")
            } else {
                var b = localizedProfileMsg["ftypewizard_uploadpage_uploadFileError"];
                var c = a.errMsg;
                this._wizard.confirm(this.pageID, b, c, "error")
            }
        };
        var b = actuate.util.Utility.getFileExtension(this._report);
        b = b ? b.toLowerCase() : "";
        var c = localizedProfileMsg["ftypewizard_uploadpage_mustChoose"];
        if (!this._report) {
            var d = localizedProfileMsg["ftypewizard_uploadpage_noFileChosen"];
            this._wizard.confirm(this.pageID, d, c, "error")
        } else if (b != "rptdesign" && b != "rptdocument") {
            var d = localizedProfileMsg["ftypewizard_uploadpage_incorrectFileType"];
            this._wizard.confirm(this.pageID, d, c, "error")
        } else {
            this._wizard.uploadReport(actuate.common.web.$(".file-input-hidden")[0], actuate.common.web.Method.bind(a, this))
        }
    },
    _onDownloadSample: function () {
        var a = this._wizard.getHelpDocBase() + "/reports/sample1.zip";
        window.open(a)
    },
    _addListeners: function () {
        actuate.common.web.$(".btn-exit-uploader").click(actuate.Method.bind(this._exit, this));
        actuate.common.web.$(".btn-upload-exe").click(actuate.Method.bind(this._processReportUpload, this));
        actuate.common.web.$(".download-sample").click(actuate.Method.bind(this._onDownloadSample, this))
    },
    render: function () {
        this._report = null;
        this._element = actuate.common.web.$(this._getTemplate());
        actuate.common.web.$("#" + this._renderTo).html(this._element);
        this._addListeners();
        this._uploadButtonSetup()
    },
    _uploadButtonSetup: function () {
        var a = actuate.common.web.$;
        a(".file-input-wrapper").click(function () {
            a(".file-input-hidden")[0].click()
        });
        a(".file-input-hidden").on("change", actuate.common.web.Method.bind(function () {
            var a = actuate.common.web.$(".file-input-hidden").val();
            a = a.substring(a.lastIndexOf("\\") + 1, a.length);
            actuate.common.web.$(".path-input")[0].value = a;
            this.setReport(a)
        }, this))
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard");
actuate.common.web.widget.ui.wizard.UploadWizard = actuate.common.web.Class.create();
actuate.common.web.widget.ui.wizard.UploadWizard.prototype = {
    _state: null,
    _report: null,
    _listener: null,
    _renderTo: null,
    _helper: null,
    _uploadBaseFolder: null,
    _fileUploadServletPath: null,
    _iportalBaseURL: null,
    _hasparameters: false,
    _helpDocBase: null,
    _canPing: null,
    _pingUrl: null,
    _aCode: null,
    _productName: null,
    _buildNumber: null,
    initialize: function (a) {
        this._state = a.state;
        this._report = a.report;
        this._renderTo = a.renderTo;
        this._helper = a.helper;
        this._uploadBaseFolder = a.uploadBaseFolder;
        this._fileUploadServletPath = a.fileUploadServletPath;
        this._iportalBaseURL = a.iportalBaseURL;
        this._helpDocBase = a.helpDocBase;
        this._canPing = a.canPing;
        this._pingUrl = a.pingUrl;
        this._aCode = a.aCode;
        this._productName = a.productName;
        this._buildNumber = a.buildNumber;
        this._listener = new actuate.common.web.widget.layout.LayoutListener
    },
    setState: function (a) {
        this._state = a
    },
    getState: function () {
        return this._sate
    },
    setReport: function (a) {
        this._report = a
    },
    getReport: function () {
        return this._report
    },
    getHelper: function () {
        return this._helper
    },
    getFileUploadServletPath: function () {
        return this._fileUploadServletPath
    },
    getHelpDocBase: function () {
        return this._helpDocBase
    },
    register: function (a, b) {
        this._listener.addListener(a, b)
    },
    fire: function () {
        return this._listener.invokeListener.apply(this._listener, arguments)
    },
    confirm: function (a, b, c, d) {
        var e = {
            id: a,
            msg: c,
            type: d,
            dialogConfig: {title: b, okButton: {label: "OK"}, cancelButton: {label: "Cancel"}},
            contentMaxWidth: 550
        };
        var f = new actuate.common.web.widget.dialog.ConfirmDialog(e);
        f.setHideCloseButton(false);
        f.setHideCancelButton(true);
        f.render()
    },
    transferStateTo: function (a) {
        var b = actuate.common.web.Method.bind(function (b) {
            var c = this._handleAuthentication(b);
            if (c) {
                this.setState(a);
                this.launch()
            }
        }, this);
        if (a == "upload") {
            this._report = null
        }
        var c = {state: a, report: this._report};
        this._sendRequest("ftypewizard", "update", c, b)
    },
    enable: function (a) {
        var b = actuate.common.web.Method.bind(function (b) {
            var c = this._handleAuthentication(b);
            if (c) {
                a()
            }
        }, this);
        var c = {disabled: false};
        this._sendRequest("ftypewizard", "update", c, b)
    },
    uploadReport: function (a, b) {
        var c = this;
        var d = function (a) {
            var d = c._handleAuthentication(a);
            if (d) {
                b(a)
            }
        };
        this.uploadFile(a.files, d)
    },
    uploadFile: function (a, b) {
        for (var c = 0; c < a.length; c++) {
            var d = actuate.util.Utility.getFileExtension(a[c].name).toLowerCase();
            if (d != "rptdesign" && d != "rptdocument") return;
            var e = new XMLHttpRequest;
            e.onload = function () {
                if (e.readyState == 4 && e.status === 200) b(actuate.common.web.$.parseJSON(e.responseText))
            };
            e.open("post", this._fileUploadServletPath);
            var f = new FormData;
            this.prepareFormData(f);
            f.append("targetFile", a[c].name);
            f.append("workingFolder", this._uploadBaseFolder);
            f.append("file", a[c]);
            e.send(f)
        }
    },
    deleteFile: function (a, b, c) {
        var d = actuate.Method.bind(function (a) {
            var c = this._handleAuthentication(a);
            if (c) {
                b(a)
            }
        }, this);
        var e = {name: a};
        this._sendRequest("/servlet/AsyncFileDelete", "delete", e, d, c)
    },
    checkReportResources: function (a, b) {
        var c = this;
        var d = function (a) {
            var d = c._handleAuthentication(a);
            if (d) {
                b(a)
            }
        };
        var e = {report: a};
        this._sendRequest("checkreportresources", "GetData", e, d)
    },
    prepareFormData: function (a) {
        a.append("__vp", "Default Volume");
        a.append("volume", "Default Volume");
        a.append("showBanner", "false");
        a.append("locale", "en_US");
        a.append("hiddenReplacementPolicy", "Create");
        a.append("copyDescription", "false");
        a.append("migrateDependencies", "false");
        a.append("copyAutoArchiveRules", "false");
        a.append("permission", "folder");
        a.append("ReplacementPolicy", "Create");
        a.append("permissionButton", "folder")
    },
    _setupTooltipAutoClear: function () {
        actuate.common.web.$("#myFilesBody").on("click", function (a) {
            if (a.target.className.indexOf("ftype-tooltip-source") < 0 && a.target.className.indexOf("ftype-popover-source") < 0) {
                actuate.common.web.$(".tooltip").remove();
                actuate.common.web.$(".ftype-popover-source").popover("hide")
            }
            var b = actuate.common.web.$(".resource-list-section");
            if (b.length > 0) {
                b.tooltip("hide");
                actuate.DDAreaTooltipShowing = false;
                b.css({border: "", opacity: 1})
            }
        })
    },
    launch: function () {
        this.enable(actuate.Method.bind(this._doLunch, this))
    },
    _doLunch: function () {
        actuate.common.web.$("#myFilesBody").addClass("ftype-wizard").addClass("ac");
        this._setupTooltipAutoClear();
        var a = this._state ? this._state : "upload";
        if (a == "upload") {
            var b = {report: this._report, renderTo: this._renderTo, wizard: this};
            this._ping(a);
            var c = new actuate.common.web.widget.ui.wizard.UploadPage(b);
            c.render()
        } else if (a == "resource") {
            var b = {
                report: this._report,
                renderTo: this._renderTo,
                uploadBaseFolder: this._uploadBaseFolder,
                iportalBaseURL: this._iportalBaseURL,
                helpDocBase: this._helpDocBase,
                wizard: this
            };
            var d = new actuate.common.web.widget.ui.wizard.ResourcePage(b);
            d.render()
        } else if (a == "final") {
            var b = {
                report: this._report,
                renderTo: this._renderTo,
                uploadBaseFolder: this._uploadBaseFolder,
                iportalBaseURL: this._iportalBaseURL,
                username: this._username,
                wizard: this
            };
            var e = new actuate.common.web.widget.ui.wizard.FinalPage(b);
            e.render()
        }
    },
    exit: function (a) {
        this._ping("exit");
        var b = {disabled: true, finished: a, state: "upload", report: ""};
        var c = function () {
            actuate.common.web.$("#myFilesBody").addClass("ac");
            window.setTimeout("top.location.reload();", 100)
        };
        this._sendRequest("ftypewizard", "update", b, c)
    },
    confirmExit: function (a) {
        var b = "When you next log in to BIRT iHub, you will return to this page.";
        var c = {
            id: a,
            msg: "",
            type: "confirmation",
            dialogConfig: {
                title: b,
                okButton: {label: "OK", handler: actuate.common.web.Method.bind2(this.exit, this)},
                cancelButton: {label: "Cancel"}
            }
        };
        var d = new actuate.common.web.widget.ui.wizard.dialog.ExitDialog(c);
        d.setHideCloseButton(false);
        d.render()
    },
    _handleAuthentication: function (a) {
        if (a["authenticated"] === false) {
            top.location.href = this._iportalBaseURL;
            return false
        }
        return true
    },
    _sendRequest: function (a, b, c, d, e, f) {
        var g = this._helper;
        g.setAjaxServletPath(a);
        var h = g.getRequestData(b, c, f);
        g.sendRequest(h, d, e)
    },
    _ping: function (activity) {
        if (eval(this._canPing)) {
            if (activity === "exit") {
                var cb = function (a) {
                    actuate.util.Utility.ping(this._pingUrl, this._aCode, this._productName, this._buildNumber, "tutorial", activity, btoa ? btoa(a.usageInfo) : a.usageInfo)
                };
                this._sendRequest("datausage", "GetData", null, actuate.common.web.Method.bind(cb, this))
            } else {
                actuate.util.Utility.ping(this._pingUrl, this._aCode, this._productName, this._buildNumber, "tutorial", activity, "")
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard.dialog");
actuate.common.web.widget.ui.wizard.dialog.ExitDialog = actuate.common.web.Class.extendClass(actuate.common.web.widget.dialog.ConfirmDialog, {
    initialize: function (a) {
        if (this.__extending) return;
        actuate.common.web.widget.ui.wizard.dialog.ExitDialog.superclass.initialize.call(this, a)
    }, _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width: 600px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 7px 50px 0;"></span>';
        var c = this._msg;
        var d = "Don't restart the tutorial&mdash;just let me log in to BIRT iHub directly from now on.";
        b += c;
        b += '<label class="checkbox doNotShow-section">' + '<input class="doNotShow" type="checkbox">' + d + "</label>";
        b += "</div>";
        return b
    }, render: function () {
        var a = null;
        var b = this;
        var c = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var d = function () {
            var c = false;
            var d = actuate.common.web.$(".doNotShow");
            if (d.length > 0) {
                c = d[0].checked
            }
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler(c)
            }
        };
        var e = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c)
        };
        var f = {render: actuate.common.web.Method.bind(e, this)};
        var g = [{
            label: this._dialogConfig.cancelButton.label,
            handler: actuate.common.web.Method.bind(c, this),
            type: "secondary"
        }, {
            label: this._dialogConfig.okButton.label,
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        if (this._hideCancelButton) {
            g.shift()
        }
        var h = {buttons: g, modal: true};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, f, h);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    }
});
actuate.common.web.Package.define("actuate.common.web.widget.ui.wizard.dialog");
actuate.common.web.widget.ui.wizard.dialog.ResourceConflictDialog = actuate.common.web.Class.extendClass(actuate.common.web.widget.dialog.ConfirmDialog, {
    _resources: null, EVENT_RESOLVE_CONFIRMED: "EVENT_RESOLVE_CONFIRMED", initialize: function (a) {
        if (this.__extending) return;
        this._resources = new actuate.util.HashMap;
        this.setResources(a.resources);
        var b = {
            id: "wizardResourcePage",
            msg: "Which resource(s) should be filled by the " + actuate.util.Utility.stripPath(a.resources[0].path) + " you provided?",
            type: "confirmation",
            dialogConfig: {title: "Conflict found", okButton: {label: "OK"}, cancelButton: {label: "Cancel"}}
        };
        actuate.common.web.widget.ui.wizard.dialog.ExitDialog.superclass.initialize.call(this, b)
    }, _getTemplate: function () {
        var a = this._infoMap[this._type];
        var b = '<div style="max-width: 500px;" id="' + this._dialogID + '-msg">';
        b += '<span class="' + a.icon + '" style="float:left; margin:0 7px 50px 0;"></span>';
        var c = this._msg;
        b += c;
        b += '<div class="conflict-listing-section"></div>';
        b += "</div>";
        return b
    }, _renderContent: function () {
        var a = actuate.common.web.$;
        var b = "";
        this._resources.each(function (a) {
            var c = a.value;
            b += '<label class="checkbox">' + '<input id="' + this._getResourceEntryId(c.serverPath) + '" class="conflict-resource-entry" type="checkbox">' + c.path + "</label>"
        }, this);
        a(".conflict-listing-section").html(b)
    }, _getResourceEntryId: function (a) {
        return "resourceEntry" + a.split(" ").join("-").split(".").join("-").split("/").join("-")
    }, setResources: function (a) {
        if (a && a.length > 0) {
            for (var b in a) {
                var c = a[b];
                this._resources.put(this._getResourceEntryId(c.serverPath), c)
            }
        }
    }, render: function () {
        var a = null;
        var b = this;
        var c = function () {
            a.close();
            if (b._dialogConfig.cancelButton.handler) {
                b._dialogConfig.cancelButton.handler()
            }
        };
        var d = function () {
            var c = false;
            var d = [];
            var e = actuate.common.web.$(".conflict-resource-entry");
            for (var f = 0; f < e.length; f++) {
                $entry = e[f];
                if ($entry.checked) {
                    d.push(this._resources.get($entry.id))
                }
            }
            this.fire(this.EVENT_RESOLVE_CONFIRMED, d);
            a.close();
            if (b._dialogConfig.okButton.handler) {
                b._dialogConfig.okButton.handler(c)
            }
        };
        var e = function (a) {
            var b = actuate.common.web.$(this._getTemplate());
            var c = actuate.common.web.$("#" + a);
            b.appendTo(c);
            this._renderContent()
        };
        var f = {render: actuate.common.web.Method.bind(e, this)};
        var g = [{
            label: this._dialogConfig.cancelButton.label,
            handler: actuate.common.web.Method.bind(c, this),
            type: "secondary"
        }, {
            label: this._dialogConfig.okButton.label,
            handler: actuate.common.web.Method.bind(d, this),
            type: "primary"
        }];
        if (this._hideCancelButton) {
            g.shift()
        }
        var h = {buttons: g, modal: true};
        a = new actuate.common.web.widget.dialog.Dialog(this._dialogID, this._title, f, h);
        a.setHideCloseButton(this._hideCloseButton);
        a.render()
    }
});
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    observers: false,
    element: function (a) {
        var b = a.target || a.srcElement;
        if (a.touches && a.touches.length == 1) {
            b = a.touches[0].target
        }
        return b
    },
    findElement: function (a, b) {
        var c = a.target || a.srcElement;
        if (a.touches && a.touches.length == 1) {
            c = a.touches[0].target
        }
        while (c && c.className != b) {
            c = c.parentNode
        }
        return c
    },
    isLeftClick: function (a) {
        if (a.touches) {
            return true
        }
        return a.which && a.which == 1 || a.button && a.button == 1
    },
    pointer: function (a) {
        if (a.touches) {
            var b = a.touches[0];
            return {x: b.pageX, y: b.pageY}
        }
        var c = document.documentElement, d = document.body || {scrollLeft: 0, scrollTop: 0};
        return {
            x: a.pageX || a.clientX + (c.scrollLeft || d.scrollLeft) - (c.clientLeft || 0),
            y: a.pageY || a.clientY + (c.scrollTop || d.scrollTop) - (c.clientTop || 0)
        }
    },
    pointerX: function (a) {
        if (a.touches) {
            var b = a.touches[0];
            if (b && b.pageX) {
                return b.pageX
            }
        }
        return a.pageX || a.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft)
    },
    pointerY: function (a) {
        if (a.touches) {
            var b = a.touches[0];
            return b.pageY
        }
        return a.pageY || a.clientY + (document.documentElement.scrollTop || document.body.scrollTop)
    },
    stop: function (a) {
        if (a.type == "touchstart" && a.touches && a.touches.length > 1) {
            return
        }
        if (a.preventDefault) {
            a.preventDefault();
            a.stopPropagation()
        } else {
            a.returnValue = false;
            a.cancelBubble = true
        }
    },
    _observeAndCache: function (a, b, c, d) {
        a = this.getDom(a);
        if (!this.observers) {
            this.observers = []
        }
        if (navigator) {
            var e = navigator.userAgent;
            if (e && e.toLowerCase().indexOf("msie") >= 0) {
                this.stopObserving(a, b, c)
            }
        }
        if (a.addEventListener) {
            this.observers.push([a, b, c, d]);
            a.addEventListener(b, c, d)
        } else if (a.attachEvent) {
            this.observers.push([a, b, c, d]);
            a.attachEvent("on" + b, c)
        }
    },
    unloadCache: function () {
        if (!actuate.common.web.util.Event.observers) {
            return
        }
        for (var a = 0; a < actuate.common.web.util.Event.observers.length; a++) {
            actuate.common.web.util.Event.stopObserving.apply(this, actuate.common.web.util.Event.observers[a]);
            actuate.common.web.util.Event.observers[a][0] = null
        }
        actuate.common.web.util.Event.observers = false
    },
    observe: function (a, b, c, d) {
        if (a) {
            a = this.getDom(a);
            d = d || false;
            this._observeAndCache(a, b, c, d)
        }
    },
    stopObserving: function (a, b, c, d) {
        if (a) {
            d = d || false;
            if (a.removeEventListener) {
                a.removeEventListener(b, c, d)
            } else if (a.detachEvent) {
                a.detachEvent("on" + b, c)
            }
        }
    },
    getDom: function (a) {
        if (!a || !document) {
            return null
        }
        return a.dom ? a.dom : typeof a == "string" ? document.getElementById(a) : a
    }
};
actuate.common.web.util.Event.observe(window, "unload", actuate.common.web.util.Event.unloadCache, false);
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Logging = {
    _CONSOLE_LOGGING: "console",
    _isLoggingOn: false,
    _loggingType: null,
    log: function (a) {
        if (this._isLoggingOn) {
            var b = this._getLogger();
            b.log(a)
        }
    },
    setLogging: function (a) {
        this._isLoggingOn = a
    },
    setLoggingType: function (a) {
        this._loggingType = a
    },
    _getLogger: function () {
        if (this._loggingType == this._CONSOLE_LOGGING || this._loggingType == null) {
            return new actuate.common.web.util.Logging.Console
        }
        return new actuate.common.web.util.Logging.Console
    }
};
actuate.common.web.util.Logging.Console = actuate.common.web.Class.create();
actuate.common.web.util.Logging.Console.prototype = {
    log: function (a) {
        try {
            if (console) {
                var b = actuate.common.web.$.toJSON(a);
                console.log(b)
            }
        } catch (c) {
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.Style = {
    _headElement: null, addStyleSheet: function (a, b) {
        var c = document.createElement("style");
        c.type = "text/css";
        if (b) {
            c.title = b
        }
        if (a) {
            if (c.styleSheet) {
                c.styleSheet.cssText = a
            } else {
                c.appendChild(document.createTextNode(a))
            }
        }
        if (!this._headElement) {
            this._headElement = document.getElementsByTagName("head")[0]
        }
        this._headElement.appendChild(c);
        return c
    }, addExternalStyleSheet: function (a) {
        a = actuate.common.web.util.Utility.makeAbsoluteUrl(a);
        a += "?" + actuate.common.web.Version.getVersionParam();
        var b = document.createElement("link");
        b.rel = "stylesheet";
        b.type = "text/css";
        b.href = a;
        if (!this._headElement) {
            this._headElement = document.getElementsByTagName("head")[0]
        }
        this._headElement.appendChild(b)
    }, findCSSRule: function (a, b, c) {
        if (!a) {
            return
        }
        var d = false;
        var e;
        if (a.cssRules) {
            e = a.cssRules
        } else {
            e = a.rules
        }
        for (var f = 0; f < e.length; f++) {
            d = e[f];
            if (d) {
                if (d.selectorText == b) {
                    if (c) {
                        if (a.deleteRule) {
                            a.deleteRule(f)
                        } else {
                            a.removeRule(f)
                        }
                        return true
                    } else {
                        return d
                    }
                }
            }
        }
    }, getStyleSheet: function (a) {
        if (document.styleSheets) {
            return document.styleSheets[a]
        }
    }, findStyleSheet: function (a) {
        if (document.styleSheets) {
            for (var b = 0; b < document.styleSheets.length; b++) {
                var c = document.styleSheets[b];
                if (c.title == a) {
                    return c
                }
            }
        }
        return null
    }, findFreeStyleSheet: function () {
        if (document.styleSheets) {
            for (var a = 0; a < document.styleSheets.length; a++) {
                var b = document.styleSheets[a];
                if (!b.ownerNode || b.ownerNode.tagName.toLowerCase() == "style") {
                    return b
                }
            }
        }
        return null
    }, deleteCSSRule: function (a, b) {
        return this.getCSSRule(a, b, true)
    }, addCSSRule: function (a, b, c) {
        if (document.styleSheets) {
            if (!a) {
                a = this.findFreeStyleSheet();
                if (!a) {
                    return
                }
            }
            if (a.addRule) {
                a.addRule(b, c ? c : null, 0)
            } else {
                a.insertRule(b + " {" + (c ? c : "") + "}", 0)
            }
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.util");
actuate.common.web.util.TimeZoneLocaleUtil = {
    _locales: {
        sq_AL: "Albanian",
        ar_DZ: "Arabic (Algeria)",
        ar_BH: "Arabic (Bahrain)",
        ar_EG: "Arabic (Egypt)",
        ar_IQ: "Arabic (Iraq)",
        ar_JO: "Arabic (Jordan)",
        ar_KW: "Arabic (Kuwait)",
        ar_LB: "Arabic (Lebanon)",
        ar_LY: "Arabic (Libya)",
        ar_MA: "Arabic (Morocco)",
        ar_OM: "Arabic (Oman)",
        ar_QA: "Arabic (Qatar)",
        ar_SA: "Arabic (Saudi Arabia)",
        ar_SY: "Arabic (Syria)",
        ar_TN: "Arabic (Tunisia)",
        ar_AE: "Arabic (U.A.E)",
        ar_YE: "Arabic (Yemen)",
        bg_BG: "Bulgarian",
        zh_HK: "Chinese (Hong Kong SAR)",
        zh_CN: "Chinese (PRC)",
        zh_SG: "Chinese (Singapore)",
        zh_TW: "Chinese (Taiwan)",
        hr_HR: "Croatian",
        cs_CZ: "Czech",
        da_DK: "Danish (Denmark)",
        nl_BE: "Dutch (Belgium)",
        nl_NL: "Dutch (Netherlands)",
        en_AU: "English (Australia)",
        en_BZ: "English (Belize)",
        en_CA: "English (Canada)",
        en_IE: "English (Ireland)",
        en_NZ: "English (New Zealand)",
        en_ZA: "English (South Africa)",
        en_GB: "English (United Kingdom)",
        en_US: "English (United States)",
        et_EE: "Estonian",
        fa_IR: "Farsi",
        fi_FI: "Finnish",
        fr_CA: "French (Canada)",
        fr_FR: "French (France)",
        fr_CH: "French (Switzerland)",
        de_AT: "German (Austria)",
        de_DE: "German (Germany)",
        de_LI: "German (Liechtenstein)",
        de_CH: "German (Switzerland)",
        el_GR: "Greek",
        he_IL: "Hebrew",
        iw_IL: "Hebrew (iw_IL)",
        hu_HU: "Hungarian",
        id_ID: "Indonesian",
        in_ID: "Indonesian (in_ID)",
        it_IT: "Italian (Italy)",
        it_CH: "Italian (Switzerland)",
        ja_JP: "Japanese",
        ko_KR: "Korean",
        lv_LV: "Latvian",
        no_NO: "Norwegian (Bokmal)",
        no_NY: "Norwegian (Nynorsk)",
        pl_PL: "Polish",
        pt_BR: "Portuguese (Brazil)",
        pt_PT: "Portuguese (Portugal)",
        ro_RO: "Romanian",
        ru_RU: "Russian",
        sr_YU: "Serbian (Latin)  (Yugoslavia)",
        sk_SK: "Slovak",
        sl_SI: "Slovenian",
        es_MX: "Spanish (Mexico)",
        es_ES: "Spanish (Spain)",
        sv_FI: "Swedish (Finland)",
        sv_SE: "Swedish (Sweden)",
        th_TH: "Thai",
        tr_TR: "Turkish (Turkey)",
        uk_UA: "Ukrainian (Ukraine)"
    }, _timeZones: {
        "Africa/Abidjan": "Africa/Abidjan",
        "Africa/Accra": "Africa/Accra",
        "Africa/Addis_Ababa": "Africa/Addis Ababa",
        "Africa/Algiers": "Africa/Algiers",
        "Africa/Asmera": "Africa/Asmera",
        "Africa/Bamako": "Africa/Bamako",
        "Africa/Bangui": "Africa/Bangui",
        "Africa/Banjul": "Africa/Banjul",
        "Africa/Bissau": "Africa/Bissau",
        "Africa/Blantyre": "Africa/Blantyre",
        "Africa/Brazzaville": "Africa/Brazzaville",
        "Africa/Bujumbura": "Africa/Bujumbura",
        "Africa/Cairo": "Africa/Cairo",
        "Africa/Casablanca": "Africa/Casablanca",
        "Africa/Ceuta": "Africa/Ceuta",
        "Africa/Conakry": "Africa/Conakry",
        "Africa/Dakar": "Africa/Dakar",
        "Africa/Dar_es_Salaam": "Africa/Dar es Salaam",
        "Africa/Djibouti": "Africa/Djibouti",
        "Africa/Douala": "Africa/Douala",
        "Africa/El_Aaiun": "Africa/El Aaiun",
        "Africa/Freetown": "Africa/Freetown",
        "Africa/Gaborone": "Africa/Gaborone",
        "Africa/Harare": "Africa/Harare",
        "Africa/Johannesburg": "Africa/Johannesburg",
        "Africa/Kampala": "Africa/Kampala",
        "Africa/Khartoum": "Africa/Khartoum",
        "Africa/Kigali": "Africa/Kigali",
        "Africa/Kinshasa": "Africa/Kinshasa",
        "Africa/Lagos": "Africa/Lagos",
        "Africa/Libreville": "Africa/Libreville",
        "Africa/Lome": "Africa/Lome",
        "Africa/Luanda": "Africa/Luanda",
        "Africa/Lubumbashi": "Africa/Lubumbashi",
        "Africa/Lusaka": "Africa/Lusaka",
        "Africa/Malabo": "Africa/Malabo",
        "Africa/Maputo": "Africa/Maputo",
        "Africa/Maseru": "Africa/Maseru",
        "Africa/Mbabane": "Africa/Mbabane",
        "Africa/Mogadishu": "Africa/Mogadishu",
        "Africa/Monrovia": "Africa/Monrovia",
        "Africa/Nairobi": "Africa/Nairobi",
        "Africa/Ndjamena": "Africa/Ndjamena",
        "Africa/Niamey": "Africa/Niamey",
        "Africa/Nouakchott": "Africa/Nouakchott",
        "Africa/Ouagadougou": "Africa/Ouagadougou",
        "Africa/Porto-Novo": "Africa/Porto-Novo",
        "Africa/Sao_Tome": "Africa/Sao Tome",
        "Africa/Timbuktu": "Africa/Timbuktu",
        "Africa/Tripoli": "Africa/Tripoli",
        "Africa/Tunis": "Africa/Tunis",
        "Africa/Windhoek": "Africa/Windhoek",
        "America/Adak": "Americas/Adak",
        "America/Anchorage": "Americas/Anchorage",
        "America/Anguilla": "Americas/Anguilla",
        "America/Antigua": "Americas/Antigua",
        "America/Araguaina": "Americas/Araguaina",
        "America/Aruba": "Americas/Aruba",
        "America/Asuncion": "Americas/Asuncion",
        "America/Atikokan": "Americas/Atikokan",
        "America/Atka": "Americas/Atka",
        "America/Bahia": "Americas/Bahia",
        "America/Barbados": "Americas/Barbados",
        "America/Belem": "Americas/Belem",
        "America/Belize": "Americas/Belize",
        "America/Blanc-Sablon": "Americas/Blanc-Sablon",
        "America/Boa_Vista": "Americas/Boa Vista",
        "America/Bogota": "Americas/Bogota",
        "America/Boise": "Americas/Boise",
        "America/Buenos_Aires": "Americas/Buenos Aires",
        "America/Cambridge_Bay": "Americas/Cambridge Bay",
        "America/Campo_Grande": "Americas/Campo Grande",
        "America/Cancun": "Americas/Cancun",
        "America/Caracas": "Americas/Caracas",
        "America/Catamarca": "Americas/Catamarca",
        "America/Cayenne": "Americas/Cayenne",
        "America/Cayman": "Americas/Cayman",
        "America/Chicago": "Americas/Chicago",
        "America/Chihuahua": "Americas/Chihuahua",
        "America/ComodRivadavia": "Americas/ComodRivadavia",
        "America/Coral_Harbour": "Americas/Coral Harbour",
        "America/Cordoba": "Americas/Cordoba",
        "America/Costa_Rica": "Americas/Costa Rica",
        "America/Cuiaba": "Americas/Cuiaba",
        "America/Curacao": "Americas/Curacao",
        "America/Danmarkshavn": "Americas/Danmarkshavn",
        "America/Dawson": "Americas/Dawson",
        "America/Dawson_Creek": "Americas/Dawson Creek",
        "America/Denver": "Americas/Denver",
        "America/Detroit": "Americas/Detroit",
        "America/Dominica": "Americas/Dominica",
        "America/Edmonton": "Americas/Edmonton",
        "America/Eirunepe": "Americas/Eirunepe",
        "America/El_Salvador": "Americas/El Salvador",
        "America/Ensenada": "Americas/Ensenada",
        "America/Fort_Wayne": "Americas/Fort Wayne",
        "America/Fortaleza": "Americas/Fortaleza",
        "America/Glace_Bay": "Americas/Glace Bay",
        "America/Godthab": "Americas/Godthab",
        "America/Goose_Bay": "Americas/Goose Bay",
        "America/Grand_Turk": "Americas/Grand Turk",
        "America/Grenada": "Americas/Grenada",
        "America/Guadeloupe": "Americas/Guadeloupe",
        "America/Guatemala": "Americas/Guatemala",
        "America/Guayaquil": "Americas/Guayaquil",
        "America/Guyana": "Americas/Guyana",
        "America/Halifax": "Americas/Halifax",
        "America/Havana": "Americas/Havana",
        "America/Hermosillo": "Americas/Hermosillo",
        "America/Indianapolis": "Americas/Indianapolis",
        "America/Inuvik": "Americas/Inuvik",
        "America/Iqaluit": "Americas/Iqaluit",
        "America/Jamaica": "Americas/Jamaica",
        "America/Jujuy": "Americas/Jujuy",
        "America/Juneau": "Americas/Juneau",
        "America/Knox_IN": "Americas/Knox IN",
        "America/La_Paz": "Americas/La Paz",
        "America/La_Rioja": "Americas/La Rioja",
        "America/Lima": "Americas/Lima",
        "America/Los_Angeles": "Americas/Los Angeles",
        "America/Louisville": "Americas/Louisville",
        "America/Maceio": "Americas/Maceio",
        "America/Managua": "Americas/Managua",
        "America/Manaus": "Americas/Manaus",
        "America/Marengo": "Americas/Marengo",
        "America/Martinique": "Americas/Martinique",
        "America/Mazatlan": "Americas/Mazatlan",
        "America/Mendoza": "Americas/Mendoza",
        "America/Menominee": "Americas/Menominee",
        "America/Merida": "Americas/Merida",
        "America/Mexico_City": "Americas/Mexico City",
        "America/Miquelon": "Americas/Miquelon",
        "America/Moncton": "Americas/Moncton",
        "America/Monterrey": "Americas/Monterrey",
        "America/Montevideo": "Americas/Montevideo",
        "America/Monticello": "Americas/Monticello",
        "America/Montreal": "Americas/Montreal",
        "America/Montserrat": "Americas/Montserrat",
        "America/Nassau": "Americas/Nassau",
        "America/New_Salem": "Americas/New Salem",
        "America/New_York": "Americas/New York",
        "America/Nipigon": "Americas/Nipigon",
        "America/Nome": "Americas/Nome",
        "America/Noronha": "Americas/Noronha",
        "America/Panama": "Americas/Panama",
        "America/Pangnirtung": "Americas/Pangnirtung",
        "America/Paramaribo": "Americas/Paramaribo",
        "America/Petersburg": "Americas/Petersburg",
        "America/Phoenix": "Americas/Phoenix",
        "America/Port-au-Prince": "Americas/Port-au-Prince",
        "America/Port_of_Spain": "Americas/Port of Spain",
        "America/Porto_Acre": "Americas/Porto Acre",
        "America/Porto_Velho": "Americas/Porto Velho",
        "America/Puerto_Rico": "Americas/Puerto Rico",
        "America/Rainy_River": "Americas/Rainy River",
        "America/Rankin_Inlet": "Americas/Rankin Inlet",
        "America/Recife": "Americas/Recife",
        "America/Regina": "Americas/Regina",
        "America/Rio_Branco": "Americas/Rio Branco",
        "America/Rio_Gallegos": "Americas/Rio Gallegos",
        "America/Rosario": "Americas/Rosario",
        "America/San_Juan": "Americas/San Juan",
        "America/Santiago": "Americas/Santiago",
        "America/Santo_Domingo": "Americas/Santo Domingo",
        "America/Sao_Paulo": "Americas/Sao Paulo",
        "America/Scoresbysund": "Americas/Scoresbysund",
        "America/Shiprock": "Americas/Shiprock",
        "America/St_Johns": "Americas/St Johns",
        "America/St_Kitts": "Americas/St Kitts",
        "America/St_Lucia": "Americas/St Lucia",
        "America/St_Thomas": "Americas/St Thomas",
        "America/St_Vincent": "Americas/St Vincent",
        "America/Swift_Current": "Americas/Swift Current",
        "America/Tegucigalpa": "Americas/Tegucigalpa",
        "America/Thule": "Americas/Thule",
        "America/Thunder_Bay": "Americas/Thunder Bay",
        "America/Tijuana": "Americas/Tijuana",
        "America/Toronto": "Americas/Toronto",
        "America/Tortola": "Americas/Tortola",
        "America/Tucuman": "Americas/Tucuman",
        "America/Ushuaia": "Americas/Ushuaia",
        "America/Vancouver": "Americas/Vancouver",
        "America/Vevay": "Americas/Vevay",
        "America/Vincennes": "Americas/Vincennes",
        "America/Virgin": "Americas/Virgin",
        "America/Whitehorse": "Americas/Whitehorse",
        "America/Winnipeg": "Americas/Winnipeg",
        "America/Yakutat": "Americas/Yakutat",
        "America/Yellowknife": "Americas/Yellowknife",
        "Asia/Aden": "Asia/Aden",
        "Asia/Almaty": "Asia/Almaty",
        "Asia/Amman": "Asia/Amman",
        "Asia/Anadyr": "Asia/Anadyr",
        "Asia/Aqtau": "Asia/Aqtau",
        "Asia/Aqtobe": "Asia/Aqtobe",
        "Asia/Ashgabat": "Asia/Ashgabat",
        "Asia/Ashkhabad": "Asia/Ashkhabad",
        "Asia/Baghdad": "Asia/Baghdad",
        "Asia/Bahrain": "Asia/Bahrain",
        "Asia/Baku": "Asia/Baku",
        "Asia/Bangkok": "Asia/Bangkok",
        "Asia/Beirut": "Asia/Beirut",
        "Asia/Bishkek": "Asia/Bishkek",
        "Asia/Brunei": "Asia/Brunei",
        "Asia/Calcutta": "Asia/Calcutta",
        "Asia/Choibalsan": "Asia/Choibalsan",
        "Asia/Chongqing": "Asia/Chongqing",
        "Asia/Chungking": "Asia/Chungking",
        "Asia/Colombo": "Asia/Colombo",
        "Asia/Dacca": "Asia/Dacca",
        "Asia/Damascus": "Asia/Damascus",
        "Asia/Dhaka": "Asia/Dhaka",
        "Asia/Dili": "Asia/Dili",
        "Asia/Dubai": "Asia/Dubai",
        "Asia/Dushanbe": "Asia/Dushanbe",
        "Asia/Gaza": "Asia/Gaza",
        "Asia/Harbin": "Asia/Harbin",
        "Asia/Hong_Kong": "Asia/Hong Kong",
        "Asia/Hovd": "Asia/Hovd",
        "Asia/Irkutsk": "Asia/Irkutsk",
        "Asia/Istanbul": "Asia/Istanbul",
        "Asia/Jakarta": "Asia/Jakarta",
        "Asia/Jayapura": "Asia/Jayapura",
        "Asia/Jerusalem": "Asia/Jerusalem",
        "Asia/Kabul": "Asia/Kabul",
        "Asia/Kamchatka": "Asia/Kamchatka",
        "Asia/Karachi": "Asia/Karachi",
        "Asia/Kashgar": "Asia/Kashgar",
        "Asia/Katmandu": "Asia/Katmandu",
        "Asia/Krasnoyarsk": "Asia/Krasnoyarsk",
        "Asia/Kuala_Lumpur": "Asia/Kuala Lumpur",
        "Asia/Kuching": "Asia/Kuching",
        "Asia/Kuwait": "Asia/Kuwait",
        "Asia/Macao": "Asia/Macao",
        "Asia/Macau": "Asia/Macau",
        "Asia/Magadan": "Asia/Magadan",
        "Asia/Makassar": "Asia/Makassar",
        "Asia/Manila": "Asia/Manila",
        "Asia/Muscat": "Asia/Muscat",
        "Asia/Nicosia": "Asia/Nicosia",
        "Asia/Novosibirsk": "Asia/Novosibirsk",
        "Asia/Omsk": "Asia/Omsk",
        "Asia/Oral": "Asia/Oral",
        "Asia/Phnom_Penh": "Asia/Phnom Penh",
        "Asia/Pontianak": "Asia/Pontianak",
        "Asia/Pyongyang": "Asia/Pyongyang",
        "Asia/Qatar": "Asia/Qatar",
        "Asia/Qyzylorda": "Asia/Qyzylorda",
        "Asia/Rangoon": "Asia/Rangoon",
        "Asia/Riyadh": "Asia/Riyadh",
        "Asia/Saigon": "Asia/Saigon",
        "Asia/Sakhalin": "Asia/Sakhalin",
        "Asia/Samarkand": "Asia/Samarkand",
        "Asia/Seoul": "Asia/Seoul",
        "Asia/Shanghai": "Asia/Shanghai",
        "Asia/Singapore": "Asia/Singapore",
        "Asia/Taipei": "Asia/Taipei",
        "Asia/Tashkent": "Asia/Tashkent",
        "Asia/Tbilisi": "Asia/Tbilisi",
        "Asia/Tehran": "Asia/Tehran",
        "Asia/Tel_Aviv": "Asia/Tel Aviv",
        "Asia/Thimbu": "Asia/Thimbu",
        "Asia/Thimphu": "Asia/Thimphu",
        "Asia/Tokyo": "Asia/Tokyo",
        "Asia/Ujung_Pandang": "Asia/Ujung Pandang",
        "Asia/Ulaanbaatar": "Asia/Ulaanbaatar",
        "Asia/Ulan_Bator": "Asia/Ulan Bator",
        "Asia/Urumqi": "Asia/Urumqi",
        "Asia/Vientiane": "Asia/Vientiane",
        "Asia/Vladivostok": "Asia/Vladivostok",
        "Asia/Yakutsk": "Asia/Yakutsk",
        "Asia/Yekaterinburg": "Asia/Yekaterinburg",
        "Asia/Yerevan": "Asia/Yerevan",
        "Atlantic/Azores": "Atlantic/Azores",
        "Atlantic/Bermuda": "Atlantic/Bermuda",
        "Atlantic/Canary": "Atlantic/Canary",
        "Atlantic/Cape_Verde": "Atlantic/Cape Verde",
        "Atlantic/Faeroe": "Atlantic/Faeroe",
        "Atlantic/Jan_Mayen": "Atlantic/Jan Mayen",
        "Atlantic/Madeira": "Atlantic/Madeira",
        "Atlantic/Reykjavik": "Atlantic/Reykjavik",
        "Atlantic/South_Georgia": "Atlantic/South Georgia",
        "Atlantic/St_Helena": "Atlantic/St Helena",
        "Atlantic/Stanley": "Atlantic/Stanley",
        "Australia/ACT": "Australia/ACT",
        "Australia/Adelaide": "Australia/Adelaide",
        "Australia/Brisbane": "Australia/Brisbane",
        "Australia/Broken_Hill": "Australia/Broken Hill",
        "Australia/Canberra": "Australia/Canberra",
        "Australia/Currie": "Australia/Currie",
        "Australia/Darwin": "Australia/Darwin",
        "Australia/Hobart": "Australia/Hobart",
        "Australia/LHI": "Australia/LHI",
        "Australia/Lindeman": "Australia/Lindeman",
        "Australia/Lord_Howe": "Australia/Lord Howe",
        "Australia/Melbourne": "Australia/Melbourne",
        "Australia/NSW": "Australia/NSW",
        "Australia/North": "Australia/North",
        "Australia/Perth": "Australia/Perth",
        "Australia/Queensland": "Australia/Queensland",
        "Australia/South": "Australia/South",
        "Australia/Sydney": "Australia/Sydney",
        "Australia/Tasmania": "Australia/Tasmania",
        "Australia/Victoria": "Australia/Victoria",
        "Australia/West": "Australia/West",
        "Australia/Yancowinna": "Australia/Yancowinna",
        "Europe/Amsterdam": "Europe/Amsterdam",
        "Europe/Andorra": "Europe/Andorra",
        "Europe/Athens": "Europe/Athens",
        "Europe/Belfast": "Europe/Belfast",
        "Europe/Belgrade": "Europe/Belgrade",
        "Europe/Berlin": "Europe/Berlin",
        "Europe/Bratislava": "Europe/Bratislava",
        "Europe/Brussels": "Europe/Brussels",
        "Europe/Bucharest": "Europe/Bucharest",
        "Europe/Budapest": "Europe/Budapest",
        "Europe/Chisinau": "Europe/Chisinau",
        "Europe/Copenhagen": "Europe/Copenhagen",
        "Europe/Dublin": "Europe/Dublin",
        "Europe/Gibraltar": "Europe/Gibraltar",
        "Europe/Guernsey": "Europe/Guernsey",
        "Europe/Helsinki": "Europe/Helsinki",
        "Europe/Isle_of_Man": "Europe/Isle of Man",
        "Europe/Istanbul": "Europe/Istanbul",
        "Europe/Jersey": "Europe/Jersey",
        "Europe/Kaliningrad": "Europe/Kaliningrad",
        "Europe/Kiev": "Europe/Kiev",
        "Europe/Lisbon": "Europe/Lisbon",
        "Europe/Ljubljana": "Europe/Ljubljana",
        "Europe/London": "Europe/London",
        "Europe/Luxembourg": "Europe/Luxembourg",
        "Europe/Madrid": "Europe/Madrid",
        "Europe/Malta": "Europe/Malta",
        "Europe/Mariehamn": "Europe/Mariehamn",
        "Europe/Minsk": "Europe/Minsk",
        "Europe/Monaco": "Europe/Monaco",
        "Europe/Moscow": "Europe/Moscow",
        "Europe/Nicosia": "Europe/Nicosia",
        "Europe/Oslo": "Europe/Oslo",
        "Europe/Paris": "Europe/Paris",
        "Europe/Prague": "Europe/Prague",
        "Europe/Riga": "Europe/Riga",
        "Europe/Rome": "Europe/Rome",
        "Europe/Samara": "Europe/Samara",
        "Europe/San_Marino": "Europe/San Marino",
        "Europe/Sarajevo": "Europe/Sarajevo",
        "Europe/Simferopol": "Europe/Simferopol",
        "Europe/Skopje": "Europe/Skopje",
        "Europe/Sofia": "Europe/Sofia",
        "Europe/Stockholm": "Europe/Stockholm",
        "Europe/Tallinn": "Europe/Tallinn",
        "Europe/Tirane": "Europe/Tirane",
        "Europe/Tiraspol": "Europe/Tiraspol",
        "Europe/Uzhgorod": "Europe/Uzhgorod",
        "Europe/Vaduz": "Europe/Vaduz",
        "Europe/Vatican": "Europe/Vatican",
        "Europe/Vienna": "Europe/Vienna",
        "Europe/Vilnius": "Europe/Vilnius",
        "Europe/Volgograd": "Europe/Volgograd",
        "Europe/Warsaw": "Europe/Warsaw",
        "Europe/Zagreb": "Europe/Zagreb",
        "Europe/Zaporozhye": "Europe/Zaporozhye",
        "Europe/Zurich": "Europe/Zurich",
        "Indian/Antananarivo": "Indian/Antananarivo",
        "Indian/Chagos": "Indian/Chagos",
        "Indian/Christmas": "Indian/Christmas",
        "Indian/Cocos": "Indian/Cocos",
        "Indian/Comoro": "Indian/Comoro",
        "Indian/Kerguelen": "Indian/Kerguelen",
        "Indian/Mahe": "Indian/Mahe",
        "Indian/Maldives": "Indian/Maldives",
        "Indian/Mauritius": "Indian/Mauritius",
        "Indian/Mayotte": "Indian/Mayotte",
        "Indian/Reunion": "Indian/Reunion",
        "Pacific/Apia": "Pacific/Apia",
        "Pacific/Auckland": "Pacific/Auckland",
        "Pacific/Chatham": "Pacific/Chatham",
        "Pacific/Easter": "Pacific/Easter",
        "Pacific/Efate": "Pacific/Efate",
        "Pacific/Enderbury": "Pacific/Enderbury",
        "Pacific/Fakaofo": "Pacific/Fakaofo",
        "Pacific/Fiji": "Pacific/Fiji",
        "Pacific/Funafuti": "Pacific/Funafuti",
        "Pacific/Galapagos": "Pacific/Galapagos",
        "Pacific/Gambier": "Pacific/Gambier",
        "Pacific/Guadalcanal": "Pacific/Guadalcanal",
        "Pacific/Guam": "Pacific/Guam",
        "Pacific/Honolulu": "Pacific/Honolulu",
        "Pacific/Johnston": "Pacific/Johnston",
        "Pacific/Kiritimati": "Pacific/Kiritimati",
        "Pacific/Kosrae": "Pacific/Kosrae",
        "Pacific/Kwajalein": "Pacific/Kwajalein",
        "Pacific/Majuro": "Pacific/Majuro",
        "Pacific/Marquesas": "Pacific/Marquesas",
        "Pacific/Midway": "Pacific/Midway",
        "Pacific/Nauru": "Pacific/Nauru",
        "Pacific/Niue": "Pacific/Niue",
        "Pacific/Norfolk": "Pacific/Norfolk",
        "Pacific/Noumea": "Pacific/Noumea",
        "Pacific/Pago_Pago": "Pacific/Pago Pago",
        "Pacific/Palau": "Pacific/Palau",
        "Pacific/Pitcairn": "Pacific/Pitcairn",
        "Pacific/Ponape": "Pacific/Ponape",
        "Pacific/Port_Moresby": "Pacific/Port Moresby",
        "Pacific/Rarotonga": "Pacific/Rarotonga",
        "Pacific/Saipan": "Pacific/Saipan",
        "Pacific/Samoa": "Pacific/Samoa",
        "Pacific/Tahiti": "Pacific/Tahiti",
        "Pacific/Tarawa": "Pacific/Tarawa",
        "Pacific/Tongatapu": "Pacific/Tongatapu",
        "Pacific/Truk": "Pacific/Truk",
        "Pacific/Wake": "Pacific/Wake",
        "Pacific/Wallis": "Pacific/Wallis",
        "Pacific/Yap": "Pacific/Yap"
    }, getTimeZones: function () {
        return this._timeZones
    }, getLocales: function () {
        return this._locales
    }
};
actuate.common.web.Package.define("actuate.common.web.logging");
actuate.common.web.logging.DebugConsole = actuate.common.web.Class.extendClass(actuate.common.web.logging.Logger, {
    initialize: function (a) {
        if (this.__extending) {
            return
        }
        var b = new actuate.common.web.logging.Console;
        actuate.common.web.logging.DebugConsole.superclass.initialize.call(this, a, b)
    }
});
actuate.common.web.Package.define("actuate.common.web.plugin");
(function (a) {
    actuate.common.web.plugin.Ajax = {
        sendMsg: function (b, c) {
            var d = a.extend({}, b, c);
            var e = a.ajax({
                type: d.type,
                async: d.async,
                cache: d.cache,
                timeout: d.timeout,
                url: d.url,
                data: d.data,
                contentType: d.contentType,
                dataType: d.dataType,
                success: d.success,
                complete: d.complete,
                error: d.error
            });
            return e
        }
    }
})(actuate.common.web.jQuery);
(function (a) {
    a.widget("ui.combobox", {
        _create: function () {
            var b, c = this, d = this.element.hide(), e = d.children(":selected"), f = e.val() ? e.text() : "",
                g = this.wrapper = a("<span>").addClass("ui-combobox").insertAfter(d);
            b = a("<input>").appendTo(g).val(f).addClass("ui-state-default ui-combobox-input").autocomplete({
                delay: 0,
                minLength: 0,
                source: function (b, c) {
                    var e = new RegExp(a.ui.autocomplete.escapeRegex(b.term), "i");
                    c(d.children("option").map(function () {
                        var c = a(this).text();
                        if (this.value && (!b.term || e.test(c))) return {
                            label: c.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + a.ui.autocomplete.escapeRegex(b.term) + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>"),
                            value: c,
                            option: this
                        }
                    }))
                },
                select: function (a, b) {
                    b.item.option.selected = true;
                    c._trigger("selected", a, {item: b.item.option})
                },
                change: function (c, e) {
                    if (!e.item) {
                        var f = new RegExp("^" + a.ui.autocomplete.escapeRegex(a(this).val()) + "$", "i"), g = false;
                        d.children("option").each(function () {
                            if (a(this).text().match(f)) {
                                this.selected = g = true;
                                return false
                            }
                        });
                        if (!g) {
                            a(this).val("");
                            d.val("");
                            b.data("autocomplete").term = "";
                            return false
                        }
                    }
                }
            }).addClass("ui-widget ui-widget-content ui-corner-left");
            b.data("autocomplete")._renderItem = function (b, c) {
                return a("<li></li>").data("item.autocomplete", c).append("<a>" + c.label + "</a>").appendTo(b)
            };
            a("<a>").attr("tabIndex", -1).attr("title", "Show All Items").appendTo(g).button({
                icons: {primary: "ui-icon-triangle-1-s"},
                text: false
            }).removeClass("ui-corner-all").addClass("ui-corner-right ui-combobox-toggle").click(function () {
                if (b.autocomplete("widget").is(":visible")) {
                    b.autocomplete("close");
                    return
                }
                a(this).blur();
                b.autocomplete("search", "");
                b.focus()
            })
        }, destroy: function () {
            this.wrapper.remove();
            this.element.show();
            a.Widget.prototype.destroy.call(this)
        }
    })
})(actuate.common.web.jQuery);
actuate.common.web.Package.define("actuate.common.web.resource");
actuate.common.web.resource.module = {
    modules: new Object, define: function (a, b) {
        if (this.modules[a]) {
            throw new actuate.common.web.Exception(actuate.common.web.Exception.ERR_CLIENT, 'Module "' + a + '" already defined')
        }
        actuate.common.web.Package.define(a);
        return this.modules[a] = actuate.common.web.Class.extend(new actuate.common.web.resource.ModuleLoader(a), b)
    }, require: function (a, b, c, d, e) {
        if (a && a.length > 0) {
            var f = new actuate.common.web.resource.ResourceLoader(d || actuate.common.web.Loader.getDefaultBaseUrl(), e || actuate.common.web.Loader.getDefaultRequestOptions(), a);
            f.setOnLoad(b);
            f.setOnError(c);
            f.load()
        }
    }, getResourcesContainerId: function (a) {
        a += ".resourcesContainer";
        return a.replace(/\./g, "_")
    }
};
actuate.common.web.resource.ModuleLoader = actuate.common.web.Class.create();
actuate.common.web.resource.ModuleLoader.prototype = {
    loaded: false,
    _loading: false,
    _licenseFailure: false,
    _sessionTimeout: false,
    _moduleName: null,
    _moduleDependencies: null,
    _jsPath: null,
    _jsFiles: null,
    _cssFiles: null,
    _cssPath: null,
    _htmlResourcesUri: null,
    _publicClasses: null,
    _onAfterHtmlResourcesLoaded: null,
    _onLoad: null,
    _packageLoaded: false,
    _htmlLoaded: true,
    _localizedStringLoaded: false,
    _container: null,
    initialize: function (a) {
        this._moduleName = a;
        this._exceptionClosure = actuate.common.web.Method.bind(this._exception, this)
    },
    getModuleName: function () {
        return this._moduleName
    },
    getModuleDependencies: function () {
        return this._moduleDependencies
    },
    load: function (a, b, c) {
        var d = this;
        this._exceptionHandler = c;
        this._baseUrl = actuate.common.web.util.Utility.makeAbsoluteUrl(a);
        this._requestOptions = b;
        if (this.loaded || this._loading) {
            return
        }
        actuate.common.web.util.Logging.log("loading..." + a);
        this._loading = true;
        if (this._localizedString) {
            this._loadLocalizedString(function () {
                actuate.common.web.util.Logging.log("localized resource is now loaded...");
                d._localizedStringLoaded = true
            })
        } else {
            actuate.common.web.util.Logging.log("localize string is not set...");
            this._localizedStringLoaded = true
        }
        if (this._cssFiles != null && this._cssFiles.length > 0) {
            this._loadCss(this._cssPath, this._cssFiles)
        }
        if (this._jsFiles && this._jsFiles.length > 0) {
            this._loadScripts(function () {
                d._packageLoaded = true
            })
        } else {
            this._packageLoaded = true
        }
        this.timerInterval = window.setInterval(function () {
            d._rendezvous()
        }, 10)
    },
    _rendezvous: function () {
        if (this._licenseFailure == true || this._sessionTimeout == true) {
            clearInterval(this.timerInterval);
            this._loading = false;
            return
        }
        if (this._packageLoaded == true && this._localizedStringLoaded == true) {
            clearInterval(this.timerInterval);
            this._loading = false;
            actuate.common.web.util.Logging.log("All resources are loaded...");
            if (this._onLoad) {
                this._onLoad()
            }
            this.loaded = true
        }
    },
    _loadCss: function (a, b) {
        if (a && a.charAt(a.length - 1) != "/") {
            a += "/"
        }
        for (var c = 0; c < b.length; c++) {
            actuate.common.web.util.Style.addExternalStyleSheet(this._baseUrl + a + b[c])
        }
    },
    _loadLocalizedString: function (a) {
        var b = this._requestOptions.getLocale();
        if (!b) {
            b = this._requestOptions._customParameters["__locale"]
        }
        var c = this._localizedStringServlet;
        var d = c;
        if (this._requestOptions && this._requestOptions.__getJsessionId()) {
            d += ";" + "jsessionid=" + this._requestOptions.__getJsessionId()
        }
        d += "?__localizedstrings=module::" + this._moduleName + "&__locale=" + (b ? b : "");
        actuate.common.web.resource.Script.loadScripts(this._baseUrl, d, a)
    },
    _loadScripts: function (a) {
        var b = new Array;
        for (var c = 0; c < this._jsFiles.length; c++) {
            b.push(this._jsFiles[c])
        }
        var d = this._baseUrl + (this._jsPath && this._jsPath != "" ? this._jsPath + "/" : "");
        var e = this;
        actuate.common.web.resource.Script.loadScripts(d, b, function f(b) {
            var c = b.failedUrls;
            if (c && c.length > 0) {
                e._throwFailedUrls(c)
            } else {
                a()
            }
        })
    },
    _throwFailedUrls: function _throwFailedUrls(a) {
        var b = "Failed to load the following files:";
        for (var c = 0; c < a.length; c++) {
            b += "\n" + a[c]
        }
        this._exception(new actuate.common.web.Exception(a, actuate.common.web.Exception.ERR_CLIENT, b))
    },
    _exception: function (a) {
        a = actuate.common.web.util.Utility.createException(a);
        if (a.getErrCode() == 555) {
            this._licenseFailure = true
        } else if (a.getErrCode() == 556) {
            this._sessionTimeout = true
        }
        if (this._exceptionHandler) {
            this._exceptionHandler(a)
        } else {
            throw a
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.resource");
actuate.common.web.resource.ResourceLoader = actuate.common.web.Class.create();
actuate.common.web.resource.ResourceLoader.prototype = {
    _onLoad: null,
    _onError: null,
    _baseUrl: null,
    _requestOptions: null,
    _exceptionClosure: null,
    _requestedModuleNames: null,
    _requestedFeatures: null,
    initialize: function (a, b, c, d) {
        this._baseUrl = a;
        this._requestOptions = b;
        this._onLoad = null;
        this._onError = null;
        this._requestedModuleNames = c;
        this._requestedFeatures = d;
        this._exceptionClosure = actuate.common.web.Method.bind(this._exception, this)
    },
    setOnLoad: function (a) {
        this._onLoad = a
    },
    setOnError: function (a) {
        this._onError = a
    },
    load: function () {
        if (this._requestedModuleNames) {
            for (var a = 0; a < this._requestedModuleNames.length; a++) {
                var b = actuate.common.web.resource.module.modules[this._requestedModuleNames[a]];
                b.load(this._baseUrl, this._requestOptions, this._exceptionClosure)
            }
        }
        var c = this;
        this.timerInterval = window.setInterval(function () {
            c._rendezvous()
        }, 10)
    },
    _rendezvous: function () {
        for (var a = 0; a < this._requestedModuleNames.length; a++) {
            var b = actuate.common.web.resource.module.modules[this._requestedModuleNames[a]];
            if (!b.loaded) {
                return
            }
        }
        clearInterval(this.timerInterval);
        if (this._onLoad) {
            window.setTimeout(this._onLoad, 0)
        }
    },
    _exception: function (a) {
        a = actuate.common.web.util.Utility.createException(a);
        if (this._onError) {
            return this._onError(a)
        } else {
            throw a
        }
    }
};
actuate.common.web.Package.define("actuate.common.web.resource");
actuate.common.web.resource.ScriptLoader = actuate.common.web.Class.create();
actuate.common.web.resource.ScriptLoader.prototype = {
    _headElement: null,
    onLoad: null,
    onError: null,
    basePath: null,
    _urlList: null,
    _currentUrl: null,
    _loadedClosure: null,
    _errorClosure: null,
    _finishClosure: null,
    _charset: "utf-8",
    _cleanUpScripts: true,
    _scriptTagsList: null,
    failedUrls: null,
    _busy: false,
    initialize: function () {
        this._headElement = document.getElementsByTagName("head")[0];
        this._loadedClosure = actuate.common.web.Method.bindAsEventListener(this._loaded, this);
        this._errorClosure = actuate.common.web.Method.bindAsEventListener(this._error, this);
        this._finishClosure = actuate.common.web.Method.bindAsEventListener(this._finish, this);
        this.failedUrls = new Array;
        this._scriptTagsList = new Array;
        this._busy = false;
        this._urlList = new Array
    },
    loadScripts: function (a) {
        this._urlList = this._urlList.concat(a);
        if (this._busy) {
            return
        }
        this._busy = true;
        this._next()
    },
    _next: function () {
        if (this._urlList.length > 0) {
            var a = this._urlList.shift();
            if (this.basePath && this.basePath != "") {
                a = this.basePath + a
            }
            a = actuate.common.web.util.Utility.makeAbsoluteUrl(a);
            this._currentUrl = a;
            if (a.indexOf("?") > -1) {
                this._loadScript(a + "&" + actuate.common.web.Version.getVersionParam())
            } else {
                this._loadScript(a + "?" + actuate.common.web.Version.getVersionParam())
            }
        } else {
            self.setTimeout(this._finishClosure, 0)
        }
    },
    _finish: function () {
        if (this._cleanUpScripts) {
            while (this._scriptTagsList.length > 0) {
                var a = this._scriptTagsList.pop();
                if (a.parentNode) {
                    a.parentNode.removeChild(a)
                }
            }
        }
        this._urlList = null;
        this._busy = false;
        if (this.onLoad) {
            this.onLoad(this)
        }
    },
    _error: function (a) {
        this.failedUrls.unshift(this._currentUrl);
        var b = false;
        if (this.onError) {
            b = !this.onError(this._currentUrl)
        }
        if (!b) {
            this._next()
        }
    }
};
actuate.common.web.resource.GenericScriptLoader = actuate.common.web.Class.create();
actuate.common.web.resource.GenericScriptLoader.prototype = actuate.common.web.Class.extend(new actuate.common.web.resource.ScriptLoader, {
    _currentScript: null,
    initialize: function () {
        actuate.common.web.resource.ScriptLoader.prototype.initialize.call(this)
    },
    _loadScript: function (a) {
        this._currentScript = document.createElement("script");
        this._currentScript.setAttribute("type", "text/javascript");
        this._currentScript.setAttribute("src", a);
        this._currentScript.setAttribute("charset", this._charset);
        actuate.common.web.util.Event.observe(this._currentScript, "load", this._loadedClosure);
        actuate.common.web.util.Event.observe(this._currentScript, "error", this._errorClosure);
        this._headElement.appendChild(this._currentScript);
        this._scriptTagsList.push(this._currentScript)
    },
    _loaded: function () {
        actuate.common.web.util.Event.stopObserving(this._currentScript, "load", this._loadedClosure);
        actuate.common.web.util.Event.stopObserving(this._currentScript, "error", this._errorClosure);
        this._next()
    }
});
actuate.common.web.resource.IEScriptLoader = actuate.common.web.Class.create();
actuate.common.web.resource.IEScriptLoader.prototype = actuate.common.web.Class.extend(new actuate.common.web.resource.ScriptLoader, {
    _currentScript: null,
    initialize: function () {
        actuate.common.web.resource.ScriptLoader.prototype.initialize.call(this)
    },
    _loadScript: function (a) {
        this._currentScript = document.createElement("script");
        this._currentScript.setAttribute("type", "text/javascript");
        this._currentScript.setAttribute("src", a);
        this._currentScript.setAttribute("charset", this._charset);
        actuate.common.web.util.Event.observe(this._currentScript, "readystatechange", this._loadedClosure);
        this._headElement.appendChild(this._currentScript);
        this._scriptTagsList.push(this._currentScript)
    },
    _loaded: function () {
        if (this._currentScript.readyState == "complete" || this._currentScript.readyState == "loaded") {
            actuate.common.web.util.Event.stopObserving(this._currentScript, "readystatechange", this._loadedClosure);
            this._next()
        }
    }
});
actuate.common.web.resource.Script = {
    _getScriptLoader: function () {
        var a;
        if (navigator.userAgent.toLowerCase().indexOf("msie") > -1) {
            a = new actuate.common.web.resource.IEScriptLoader
        } else {
            a = new actuate.common.web.resource.GenericScriptLoader
        }
        return a
    }, loadScripts: function (a, b, c, d) {
        var e = this._getScriptLoader();
        e.onLoad = c;
        if (d != null) {
            e.onError = d
        }
        e.basePath = a;
        e.loadScripts(b)
    }
};
actuate.common.web.Package.define("actuate.common.web.core");
actuate.common.web.core.ContentHelper = actuate.common.web.Class.create();
actuate.common.web.core.ContentHelper.prototype = {
    _config: null, _ajaxServlet: "ajax", _progressBar: null, _showprogressBar: true, initialize: function (a) {
        if (this.__extending) return;
        this._config = a;
        var b = {msg: "", id: null, dlgConfig: []};
        if (this._showprogressBar) {
            this._progressBar = new actuate.common.web.widget.dialog.ProgressDialog(b.id, "", b.msg, b.dlgConfig)
        }
    }, getRequestData: function (a, b, c) {
        var d = actuate.common.web.$.toJSON(b);
        var e = {
            operation: a,
            data: d,
            locale: this.getRequestOptions().getLocale(),
            resultDef: actuate.common.web.$.toJSON(c)
        };
        return e
    }, _contentSendRequestCB: function () {
        if (this._showprogressBar) {
            this._progressBar.close()
        }
        var a = [];
        for (var b = 1; b < arguments.length; b++) {
            a.push(arguments[b])
        }
        if (arguments[0]) {
            arguments[0].apply(this, a)
        }
    }, sendRequest: function (a, b, c, d) {
        var e = this.getRequestOptions();
        if (this._showprogressBar) {
            var f = "";
            if (d && d.msg) {
                f = d.msg
            }
            this._progressBar.render(f)
        }
        var g = actuate.common.web.Method.bind2(this._contentSendRequestCB, this, b);
        var h = actuate.common.web.Method.bind2(this._contentSendRequestCB, this, c);
        var i = new actuate.common.web.core.Request(a, g, h);
        i.setURL(this._getAjaxURL(e));
        i.sendMsg()
    }, download: function (a) {
    }, getRequestOptions: function () {
        return this._config.requestOptions
    }, _getAjaxURL: function (a) {
        var b = a.getDefaultURL();
        var c = b.lastIndexOf("/");
        if (c !== b.length - 1) {
            b = b + "/"
        }
        var d = this.getAjaxServletPath();
        b += d + "?" + actuate.common.web.Version.getVersionParam();
        return b
    }, getAjaxServletPath: function () {
        return "ajax"
    }
};
actuate.common.web.Package.define("actuate.common.web.core");
actuate.common.web.core.Request = actuate.common.web.Class.create();
actuate.common.web.core.Request.prototype = {
    _defaults: {
        url: "ajax",
        cache: false,
        type: "post",
        traditional: true,
        dataType: "json",
        async: true,
        data: {},
        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
        dataType: "json"
    },
    _requestData: null,
    _successCB: null,
    _errorCB: null,
    _url: null,
    _timeOutHandler: null,
    _httpRquestHandler: null,
    initialize: function (a, b, c) {
        this._requestData = a;
        this._successCB = b;
        this._errorCB = c
    },
    setURL: function (a) {
        this._url = a
    },
    sendMsg: function () {
        this._defaults.success = actuate.common.web.Method.bind(this.success, this);
        this._defaults.error = actuate.common.web.Method.bind(this.error, this);
        this._defaults.complete = actuate.common.web.Method.bind(this.complete, this);
        if (this._url) {
            this._defaults.url = this._url
        }
        var a = {data: this._requestData};
        this._httpRquestHandler = actuate.common.web.plugin.Ajax.sendMsg(this._defaults, a)
    },
    abort: function () {
        if (this._httpRquestHandler) {
            this._httpRquestHandler.abort()
        }
    },
    success: function (a, b, c) {
        if (!a) {
            this.error(c, "Unknown Exception", "Unknown Exception");
            return
        }
        if (a && a.exception) {
            var d = this._createWebException(a.exception);
            this._errorCB(d);
            return
        }
        if (this._successCB) {
            this._successCB(a)
        }
    },
    error: function (a, b, c) {
        var d = actuate.common.web.Exception.ERR_CLIENT;
        var e = b;
        var f = c;
        var g = a.status;
        var h = new actuate.common.web.Exception(d, e, f, g);
        if (this._errorCB) {
            this._errorCB(h);
            return
        }
        throw h
    },
    complete: function () {
    },
    _createWebException: function (
        a) {
        var b = new actuate.common.web.Exception(a.type, a.msg, a.detail, a.code, a.params);
        return b
    }
};/*!
 * jQuery UI Core
 * http://jqueryui.com
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
(function (a, b) {
    function f(b) {
        return a.expr.filters.visible(b) && !a(b).parents().andSelf().filter(function () {
            return a.css(this, "visibility") === "hidden"
        }).length
    }

    function e(b, c) {
        var d, e, g, h = b.nodeName.toLowerCase();
        if ("area" === h) {
            d = b.parentNode;
            e = d.name;
            if (!b.href || !e || d.nodeName.toLowerCase() !== "map") {
                return false
            }
            g = a("img[usemap=#" + e + "]")[0];
            return !!g && f(g)
        }
        return (/input|select|textarea|button|object/.test(h) ? !b.disabled : "a" === h ? b.href || c : c) && f(b)
    }

    var c = 0, d = /^ui-id-\d+$/;
    a.ui = a.ui || {};
    if (a.ui.version) {
        return
    }
    a.extend(a.ui, {
        version: "custom",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    a.fn.extend({
        _focus: a.fn.focus, focus: function (b, c) {
            return typeof b === "number" ? this.each(function () {
                var d = this;
                setTimeout(function () {
                    a(d).focus();
                    if (c) {
                        c.call(d)
                    }
                }, b)
            }) : this._focus.apply(this, arguments)
        }, scrollParent: function () {
            var b;
            if (a.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) {
                b = this.parents().filter(function () {
                    return /(relative|absolute|fixed)/.test(a.css(this, "position")) && /(auto|scroll)/.test(a.css(this, "overflow") + a.css(this, "overflow-y") + a.css(this, "overflow-x"))
                }).eq(0)
            } else {
                b = this.parents().filter(function () {
                    return /(auto|scroll)/.test(a.css(this, "overflow") + a.css(this, "overflow-y") + a.css(this, "overflow-x"))
                }).eq(0)
            }
            return /fixed/.test(this.css("position")) || !b.length ? a(document) : b
        }, zIndex: function (c) {
            if (c !== b) {
                return this.css("zIndex", c)
            }
            if (this.length) {
                var d = a(this[0]), e, f;
                while (d.length && d[0] !== document) {
                    e = d.css("position");
                    if (e === "absolute" || e === "relative" || e === "fixed") {
                        f = parseInt(d.css("zIndex"), 10);
                        if (!isNaN(f) && f !== 0) {
                            return f
                        }
                    }
                    d = d.parent()
                }
            }
            return 0
        }, uniqueId: function () {
            return this.each(function () {
                if (!this.id) {
                    this.id = "ui-id-" + ++c
                }
            })
        }, removeUniqueId: function () {
            return this.each(function () {
                if (d.test(this.id)) {
                    a(this).removeAttr("id")
                }
            })
        }
    });
    if (!a("<a>").outerWidth(1).jquery) {
        a.each(["Width", "Height"], function (c, d) {
            function h(b, c, d, f) {
                a.each(e, function () {
                    c -= parseFloat(a.css(b, "padding" + this)) || 0;
                    if (d) {
                        c -= parseFloat(a.css(b, "border" + this + "Width")) || 0
                    }
                    if (f) {
                        c -= parseFloat(a.css(b, "margin" + this)) || 0
                    }
                });
                return c
            }

            var e = d === "Width" ? ["Left", "Right"] : ["Top", "Bottom"], f = d.toLowerCase(), g = {
                innerWidth: a.fn.innerWidth,
                innerHeight: a.fn.innerHeight,
                outerWidth: a.fn.outerWidth,
                outerHeight: a.fn.outerHeight
            };
            a.fn["inner" + d] = function (c) {
                if (c === b) {
                    return g["inner" + d].call(this)
                }
                return this.each(function () {
                    a(this).css(f, h(this, c) + "px")
                })
            };
            a.fn["outer" + d] = function (b, c) {
                if (typeof b !== "number") {
                    return g["outer" + d].call(this, b)
                }
                return this.each(function () {
                    a(this).css(f, h(this, b, true, c) + "px")
                })
            }
        })
    }
    a.extend(a.expr[":"], {
        data: a.expr.createPseudo ? a.expr.createPseudo(function (b) {
            return function (c) {
                return !!a.data(c, b)
            }
        }) : function (b, c, d) {
            return !!a.data(b, d[3])
        }, focusable: function (b) {
            return e(b, !isNaN(a.attr(b, "tabindex")))
        }, tabbable: function (b) {
            var c = a.attr(b, "tabindex"), d = isNaN(c);
            return (d || c >= 0) && e(b, !d)
        }
    });
    a(function () {
        var b = document.body, c = b.appendChild(c = document.createElement("div"));
        c.offsetHeight;
        a.extend(c.style, {minHeight: "100px", height: "auto", padding: 0, borderWidth: 0});
        a.support.minHeight = c.offsetHeight === 100;
        a.support.selectstart = "onselectstart" in c;
        b.removeChild(c).style.display = "none"
    });
    (function () {
        var b = /msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || [];
        a.ui.ie = b.length ? true : false;
        a.ui.ie6 = parseFloat(b[1], 10) === 6
    })();
    a.fn.extend({
        disableSelection: function () {
            return this.bind((a.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function (a) {
                a.preventDefault()
            })
        }, enableSelection: function () {
            return this.unbind(".ui-disableSelection")
        }
    });
    a.extend(a.ui, {
        plugin: {
            add: function (b, c, d) {
                var e, f = a.ui[b].prototype;
                for (e in d) {
                    f.plugins[e] = f.plugins[e] || [];
                    f.plugins[e].push([c, d[e]])
                }
            }, call: function (a, b, c) {
                var d, e = a.plugins[b];
                if (!e || !a.element[0].parentNode || a.element[0].parentNode.nodeType === 11) {
                    return
                }
                for (d = 0; d < e.length; d++) {
                    if (a.options[e[d][0]]) {
                        e[d][1].apply(a.element, c)
                    }
                }
            }
        }, contains: a.contains, hasScroll: function (b, c) {
            if (a(b).css("overflow") === "hidden") {
                return false
            }
            var d = c && c === "left" ? "scrollLeft" : "scrollTop", e = false;
            if (b[d] > 0) {
                return true
            }
            b[d] = 1;
            e = b[d] > 0;
            b[d] = 0;
            return e
        }, isOverAxis: function (a, b, c) {
            return a > b && a < b + c
        }, isOver: function (b, c, d, e, f, g) {
            return a.ui.isOverAxis(b, d, f) && a.ui.isOverAxis(c, e, g)
        }
    })
})(actuate.common.web.jQuery);/* eslint-disable max-len, camelcase *//*!
 * jQuery UI Datepicker 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *///>>label: Datepicker
//>>group: Widgets
//>>description: Displays a calendar from an input or inline for selecting dates.
//>>docs: http://api.jqueryui.com/datepicker/
//>>demos: http://jqueryui.com/datepicker/
//>>css.structure: ../../themes/base/core.css
//>>css.structure: ../../themes/base/datepicker.css
//>>css.theme: ../../themes/base/theme.css
(function (a, b) {
    function h(b, c) {
        a.extend(b, c);
        for (var d in c) {
            if (c[d] == null) {
                b[d] = c[d]
            }
        }
        return b
    }

    function g() {
        if (!a.datepicker._isDisabledDatepicker(c.inline ? c.dpDiv.parent()[0] : c.input[0])) {
            a(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
            a(this).addClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                a(this).addClass("ui-datepicker-prev-hover")
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                a(this).addClass("ui-datepicker-next-hover")
            }
        }
    }

    function f(b) {
        var c = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
        return b.on("mouseout", c, function () {
            a(this).removeClass("ui-state-hover");
            if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                a(this).removeClass("ui-datepicker-prev-hover")
            }
            if (this.className.indexOf("ui-datepicker-next") !== -1) {
                a(this).removeClass("ui-datepicker-next-hover")
            }
        }).on("mouseover", c, g)
    }

    function e() {
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = "ui-datepicker-div";
        this._inlineClass = "ui-datepicker-inline";
        this._appendClass = "ui-datepicker-append";
        this._triggerClass = "ui-datepicker-trigger";
        this._dialogClass = "ui-datepicker-dialog";
        this._disableClass = "ui-datepicker-disabled";
        this._unselectableClass = "ui-datepicker-unselectable";
        this._currentClass = "ui-datepicker-current-day";
        this._dayOverClass = "ui-datepicker-days-cell-over";
        this.regional = [];
        this.regional[""] = {
            closeText: "Done",
            prevText: "Prev",
            nextText: "Next",
            currentText: "Today",
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            weekHeader: "Wk",
            dateFormat: "mm/dd/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: "",
            selectMonthLabel: "Select month",
            selectYearLabel: "Select year"
        };
        this._defaults = {
            showOn: "focus",
            showAnim: "fadeIn",
            showOptions: {},
            defaultDate: null,
            appendText: "",
            buttonText: "...",
            buttonImage: "",
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            yearRange: "c-10:c+10",
            showOtherMonths: false,
            selectOtherMonths: false,
            showWeek: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: "+10",
            minDate: null,
            maxDate: null,
            duration: "fast",
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            onUpdateDatepicker: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: "",
            altFormat: "",
            constrainInput: true,
            showButtonPanel: false,
            autoSize: false,
            disabled: false
        };
        a.extend(this._defaults, this.regional[""]);
        this.regional.en = a.extend(true, {}, this.regional[""]);
        this.regional["en-US"] = a.extend(true, {}, this.regional.en);
        this.dpDiv = f(a("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
    }

    function d(a) {
        var b, c;
        while (a.length && a[0] !== document) {
            b = a.css("position");
            if (b === "absolute" || b === "relative" || b === "fixed") {
                c = parseInt(a.css("zIndex"), 10);
                if (!isNaN(c) && c !== 0) {
                    return c
                }
            }
            a = a.parent()
        }
        return 0
    }

    a.extend(a.ui, {datepicker: {version: "1.13.0"}});
    var c;
    a.extend(e.prototype, {
        markerClassName: "hasDatepicker",
        maxRows: 4,
        _widgetDatepicker: function () {
            return this.dpDiv
        },
        setDefaults: function (a) {
            h(this._defaults, a || {});
            return this
        },
        _attachDatepicker: function (b, c) {
            var d, e, f;
            d = b.nodeName.toLowerCase();
            e = d === "div" || d === "span";
            if (!b.id) {
                this.uuid += 1;
                b.id = "dp" + this.uuid
            }
            f = this._newInst(a(b), e);
            f.settings = a.extend({}, c || {});
            if (d === "input") {
                this._connectDatepicker(b, f)
            } else if (e) {
                this._inlineDatepicker(b, f)
            }
        },
        _newInst: function (b, c) {
            var d = b[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
            return {
                id: d,
                input: b,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: c,
                dpDiv: !c ? this.dpDiv : f(a("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
            }
        },
        _connectDatepicker: function (b, c) {
            var d = a(b);
            c.append = a([]);
            c.trigger = a([]);
            if (d.hasClass(this.markerClassName)) {
                return
            }
            this._attachments(d, c);
            d.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp);
            this._autoSize(c);
            a.data(b, "datepicker", c);
            if (c.settings.disabled) {
                this._disableDatepicker(b)
            }
        },
        _attachments: function (b, c) {
            var d, e, f, g = this._get(c, "appendText"), h = this._get(c, "isRTL");
            if (c.append) {
                c.append.remove()
            }
            if (g) {
                c.append = a("<span>").addClass(this._appendClass).text(g);
                b[h ? "before" : "after"](c.append)
            }
            b.off("focus", this._showDatepicker);
            if (c.trigger) {
                c.trigger.remove()
            }
            d = this._get(c, "showOn");
            if (d === "focus" || d === "both") {
                b.on("focus", this._showDatepicker)
            }
            if (d === "button" || d === "both") {
                e = this._get(c, "buttonText");
                f = this._get(c, "buttonImage");
                if (this._get(c, "buttonImageOnly")) {
                    c.trigger = a("<img>").addClass(this._triggerClass).attr({src: f, alt: e, title: e})
                } else {
                    c.trigger = a("<button type='button'>").addClass(this._triggerClass);
                    if (f) {
                        c.trigger.html(a("<img>").attr({src: f, alt: e, title: e}))
                    } else {
                        c.trigger.text(e)
                    }
                }
                b[h ? "before" : "after"](c.trigger);
                c.trigger.on("click", function () {
                    if (a.datepicker._datepickerShowing && a.datepicker._lastInput === b[0]) {
                        a.datepicker._hideDatepicker()
                    } else if (a.datepicker._datepickerShowing && a.datepicker._lastInput !== b[0]) {
                        a.datepicker._hideDatepicker();
                        a.datepicker._showDatepicker(b[0])
                    } else {
                        a.datepicker._showDatepicker(b[0])
                    }
                    return false
                })
            }
        },
        _autoSize: function (a) {
            if (this._get(a, "autoSize") && !a.inline) {
                var b, c, d, e, f = new Date(2009, 12 - 1, 20), g = this._get(a, "dateFormat");
                if (g.match(/[DM]/)) {
                    b = function (a) {
                        c = 0;
                        d = 0;
                        for (e = 0; e < a.length; e++) {
                            if (a[e].length > c) {
                                c = a[e].length;
                                d = e
                            }
                        }
                        return d
                    };
                    f.setMonth(b(this._get(a, g.match(/MM/) ? "monthNames" : "monthNamesShort")));
                    f.setDate(b(this._get(a, g.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - f.getDay())
                }
                a.input.attr("size", this._formatDate(a, f).length)
            }
        },
        _inlineDatepicker: function (b, c) {
            var d = a(b);
            if (d.hasClass(this.markerClassName)) {
                return
            }
            d.addClass(this.markerClassName).append(c.dpDiv);
            a.data(b, "datepicker", c);
            this._setDate(c, this._getDefaultDate(c), true);
            this._updateDatepicker(c);
            this._updateAlternate(c);
            if (c.settings.disabled) {
                this._disableDatepicker(b)
            }
            c.dpDiv.css("display", "block")
        },
        _dialogDatepicker: function (b, c, d, e, f) {
            var g, i, j, k, l, m = this._dialogInst;
            if (!m) {
                this.uuid += 1;
                g = "dp" + this.uuid;
                this._dialogInput = a("<input type='text' id='" + g + "' style='position: absolute; top: -100px; width: 0px;'/>");
                this._dialogInput.on("keydown", this._doKeyDown);
                a("body").append(this._dialogInput);
                m = this._dialogInst = this._newInst(this._dialogInput, false);
                m.settings = {};
                a.data(this._dialogInput[0], "datepicker", m)
            }
            h(m.settings, e || {});
            c = c && c.constructor === Date ? this._formatDate(m, c) : c;
            this._dialogInput.val(c);
            this._pos = f ? f.length ? f : [f.pageX, f.pageY] : null;
            if (!this._pos) {
                i = document.documentElement.clientWidth;
                j = document.documentElement.clientHeight;
                k = document.documentElement.scrollLeft || document.body.scrollLeft;
                l = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [i / 2 - 100 + k, j / 2 - 150 + l]
            }
            this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
            m.settings.onSelect = d;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if (a.blockUI) {
                a.blockUI(this.dpDiv)
            }
            a.data(this._dialogInput[0], "datepicker", m);
            return this
        },
        _destroyDatepicker: function (b) {
            var d, e = a(b), f = a.data(b, "datepicker");
            if (!e.hasClass(this.markerClassName)) {
                return
            }
            d = b.nodeName.toLowerCase();
            a.removeData(b, "datepicker");
            if (d === "input") {
                f.append.remove();
                f.trigger.remove();
                e.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)
            } else if (d === "div" || d === "span") {
                e.removeClass(this.markerClassName).empty()
            }
            if (c === f) {
                c = null;
                this._curInst = null
            }
        },
        _enableDatepicker: function (b) {
            var c, d, e = a(b), f = a.data(b, "datepicker");
            if (!e.hasClass(this.markerClassName)) {
                return
            }
            c = b.nodeName.toLowerCase();
            if (c === "input") {
                b.disabled = false;
                f.trigger.filter("button").each(function () {
                    this.disabled = false
                }).end().filter("img").css({opacity: "1.0", cursor: ""})
            } else if (c === "div" || c === "span") {
                d = e.children("." + this._inlineClass);
                d.children().removeClass("ui-state-disabled");
                d.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false)
            }
            this._disabledInputs = a.map(this._disabledInputs, function (a) {
                return a === b ? null : a
            })
        },
        _disableDatepicker: function (b) {
            var c, d, e = a(b), f = a.data(b, "datepicker");
            if (!e.hasClass(this.markerClassName)) {
                return
            }
            c = b.nodeName.toLowerCase();
            if (c === "input") {
                b.disabled = true;
                f.trigger.filter("button").each(function () {
                    this.disabled = true
                }).end().filter("img").css({opacity: "0.5", cursor: "default"})
            } else if (c === "div" || c === "span") {
                d = e.children("." + this._inlineClass);
                d.children().addClass("ui-state-disabled");
                d.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true)
            }
            this._disabledInputs = a.map(this._disabledInputs, function (a) {
                return a === b ? null : a
            });
            this._disabledInputs[this._disabledInputs.length] = b
        },
        _isDisabledDatepicker: function (a) {
            if (!a) {
                return false
            }
            for (var b = 0; b < this._disabledInputs.length; b++) {
                if (this._disabledInputs[b] === a) {
                    return true
                }
            }
            return false
        },
        _getInst: function (b) {
            try {
                return a.data(b, "datepicker")
            } catch (c) {
                throw "Missing instance data for this datepicker"
            }
        },
        _optionDatepicker: function (c, d, e) {
            var f, g, i, j, k = this._getInst(c);
            if (arguments.length === 2 && typeof d === "string") {
                return d === "defaults" ? a.extend({}, a.datepicker._defaults) : k ? d === "all" ? a.extend({}, k.settings) : this._get(k, d) : null
            }
            f = d || {};
            if (typeof d === "string") {
                f = {};
                f[d] = e
            }
            if (k) {
                if (this._curInst === k) {
                    this._hideDatepicker()
                }
                g = this._getDateDatepicker(c, true);
                i = this._getMinMaxDate(k, "min");
                j = this._getMinMaxDate(k, "max");
                h(k.settings, f);
                if (i !== null && f.dateFormat !== b && f.minDate === b) {
                    k.settings.minDate = this._formatDate(k, i)
                }
                if (j !== null && f.dateFormat !== b && f.maxDate === b) {
                    k.settings.maxDate = this._formatDate(k, j)
                }
                if ("disabled" in f) {
                    if (f.disabled) {
                        this._disableDatepicker(c)
                    } else {
                        this._enableDatepicker(c)
                    }
                }
                this._attachments(a(c), k);
                this._autoSize(k);
                this._setDate(k, g);
                this._updateAlternate(k);
                this._updateDatepicker(k)
            }
        },
        _changeDatepicker: function (a, b, c) {
            this._optionDatepicker(a, b, c)
        },
        _refreshDatepicker: function (a) {
            var b = this._getInst(a);
            if (b) {
                this._updateDatepicker(b)
            }
        },
        _setDateDatepicker: function (a, b) {
            var c = this._getInst(a);
            if (c) {
                this._setDate(c, b);
                this._updateDatepicker(c);
                this._updateAlternate(c)
            }
        },
        _getDateDatepicker: function (a, b) {
            var c = this._getInst(a);
            if (c && !c.inline) {
                this._setDateFromField(c, b)
            }
            return c ? this._getDate(c) : null
        },
        _doKeyDown: function (b) {
            var c, d, e, f = a.datepicker._getInst(b.target), g = true, h = f.dpDiv.is(".ui-datepicker-rtl");
            f._keyEvent = true;
            if (a.datepicker._datepickerShowing) {
                switch (b.keyCode) {
                    case 9:
                        a.datepicker._hideDatepicker();
                        g = false;
                        break;
                    case 13:
                        e = a("td." + a.datepicker._dayOverClass + ":not(." + a.datepicker._currentClass + ")", f.dpDiv);
                        if (e[0]) {
                            a.datepicker._selectDay(b.target, f.selectedMonth, f.selectedYear, e[0])
                        }
                        c = a.datepicker._get(f, "onSelect");
                        if (c) {
                            d = a.datepicker._formatDate(f);
                            c.apply(f.input ? f.input[0] : null, [d, f])
                        } else {
                            a.datepicker._hideDatepicker()
                        }
                        return false;
                    case 27:
                        a.datepicker._hideDatepicker();
                        break;
                    case 33:
                        a.datepicker._adjustDate(b.target, b.ctrlKey ? -a.datepicker._get(f, "stepBigMonths") : -a.datepicker._get(f, "stepMonths"), "M");
                        break;
                    case 34:
                        a.datepicker._adjustDate(b.target, b.ctrlKey ? +a.datepicker._get(f, "stepBigMonths") : +a.datepicker._get(f, "stepMonths"), "M");
                        break;
                    case 35:
                        if (b.ctrlKey || b.metaKey) {
                            a.datepicker._clearDate(b.target)
                        }
                        g = b.ctrlKey || b.metaKey;
                        break;
                    case 36:
                        if (b.ctrlKey || b.metaKey) {
                            a.datepicker._gotoToday(b.target)
                        }
                        g = b.ctrlKey || b.metaKey;
                        break;
                    case 37:
                        if (b.ctrlKey || b.metaKey) {
                            a.datepicker._adjustDate(b.target, h ? +1 : -1, "D")
                        }
                        g = b.ctrlKey || b.metaKey;
                        if (b.originalEvent.altKey) {
                            a.datepicker._adjustDate(b.target, b.ctrlKey ? -a.datepicker._get(f, "stepBigMonths") : -a.datepicker._get(f, "stepMonths"), "M")
                        }
                        break;
                    case 38:
                        if (b.ctrlKey || b.metaKey) {
                            a.datepicker._adjustDate(b.target, -7, "D")
                        }
                        g = b.ctrlKey || b.metaKey;
                        break;
                    case 39:
                        if (b.ctrlKey || b.metaKey) {
                            a.datepicker._adjustDate(b.target, h ? -1 : +1, "D")
                        }
                        g = b.ctrlKey || b.metaKey;
                        if (b.originalEvent.altKey) {
                            a.datepicker._adjustDate(b.target, b.ctrlKey ? +a.datepicker._get(f, "stepBigMonths") : +a.datepicker._get(f, "stepMonths"), "M")
                        }
                        break;
                    case 40:
                        if (b.ctrlKey || b.metaKey) {
                            a.datepicker._adjustDate(b.target, +7, "D")
                        }
                        g = b.ctrlKey || b.metaKey;
                        break;
                    default:
                        g = false
                }
            } else if (b.keyCode === 36 && b.ctrlKey) {
                a.datepicker._showDatepicker(this)
            } else {
                g = false
            }
            if (g) {
                b.preventDefault();
                b.stopPropagation()
            }
        },
        _doKeyPress: function (b) {
            var c, d, e = a.datepicker._getInst(b.target);
            if (a.datepicker._get(e, "constrainInput")) {
                c = a.datepicker._possibleChars(a.datepicker._get(e, "dateFormat"));
                d = String.fromCharCode(b.charCode == null ? b.keyCode : b.charCode);
                return b.ctrlKey || b.metaKey || d < " " || !c || c.indexOf(d) > -1
            }
        },
        _doKeyUp: function (b) {
            var c, d = a.datepicker._getInst(b.target);
            if (d.input.val() !== d.lastVal) {
                try {
                    c = a.datepicker.parseDate(a.datepicker._get(d, "dateFormat"), d.input ? d.input.val() : null, a.datepicker._getFormatConfig(d));
                    if (c) {
                        a.datepicker._setDateFromField(d);
                        a.datepicker._updateAlternate(d);
                        a.datepicker._updateDatepicker(d)
                    }
                } catch (e) {
                }
            }
            return true
        },
        _showDatepicker: function (b) {
            b = b.target || b;
            if (b.nodeName.toLowerCase() !== "input") {
                b = a("input", b.parentNode)[0]
            }
            if (a.datepicker._isDisabledDatepicker(b) || a.datepicker._lastInput === b) {
                return
            }
            var c, e, f, g, i, j, k;
            c = a.datepicker._getInst(b);
            if (a.datepicker._curInst && a.datepicker._curInst !== c) {
                a.datepicker._curInst.dpDiv.stop(true, true);
                if (c && a.datepicker._datepickerShowing) {
                    a.datepicker._hideDatepicker(a.datepicker._curInst.input[0])
                }
            }
            e = a.datepicker._get(c, "beforeShow");
            f = e ? e.apply(b, [b, c]) : {};
            if (f === false) {
                return
            }
            h(c.settings, f);
            c.lastVal = null;
            a.datepicker._lastInput = b;
            a.datepicker._setDateFromField(c);
            if (a.datepicker._inDialog) {
                b.value = ""
            }
            if (!a.datepicker._pos) {
                a.datepicker._pos = a.datepicker._findPos(b);
                a.datepicker._pos[1] += b.offsetHeight
            }
            g = false;
            a(b).parents().each(function () {
                g |= a(this).css("position") === "fixed";
                return !g
            });
            i = {left: a.datepicker._pos[0], top: a.datepicker._pos[1]};
            a.datepicker._pos = null;
            c.dpDiv.empty();
            c.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
            a.datepicker._updateDatepicker(c);
            i = a.datepicker._checkOffset(c, i, g);
            c.dpDiv.css({
                position: a.datepicker._inDialog && a.blockUI ? "static" : g ? "fixed" : "absolute",
                display: "none",
                left: i.left + "px",
                top: i.top + "px"
            });
            if (!c.inline) {
                j = a.datepicker._get(c, "showAnim");
                k = a.datepicker._get(c, "duration");
                c.dpDiv.css("z-index", d(a(b)) + 1);
                a.datepicker._datepickerShowing = true;
                if (a.effects && a.effects.effect[j]) {
                    c.dpDiv.show(j, a.datepicker._get(c, "showOptions"), k)
                } else {
                    c.dpDiv[j || "show"](j ? k : null)
                }
                if (a.datepicker._shouldFocusInput(c)) {
                    c.input.trigger("focus")
                }
                a.datepicker._curInst = c
            }
        },
        _updateDatepicker: function (b) {
            this.maxRows = 4;
            c = b;
            b.dpDiv.empty().append(this._generateHTML(b));
            this._attachHandlers(b);
            var d, e = this._getNumberOfMonths(b), f = e[1], h = 17, i = b.dpDiv.find("." + this._dayOverClass + " a"),
                j = a.datepicker._get(b, "onUpdateDatepicker");
            if (i.length > 0) {
                g.apply(i.get(0))
            }
            b.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
            if (f > 1) {
                b.dpDiv.addClass("ui-datepicker-multi-" + f).css("width", h * f + "em")
            }
            b.dpDiv[(e[0] !== 1 || e[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
            b.dpDiv[(this._get(b, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
            if (b === a.datepicker._curInst && a.datepicker._datepickerShowing && a.datepicker._shouldFocusInput(b)) {
                b.input.trigger("focus")
            }
            if (b.yearshtml) {
                d = b.yearshtml;
                setTimeout(function () {
                    if (d === b.yearshtml && b.yearshtml) {
                        b.dpDiv.find("select.ui-datepicker-year").first().replaceWith(b.yearshtml)
                    }
                    d = b.yearshtml = null
                }, 0)
            }
            if (j) {
                j.apply(b.input ? b.input[0] : null, [b])
            }
        },
        _shouldFocusInput: function (a) {
            return a.input && a.input.is(":visible") && !a.input.is(":disabled") && !a.input.is(":focus")
        },
        _checkOffset: function (b, c, d) {
            var e = b.dpDiv.outerWidth(), f = b.dpDiv.outerHeight(), g = b.input ? b.input.outerWidth() : 0,
                h = b.input ? b.input.outerHeight() : 0,
                i = document.documentElement.clientWidth + (d ? 0 : a(document).scrollLeft()),
                j = document.documentElement.clientHeight + (d ? 0 : a(document).scrollTop());
            c.left -= this._get(b, "isRTL") ? e - g : 0;
            c.left -= d && c.left === b.input.offset().left ? a(document).scrollLeft() : 0;
            c.top -= d && c.top === b.input.offset().top + h ? a(document).scrollTop() : 0;
            c.left -= Math.min(c.left, c.left + e > i && i > e ? Math.abs(c.left + e - i) : 0);
            c.top -= Math.min(c.top, c.top + f > j && j > f ? Math.abs(f + h) : 0);
            return c
        },
        _findPos: function (b) {
            var c, d = this._getInst(b), e = this._get(d, "isRTL");
            while (b && (b.type === "hidden" || b.nodeType !== 1 || a.expr.pseudos.hidden(b))) {
                b = b[e ? "previousSibling" : "nextSibling"]
            }
            c = a(b).offset();
            return [c.left, c.top]
        },
        _hideDatepicker: function (b) {
            var c, d, e, f, g = this._curInst;
            if (!g || b && g !== a.data(b, "datepicker")) {
                return
            }
            if (this._datepickerShowing) {
                c = this._get(g, "showAnim");
                d = this._get(g, "duration");
                e = function () {
                    a.datepicker._tidyDialog(g)
                };
                if (a.effects && (a.effects.effect[c] || a.effects[c])) {
                    g.dpDiv.hide(c, a.datepicker._get(g, "showOptions"), d, e)
                } else {
                    g.dpDiv[c === "slideDown" ? "slideUp" : c === "fadeIn" ? "fadeOut" : "hide"](c ? d : null, e)
                }
                if (!c) {
                    e()
                }
                this._datepickerShowing = false;
                f = this._get(g, "onClose");
                if (f) {
                    f.apply(g.input ? g.input[0] : null, [g.input ? g.input.val() : "", g])
                }
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({position: "absolute", left: "0", top: "-100px"});
                    if (a.blockUI) {
                        a.unblockUI();
                        a("body").append(this.dpDiv)
                    }
                }
                this._inDialog = false
            }
        },
        _tidyDialog: function (a) {
            a.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")
        },
        _checkExternalClick: function (b) {
            if (!a.datepicker._curInst) {
                return
            }
            var c = a(b.target), d = a.datepicker._getInst(c[0]);
            if (c[0].id !== a.datepicker._mainDivId && c.parents("#" + a.datepicker._mainDivId).length === 0 && !c.hasClass(a.datepicker.markerClassName) && !c.closest("." + a.datepicker._triggerClass).length && a.datepicker._datepickerShowing && !(a.datepicker._inDialog && a.blockUI) || c.hasClass(a.datepicker.markerClassName) && a.datepicker._curInst !== d) {
                a.datepicker._hideDatepicker()
            }
        },
        _adjustDate: function (b, c, d) {
            var e = a(b), f = this._getInst(e[0]);
            if (this._isDisabledDatepicker(e[0])) {
                return
            }
            this._adjustInstDate(f, c, d);
            this._updateDatepicker(f)
        },
        _gotoToday: function (b) {
            var c, d = a(b), e = this._getInst(d[0]);
            if (this._get(e, "gotoCurrent") && e.currentDay) {
                e.selectedDay = e.currentDay;
                e.drawMonth = e.selectedMonth = e.currentMonth;
                e.drawYear = e.selectedYear = e.currentYear
            } else {
                c = new Date;
                e.selectedDay = c.getDate();
                e.drawMonth = e.selectedMonth = c.getMonth();
                e.drawYear = e.selectedYear = c.getFullYear()
            }
            this._notifyChange(e);
            this._adjustDate(d)
        },
        _selectMonthYear: function (b, c, d) {
            var e = a(b), f = this._getInst(e[0]);
            f["selected" + (d === "M" ? "Month" : "Year")] = f["draw" + (d === "M" ? "Month" : "Year")] = parseInt(c.options[c.selectedIndex].value, 10);
            this._notifyChange(f);
            this._adjustDate(e)
        },
        _selectDay: function (b, c, d, e) {
            var f, g = a(b);
            if (a(e).hasClass(this._unselectableClass) || this._isDisabledDatepicker(g[0])) {
                return
            }
            f = this._getInst(g[0]);
            f.selectedDay = f.currentDay = parseInt(a("a", e).attr("data-date"));
            f.selectedMonth = f.currentMonth = c;
            f.selectedYear = f.currentYear = d;
            this._selectDate(b, this._formatDate(f, f.currentDay, f.currentMonth, f.currentYear))
        },
        _clearDate: function (b) {
            var c = a(b);
            this._selectDate(c, "")
        },
        _selectDate: function (b, c) {
            var d, e = a(b), f = this._getInst(e[0]);
            c = c != null ? c : this._formatDate(f);
            if (f.input) {
                f.input.val(c)
            }
            this._updateAlternate(f);
            d = this._get(f, "onSelect");
            if (d) {
                d.apply(f.input ? f.input[0] : null, [c, f])
            } else if (f.input) {
                f.input.trigger("change")
            }
            if (f.inline) {
                this._updateDatepicker(f)
            } else {
                this._hideDatepicker();
                this._lastInput = f.input[0];
                if (typeof f.input[0] !== "object") {
                    f.input.trigger("focus")
                }
                this._lastInput = null
            }
        },
        _updateAlternate: function (b) {
            var c, d, e, f = this._get(b, "altField");
            if (f) {
                c = this._get(b, "altFormat") || this._get(b, "dateFormat");
                d = this._getDate(b);
                e = this.formatDate(c, d, this._getFormatConfig(b));
                a(document).find(f).val(e)
            }
        },
        noWeekends: function (a) {
            var b = a.getDay();
            return [b > 0 && b < 6, ""]
        },
        iso8601Week: function (a) {
            var b, c = new Date(a.getTime());
            c.setDate(c.getDate() + 4 - (c.getDay() || 7));
            b = c.getTime();
            c.setMonth(0);
            c.setDate(1);
            return Math.floor(Math.round((b - c) / 864e5) / 7) + 1
        },
        parseDate: function (b, c, d) {
            if (b == null || c == null) {
                throw "Invalid arguments"
            }
            c = typeof c === "object" ? c.toString() : c + "";
            if (c === "") {
                return null
            }
            var e, f, g, h = 0, i = (d ? d.shortYearCutoff : null) || this._defaults.shortYearCutoff,
                j = typeof i !== "string" ? i : (new Date).getFullYear() % 100 + parseInt(i, 10),
                k = (d ? d.dayNamesShort : null) || this._defaults.dayNamesShort,
                l = (d ? d.dayNames : null) || this._defaults.dayNames,
                m = (d ? d.monthNamesShort : null) || this._defaults.monthNamesShort,
                n = (d ? d.monthNames : null) || this._defaults.monthNames, o = -1, p = -1, q = -1, r = -1, s = false,
                t, u = function (a) {
                    var c = e + 1 < b.length && b.charAt(e + 1) === a;
                    if (c) {
                        e++
                    }
                    return c
                }, v = function (a) {
                    var b = u(a), d = a === "@" ? 14 : a === "!" ? 20 : a === "y" && b ? 4 : a === "o" ? 3 : 2,
                        e = a === "y" ? d : 1, f = new RegExp("^\\d{" + e + "," + d + "}"), g = c.substring(h).match(f);
                    if (!g) {
                        throw "Missing number at position " + h
                    }
                    h += g[0].length;
                    return parseInt(g[0], 10)
                }, w = function (b, d, e) {
                    var f = -1, g = a.map(u(b) ? e : d, function (a, b) {
                        return [[b, a]]
                    }).sort(function (a, b) {
                        return -(a[1].length - b[1].length)
                    });
                    a.each(g, function (a, b) {
                        var d = b[1];
                        if (c.substr(h, d.length).toLowerCase() === d.toLowerCase()) {
                            f = b[0];
                            h += d.length;
                            return false
                        }
                    });
                    if (f !== -1) {
                        return f + 1
                    } else {
                        throw "Unknown name at position " + h
                    }
                }, x = function () {
                    if (c.charAt(h) !== b.charAt(e)) {
                        throw "Unexpected literal at position " + h
                    }
                    h++
                };
            for (e = 0; e < b.length; e++) {
                if (s) {
                    if (b.charAt(e) === "'" && !u("'")) {
                        s = false
                    } else {
                        x()
                    }
                } else {
                    switch (b.charAt(e)) {
                        case"d":
                            q = v("d");
                            break;
                        case"D":
                            w("D", k, l);
                            break;
                        case"o":
                            r = v("o");
                            break;
                        case"m":
                            p = v("m");
                            break;
                        case"M":
                            p = w("M", m, n);
                            break;
                        case"y":
                            o = v("y");
                            break;
                        case"@":
                            t = new Date(v("@"));
                            o = t.getFullYear();
                            p = t.getMonth() + 1;
                            q = t.getDate();
                            break;
                        case"!":
                            t = new Date((v("!") - this._ticksTo1970) / 1e4);
                            o = t.getFullYear();
                            p = t.getMonth() + 1;
                            q = t.getDate();
                            break;
                        case"'":
                            if (u("'")) {
                                x()
                            } else {
                                s = true
                            }
                            break;
                        default:
                            x()
                    }
                }
            }
            if (h < c.length) {
                g = c.substr(h);
                if (!/^\s+/.test(g)) {
                    throw "Extra/unparsed characters found in date: " + g
                }
            }
            if (o === -1) {
                o = (new Date).getFullYear()
            } else if (o < 100) {
                o += (new Date).getFullYear() - (new Date).getFullYear() % 100 + (o <= j ? 0 : -100)
            }
            if (r > -1) {
                p = 1;
                q = r;
                do {
                    f = this._getDaysInMonth(o, p - 1);
                    if (q <= f) {
                        break
                    }
                    p++;
                    q -= f
                } while (true)
            }
            t = this._daylightSavingAdjust(new Date(o, p - 1, q));
            if (t.getFullYear() !== o || t.getMonth() + 1 !== p || t.getDate() !== q) {
                throw "Invalid date"
            }
            return t
        },
        ATOM: "yy-mm-dd",
        COOKIE: "D, dd M yy",
        ISO_8601: "yy-mm-dd",
        RFC_822: "D, d M y",
        RFC_850: "DD, dd-M-y",
        RFC_1036: "D, d M y",
        RFC_1123: "D, d M yy",
        RFC_2822: "D, d M yy",
        RSS: "D, d M y",
        TICKS: "!",
        TIMESTAMP: "@",
        W3C: "yy-mm-dd",
        _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 1e7,
        formatDate: function (a, b, c) {
            if (!b) {
                return ""
            }
            var d, e = (c ? c.dayNamesShort : null) || this._defaults.dayNamesShort,
                f = (c ? c.dayNames : null) || this._defaults.dayNames,
                g = (c ? c.monthNamesShort : null) || this._defaults.monthNamesShort,
                h = (c ? c.monthNames : null) || this._defaults.monthNames, i = function (b) {
                    var c = d + 1 < a.length && a.charAt(d + 1) === b;
                    if (c) {
                        d++
                    }
                    return c
                }, j = function (a, b, c) {
                    var d = "" + b;
                    if (i(a)) {
                        while (d.length < c) {
                            d = "0" + d
                        }
                    }
                    return d
                }, k = function (a, b, c, d) {
                    return i(a) ? d[b] : c[b]
                }, l = "", m = false;
            if (b) {
                for (d = 0; d < a.length; d++) {
                    if (m) {
                        if (a.charAt(d) === "'" && !i("'")) {
                            m = false
                        } else {
                            l += a.charAt(d)
                        }
                    } else {
                        switch (a.charAt(d)) {
                            case"d":
                                l += j("d", b.getDate(), 2);
                                break;
                            case"D":
                                l += k("D", b.getDay(), e, f);
                                break;
                            case"o":
                                l += j("o", Math.round(((new Date(b.getFullYear(), b.getMonth(), b.getDate())).getTime() - (new Date(b.getFullYear(), 0, 0)).getTime()) / 864e5), 3);
                                break;
                            case"m":
                                l += j("m", b.getMonth() + 1, 2);
                                break;
                            case"M":
                                l += k("M", b.getMonth(), g, h);
                                break;
                            case"y":
                                l += i("y") ? b.getFullYear() : (b.getFullYear() % 100 < 10 ? "0" : "") + b.getFullYear() % 100;
                                break;
                            case"@":
                                l += b.getTime();
                                break;
                            case"!":
                                l += b.getTime() * 1e4 + this._ticksTo1970;
                                break;
                            case"'":
                                if (i("'")) {
                                    l += "'"
                                } else {
                                    m = true
                                }
                                break;
                            default:
                                l += a.charAt(d)
                        }
                    }
                }
            }
            return l
        },
        _possibleChars: function (a) {
            var b, c = "", d = false, e = function (c) {
                var d = b + 1 < a.length && a.charAt(b + 1) === c;
                if (d) {
                    b++
                }
                return d
            };
            for (b = 0; b < a.length; b++) {
                if (d) {
                    if (a.charAt(b) === "'" && !e("'")) {
                        d = false
                    } else {
                        c += a.charAt(b)
                    }
                } else {
                    switch (a.charAt(b)) {
                        case"d":
                        case"m":
                        case"y":
                        case"@":
                            c += "0123456789";
                            break;
                        case"D":
                        case"M":
                            return null;
                        case"'":
                            if (e("'")) {
                                c += "'"
                            } else {
                                d = true
                            }
                            break;
                        default:
                            c += a.charAt(b)
                    }
                }
            }
            return c
        },
        _get: function (a, c) {
            return a.settings[c] !== b ? a.settings[c] : this._defaults[c]
        },
        _setDateFromField: function (a, b) {
            if (a.input.val() === a.lastVal) {
                return
            }
            var c = this._get(a, "dateFormat"), d = a.lastVal = a.input ? a.input.val() : null,
                e = this._getDefaultDate(a), f = e, g = this._getFormatConfig(a);
            try {
                f = this.parseDate(c, d, g) || e
            } catch (h) {
                d = b ? "" : d
            }
            a.selectedDay = f.getDate();
            a.drawMonth = a.selectedMonth = f.getMonth();
            a.drawYear = a.selectedYear = f.getFullYear();
            a.currentDay = d ? f.getDate() : 0;
            a.currentMonth = d ? f.getMonth() : 0;
            a.currentYear = d ? f.getFullYear() : 0;
            this._adjustInstDate(a)
        },
        _getDefaultDate: function (a) {
            return this._restrictMinMax(a, this._determineDate(a, this._get(a, "defaultDate"), new Date))
        },
        _determineDate: function (b, c, d) {
            var e = function (a) {
                    var b = new Date;
                    b.setDate(b.getDate() + a);
                    return b
                }, f = function (c) {
                    try {
                        return a.datepicker.parseDate(a.datepicker._get(b, "dateFormat"), c, a.datepicker._getFormatConfig(b))
                    } catch (d) {
                    }
                    var e = (c.toLowerCase().match(/^c/) ? a.datepicker._getDate(b) : null) || new Date,
                        f = e.getFullYear(), g = e.getMonth(), h = e.getDate(), i = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                        j = i.exec(c);
                    while (j) {
                        switch (j[2] || "d") {
                            case"d":
                            case"D":
                                h += parseInt(j[1], 10);
                                break;
                            case"w":
                            case"W":
                                h += parseInt(j[1], 10) * 7;
                                break;
                            case"m":
                            case"M":
                                g += parseInt(j[1], 10);
                                h = Math.min(h, a.datepicker._getDaysInMonth(f, g));
                                break;
                            case"y":
                            case"Y":
                                f += parseInt(j[1], 10);
                                h = Math.min(h, a.datepicker._getDaysInMonth(f, g));
                                break
                        }
                        j = i.exec(c)
                    }
                    return new Date(f, g, h)
                },
                g = c == null || c === "" ? d : typeof c === "string" ? f(c) : typeof c === "number" ? isNaN(c) ? d : e(c) : new Date(c.getTime());
            g = g && g.toString() === "Invalid Date" ? d : g;
            if (g) {
                g.setHours(0);
                g.setMinutes(0);
                g.setSeconds(0);
                g.setMilliseconds(0)
            }
            return this._daylightSavingAdjust(g)
        },
        _daylightSavingAdjust: function (a) {
            if (!a) {
                return null
            }
            a.setHours(a.getHours() > 12 ? a.getHours() + 2 : 0);
            return a
        },
        _setDate: function (a, b, c) {
            var d = !b, e = a.selectedMonth, f = a.selectedYear,
                g = this._restrictMinMax(a, this._determineDate(a, b, new Date));
            a.selectedDay = a.currentDay = g.getDate();
            a.drawMonth = a.selectedMonth = a.currentMonth = g.getMonth();
            a.drawYear = a.selectedYear = a.currentYear = g.getFullYear();
            if ((e !== a.selectedMonth || f !== a.selectedYear) && !c) {
                this._notifyChange(a)
            }
            this._adjustInstDate(a);
            if (a.input) {
                a.input.val(d ? "" : this._formatDate(a))
            }
        },
        _getDate: function (a) {
            var b = !a.currentYear || a.input && a.input.val() === "" ? null : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay));
            return b
        },
        _attachHandlers: function (b) {
            var c = this._get(b, "stepMonths"), d = "#" + b.id.replace(/\\\\/g, "\\");
            b.dpDiv.find("[data-handler]").map(function () {
                var b = {
                    prev: function () {
                        a.datepicker._adjustDate(d, -c, "M")
                    }, next: function () {
                        a.datepicker._adjustDate(d, +c, "M")
                    }, hide: function () {
                        a.datepicker._hideDatepicker()
                    }, today: function () {
                        a.datepicker._gotoToday(d)
                    }, selectDay: function () {
                        a.datepicker._selectDay(d, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                        return false
                    }, selectMonth: function () {
                        a.datepicker._selectMonthYear(d, this, "M");
                        return false
                    }, selectYear: function () {
                        a.datepicker._selectMonthYear(d, this, "Y");
                        return false
                    }
                };
                a(this).on(this.getAttribute("data-event"), b[this.getAttribute("data-handler")])
            })
        },
        _generateHTML: function (b) {
            var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K,
                L, M, N, O, P = new Date,
                Q = this._daylightSavingAdjust(new Date(P.getFullYear(), P.getMonth(), P.getDate())),
                R = this._get(b, "isRTL"), S = this._get(b, "showButtonPanel"), T = this._get(b, "hideIfNoPrevNext"),
                U = this._get(b, "navigationAsDateFormat"), V = this._getNumberOfMonths(b),
                W = this._get(b, "showCurrentAtPos"), X = this._get(b, "stepMonths"), Y = V[0] !== 1 || V[1] !== 1,
                Z = this._daylightSavingAdjust(!b.currentDay ? new Date(9999, 9, 9) : new Date(b.currentYear, b.currentMonth, b.currentDay)),
                _ = this._getMinMaxDate(b, "min"), ba = this._getMinMaxDate(b, "max"), bb = b.drawMonth - W,
                bc = b.drawYear;
            if (bb < 0) {
                bb += 12;
                bc--
            }
            if (ba) {
                c = this._daylightSavingAdjust(new Date(ba.getFullYear(), ba.getMonth() - V[0] * V[1] + 1, ba.getDate()));
                c = _ && c < _ ? _ : c;
                while (this._daylightSavingAdjust(new Date(bc, bb, 1)) > c) {
                    bb--;
                    if (bb < 0) {
                        bb = 11;
                        bc--
                    }
                }
            }
            b.drawMonth = bb;
            b.drawYear = bc;
            d = this._get(b, "prevText");
            d = !U ? d : this.formatDate(d, this._daylightSavingAdjust(new Date(bc, bb - X, 1)), this._getFormatConfig(b));
            if (this._canAdjustMonth(b, -1, bc, bb)) {
                e = a("<a>").attr({
                    "class": "ui-datepicker-prev ui-corner-all",
                    "data-handler": "prev",
                    "data-event": "click",
                    title: d
                }).append(a("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (R ? "e" : "w")).text(d))[0].outerHTML
            } else if (T) {
                e = ""
            } else {
                e = a("<a>").attr({
                    "class": "ui-datepicker-prev ui-corner-all ui-state-disabled",
                    title: d
                }).append(a("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (R ? "e" : "w")).text(d))[0].outerHTML
            }
            f = this._get(b, "nextText");
            f = !U ? f : this.formatDate(f, this._daylightSavingAdjust(new Date(bc, bb + X, 1)), this._getFormatConfig(b));
            if (this._canAdjustMonth(b, +1, bc, bb)) {
                g = a("<a>").attr({
                    "class": "ui-datepicker-next ui-corner-all",
                    "data-handler": "next",
                    "data-event": "click",
                    title: f
                }).append(a("<span>").addClass("ui-icon ui-icon-circle-triangle-" + (R ? "w" : "e")).text(f))[0].outerHTML
            } else if (T) {
                g = ""
            } else {
                g = a("<a>").attr({
                    "class": "ui-datepicker-next ui-corner-all ui-state-disabled",
                    title: f
                }).append(a("<span>").attr("class", "ui-icon ui-icon-circle-triangle-" + (R ? "w" : "e")).text(f))[0].outerHTML
            }
            h = this._get(b, "currentText");
            i = this._get(b, "gotoCurrent") && b.currentDay ? Z : Q;
            h = !U ? h : this.formatDate(h, i, this._getFormatConfig(b));
            j = "";
            if (!b.inline) {
                j = a("<button>").attr({
                    type: "button",
                    "class": "ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all",
                    "data-handler": "hide",
                    "data-event": "click"
                }).text(this._get(b, "closeText"))[0].outerHTML
            }
            k = "";
            if (S) {
                k = a("<div class='ui-datepicker-buttonpane ui-widget-content'>").append(R ? j : "").append(this._isInRange(b, i) ? a("<button>").attr({
                    type: "button",
                    "class": "ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all",
                    "data-handler": "today",
                    "data-event": "click"
                }).text(h) : "").append(R ? "" : j)[0].outerHTML
            }
            l = parseInt(this._get(b, "firstDay"), 10);
            l = isNaN(l) ? 0 : l;
            m = this._get(b, "showWeek");
            n = this._get(b, "dayNames");
            o = this._get(b, "dayNamesMin");
            p = this._get(b, "monthNames");
            q = this._get(b, "monthNamesShort");
            r = this._get(b, "beforeShowDay");
            s = this._get(b, "showOtherMonths");
            t = this._get(b, "selectOtherMonths");
            u = this._getDefaultDate(b);
            v = "";
            for (x = 0; x < V[0]; x++) {
                y = "";
                this.maxRows = 4;
                for (z = 0; z < V[1]; z++) {
                    A = this._daylightSavingAdjust(new Date(bc, bb, b.selectedDay));
                    B = " ui-corner-all";
                    C = "";
                    if (Y) {
                        C += "<div class='ui-datepicker-group";
                        if (V[1] > 1) {
                            switch (z) {
                                case 0:
                                    C += " ui-datepicker-group-first";
                                    B = " ui-corner-" + (R ? "right" : "left");
                                    break;
                                case V[1] - 1:
                                    C += " ui-datepicker-group-last";
                                    B = " ui-corner-" + (R ? "left" : "right");
                                    break;
                                default:
                                    C += " ui-datepicker-group-middle";
                                    B = "";
                                    break
                            }
                        }
                        C += "'>"
                    }
                    C += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + B + "'>" + (/all|left/.test(B) && x === 0 ? R ? g : e : "") + (/all|right/.test(B) && x === 0 ? R ? e : g : "") + this._generateMonthYearHeader(b, bb, bc, _, ba, x > 0 || z > 0, p, q) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>";
                    D = m ? "<th class='ui-datepicker-week-col'>" + this._get(b, "weekHeader") + "</th>" : "";
                    for (w = 0; w < 7; w++) {
                        E = (w + l) % 7;
                        D += "<th scope='col'" + ((w + l + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + n[E] + "'>" + o[E] + "</span></th>"
                    }
                    C += D + "</tr></thead><tbody>";
                    F = this._getDaysInMonth(bc, bb);
                    if (bc === b.selectedYear && bb === b.selectedMonth) {
                        b.selectedDay = Math.min(b.selectedDay, F)
                    }
                    G = (this._getFirstDayOfMonth(bc, bb) - l + 7) % 7;
                    H = Math.ceil((G + F) / 7);
                    I = Y ? this.maxRows > H ? this.maxRows : H : H;
                    this.maxRows = I;
                    J = this._daylightSavingAdjust(new Date(bc, bb, 1 - G));
                    for (K = 0; K < I; K++) {
                        C += "<tr>";
                        L = !m ? "" : "<td class='ui-datepicker-week-col'>" + this._get(b, "calculateWeek")(J) + "</td>";
                        for (w = 0; w < 7; w++) {
                            M = r ? r.apply(b.input ? b.input[0] : null, [J]) : [true, ""];
                            N = J.getMonth() !== bb;
                            O = N && !t || !M[0] || _ && J < _ || ba && J > ba;
                            L += "<td class='" + ((w + l + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (N ? " ui-datepicker-other-month" : "") + (J.getTime() === A.getTime() && bb === b.selectedMonth && b._keyEvent || u.getTime() === J.getTime() && u.getTime() === A.getTime() ? " " + this._dayOverClass : "") + (O ? " " + this._unselectableClass + " ui-state-disabled" : "") + (N && !s ? "" : " " + M[1] + (J.getTime() === Z.getTime() ? " " + this._currentClass : "") + (J.getTime() === Q.getTime() ? " ui-datepicker-today" : "")) + "'" + ((!N || s) && M[2] ? " title='" +
                                M[2].replace(/'/g, "&#39;") + "'" : "") + (O ? "" : " data-handler='selectDay' data-event='click' data-month='" + J.getMonth() + "' data-year='" + J.getFullYear() + "'") + ">" + (N && !s ? "&#xa0;" : O ? "<span class='ui-state-default'>" + J.getDate() + "</span>" : "<a class='ui-state-default" + (J.getTime() === Q.getTime() ? " ui-state-highlight" : "") + (J.getTime() === Z.getTime() ? " ui-state-active" : "") + (N ? " ui-priority-secondary" : "") + "' href='#' aria-current='" + (J.getTime() === Z.getTime() ? "true" : "false") + "' data-date='" + J.getDate() + "'>" + J.getDate() + "</a>") + "</td>";
                            J.setDate(J.getDate() + 1);
                            J = this._daylightSavingAdjust(J)
                        }
                        C += L + "</tr>"
                    }
                    bb++;
                    if (bb > 11) {
                        bb = 0;
                        bc++
                    }
                    C += "</tbody></table>" + (Y ? "</div>" + (V[0] > 0 && z === V[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                    y += C
                }
                v += y
            }
            v += k;
            b._keyEvent = false;
            return v
        },
        _generateMonthYearHeader: function (a, b, c, d, e, f, g, h) {
            var i, j, k, l, m, n, o, p, q = this._get(a, "changeMonth"), r = this._get(a, "changeYear"),
                s = this._get(a, "showMonthAfterYear"), t = this._get(a, "selectMonthLabel"),
                u = this._get(a, "selectYearLabel"), v = "<div class='ui-datepicker-title'>", w = "";
            if (f || !q) {
                w += "<span class='ui-datepicker-month'>" + g[b] + "</span>"
            } else {
                i = d && d.getFullYear() === c;
                j = e && e.getFullYear() === c;
                w += "<select class='ui-datepicker-month' aria-label='" + t + "' data-handler='selectMonth' data-event='change'>";
                for (k = 0; k < 12; k++) {
                    if ((!i || k >= d.getMonth()) && (!j || k <= e.getMonth())) {
                        w += "<option value='" + k + "'" + (k === b ? " selected='selected'" : "") + ">" + h[k] + "</option>"
                    }
                }
                w += "</select>"
            }
            if (!s) {
                v += w + (f || !(q && r) ? "&#xa0;" : "")
            }
            if (!a.yearshtml) {
                a.yearshtml = "";
                if (f || !r) {
                    v += "<span class='ui-datepicker-year'>" + c + "</span>"
                } else {
                    l = this._get(a, "yearRange").split(":");
                    m = (new Date).getFullYear();
                    n = function (a) {
                        var b = a.match(/c[+\-].*/) ? c + parseInt(a.substring(1), 10) : a.match(/[+\-].*/) ? m + parseInt(a, 10) : parseInt(a, 10);
                        return isNaN(b) ? m : b
                    };
                    o = n(l[0]);
                    p = Math.max(o, n(l[1] || ""));
                    o = d ? Math.max(o, d.getFullYear()) : o;
                    p = e ? Math.min(p, e.getFullYear()) : p;
                    a.yearshtml += "<select class='ui-datepicker-year' aria-label='" + u + "' data-handler='selectYear' data-event='change'>";
                    for (; o <= p; o++) {
                        a.yearshtml += "<option value='" + o + "'" + (o === c ? " selected='selected'" : "") + ">" + o + "</option>"
                    }
                    a.yearshtml += "</select>";
                    v += a.yearshtml;
                    a.yearshtml = null
                }
            }
            v += this._get(a, "yearSuffix");
            if (s) {
                v += (f || !(q && r) ? "&#xa0;" : "") + w
            }
            v += "</div>";
            return v
        },
        _adjustInstDate: function (a, b, c) {
            var d = a.selectedYear + (c === "Y" ? b : 0), e = a.selectedMonth + (c === "M" ? b : 0),
                f = Math.min(a.selectedDay, this._getDaysInMonth(d, e)) + (c === "D" ? b : 0),
                g = this._restrictMinMax(a, this._daylightSavingAdjust(new Date(d, e, f)));
            a.selectedDay = g.getDate();
            a.drawMonth = a.selectedMonth = g.getMonth();
            a.drawYear = a.selectedYear = g.getFullYear();
            if (c === "M" || c === "Y") {
                this._notifyChange(a)
            }
        },
        _restrictMinMax: function (a, b) {
            var c = this._getMinMaxDate(a, "min"), d = this._getMinMaxDate(a, "max"), e = c && b < c ? c : b;
            return d && e > d ? d : e
        },
        _notifyChange: function (a) {
            var b = this._get(a, "onChangeMonthYear");
            if (b) {
                b.apply(a.input ? a.input[0] : null, [a.selectedYear, a.selectedMonth + 1, a])
            }
        },
        _getNumberOfMonths: function (a) {
            var b = this._get(a, "numberOfMonths");
            return b == null ? [1, 1] : typeof b === "number" ? [1, b] : b
        },
        _getMinMaxDate: function (a, b) {
            return this._determineDate(a, this._get(a, b + "Date"), null)
        },
        _getDaysInMonth: function (a, b) {
            return 32 - this._daylightSavingAdjust(new Date(a, b, 32)).getDate()
        },
        _getFirstDayOfMonth: function (a, b) {
            return (new Date(a, b, 1)).getDay()
        },
        _canAdjustMonth: function (a, b, c, d) {
            var e = this._getNumberOfMonths(a),
                f = this._daylightSavingAdjust(new Date(c, d + (b < 0 ? b : e[0] * e[1]), 1));
            if (b < 0) {
                f.setDate(this._getDaysInMonth(f.getFullYear(), f.getMonth()))
            }
            return this._isInRange(a, f)
        },
        _isInRange: function (a, b) {
            var c, d, e = this._getMinMaxDate(a, "min"), f = this._getMinMaxDate(a, "max"), g = null, h = null,
                i = this._get(a, "yearRange");
            if (i) {
                c = i.split(":");
                d = (new Date).getFullYear();
                g = parseInt(c[0], 10);
                h = parseInt(c[1], 10);
                if (c[0].match(/[+\-].*/)) {
                    g += d
                }
                if (c[1].match(/[+\-].*/)) {
                    h += d
                }
            }
            return (!e || b.getTime() >= e.getTime()) && (!f || b.getTime() <= f.getTime()) && (!g || b.getFullYear() >= g) && (!h || b.getFullYear() <= h)
        },
        _getFormatConfig: function (a) {
            var b = this._get(a, "shortYearCutoff");
            b = typeof b !== "string" ? b : (new Date).getFullYear() % 100 + parseInt(b, 10);
            return {
                shortYearCutoff: b,
                dayNamesShort: this._get(a, "dayNamesShort"),
                dayNames: this._get(a, "dayNames"),
                monthNamesShort: this._get(a, "monthNamesShort"),
                monthNames: this._get(a, "monthNames")
            }
        },
        _formatDate: function (a, b, c, d) {
            if (!b) {
                a.currentDay = a.selectedDay;
                a.currentMonth = a.selectedMonth;
                a.currentYear = a.selectedYear
            }
            var e = b ? typeof b === "object" ? b : this._daylightSavingAdjust(new Date(d, c, b)) : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay));
            return this.formatDate(this._get(a, "dateFormat"), e, this._getFormatConfig(a))
        }
    });
    a.fn.datepicker = function (b) {
        if (!this.length) {
            return this
        }
        if (!a.datepicker.initialized) {
            a(document).on("mousedown", a.datepicker._checkExternalClick);
            a.datepicker.initialized = true
        }
        if (a("#" + a.datepicker._mainDivId).length === 0) {
            a("body").append(a.datepicker.dpDiv)
        }
        var c = Array.prototype.slice.call(arguments, 1);
        if (typeof b === "string" && (b === "isDisabled" || b === "getDate" || b === "widget")) {
            return a.datepicker["_" + b + "Datepicker"].apply(a.datepicker, [this[0]].concat(c))
        }
        if (b === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
            return a.datepicker["_" + b + "Datepicker"].apply(a.datepicker, [this[0]].concat(c))
        }
        return this.each(function () {
            if (typeof b === "string") {
                a.datepicker["_" + b + "Datepicker"].apply(a.datepicker, [this].concat(c))
            } else {
                a.datepicker._attachDatepicker(this, b)
            }
        })
    };
    a.datepicker = new e;
    a.datepicker.initialized = false;
    a.datepicker.uuid = (new Date).getTime();
    a.datepicker.version = "1.13.0";
    var i = a.datepicker
})(actuate.common.web.jQuery);/*!
 * jQuery UI Mouse 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *///>>label: Mouse
//>>group: Widgets
//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.
//>>docs: http://api.jqueryui.com/mouse/
(function (a, b) {
    var c = false;
    a(document).on("mouseup", function () {
        c = false
    });
    var d = a.widget("ui.mouse", {
        version: "1.13.0",
        options: {cancel: "input, textarea, button, select, option", distance: 1, delay: 0},
        _mouseInit: function () {
            var b = this;
            this.element.on("mousedown." + this.widgetName, function (a) {
                return b._mouseDown(a)
            }).on("click." + this.widgetName, function (c) {
                if (true === a.data(c.target, b.widgetName + ".preventClickEvent")) {
                    a.removeData(c.target, b.widgetName + ".preventClickEvent");
                    c.stopImmediatePropagation();
                    return false
                }
            });
            this.started = false
        },
        _mouseDestroy: function () {
            this.element.off("." + this.widgetName);
            if (this._mouseMoveDelegate) {
                this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate)
            }
        },
        _mouseDown: function (b) {
            if (c) {
                return
            }
            this._mouseMoved = false;
            if (this._mouseStarted) {
                this._mouseUp(b)
            }
            this._mouseDownEvent = b;
            var d = this, e = b.which === 1,
                f = typeof this.options.cancel === "string" && b.target.nodeName ? a(b.target).closest(this.options.cancel).length : false;
            if (!e || f || !this._mouseCapture(b)) {
                return true
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function () {
                    d.mouseDelayMet = true
                }, this.options.delay)
            }
            if (this._mouseDistanceMet(b) && this._mouseDelayMet(b)) {
                this._mouseStarted = this._mouseStart(b) !== false;
                if (!this._mouseStarted) {
                    b.preventDefault();
                    return true
                }
            }
            if (true === a.data(b.target, this.widgetName + ".preventClickEvent")) {
                a.removeData(b.target, this.widgetName + ".preventClickEvent")
            }
            this._mouseMoveDelegate = function (a) {
                return d._mouseMove(a)
            };
            this._mouseUpDelegate = function (a) {
                return d._mouseUp(a)
            };
            this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate);
            b.preventDefault();
            c = true;
            return true
        },
        _mouseMove: function (b) {
            if (this._mouseMoved) {
                if (a.ui.ie && (!document.documentMode || document.documentMode < 9) && !b.button) {
                    return this._mouseUp(b)
                } else if (!b.which) {
                    if (b.originalEvent.altKey || b.originalEvent.ctrlKey || b.originalEvent.metaKey || b.originalEvent.shiftKey) {
                        this.ignoreMissingWhich = true
                    } else if (!this.ignoreMissingWhich) {
                        return this._mouseUp(b)
                    }
                }
            }
            if (b.which || b.button) {
                this._mouseMoved = true
            }
            if (this._mouseStarted) {
                this._mouseDrag(b);
                return b.preventDefault()
            }
            if (this._mouseDistanceMet(b) && this._mouseDelayMet(b)) {
                this._mouseStarted = this._mouseStart(this._mouseDownEvent, b) !== false;
                if (this._mouseStarted) {
                    this._mouseDrag(b)
                } else {
                    this._mouseUp(b)
                }
            }
            return !this._mouseStarted
        },
        _mouseUp: function (b) {
            this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (b.target === this._mouseDownEvent.target) {
                    a.data(b.target, this.widgetName + ".preventClickEvent", true)
                }
                this._mouseStop(b)
            }
            if (this._mouseDelayTimer) {
                clearTimeout(this._mouseDelayTimer);
                delete this._mouseDelayTimer
            }
            this.ignoreMissingWhich = false;
            c = false;
            b.preventDefault()
        },
        _mouseDistanceMet: function (a) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY - a.pageY)) >= this.options.distance
        },
        _mouseDelayMet: function () {
            return this.mouseDelayMet
        },
        _mouseStart: function () {
        },
        _mouseDrag: function () {
        },
        _mouseStop: function () {
        },
        _mouseCapture: function () {
            return true
        }
    });
    var e = a.ui.plugin = {
        add: function (b, c, d) {
            var e, f = a.ui[b].prototype;
            for (e in d) {
                f.plugins[e] = f.plugins[e] || [];
                f.plugins[e].push([c, d[e]])
            }
        }, call: function (a, b, c, d) {
            var e, f = a.plugins[b];
            if (!f) {
                return
            }
            if (!d && (!a.element[0].parentNode || a.element[0].parentNode.nodeType === 11)) {
                return
            }
            for (e = 0; e < f.length; e++) {
                if (a.options[f[e][0]]) {
                    f[e][1].apply(a.element, c)
                }
            }
        }
    };
    var f = a.ui.safeBlur = function (b) {
        if (b && b.nodeName.toLowerCase() !== "body") {
            a(b).trigger("blur")
        }
    }
})(actuate.common.web.jQuery);/*!
 * jQuery UI Draggable 1.13.0
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *///>>label: Draggable
//>>group: Interactions
//>>description: Enables dragging functionality for any element.
//>>docs: http://api.jqueryui.com/draggable/
//>>demos: http://jqueryui.com/draggable/
//>>css.structure: ../../themes/base/draggable.css
(function (a, b) {
    a.widget("ui.draggable", a.ui.mouse, {
        version: "1.13.0",
        widgetEventPrefix: "drag",
        options: {
            addClasses: true,
            appendTo: "parent",
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: "auto",
            cursorAt: false,
            grid: false,
            handle: false,
            helper: "original",
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: "default",
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: "both",
            snapTolerance: 20,
            stack: false,
            zIndex: false,
            drag: null,
            start: null,
            stop: null
        },
        _create: function () {
            if (this.options.helper === "original") {
                this._setPositionRelative()
            }
            if (this.options.addClasses) {
                this._addClass("ui-draggable")
            }
            this._setHandleClassName();
            this._mouseInit()
        },
        _setOption: function (a, b) {
            this._super(a, b);
            if (a === "handle") {
                this._removeHandleClassName();
                this._setHandleClassName()
            }
        },
        _destroy: function () {
            if ((this.helper || this.element).is(".ui-draggable-dragging")) {
                this.destroyOnClear = true;
                return
            }
            this._removeHandleClassName();
            this._mouseDestroy()
        },
        _mouseCapture: function (b) {
            var c = this.options;
            if (this.helper || c.disabled || a(b.target).closest(".ui-resizable-handle").length > 0) {
                return false
            }
            this.handle = this._getHandle(b);
            if (!this.handle) {
                return false
            }
            this._blurActiveElement(b);
            this._blockFrames(c.iframeFix === true ? "iframe" : c.iframeFix);
            return true
        },
        _blockFrames: function (b) {
            this.iframeBlocks = this.document.find(b).map(function () {
                var b = a(this);
                return a("<div>").css("position", "absolute").appendTo(b.parent()).outerWidth(b.outerWidth()).outerHeight(b.outerHeight()).offset(b.offset())[0]
            })
        },
        _unblockFrames: function () {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks
            }
        },
        _blurActiveElement: function (b) {
            var c = a.ui.safeActiveElement(this.document[0]), d = a(b.target);
            if (d.closest(c).length) {
                return
            }
            a.ui.safeBlur(c)
        },
        _mouseStart: function (b) {
            var c = this.options;
            this.helper = this._createHelper(b);
            this._addClass(this.helper, "ui-draggable-dragging");
            this._cacheHelperProportions();
            if (a.ui.ddmanager) {
                a.ui.ddmanager.current = this
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css("position");
            this.scrollParent = this.helper.scrollParent(true);
            this.offsetParent = this.helper.offsetParent();
            this.hasFixedAncestor = this.helper.parents().filter(function () {
                return a(this).css("position") === "fixed"
            }).length > 0;
            this.positionAbs = this.element.offset();
            this._refreshOffsets(b);
            this.originalPosition = this.position = this._generatePosition(b, false);
            this.originalPageX = b.pageX;
            this.originalPageY = b.pageY;
            if (c.cursorAt) {
                this._adjustOffsetFromHelper(c.cursorAt)
            }
            this._setContainment();
            if (this._trigger("start", b) === false) {
                this._clear();
                return false
            }
            this._cacheHelperProportions();
            if (a.ui.ddmanager && !c.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(this, b)
            }
            this._mouseDrag(b, true);
            if (a.ui.ddmanager) {
                a.ui.ddmanager.dragStart(this, b)
            }
            return true
        },
        _refreshOffsets: function (a) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: false,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            };
            this.offset.click = {left: a.pageX - this.offset.left, top: a.pageY - this.offset.top}
        },
        _mouseDrag: function (b, c) {
            if (this.hasFixedAncestor) {
                this.offset.parent = this._getParentOffset()
            }
            this.position = this._generatePosition(b, true);
            this.positionAbs = this._convertPositionTo("absolute");
            if (!c) {
                var d = this._uiHash();
                if (this._trigger("drag", b, d) === false) {
                    this._mouseUp(new a.Event("mouseup", b));
                    return false
                }
                this.position = d.position
            }
            this.helper[0].style.left = this.position.left + "px";
            this.helper[0].style.top = this.position.top + "px";
            if (a.ui.ddmanager) {
                a.ui.ddmanager.drag(this, b)
            }
            return false
        },
        _mouseStop: function (b) {
            var c = this, d = false;
            if (a.ui.ddmanager && !this.options.dropBehaviour) {
                d = a.ui.ddmanager.drop(this, b)
            }
            if (this.dropped) {
                d = this.dropped;
                this.dropped = false
            }
            if (this.options.revert === "invalid" && !d || this.options.revert === "valid" && d || this.options.revert === true || typeof this.options.revert === "function" && this.options.revert.call(this.element, d)) {
                a(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                    if (c._trigger("stop", b) !== false) {
                        c._clear()
                    }
                })
            } else {
                if (this._trigger("stop", b) !== false) {
                    this._clear()
                }
            }
            return false
        },
        _mouseUp: function (b) {
            this._unblockFrames();
            if (a.ui.ddmanager) {
                a.ui.ddmanager.dragStop(this, b)
            }
            if (this.handleElement.is(b.target)) {
                this.element.trigger("focus")
            }
            return a.ui.mouse.prototype._mouseUp.call(this, b)
        },
        cancel: function () {
            if (this.helper.is(".ui-draggable-dragging")) {
                this._mouseUp(new a.Event("mouseup", {target: this.element[0]}))
            } else {
                this._clear()
            }
            return this
        },
        _getHandle: function (b) {
            return this.options.handle ? !!a(b.target).closest(this.element.find(this.options.handle)).length : true
        },
        _setHandleClassName: function () {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
            this._addClass(this.handleElement, "ui-draggable-handle")
        },
        _removeHandleClassName: function () {
            this._removeClass(this.handleElement, "ui-draggable-handle")
        },
        _createHelper: function (b) {
            var c = this.options, d = typeof c.helper === "function",
                e = d ? a(c.helper.apply(this.element[0], [b])) : c.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;
            if (!e.parents("body").length) {
                e.appendTo(c.appendTo === "parent" ? this.element[0].parentNode : c.appendTo)
            }
            if (d && e[0] === this.element[0]) {
                this._setPositionRelative()
            }
            if (e[0] !== this.element[0] && !/(fixed|absolute)/.test(e.css("position"))) {
                e.css("position", "absolute")
            }
            return e
        },
        _setPositionRelative: function () {
            if (!/^(?:r|a|f)/.test(this.element.css("position"))) {
                this.element[0].style.position = "relative"
            }
        },
        _adjustOffsetFromHelper: function (a) {
            if (typeof a === "string") {
                a = a.split(" ")
            }
            if (Array.isArray(a)) {
                a = {left: +a[0], top: +a[1] || 0}
            }
            if ("left" in a) {
                this.offset.click.left = a.left + this.margins.left
            }
            if ("right" in a) {
                this.offset.click.left = this.helperProportions.width - a.right + this.margins.left
            }
            if ("top" in a) {
                this.offset.click.top = a.top + this.margins.top
            }
            if ("bottom" in a) {
                this.offset.click.top = this.helperProportions.height - a.bottom + this.margins.top
            }
        },
        _isRootNode: function (a) {
            return /(html|body)/i.test(a.tagName) || a === this.document[0]
        },
        _getParentOffset: function () {
            var b = this.offsetParent.offset(), c = this.document[0];
            if (this.cssPosition === "absolute" && this.scrollParent[0] !== c && a.contains(this.scrollParent[0], this.offsetParent[0])) {
                b.left += this.scrollParent.scrollLeft();
                b.top += this.scrollParent.scrollTop()
            }
            if (this._isRootNode(this.offsetParent[0])) {
                b = {top: 0, left: 0}
            }
            return {
                top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
            }
        },
        _getRelativeOffset: function () {
            if (this.cssPosition !== "relative") {
                return {top: 0, left: 0}
            }
            var a = this.element.position(), b = this._isRootNode(this.scrollParent[0]);
            return {
                top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + (!b ? this.scrollParent.scrollTop() : 0),
                left: a.left - (parseInt(this.helper.css("left"), 10) || 0) + (!b ? this.scrollParent.scrollLeft() : 0)
            }
        },
        _cacheMargins: function () {
            this.margins = {
                left: parseInt(this.element.css("marginLeft"), 10) || 0,
                top: parseInt(this.element.css("marginTop"), 10) || 0,
                right: parseInt(this.element.css("marginRight"), 10) || 0,
                bottom: parseInt(this.element.css("marginBottom"), 10) || 0
            }
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {width: this.helper.outerWidth(), height: this.helper.outerHeight()}
        },
        _setContainment: function () {
            var b, c, d, e = this.options, f = this.document[0];
            this.relativeContainer = null;
            if (!e.containment) {
                this.containment = null;
                return
            }
            if (e.containment === "window") {
                this.containment = [a(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, a(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, a(window).scrollLeft() + a(window).width() - this.helperProportions.width - this.margins.left, a(window).scrollTop() + (a(window).height() || f.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                return
            }
            if (e.containment === "document") {
                this.containment = [0, 0, a(f).width() - this.helperProportions.width - this.margins.left, (a(f).height() || f.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                return
            }
            if (e.containment.constructor === Array) {
                this.containment = e.containment;
                return
            }
            if (e.containment === "parent") {
                e.containment = this.helper[0].parentNode
            }
            c = a(e.containment);
            d = c[0];
            if (!d) {
                return
            }
            b = /(scroll|auto)/.test(c.css("overflow"));
            this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (b ? Math.max(d.scrollWidth, d.offsetWidth) : d.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (b ? Math.max(d.scrollHeight, d.offsetHeight) : d.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom];
            this.relativeContainer = c
        },
        _convertPositionTo: function (a, b) {
            if (!b) {
                b = this.position
            }
            var c = a === "absolute" ? 1 : -1, d = this._isRootNode(this.scrollParent[0]);
            return {
                top: b.top + this.offset.relative.top * c + this.offset.parent.top * c - (this.cssPosition === "fixed" ? -this.offset.scroll.top : d ? 0 : this.offset.scroll.top) * c,
                left: b.left + this.offset.relative.left * c + this.offset.parent.left * c - (this.cssPosition === "fixed" ? -this.offset.scroll.left : d ? 0 : this.offset.scroll.left) * c
            }
        },
        _generatePosition: function (a, b) {
            var c, d, e, f, g = this.options, h = this._isRootNode(this.scrollParent[0]), i = a.pageX, j = a.pageY;
            if (!h || !this.offset.scroll) {
                this.offset.scroll = {top: this.scrollParent.scrollTop(), left: this.scrollParent.scrollLeft()}
            }
            if (b) {
                if (this.containment) {
                    if (this.relativeContainer) {
                        d = this.relativeContainer.offset();
                        c = [this.containment[0] + d.left, this.containment[1] + d.top, this.containment[2] + d.left, this.containment[3] + d.top]
                    } else {
                        c = this.containment
                    }
                    if (a.pageX - this.offset.click.left < c[0]) {
                        i = c[0] + this.offset.click.left
                    }
                    if (a.pageY - this.offset.click.top < c[1]) {
                        j = c[1] + this.offset.click.top
                    }
                    if (a.pageX - this.offset.click.left > c[2]) {
                        i = c[2] + this.offset.click.left
                    }
                    if (a.pageY - this.offset.click.top > c[3]) {
                        j = c[3] + this.offset.click.top
                    }
                }
                if (g.grid) {
                    e = g.grid[1] ? this.originalPageY + Math.round((j - this.originalPageY) / g.grid[1]) * g.grid[1] : this.originalPageY;
                    j = c ? e - this.offset.click.top >= c[1] || e - this.offset.click.top > c[3] ? e : e - this.offset.click.top >= c[1] ? e - g.grid[1] : e + g.grid[1] : e;
                    f = g.grid[0] ? this.originalPageX + Math.round((i - this.originalPageX) / g.grid[0]) * g.grid[0] : this.originalPageX;
                    i = c ? f - this.offset.click.left >= c[0] || f - this.offset.click.left > c[2] ? f : f - this.offset.click.left >= c[0] ? f - g.grid[0] : f + g.grid[0] : f
                }
                if (g.axis === "y") {
                    i = this.originalPageX
                }
                if (g.axis === "x") {
                    j = this.originalPageY
                }
            }
            return {
                top: j - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === "fixed" ? -this.offset.scroll.top : h ? 0 : this.offset.scroll.top),
                left: i - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === "fixed" ? -this.offset.scroll.left : h ? 0 : this.offset.scroll.left)
            }
        },
        _clear: function () {
            this._removeClass(this.helper, "ui-draggable-dragging");
            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove()
            }
            this.helper = null;
            this.cancelHelperRemoval = false;
            if (this.destroyOnClear) {
                this.destroy()
            }
        },
        _trigger: function (b, c, d) {
            d = d || this._uiHash();
            a.ui.plugin.call(this, b, [c, d, this], true);
            if (/^(drag|start|stop)/.test(b)) {
                this.positionAbs = this._convertPositionTo("absolute");
                d.offset = this.positionAbs
            }
            return a.Widget.prototype._trigger.call(this, b, c, d)
        },
        plugins: {},
        _uiHash: function () {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            }
        }
    });
    a.ui.plugin.add("draggable", "connectToSortable", {
        start: function (b, c, d) {
            var e = a.extend({}, c, {item: d.element});
            d.sortables = [];
            a(d.options.connectToSortable).each(function () {
                var c = a(this).sortable("instance");
                if (c && !c.options.disabled) {
                    d.sortables.push(c);
                    c.refreshPositions();
                    c._trigger("activate", b, e)
                }
            })
        }, stop: function (b, c, d) {
            var e = a.extend({}, c, {item: d.element});
            d.cancelHelperRemoval = false;
            a.each(d.sortables, function () {
                var a = this;
                if (a.isOver) {
                    a.isOver = 0;
                    d.cancelHelperRemoval = true;
                    a.cancelHelperRemoval = false;
                    a._storedCSS = {
                        position: a.placeholder.css("position"),
                        top: a.placeholder.css("top"),
                        left: a.placeholder.css("left")
                    };
                    a._mouseStop(b);
                    a.options.helper = a.options._helper
                } else {
                    a.cancelHelperRemoval = true;
                    a._trigger("deactivate", b, e)
                }
            })
        }, drag: function (b, c, d) {
            a.each(d.sortables, function () {
                var e = false, f = this;
                f.positionAbs = d.positionAbs;
                f.helperProportions = d.helperProportions;
                f.offset.click = d.offset.click;
                if (f._intersectsWith(f.containerCache)) {
                    e = true;
                    a.each(d.sortables, function () {
                        this.positionAbs = d.positionAbs;
                        this.helperProportions = d.helperProportions;
                        this.offset.click = d.offset.click;
                        if (this !== f && this._intersectsWith(this.containerCache) && a.contains(f.element[0], this.element[0])) {
                            e = false
                        }
                        return e
                    })
                }
                if (e) {
                    if (!f.isOver) {
                        f.isOver = 1;
                        d._parent = c.helper.parent();
                        f.currentItem = c.helper.appendTo(f.element).data("ui-sortable-item", true);
                        f.options._helper = f.options.helper;
                        f.options.helper = function () {
                            return c.helper[0]
                        };
                        b.target = f.currentItem[0];
                        f._mouseCapture(b, true);
                        f._mouseStart(b, true, true);
                        f.offset.click.top = d.offset.click.top;
                        f.offset.click.left = d.offset.click.left;
                        f.offset.parent.left -= d.offset.parent.left - f.offset.parent.left;
                        f.offset.parent.top -= d.offset.parent.top - f.offset.parent.top;
                        d._trigger("toSortable", b);
                        d.dropped = f.element;
                        a.each(d.sortables, function () {
                            this.refreshPositions()
                        });
                        d.currentItem = d.element;
                        f.fromOutside = d
                    }
                    if (f.currentItem) {
                        f._mouseDrag(b);
                        c.position = f.position
                    }
                } else {
                    if (f.isOver) {
                        f.isOver = 0;
                        f.cancelHelperRemoval = true;
                        f.options._revert = f.options.revert;
                        f.options.revert = false;
                        f._trigger("out", b, f._uiHash(f));
                        f._mouseStop(b, true);
                        f.options.revert = f.options._revert;
                        f.options.helper = f.options._helper;
                        if (f.placeholder) {
                            f.placeholder.remove()
                        }
                        c.helper.appendTo(d._parent);
                        d._refreshOffsets(b);
                        c.position = d._generatePosition(b, true);
                        d._trigger("fromSortable", b);
                        d.dropped = false;
                        a.each(d.sortables, function () {
                            this.refreshPositions()
                        })
                    }
                }
            })
        }
    });
    a.ui.plugin.add("draggable", "cursor", {
        start: function (b, c, d) {
            var e = a("body"), f = d.options;
            if (e.css("cursor")) {
                f._cursor = e.css("cursor")
            }
            e.css("cursor", f.cursor)
        }, stop: function (b, c, d) {
            var e = d.options;
            if (e._cursor) {
                a("body").css("cursor", e._cursor)
            }
        }
    });
    a.ui.plugin.add("draggable", "opacity", {
        start: function (b, c, d) {
            var e = a(c.helper), f = d.options;
            if (e.css("opacity")) {
                f._opacity = e.css("opacity")
            }
            e.css("opacity", f.opacity)
        }, stop: function (b, c, d) {
            var e = d.options;
            if (e._opacity) {
                a(c.helper).css("opacity", e._opacity)
            }
        }
    });
    a.ui.plugin.add("draggable", "scroll", {
        start: function (a, b, c) {
            if (!c.scrollParentNotHidden) {
                c.scrollParentNotHidden = c.helper.scrollParent(false)
            }
            if (c.scrollParentNotHidden[0] !== c.document[0] && c.scrollParentNotHidden[0].tagName !== "HTML") {
                c.overflowOffset = c.scrollParentNotHidden.offset()
            }
        }, drag: function (b, c, d) {
            var e = d.options, f = false, g = d.scrollParentNotHidden[0], h = d.document[0];
            if (g !== h && g.tagName !== "HTML") {
                if (!e.axis || e.axis !== "x") {
                    if (d.overflowOffset.top + g.offsetHeight - b.pageY < e.scrollSensitivity) {
                        g.scrollTop = f = g.scrollTop + e.scrollSpeed
                    } else if (b.pageY - d.overflowOffset.top < e.scrollSensitivity) {
                        g.scrollTop = f = g.scrollTop - e.scrollSpeed
                    }
                }
                if (!e.axis || e.axis !== "y") {
                    if (d.overflowOffset.left + g.offsetWidth - b.pageX < e.scrollSensitivity) {
                        g.scrollLeft = f = g.scrollLeft + e.scrollSpeed
                    } else if (b.pageX - d.overflowOffset.left < e.scrollSensitivity) {
                        g.scrollLeft = f = g.scrollLeft - e.scrollSpeed
                    }
                }
            } else {
                if (!e.axis || e.axis !== "x") {
                    if (b.pageY - a(h).scrollTop() < e.scrollSensitivity) {
                        f = a(h).scrollTop(a(h).scrollTop() - e.scrollSpeed)
                    } else if (a(window).height() - (b.pageY - a(h).scrollTop()) < e.scrollSensitivity) {
                        f = a(h).scrollTop(a(h).scrollTop() + e.scrollSpeed)
                    }
                }
                if (!e.axis || e.axis !== "y") {
                    if (b.pageX - a(h).scrollLeft() < e.scrollSensitivity) {
                        f = a(h).scrollLeft(a(h).scrollLeft() - e.scrollSpeed)
                    } else if (a(window).width() - (b.pageX - a(h).scrollLeft()) < e.scrollSensitivity) {
                        f = a(h).scrollLeft(a(h).scrollLeft() + e.scrollSpeed)
                    }
                }
            }
            if (f !== false && a.ui.ddmanager && !e.dropBehaviour) {
                a.ui.ddmanager.prepareOffsets(d, b)
            }
        }
    });
    a.ui.plugin.add("draggable", "snap", {
        start: function (b, c, d) {
            var e = d.options;
            d.snapElements = [];
            a(e.snap.constructor !== String ? e.snap.items || ":data(ui-draggable)" : e.snap).each(function () {
                var b = a(this), c = b.offset();
                if (this !== d.element[0]) {
                    d.snapElements.push({
                        item: this,
                        width: b.outerWidth(),
                        height: b.outerHeight(),
                        top: c.top,
                        left: c.left
                    })
                }
            })
        }, drag: function (b, c, d) {
            var e, f, g, h, i, j, k, l, m, n, o = d.options, p = o.snapTolerance, q = c.offset.left,
                r = q + d.helperProportions.width, s = c.offset.top, t = s + d.helperProportions.height;
            for (m = d.snapElements.length - 1; m >= 0; m--) {
                i = d.snapElements[m].left - d.margins.left;
                j = i + d.snapElements[m].width;
                k = d.snapElements[m].top - d.margins.top;
                l = k + d.snapElements[m].height;
                if (r < i - p || q > j + p || t < k - p || s > l + p || !a.contains(d.snapElements[m].item.ownerDocument, d.snapElements[m].item)) {
                    if (d.snapElements[m].snapping) {
                        if (d.options.snap.release) {
                            d.options.snap.release.call(d.element, b, a.extend(d._uiHash(), {snapItem: d.snapElements[m].item}))
                        }
                    }
                    d.snapElements[m].snapping = false;
                    continue
                }
                if (o.snapMode !== "inner") {
                    e = Math.abs(k - t) <= p;
                    f = Math.abs(l - s) <= p;
                    g = Math.abs(i - r) <= p;
                    h = Math.abs(j - q) <= p;
                    if (e) {
                        c.position.top = d._convertPositionTo("relative", {
                            top: k - d.helperProportions.height,
                            left: 0
                        }).top
                    }
                    if (f) {
                        c.position.top = d._convertPositionTo("relative", {top: l, left: 0}).top
                    }
                    if (g) {
                        c.position.left = d._convertPositionTo("relative", {
                            top: 0,
                            left: i - d.helperProportions.width
                        }).left
                    }
                    if (h) {
                        c.position.left = d._convertPositionTo("relative", {top: 0, left: j}).left
                    }
                }
                n = e || f || g || h;
                if (o.snapMode !== "outer") {
                    e = Math.abs(k - s) <= p;
                    f = Math.abs(l - t) <= p;
                    g = Math.abs(i - q) <= p;
                    h = Math.abs(j - r) <= p;
                    if (e) {
                        c.position.top = d._convertPositionTo("relative", {top: k, left: 0}).top
                    }
                    if (f) {
                        c.position.top = d._convertPositionTo("relative", {
                            top: l - d.helperProportions.height,
                            left: 0
                        }).top
                    }
                    if (g) {
                        c.position.left = d._convertPositionTo("relative", {top: 0, left: i}).left
                    }
                    if (h) {
                        c.position.left = d._convertPositionTo("relative", {
                            top: 0,
                            left: j - d.helperProportions.width
                        }).left
                    }
                }
                if (!d.snapElements[m].snapping && (e || f || g || h || n)) {
                    if (d.options.snap.snap) {
                        d.options.snap.snap.call(d.element, b, a.extend(d._uiHash(), {snapItem: d.snapElements[m].item}))
                    }
                }
                d.snapElements[m].snapping = e || f || g || h || n
            }
        }
    });
    a.ui.plugin.add("draggable", "stack", {
        start: function (b, c, d) {
            var e, f = d.options, g = a.makeArray(a(f.stack)).sort(function (b, c) {
                return (parseInt(a(b).css("zIndex"), 10) || 0) - (parseInt(a(c).css("zIndex"), 10) || 0)
            });
            if (!g.length) {
                return
            }
            e = parseInt(a(g[0]).css("zIndex"), 10) || 0;
            a(g).each(function (b) {
                a(this).css("zIndex", e + b)
            });
            this.css("zIndex", e + g.length)
        }
    });
    a.ui.plugin.add("draggable", "zIndex", {
        start: function (b, c, d) {
            var e = a(c.helper), f = d.options;
            if (e.css("zIndex")) {
                f._zIndex = e.css("zIndex")
            }
            e.css("zIndex", f.zIndex)
        }, stop: function (b, c, d) {
            var e = d.options;
            if (e._zIndex) {
                a(c.helper).css("zIndex", e._zIndex)
            }
        }
    });
    a.ui.safeActiveElement = function (a) {
        var b;
        try {
            b = a.activeElement
        } catch (c) {
            b = a.body
        }
        if (!b) {
            b = a.body
        }
        if (!b.nodeName) {
            b = a.body
        }
        return b
    };
    var c = a.ui.draggable
})(actuate.common.web.jQuery);
actuate.common.web.resource.module.define("uxumc.css", {
    _cssPath: "common/jslib/themes/default",
    _cssFiles: new Array("umc.css"),
    _noComma: null
});
actuate.common.web.resource.module.define("webjslib.css", {
    _cssPath: "common/jslib/themes/default",
    _cssFiles: new Array("jslibapi.css", "athena.css", "opentext-ux.css"),
    _noComma: null
});
actuate.common.web.resource.module.define("actuate.ac",
    {
        _jsPath: "admin/jsapi/ac",
        _jsFiles: new Array("ac.js"),
        _cssPath: "admin/jsapi/ac/themes/default",
        _cssFiles: new Array("ac.css"),
        _localizedStringServlet: "acadmin/acresource",
        _localizedString: true,
        _noComma: null
    });
actuate.common.web.resource.module.define("actuate.myfiles",
    {
        _jsPath: "myfiles/jsapi/myfiles",
        _jsFiles: new Array("myfiles.js"),
        _cssPath: "myfiles/jsapi/myfiles/themes/default",
        _cssFiles: new Array("myfiles.css"),
        _localizedStringServlet: "acmyfiles/myfilesresource",
        _localizedString: true,
        _noComma: null
    });

if (!self.actuate) {
    actuate = {}
}
if (actuate.util == undefined) {
    actuate.util = {}
}
actuate.util.Package = {
    PACKAGE_SEPARATOR: ".", _evalPackageSupported: null, initialize: function () {
        try {
            if (eval("actuate.util") == actuate.util) {
                this._evalPackageSupported = true
            }
        } catch (e) {
            this._evalPackageSupported = false
        }
    }, define: function (A, B) {
        var F = A.split(this.PACKAGE_SEPARATOR);
        var D = window;
        var E;
        for (var C = 0; C < F.length; C++) {
            E = D;
            if (!D[F[C]]) {
                D = D[F[C]] = {}
            } else {
                D = D[F[C]]
            }
        }
        if (B) {
            E[F[F.length - 1]] = B
        }
        return D
    }, packageToFile: function (A) {
        return A.replace(/\./g, "/") + ".js"
    }, getNamespaceObjectReference: function (namespaceObjectName, win) {
        if (!win) {
            win = window
        }
        if (this._evalPackageSupported) {
            try {
                return win.eval(namespaceObjectName)
            } catch (e) {
                return undefined
            }
        } else {
            return this.getNamespaceObjectReference2(namespaceObjectName, win)
        }
    }, getNamespaceObjectReference2: function (D, C) {
        if (!C) {
            C = window
        }
        var B = D.split(this.PACKAGE_SEPARATOR);
        for (var A = 0; A < B.length; A++) {
            C = C[B[A]];
            if (!C) {
                return undefined
            }
        }
        return C
    }, getParentPackageName: function (A) {
        var B = A.lastIndexOf(this.PACKAGE_SEPARATOR);
        if (B >= 1) {
            return A.substring(0, B)
        } else {
            return window
        }
    }, getParentPackage: function (A) {
        var B = this.getParentPackageName(A);
        return this.getNamespaceObjectReference(B)
    }, getLastNamespaceObjectName: function (B) {
        var A = B.lastIndexOf(this.PACKAGE_SEPARATOR);
        if (A >= 1) {
            return B.substr(A + 1)
        } else {
            return B
        }
    }, getInstanceName: function (D) {
        var F = D.lastIndexOf(".");
        var A = D.substr(0, F + 1);
        var E = D.substr(F + 1);
        if (E.length == 1) {
            return A + E.toLowerCase()
        }
        var B = 1;
        var C;
        do {
            C = E.charAt(B);
            B++
        } while (B < E.length && C >= "A" && C <= "Z");
        B -= 2;
        if (B < 1) {
            B = 1
        }
        return A + E.substr(0, B).toLowerCase() + E.substr(B)
    }
};
actuate.util.Package.initialize();
actuate.Method = {
    empty: function () {
    }, tryThese: function () {
        var C;
        for (var B = 0; B < arguments.length; B++) {
            var A = arguments[B];
            try {
                C = A();
                break
            } catch (D) {
            }
        }
        return C
    }, bind: function (D, A, C) {
        if (C && C.single == true && C.event) {
            var B = function () {
                var E = C.dispatcher;
                if (!E) {
                    E = A
                }
                if (E.unregisterEventHandler) {
                    E.unregisterEventHandler(C.event, B)
                }
                if (D) {
                    return D.apply(A, arguments)
                }
            };
            return B
        }
        return function () {
            if (D) {
                return D.apply(A, arguments)
            }
        }
    }, bindAsEventListener: function (B, A) {
        return function (C) {
            if (B) {
                return B.call(A, C || window.event)
            }
        }
    }, bind2: function (D, B) {
        var A = [];
        for (var C = 2; C < arguments.length; C++) {
            A.push(arguments[C])
        }
        return function () {
            var F = [];
            for (var E = 0; E < A.length; E++) {
                F.push(A[E])
            }
            for (var E = 0; E < arguments.length; E++) {
                F.push(arguments[E])
            }
            if (D) {
                return D.apply(B, F)
            }
        }
    }, defer: function (C, F, E, B, A) {
        var D = this.createDelegate(F, E, B, A);
        if (C) {
            return setTimeout(D, C)
        }
        D();
        return 0
    }, createDelegate: function (D, C, B, A) {
        return function () {
            var F = B || arguments;
            if (A === true) {
                F = Array.prototype.slice.call(arguments, 0);
                F = F.concat(B)
            } else {
                if (typeof A == "number") {
                    F = Array.prototype.slice.call(arguments, 0);
                    var E = [A, 0].concat(B);
                    Array.prototype.splice.apply(F, E)
                }
            }
            if (D) {
                return D.apply(C || window, F)
            }
        }
    }, createInterceptor: function (C, B, A) {
        if (typeof B != "function") {
            return C
        }
        return function () {
            B.target = this;
            B.method = C;
            if (B.apply(A || this || window, arguments) === false) {
                return
            }
            if (C) {
                return C.apply(this || window, arguments)
            }
        }
    }, createSequence: function (D, A, C, B) {
        if (typeof C != "function") {
            return D
        }
        return function () {
            var E = D.apply(A || D || window, arguments);
            C.apply(B || D || window, arguments);
            return E
        }
    }, callback: function (A, D, C, B) {
        if (typeof A == "function") {
            if (B) {
                actuate.Method.defer(B, A, D, C || [])
            } else {
                A.apply(D, C || [])
            }
        }
    }, createCallback: function (C) {
        var A = [];
        for (var B = 1; B < arguments.length; B++) {
            A.push(arguments[B])
        }
        var D = C;
        return function () {
            if (D) {
                return D.apply(window, A)
            }
        }
    }
};
actuate.Class = {
    create: function (B) {
        var A = function () {
            if (this.initialize == undefined) {
                this.initialize = function () {
                }
            }
            this.initialize.apply(this, arguments)
        };
        A._instanceCount = -1;
        return A
    }, extend: function (A, B) {
        for (property in B) {
            A[property] = B[property]
        }
        return A
    }, createStaticFacade: function (A, B) {
        if (!B) {
            B = actuate.Class.getPublicSymbols(A)
        }
        var C = {};
        this.copyStaticSymbols(C, A, B);
        return C
    }, createFacadeClass: function (C, B, D) {
        if (!C && typeof (C) != "object") {
            throw 'Invalid class "' + C + '"'
        }
        if (!C.prototype) {
            return actuate.Class.createStaticFacade(C, B)
        }
        var A = function () {
            var G = null;
            if (C._getExistingClassInstance) {
                G = C._getExistingClassInstance.apply(null, arguments)
            }
            if (!G) {
                var E = null;
                if (C.prototype.initialize) {
                    E = C.prototype.initialize;
                    C.prototype.initialize = actuate.Method.empty
                }
                var F = new C();
                this._ = F;
                F._FACADE_INSTANCE = this;
                if (E && F.initialize) {
                    F.initialize = E;
                    C.prototype.initialize = E;
                    F.initialize.apply(F, arguments)
                }
            } else {
                G = actuate.Class.getFacadedInstance(G);
                this._ = G
            }
            return this
        };
        actuate.Class.createProxySymbols(A.prototype, C.prototype, B);
        if (!D) {
            D = []
        }
        D = D.concat(actuate.Class.getPublicSymbols(C));
        this.copyStaticSymbols(A, C, D);
        return A
    }, createProxySymbols: function (G, D, B) {
        function F(I) {
            return function () {
                if (this._ && typeof this._[I] === "function") {
                    return this._[I].apply(this._, arguments)
                } else {
                    throw new Error("Symbol not found or not a function")
                }
            }
        }

        if (!B) {
            B = actuate.Class.getPublicSymbols(D)
        }
        for (var C = 0; C < B.length; C++) {
            var E = B[C];
            if (E) {
                var H = D[E];
                if (typeof (H) == "function") {
                    var A = F(E);
                    G[E] = A
                } else {
                    if (typeof (H) == "undefined") {
                        throw 'Invalid symbol name "' + E + '".'
                    } else {
                        G[E] = H
                    }
                }
            }
        }
    }, getFacadeInstance: function (A) {
        if (A && A._FACADE_INSTANCE) {
            return A._FACADE_INSTANCE
        } else {
            return A
        }
    }, getFacadedInstance: function (A) {
        if (A && A._) {
            return A._
        } else {
            return A
        }
    }, getPublicSymbols: function (C) {
        var A = new Array();
        for (var B in C) {
            var D = C[B];
            if (B.charAt(0) != "_" && B != "prototype") {
                A.push(B)
            }
        }
        return A
    }, copyStaticSymbols: function (E, A, B) {
        for (var C = 0; C < B.length; C++) {
            var D = B[C];
            var F = A[D];
            if (typeof (F) == "undefined") {
                throw 'Invalid symbol name "' + D + '".'
            } else {
                if (typeof (F) == "function") {
                    E[D] = actuate.Method.bind(F, A)
                } else {
                    E[D] = F
                }
            }
        }
        return E
    }, createClass: function (B) {
        var A = function () {
            if (this.initialize == undefined) {
                this.initialize = function () {
                }
            }
            this.initialize.apply(this, arguments)
        };
        if (B) {
            A.prototype = B
        }
        A._instanceCount = -1;
        return A
    }, extendClass: function (A, C) {
        var B = actuate.Class.create();
        B.superclass = A.prototype;
        A.prototype.__extending = true;
        B.prototype = actuate.Class.extend(new A(), C);
        delete A.prototype.__extending;
        return B
    }
};
actuate.util.Package.define("actuate");
actuate.Constant = actuate.Class.create();
actuate.Class.extend(actuate.Constant, {
    tag: {
        NAME: "Name",
        COLUMNDEFS: "ColumnDefs",
        HEADER: "Header",
        BOUNDDATACOLUMN: "BoundDataColumn",
        BOUNDDATACOLUMNNAME: "Name",
        FAMILY: "Family",
        SIZE: "Size",
        SIZEOPTIONS: "SizeOptions",
        DATETIMEFORMAT: "DateTimeFormat",
        CATEGORYCHOICE: "CategoryChoice",
        CATEGORY: "Category",
        PATTERN: "Pattern",
        LOCALEINFO: "LocaleInfo",
        COUNTRY: "Country",
        LANGUAGE: "Language",
        LITERAL: "Literal",
        documentId: "Document",
        Document: "Document",
        Table: "Table",
        SummaryTable: "SummaryTable",
        Crosstab: "Crosstab",
        Chart: "Chart",
        FlashChart: "FlashCharts",
        FlashGadget: "FlashGadgets",
        SingleMetric: "SINGLEMETRIC",
        FlashObject: "GeneralFlash",
        Label: "Label",
        LabelFont: "LabelFont",
        DataItem: "Data",
        select: "select",
        operation: "Operation",
        Target: "Target",
        Id: "Id",
        Binding: "Binding",
        Data: "Data",
        Expr: "Expr",
        NewIndex: "NewIndex",
        DisplayName: "DisplayName",
        ColumnDef: "ColumnDef",
        Index: "Index",
        Iid: "Iid",
        IsCurrent: "IsCurrent",
        SortDefinition: "SortDefinition",
        SortDir: "SortDir",
        BindingName: "BindingName",
        Ascending: "asc",
        Descending: "desc",
        Message: "Message",
        RightExpr: "RightExpr",
        ConditionList: "ConditionsList",
        Condition: "Condition",
        Options: "Options",
        ColorOptions: "ColorOptions",
        Family: "Family",
        Properties: "Properties",
        Width: "Width",
        Alignment: "Alignment",
        IsGrouped: "IsGrouped",
        Columns: "Columns",
        Bindings: "Bindings",
        FormatRuleSet: "FormatRuleSet",
        FormatRule: "FormatRule",
        FormatRuleCondition: "Condition",
        FormatRuleEffect: "Effect",
        ColumnName: "ColumnName",
        Operator: "Operator",
        Font: "Font",
        Color: "Color",
        BackgroundColor: "BackgroundColor",
        Bold: "Bold",
        Italic: "Italic",
        Underline: "Underline",
        ApplyToTable: "ApplyToTable",
        CanSetLocally: "CanSetLocally",
        ColumnDefFormat: "Format",
        StringFormat: "StringFormat",
        NumberFormat: "NumberFormat",
        BooleanFormat: "BooleanFormat",
        NumberCategoryChoice: "NumberCategoryChoice",
        DecimalPlaces: "DecimalPlaces",
        Symbol: "Symbol",
        SymbolPosition: "SymbolPosition",
        RoundingMode: "RoundingMode",
        NegativeNumberFormat: "NegativeNumberFormat",
        UseSepartor: "UseSeparator",
        Value: "Value",
        Filter: "Filter",
        Type: "Type",
        Expression: "Expression",
        Simple: "Simple",
        Advanced: "Advanced",
        FilterParameters: "FilterParameters",
        Clause: "Clause",
        FilterOp: "FilterOp",
        FilterOperand: "FilterOperand",
        Literal: "Literal",
        DataField: "DataField",
        Operand: "Operand",
        ConditionLineList: "ConditionLineList",
        ConditionLine: "ConditionLine",
        LogicOp: "LogicOp",
        HasLeftBracket: "HasLeftBracket",
        HasNot: "HasNot",
        Row: "Row",
        CLOperator: "Operator",
        CLValue1: "Value1",
        CLValue2: "Value2",
        HasRightBracket: "HasRightBracket",
        Aggregate: "Aggregate",
        Func: "Func",
        FunctionParameter: "FunctionParameter",
        SubTotal: "SubTotal",
        Enable: "Enable",
        ShowInFooter: "ShowInFooter",
        GrandTotal: "GrandTotal",
        DataType: "DataType",
        BindingName: "BindingName",
        BRDExpression: "BRDExpression",
        IsValid: "IsValid",
        ParserError: "ParserError",
        Apperance: "Apperance",
        ColumnData: "ColumnData",
        Labels: "Labels",
        Title: "Title",
        TitleVisible: "TitleVisible",
        AutoTitle: "AutoTitle",
        X_Axis: "X-axis",
        Y_Axis: "Y-axis",
        UseGlassStyle: "UseGlassStyle",
        ShowLegend: "ShowLegend",
        ShowValues: "ShowValues",
        ChartWidth: "Width",
        ChartHeight: "Height",
        ChartLocation: "Location",
        Dimention: "Dimention",
        OrientationFlipAxis: "OrientationFlipAxis",
        ChartType: "ChartType",
        ChartSubType: "SubType",
        AggregateFunction: "AggregateFunction",
        AggregateDefinition: "AggregateDefinition",
        ScaleForXAxis: "scaleForXAxis",
        ScaleForYAxis: "scaleForYAxis",
        Step: "step",
        StepNumber: "StepNumber",
        StepUnit: "StepUnit",
        titleFont: "TitleFont",
        XAxisFont: "XAxisFont",
        YAxisFont: "YAxisFont",
        XAxisLabelFont: "XAxisLabelFont",
        YAxisLabelFont: "YAxisLabelFont",
        baseFont: "BaseFont",
        outsideFont: "OutsideFont",
        IsCategoryAxis: "IsCategoryAxis",
        ShowCategoryXLabels: "ShowCategoryXLabels",
        StaggerCategoryXLabels: "StaggerCategoryXLabels",
        StaggerCategoryLabels: "StaggerCategoryLabels",
        CategoryXLabelsRotateDegrees: "CategoryXLabelsRotateDegrees",
        CategoryXLabelsInterval: "CategoryXLabelsInterval",
        CategoryLabelsInterval: "CategoryLabelsInterval",
        ShowCategoryYLabels: "ShowCategoryYLabels",
        StaggerCategoryYLabels: "StaggerCategoryYLabels",
        CategoryYLabelsRotateDegrees: "CategoryYLabelsRotateDegrees",
        CategoryYLabelsInterval: "CategoryYLabelsInterval",
        LegendPosition: "LegendPosition",
        ShowTooltip: "ShowTooltip",
        TooltipValue: "TooltipValue",
        LegendFont: "LegendFont",
        LegendLabelFont: "LegendLabelFont",
        LegendTitle: "LegendTitle",
        BoundDataColumnList: "BoundDataColumnList",
        BoundDataColumn: "BoundDataColumn",
        BoundDataColumnName: "Name",
        BoundDataColumnDisplayName: "DisplayName",
        BoundDataColumnExpression: "Expression",
        BoundDataColumnType: "Type",
        PromptString: "PromptString",
        DefaultValue: "DefaultValue",
        Group: "Group",
        GroupDetail: "GroupDetail",
        ColumnIdx: "ColumnIdx",
        GroupOn: "GroupOn",
        CreateSection: "CreateSection",
        IntervalType: "IntervalType",
        IntervalRange: "IntervalRange",
        IntervalBase: "IntervalBase",
        AvailableDataItemList: "AvailableDataItemList",
        ColumnDataType: "ColumnDataType",
        DataItemList: "DataItemList",
        ItemId: "ItemId",
        Operation: "Operation",
        DataItemId: "DataItemId",
        ExportReportOptions: "ExportReportOptions",
        DocumentConversionOptions: "DocumentConversionOptions",
        OutputFormat: "OutputFormat",
        ParameterDefinition: "ParameterDefinition",
        ColumnIid: "ColumnIid",
        CrosstabFormat: "Format",
        RESULTSETDATA: "ResultSetData",
        BaseColor: "BaseColor",
        ShowTickMarks: "ShowTickMarks",
        TicksBelowGauge: "TicksBelowGauge",
        TicksInside: "TicksInside",
        TicksOnRight: "TicksOnRight",
        AutoAdjustTickMarks: "AutoAdjustTickMarks",
        ShowScale: "ShowScale",
        AutoValues: "AutoValues",
        ShowNeedle: "ShowNeedle",
        ShowValueAboveNeedle: "ShowValueAboveNeedle",
        ShowValue: "ShowValue",
        ShowNeedleAbove: "ShowNeedleAbove",
        ShowOpenValue: "ShowOpenValue",
        ShowCloseValue: "ShowCloseValue",
        ShowHighLowValue: "ShowHighLowValue",
        ShowValueLabel: "ShowValueLabel",
        VerticalBullet: "VerticalBullet",
        MinValue: "MinValue",
        MaxValue: "MaxValue",
        FlashGadgetRegions: "FlashGadgetRegions",
        FlashGadgetRegion: "FlashGadgetRegion",
        StartValue: "StartValue",
        EndValue: "EndValue",
        TickmarkCount: "TickmarkCount",
        DataSet: "DataSet",
        Query: "Query",
        ChartDataBinding: "ChartDataBinding",
        Json: "Json",
        Rotation: "Rotation",
        PieRadius: "PieRadius",
        DoughnutRadius: "DoughnutRadius",
        GroupingAtX: "groupingAtX",
        YAxisList: "YAxes",
        YAxis: "YAxis",
        IsFlashChart: "IsFlashChart",
        Theme: "Theme",
        AllowZoomX: "AllowZoomX",
        AllowZoomY: "AllowZoomY",
        UpdateAggregation: "UpdateAggregation",
        ShowScrollBar: "ShowScrollBar",
        ShowRangeSelector: "ShowRangeSelector",
        ShowBottomSlider: "ShowBottomSlider",
        CustomViz: "CustomViz",
        CustomVizConfig: "CustomVizConfig",
        BinsNumber: "BinsNumber",
        BinWidth: "BinWidth"
    }
});
actuate.Class.extend(actuate.Constant, {
    oprand: {
        Page: "page",
        TotalPage: "totalpage",
        ShowMargin: "showMargin",
        GadgetId: "gadgetId",
        GadgetWidth: "gadgetWidth",
        GadgetHeight: "gadgetHeight",
        DashboardDesign: "dashboardDesign",
        Toc: "toc",
        DPI: "dpi",
        DataItem: "dataitem",
        DialogName: "dialogName",
        SVG: "svg",
        PLSEnabled: "plsEnabled",
        Bookmark: "reportletId",
        ChartWidth: "chartWidth",
        ChartHeight: "chartHeight",
        SubType: "subType"
    }
});
actuate.Class.extend(actuate.Constant, {
    element: {
        TABLE: "TABLE",
        SUMMARYTABLE: "SUMMARYTABLE",
        CHART: "CHART",
        FLASHCHART: "FLASHCHART",
        FLASHGADGET: "FLASHGADGET",
        FLASHOBJECT: "FLASHOBJECT",
        FLEXCOMPONENT: "FLEXCOMPONENT",
        DATAITEM: "DATAITEM",
        LABEL: "LABEL",
        CROSSTAB: "CROSSTAB",
        SELECTOR: "SELECTOR",
        REPORTLIBRARY: "REPORTLIBRARY",
        DOCUMENT: "DOCUMENT",
        SUBLIST: "SUBLIST",
        APPLYBUTTON: "APPLYBUTTON",
        HTML5GADGET: "HTML5GADGET",
        SINGLEMETRIC: "SINGLEMETRIC",
        CUSTOMVIZ: "CUSTOMVIZ",
        UNKNOWN: "UNKNOWN",
        HTMLCONTROL: "HTMLCONTROL",
        EXTRAS: "EXTRAS",
        LIST: "LIST"
    }
});
actuate.Class.extend(actuate.Constant, {
    elementType: {
        Table: "Table",
        Chart: "Chart",
        SummaryTable: "SummaryTable",
        Crosstab: "Crosstab",
        FlashCharts: "FlashCharts",
        Grid: "Grid",
        FlashGadgets: "FlashGadgets",
        Selector: "Selector",
        HtmlButton: "HTMLButton",
        LABEL: "LABEL",
        LIST: "LIST",
        ReportLibrary: "Gadget",
        GeneralFlash: "GeneralFlash",
        ApplyButton: "Gadget",
        SingleMetric: "Gadget",
        Thermometer: "Thermometer",
        HtmlControl: "HTMLCONTROL",
        CustomViz: "CustomViz",
        Text: "TEXT",
        Data: "DATA",
        Image: "IMAGE",
        Map: "MAP",
        SmartGrid: "SMARTGRID"
    }
});
actuate.Class.extend(actuate.Constant, {
    DataType: {
        ANY: "any",
        BOOLEAN: "boolean",
        DATETIME: "date-time",
        DATE: "date",
        TIME: "time",
        DECIMAL: "decimal",
        FLOAT: "float",
        INTEGER: "integer",
        DOUBLE: "double",
        STRING: "string",
        JAVAOBJECT: "javaObject"
    }
});
actuate.Class.extend(actuate.Constant, {
    ChartType: {
        PIE_CHART: "Pie Chart",
        GANTT_CHART: "Gantt Chart",
        BUBBLE_CHART: "Bubble Chart",
        DIFFERENCE_CHART: "Difference Chart",
        METER_CHART: "Meter Chart",
        SCATTER_CHART: "Scatter Chart",
        BAR_CHART: "Bar Chart",
        AREA_CHART: "Area Chart",
        LINE_CHART: "Line Chart",
        STOCK_CHART: "Stock Chart",
        TUBE_CHART: "Tube Chart",
        CONE_CHART: "Cone Chart",
        DONUT_CHART: "Doughnut Chart",
        COLUMN_CHART: "Column Chart",
        PYRAMID_CHART: "Pyramid Chart",
        RADAR_CHART: "Radar Chart",
        HISTOGRAM_CHART: "Histogram Chart",
        TREEMAP_CHART: "TreeMap Chart",
        MAP_CHART: "Map Chart",
        MAP_BUBBLE_CHART: "Map Bubble Chart",
        HEATMAP_CHART: "Heatmap Chart"
    }
});
actuate.Class.extend(actuate.Constant, {
    GadgetType: {
        Spark: "Spark",
        LinearGauge: "LinearGauge",
        Meter: "Meter",
        Cylinder: "Cylinder",
        Thermometer: "Thermometer",
        Bullet: "Bullet",
        ApplyButton: "Apply Button",
        SingleMetric: "SingleMetric",
        CustomViz: "CustomViz",
        Map: "Map"
    }
});
actuate.Class.extend(actuate.Constant, {FlexComponentType: {FLEX_CROSSTAB: "Flex Crosstab", FLEX_TABLE: "Flex Table"}});
actuate.Class.extend(actuate.Constant, {
    SelectorType: {
        Slider: "slider",
        RadioButton: "radioButton",
        List: "list",
        TextBox: "textBox",
        DropDown: "dropdown",
        Calendar: "calendar",
        CheckBox: "checkBox",
        MultiSelection_List: "multiselection_list",
        MultiSelection_Dropdown: "multiselection_dropdown",
        MultiSelection_Checkboxtree: "multiselection_checkboxtree"
    }
});
actuate.Class.extend(actuate.Constant, {SelectorPurpose: {DATA: "data", DATA_VERSION: "version"}});
actuate.Class.extend(actuate.Constant, {
    CrosstabDirection: {HORIZONTAL: 0, VERTICAL: 1},
    CrosstabCellType: {
        LEVEL: "CrosstabLevel",
        MEASURE: "CrosstabMeasure",
        AGGREGATION: "CrosstabAggregation",
        HEADER: "CrosstabHeader"
    }
});
actuate.Class.extend(actuate.Constant, {
    ViewingMode: {
        NON_DASHBOARD: "non-dashboard",
        DASHBOARD_NORMAL: "dashboard-normal",
        DASHBOARD_MAX: "dashboard-max"
    }
});
actuate.Class.extend(actuate.Constant, {
    DeviceMode: {
        TABLET_LANDSCAPE: {WIDTH: 1024, NAME: "tablet_landscape", COL: 2},
        TABLET_PORTAIT: {WIDTH: 768, NAME: "tablet_portait", COL: 1},
        SMART_PHONE: {WIDTH: 580, NAME: "smart phone", COL: 1}
    }
});
actuate.Class.extend(actuate.Constant, {ContentMargin: 30, ViewerContainer: {DEFAULT_WIDTH: 800, DEFAULT_HEIGHT: 500}});
actuate.Class.extend(actuate.Constant, {
    DesignChoice: {
        FILTER_OPERATOR_EQ: "eq",
        FILTER_OPERATOR_NE: "ne",
        FILTER_OPERATOR_LT: "lt",
        FILTER_OPERATOR_LE: "le",
        FILTER_OPERATOR_GT: "gt",
        FILTER_OPERATOR_GE: "ge",
        FILTER_OPERATOR_BETWEEN: "between",
        FILTER_OPERATOR_NOT_BETWEEN: "not-between",
        FILTER_OPERATOR_NULL: "is-null",
        FILTER_OPERATOR_NOT_NULL: "is-not-null",
        FILTER_OPERATOR_TRUE: "is-true",
        FILTER_OPERATOR_FALSE: "is-false",
        FILTER_OPERATOR_LIKE: "like",
        FILTER_OPERATOR_NOT_LIKE: "not-like",
        FILTER_OPERATOR_TOP_N: "top-n",
        FILTER_OPERATOR_BOTTOM_N: "bottom-n",
        FILTER_OPERATOR_TOP_PERCENT: "top-percent",
        FILTER_OPERATOR_BOTTOM_PERCENT: "bottom-percent",
        FILTER_OPERATOR_IN: "in",
        FILTER_OPERATOR_NOT_IN: "not-in",
        UNITS_PT: "pt",
        UNITS_PC: "pc",
        UNITS_PERCENTAGE: "%",
        UNITS_CM: "cm",
        UNITS_MM: "mm",
        UNITS_IN: "in",
        UNITS_EM: "em",
        UNITS_EX: "ex",
        UNITS_PX: "px"
    }
});
(function () {
    var A = {
        _version: "OpenText Intelligence 25.2",
        _buildNumber: "250P250402",
        _notAllowLoadJquery: false,
        _moduleMappings: {
            jquery: "actuate.jquery",
            html5charts: "actuate.html5charts",
            dataprovision: "actuate.dataprovision",
            "dataprovision.ui": "actuate.dataprovisionui",
            "dataprovision.lib": "actuate.dataprovisionLib",
            "dataprovision.ui.lib": "actuate.dataprovisionuiLib",
            bi: "actuate.bi",
            "bi.dashboardProperty": "actuate.bi.dashboardProperty",
            "bi.datapanel": "actuate.bi.dashboardDatapanel",
            "bi.dashboardToolbar": "actuate.bi.dashboardToolbar",
            viewer: "actuate.viewer",
            parameter: "actuate.parameter",
            "parameter.calendar": "actuate.calendar.modern",
            gadgetmodel: "actuate.visualization",
            dashboard: "actuate.dashboard",
            "dashboard.widget": "actuate.dashboard.widget",
            "dashboard.embedded": "actuate.dashboard.embedded",
            reportexplorer: "actuate.reportexplorer",
            xtabAnalyzer: "actuate.xtabanalyzer",
            widget: "actuate.widget",
            selector: "actuate.selector",
            dialog: "actuate.dialog",
            builder: "actuate.builder",
            mobile: "actuate.mobile",
            mobilelanding: "actuate.mobilelanding",
            uiadapter: "actuate.uiadapter",
            screen: "actuate.screen",
            studio: "actuate.studio"
        },
        _initialized: false,
        _running: false,
        _onAfterInit: null,
        _onError: null,
        _viewersCount: 0,
        _userId: null,
        _password: null,
        _iportalUrl: null,
        _requestOptions: null,
        _initModules: new Array(),
        _progressIndicator: null,
        _disableProgressIndicator: false,
        __responsiveViewer: false,
        __dashboardView: null,
        _profile: "default",
        USER_ENV: "desktop",
        __isOCP: false,
        __isAJC: false,
        __subscriptionName: null,
        __isBigDataAllowed: false,
        __nonce: null,
        initialize: function (G, D, H, J, K, E) {
            if (this._initialized || this._running) {
                return
            }
            if (!G) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument iportalUrl")
            }
            if (this._initModules.length == 0) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, "No modules have been selected with the load() method.")
            }
            if (K && (typeof (K) != "function")) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "callback" contains an invalid callback function.')
            }
            if (E && (typeof (E) != "function")) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "errorCallback" contains an invalid callback function.')
            }
            this._initialized = false;
            this._running = true;
            this._onAfterInit = K;
            this._onError = E;
            this._userId = H;
            this._password = J;
            if (G && G.charAt(G.length - 1) != "/") {
                G += "/"
            }
            this._iportalUrl = G;
            if (D) {
                if (!(D instanceof actuate.RequestOptions)) {
                    throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Invalid request options, it must be an instance of "actuate.RequestOptions".')
                }
                this._requestOptions = new actuate.RequestOptions(D)
            } else {
                this._requestOptions = new actuate.RequestOptions()
            }
            this._requestOptions._customParameters.__responsiveViewer = this.__responsiveViewer;
            if (typeof dashboardJSON != "undefined") {
                this._requestOptions._customParameters.__launchDesigner = dashboardJSON.launchDesigner
            }
            this._errorClosure = actuate.Method.bind(this._error, this);
            if (actuate.util.Utility.isIE6) {
                try {
                    document.execCommand("BackgroundImageCache", false, true)
                } catch (I) {
                }
            }
            var B = new Array();
            B.push(actuate.Method.bind(this._authenticate, this));
            B.push(actuate.Method.bind(this._showProgressIndicator, this));
            B.push(actuate.Method.bind(this._loadResources, this));
            B.push(actuate.Method.bind(this._hideProgressIndicator, this));
            B.push(actuate.Method.bind(this._resourcesLoaded, this));
            if (!actuate.common.CacheManager.prototype.themecss && this._iportalUrl) {
                var C = this._iportalUrl.replace(/(\/servlet.*)/, "/");
                actuate.common.CacheManager.prototype.themecss = C + "iportal/jsapi/actuate/widget/themes/classic/styles/xtheme-classic.css";
                if (document.getElementById) {
                    if (!document.getElementById(actuate.common.CacheManager.prototype.themecss)) {
                        actuate.util.Style.swapStyleSheet("theme", actuate.common.CacheManager.prototype.themecss)
                    }
                }
                actuate.util.Style.addExternalStyleSheet(C + "iportal/common/webfonts/webfonts.css")
            }
            var F = this._errorClosure;
            window.setTimeout(function () {
                actuate.util.Utility.chainCallbacksArray(B, F)
            }, 100)
        },
        load: function (B) {
            var C = this._moduleMappings[B];
            if (C) {
                this._initModules.push(B)
            } else {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Invalid module name "' + B + '".')
            }
        },
        authenticate: function (E, B, G, D, F, H, C) {
            if (B) {
                var F = F || B.getCredentials()
            }
            return actuate.util.SecurityManager.authenticate(E, B, G, D, F, H, C, this._disableProgressIndicator)
        },
        _authenticate: function (D) {
            var C = this;
            var B = this._requestOptions === null ? null : this._requestOptions.getCredentials();
            actuate.authenticate(this._iportalUrl, this._requestOptions, this._userId, this._password, B, function (G, H, F, I, E) {
                if (!C._userId) {
                    C._userId = H
                }
                if (E && C._requestOptions) {
                    C._requestOptions.setVolumeProfile(E.getVolumeProfile())
                }
                C._password = "";
                D()
            }, this._onError ? this._errorClosure : null)
        },
        logout: function (D, B, E, C) {
            return actuate.util.SecurityManager.logout(D, B, E, C)
        },
        isConnected: function (C, B) {
            return actuate.util.SecurityManager.isConnected(C, B)
        },
        _loadResources: function (F) {
            var E = [];
            var C = actuate.util.Utility;
            for (var D = 0; D < this._initModules.length; D++) {
                var B = this._initModules[D];
                if (B == "dataservice") {
                    B = "viewer"
                }
                if (B == "dataprovision.ui") {
                    E.push(this._moduleMappings.dataprovision);
                    E.push(this._moduleMappings["dataprovision.lib"]);
                    E.push(this._moduleMappings["dataprovision.ui"]);
                    E.push(this._moduleMappings["dataprovision.ui.lib"])
                }
                if (B == "dashboard") {
                    E.push(this._moduleMappings.gadgetmodel);
                    E.push(this._moduleMappings.bi)
                }
                if (B == "studio") {
                    E.push(this._moduleMappings.gadgetmodel);
                    E.push(this._moduleMappings.bi);
                    E.push(this._moduleMappings["bi.dashboardProperty"]);
                    E.push(this._moduleMappings["bi.dashboardToolbar"]);
                    E.push(this._moduleMappings["bi.datapanel"])
                }
                if (B == "parameter") {
                    E.push(this._moduleMappings["parameter.calendar"])
                }
                if (B == "viewer") {
                    E.push(this._moduleMappings.dialog);
                    if (this._notAllowLoadJquery) {
                        C.arrayRemoveValue(E, "actuate.jquery");
                        if (!C.arrayContains(this._initModules, "html5charts")) {
                            E.push(this._moduleMappings.html5charts)
                        }
                    } else {
                        if (!C.arrayContains(this._initModules, "html5charts")) {
                            if (C.needLoadJquery()) {
                                E.push(this._moduleMappings.jquery);
                                E.push(this._moduleMappings.html5charts)
                            } else {
                                E.push(this._moduleMappings.html5charts)
                            }
                        } else {
                            if (C.needLoadJquery()) {
                                E.push(this._moduleMappings.jquery)
                            }
                        }
                    }
                }
                E.push(this._moduleMappings[B])
            }
            if (!C.arrayContains(E, "actuate.screen")) {
                E.push(this._moduleMappings.uiadapter);
                if (actuate.USER_ENV == "tablet" || actuate.USER_ENV == "tabletapp") {
                    E.push(this._moduleMappings.mobile)
                } else {
                    E.push(this._moduleMappings.widget)
                }
            }
            actuate.resource.module.require(E, F, this._errorClosure);
            actuate.util.Style.swapStyleSheet("theme", actuate.common.CacheManager.prototype.themecss)
        },
        isInitialized: function () {
            return this._initialized
        },
        _resourcesLoaded: function () {
            this._initialized = true;
            this._running = false;
            if (this._onAfterInit) {
                var E = null;
                var C = null;
                var D = null;
                if (this._requestOptions) {
                    E = this._requestOptions.getIServerUrl();
                    C = this._requestOptions.getVolume();
                    D = this._requestOptions.getRESTAuthToken()
                }
                var B = this;
                self.setTimeout(function () {
                    B._onAfterInit(B._iportalUrl, B._userId, E, C, D)
                }, 0)
            }
        },
        _error: function (B) {
            this._running = false;
            this._hideProgressIndicator();
            B = actuate.util.Utility.createException(B);
            if (this._onError) {
                this._onError(B)
            } else {
                if (B.getErrCode() == 555) {
                    alert(B.getDescription())
                } else {
                    alert(B)
                }
            }
        },
        getDefaultIportalUrl: function () {
            return this._iportalUrl
        },
        getDefaultRequestOptions: function () {
            return this._requestOptions
        },
        isResponsiveViewer: function () {
            return this.__responsiveViewer
        },
        getUserId: function () {
            return this._userId
        },
        getUserPassword: function () {
            return this._password == "" ? "" : this._password
        },
        getViewer: function (B) {
            if (!actuate.isInitialized()) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Actuate library is not initialized. Please call initialize() first.")
            }
            if (!actuate.Viewer) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'The "actuate.viewer" module must be loaded for this operation to work.')
            }
            var E = actuate.Viewer.getViewer(B);
            if (!E) {
                var C = B;
                var D = actuate.viewer.impl.Viewer;
                if (typeof B != "string") {
                    C = B.id
                }
                if (D._viewersMap && C) {
                    E = D._viewersMap.get(C)
                } else {
                    E = null
                }
            }
            return E
        },
        getDAViewer: function (B) {
            if (!actuate.isInitialized()) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Actuate library is not initialized. Please call initialize() first.")
            }
            if (!actuate.XTabAnalyzer) {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'The "actuate.xtabAnalyzer" module must be loaded for this operation to work.')
            }
            return actuate.XTabAnalyzer.getViewer(B)
        },
        getVersion: function () {
            return this._version + " (Build " + this._buildNumber + ")"
        },
        setProfile: function (B) {
            this._profile = B
        },
        getProfile: function () {
            return this._profile
        },
        setBigDataAllowed: function (B) {
            this.__isBigDataAllowed = B
        },
        isBigDataAllowed: function () {
            return this.__isBigDataAllowed
        },
        setAJC: function (B) {
            this.__isAJC = B
        },
        isAJC: function () {
            return this.__isAJC
        },
        setOCP: function (B) {
            this.__isOCP = B
        },
        isOCP: function () {
            return this.__isOCP
        },
        setSubscriptionName: function (B) {
            this.__subscriptionName = B
        },
        getSubscriptionName: function () {
            return this.__subscriptionName
        },
        setNonce: function (B) {
            this.__nonce = B
        },
        getNonce: function () {
            return this.__nonce
        },
        _showProgressIndicator: function (D) {
            if (!this._disableProgressIndicator) {
                var C = document.documentElement.clientWidth;
                var B = document.documentElement.clientHeight;
                if (actuate.util.Utility.isTouchDevice()) {
                    this._progressIndicator = actuate.util.Utility.showProgressIndicatorInTouchDevice(null, this._iportalUrl, document.documentElement.clientWidth, document.documentElement.clientHeight)
                } else {
                    this._progressIndicator = actuate.util.Utility.showProgressIndicator(this._progressIndicator, null, this._iportalUrl, document.documentElement.clientWidth, document.documentElement.clientHeight)
                }
            }
            if (D) {
                D()
            }
            actuate.util.Utility.notifyScreenReader(actuate.preLoadedResourcesBundle["screenReader.loading.started"])
        },
        _hideProgressIndicator: function (B) {
            if (this._progressIndicator) {
                if (actuate.util.Utility.isTouchDevice()) {
                    actuate.util.Utility.hideProgressIndicatorInTouchDevice(this._progressIndicator)
                } else {
                    actuate.util.Utility.hideProgressIndicator(this._progressIndicator)
                }
            }
            if (B) {
                B()
            }
            actuate.util.Utility.notifyScreenReader(actuate.preLoadedResourcesBundle["screenReader.loading.complete"])
        },
        getOtToken: function () {
            var B = actuate.util.Utility.getToken();
            if (B) {
                return actuate.util.Utility.CSRF_TOKEN_NAME + "=" + B
            } else {
                return null
            }
        },
        disableProgressIndicator: function () {
            this._disableProgressIndicator = true
        },
        enableProgressIndicator: function () {
            this._disableProgressIndicator = false
        },
        disableResponsiveViewer: function () {
            this.__responsiveViewer = false
        },
        enableResponsiveViewer: function () {
            this.__responsiveViewer = true
        },
        getDashboardView: function () {
            return this.__dashboardView
        },
        setDashboardView: function (B) {
            this.__dashboardView = B
        }
    };
    actuate.Class.extend(actuate, actuate.Class.createStaticFacade(A))
})();
actuate.Ajax = {
    activeRequestCount: 0, getTransport: function () {
        return actuate.Method.tryThese(function () {
            return new XMLHttpRequest()
        }, function () {
            return new ActiveXObject("Msxml2.XMLHTTP")
        }, function () {
            return new ActiveXObject("Microsoft.XMLHTTP")
        }) || false
    }
};
actuate.Ajax.Responders = {
    responders: [], register: function (B) {
        for (var A = 0; A < this.responders.length; A++) {
            if (this.responders[A] == B) {
                return
            }
        }
        this.responders.push(B)
    }, unregister: function (A) {
        for (var C = 0; C < this.responders.length; C++) {
            if (this.responders[C] == A) {
                for (var B = C; B < this.responders.length - 1; B++) {
                    this.responders[B] = this.responders[B + 1]
                }
                this.responders.length -= 1;
                return
            }
        }
    }, dispatch: function (G, D, F, C) {
        for (var B = 0; B < this.responders.length; B++) {
            var A = this.responders[B];
            if (A[G] && typeof A[G] == "function") {
                try {
                    A[G].apply(A, [D, F, C])
                } catch (E) {
                }
            }
        }
    }
};
actuate.Ajax.Responders.register({
    onCreate: function () {
        actuate.Ajax.activeRequestCount++
    }, onComplete: function () {
        actuate.Ajax.activeRequestCount--
    }
});
actuate.Ajax.Base = function () {
};
actuate.Ajax.Base.prototype = {
    setOptions: function (A) {
        this.options = {method: "post", asynchronous: true, parameters: ""};
        actuate.Class.extend(this.options, A || {})
    }, responseIsSuccess: function () {
        return this.transport.status == undefined || (this.transport.status >= 200 && this.transport.status < 300)
    }, responseIsFailure: function () {
        return !this.responseIsSuccess()
    }
};
actuate.Ajax.Request = actuate.Class.create();
actuate.Ajax.Request.Events = ["Uninitialized", "Loading", "Loaded", "Interactive", "Complete"];
actuate.Ajax.Request.prototype = actuate.Class.extend(new actuate.Ajax.Base(), {
    initialize: function (B, A) {
        this.transport = actuate.Ajax.getTransport();
        this.transport.withCredentials = true;
        this.setOptions(A);
        this.request(B)
    }, request: function (B) {
        var C = this.options.parameters || "";
        if (C.length > 0) {
            C += "&_="
        }
        try {
            this.url = B;
            if (this.options.method == "get" && C.length > 0) {
                this.url += (this.url.match(/\?/) ? "&" : "?") + C
            }
            actuate.Ajax.Responders.dispatch("onCreate", this, this.transport);
            if (this.transport.setOptions) {
                this.transport.setOptions(this.options)
            }
            this.transport.open(this.options.method, this.url, this.options.asynchronous);
            if (this.options.asynchronous) {
                this.transport.onreadystatechange = actuate.Method.bind(this.onStateChange, this)
            }
            this.setRequestHeaders();
            var A = this.options.postBody ? this.options.postBody : C;
            this.transport.send(this.options.method == "post" ? A : null);
            if (!this.options.asynchronous) {
                this.onStateChange()
            }
        } catch (D) {
            this.dispatchException(D)
        }
    }, setRequestHeaders: function () {
        var C = ["X-Requested-With", "XMLHttpRequest"];
        if (actuate.externalToken) {
            C.push("Authorization", "Bearer " + actuate.externalToken)
        }
        if (this.options.method == "post") {
            var A = actuate.util.Utility;
            if (A.isMozilla || A.isGecko) {
                if (this.transport.overrideMimeType) {
                    C.push("Connection", "close")
                }
            }
        }
        if (this.options.requestHeaders) {
            C.push.apply(C, this.options.requestHeaders)
        }
        for (var B = 0; B < C.length; B += 2) {
            this.transport.setRequestHeader(C[B], C[B + 1])
        }
    }, onStateChange: function () {
        var A = this.transport.readyState;
        if (A != 1) {
            this.respondToReadyState(this.transport.readyState)
        }
    }, header: function (A) {
        try {
            return this.transport.getResponseHeader(A)
        } catch (B) {
        }
    }, evalJSON: function () {
        try {
            return JSON.parse(this.header("X-JSON"))
        } catch (A) {
        }
    }, evalResponse: function () {
        try {
            return JSON.parse(this.transport.responseText)
        } catch (A) {
            this.dispatchException(A)
        }
    }, respondToReadyState: function (A) {
        var C = actuate.Ajax.Request.Events[A];
        var E = this.transport, B = null;
        if (C == "Complete") {
            try {
                (this.options["on" + this.transport.status] || this.options["on" + (this.responseIsSuccess() ? "Success" : "Failure")] || actuate.Method.empty)(E, B)
            } catch (D) {
                this.dispatchException(D)
            }
            if ((this.header("Content-type") || "").match(/^text\/javascript/i)) {
                this.evalResponse()
            }
        }
        try {
            (this.options["on" + C] || actuate.Method.empty)(E, B);
            actuate.Ajax.Responders.dispatch("on" + C, this, E, B)
        } catch (D) {
            this.dispatchException(D)
        }
        if (C == "Complete") {
            this.transport.onreadystatechange = actuate.Method.empty
        }
    }, dispatchException: function (A) {
        (this.options.onException || actuate.Method.empty)(this, A);
        actuate.Ajax.Responders.dispatch("onException", this, A)
    }
});
actuate.XAjax = function () {
    var P = "xmlhttp_";
    var W = {maxRequestLength: 1500, apiURL: "", apiKey: "", overrideMime: ""};
    this.status = null;
    this.statusText = null;
    this.responseText = null;
    this.responseXML = null;
    this._responseHeaders = null;
    this.synchronous = false;
    this.readyState = 0;
    this.errorMessage = null;
    this._otToken = null;
    var H = function () {
    };
    this.onreadystatechange = H;
    var S = function () {
    };
    this.onerror = S;
    var M = function () {
    };
    this.onload = M;
    var a = function () {
        O = true
    };
    this.abort = a;
    var c = function (d, e) {
        V.headers[d] = e
    };
    this.setRequestHeader = c;
    var R = function () {
        var d = "";
        for (property in this._responseHeaders) {
            d += property + ": " + this._responseHeaders[property] + "\r\n"
        }
        return d
    };
    this.getAllResponseHeaders = R;
    var T = function (d) {
        if (this._responseHeaders) {
            return this._responseHeaders[d]
        } else {
            return null
        }
    };
    this.getResponseHeader = T;
    var Z = function (d) {
        W.overrideMime = d
    };
    this.overrideMimeType = Z;
    var Y = function (d) {
        W.apiURL = d
    };
    this.setAPI = Y;
    var Q = function (d) {
        W.apiKey = d
    };
    this.setKey = Q;
    var E = function (d) {
        if (d.apiURL) {
            W.apiURL = d.apiURL
        }
        if (d.apiKey) {
            W.apiKey = d.apiKey
        }
        if (d.overrideMime) {
            W.overrideMime = d.overrideMime
        }
    };
    this.setOptions = E;
    var D = function (e, d) {
        V.method = F(e);
        V.url = F(d);
        B(1)
    };
    this.open = D;
    var b = function (f) {
        if (O) {
            return
        }
        var d = V.headers.Cookie;
        if (d && d != "") {
            d += ", "
        } else {
            d = ""
        }
        var e = X(V.url);
        if (e) {
            V.headers.Cookie = d + e
        }
        if (actuate.externalToken) {
            V.headers.Authorization = "Bearer " + actuate.externalToken
        }
        if (f) {
            if (typeof (f) == "string") {
                V.data = f
            } else {
                if (f.xml) {
                    V.data = f.xml
                } else {
                    if (Document && f instanceof Document) {
                        V.data = (new XMLSerializer()).serializeToString(f)
                    } else {
                        V.data = ""
                    }
                }
            }
        } else {
            V.data = ""
        }
        J.send(V, W)
    };
    this.send = b;
    var F = function (d) {
        return ("undefined" == typeof d) ? "" : d
    };
    var K = function (d) {
        U.responseText = null;
        U.responseXML = null;
        U.status = -1;
        U.statusText = d;
        U.abort();
        if (U.onexception) {
            U.onexception(U)
        }
        return false
    };
    var B = function (d) {
        U.readyState = d;
        U.onreadystatechange();
        if (d == 4) {
            if (U.status == undefined || (U.status >= 200 && U.status < 300)) {
                if (U.onload) {
                    U.onload(U)
                }
            } else {
                if (U.onerror) {
                    U.onerror(U)
                }
            }
        }
    };
    var G = function (d) {
        if (O) {
            return
        }
        if (d.multipart) {
            return
        }
        if (!d.success) {
            return K(d.description)
        }
        U._responseHeaders = d.responseHeaders;
        U.status = d.status;
        U.statusText = d.statusText;
        U.responseText = d.responseText;
        U.responseXML = I.parse(d.responseText);
        if (U._responseHeaders["Set-Cookie"]) {
            C(U._responseHeaders["Set-Cookie"], V.url)
        }
        B(4)
    };
    var N = function (d) {
        K("Error opening the proxy url: " + W.apiURL)
    };
    var A = function (d) {
        var e = d.match(/^(([^:]*:\/\/[^\/]*)\/([^\/]*\/))/);
        if (e && e[1]) {
            e = encodeURIComponent(e[1]);
            return P + e.length + "_" + e + "_"
        } else {
            return P
        }
    };
    var C = function (e, g) {
        e = e.replace(/(;\s?Expires=[^;]*)/ig, "");
        e = e.replace(/(;\s?Secure)/ig, "");
        e = e.replace(/(;\s?Path=[^;,]*)/ig, "; Path=/");
        var j = A(g);
        var h = e.split(", ");
        var d = "";
        for (var f = 0; f < h.length; f++) {
            if (f > 0) {
                d += ", "
            }
            if (!(j && j.indexOf("xmlhttp_") !== -1)) {
                document.cookie = j + h[f]
            }
        }
    };
    var X = function (g) {
        var h = document.cookie;
        if (h) {
            var j = A(g);
            var d = null;
            var h = h.split("; ");
            for (var f = 0; f < h.length; f++) {
                var e = h[f];
                if (e.substr(0, j.length) == j) {
                    if (d) {
                        d += "; "
                    } else {
                        d = ""
                    }
                    d += e.substr(j.length)
                }
            }
            return d
        }
    };
    var U = this;
    var V = {
        headers: {"HTTP-Referer": document.location, "Content-Type": "application/x-www-form-urlencoded"},
        method: "GET",
        data: "",
        url: "http://www.ajaxextended.com/"
    };
    var L = {};
    var O = false;
    var J = new actuate.XAjax.Transport(G, N);
    J.withCredentials = true;
    var I = new actuate.XAjax.XMLParser()
};
actuate.XAjax.Transport = function (M, F) {
    var C = function (O) {
        var N = actuate.util.Utility.randomFloat();
        I = "v" + N.toString().substr(2);
        window[I] = E;
        J = O
    };
    var E = function (N) {
        G--;
        if (N && N.responseHeaders && N.responseHeaders.otToken) {
            actuate.util.Utility.setToken(N.responseHeaders.otToken)
        }
        M(N);
        delete window[I]
    };
    var A = function (P) {
        var O = "";
        for (property in P.headers) {
            O += B(property + ": " + P.headers[property]) + "&"
        }
        var N = P.method + "&" + B(P.url) + "&" + B(P.data) + "&" + O;
        return actuate.util.Utility.base64encode(N)
    };
    var B = function (N) {
        return actuate.util.Utility.base64encode(actuate.util.Utility.utf8encode(N))
    };
    var K = function (S, Q) {
        var N = Q.maxRequestLength - Q.apiURL.length - 60;
        var T = [], R = Math.floor(S.length / N) + 1;
        for (var P = 0; P < R; P++) {
            var O = Q.apiURL + "?id=" + I + "&key=" + Q.apiKey + "&part=" + P + "&total=" + R + "&data=" + S.substr(0, N);
            if (actuate.util.Utility.getToken()) {
                O += "&" + actuate.util.Utility.getTokenName() + "=" + actuate.util.Utility.getToken()
            }
            T.push(O);
            S = S.substr(N)
        }
        G = T.length;
        return T
    };
    var H = function (P, O) {
        var Q = [];
        var N = O.apiURL + "?id=" + I + "&key=" + O.apiKey + "&part=" + 0 + "&total=" + 1 + "&data=" + P;
        Q.push(N);
        return Q
    };
    this.send = function (P, N) {
        var O = K(A(P), N)
        actuate.resource.Script.loadScripts("", O, null, function (Q) {
            if (F) {
                F(Q)
            }
            return false
        })
    };
    var L = this;
    var I, D = [];
    var G = 0;
    var J = function () {
    };
    C(M)
};
actuate.XAjax.XMLParser = function () {
    this.parse = function (B) {
        if ((window.ActiveXObject !== undefined)) {
            var A = new ActiveXObject("Microsoft.XMLDOM");
            A.async = false;
            A.loadXML(B);
            return A
        } else {
            var C = new DOMParser();
            return C.parseFromString(B, "text/xml")
        }
    }
};
actuate.util.Package.define("actuate.ajax");
actuate.ajax.Connection = actuate.Class.create();
actuate.ajax.Connection.prototype = {
    METHOD_GET: "get",
    METHOD_POST: "post",
    _url: null,
    _proxyUrl: null,
    _method: "get",
    _postData: null,
    _requestHeaders: null,
    _synchronous: false,
    _response: null,
    _busy: false,
    _request: null,
    _onSuccess: null,
    _onFailure: null,
    _onException: null,
    initialize: function (B, A) {
        this.setMethod(B);
        this._url = A;
        this._busy = false;
        this._requestHeaders = new Array();
        this._resetResponse()
    },
    setMethod: function (A) {
        if (!A) {
            this._method = this.METHOD_GET
        } else {
            this._method = A.toLowerCase()
        }
    },
    getMethod: function () {
        return this._method
    },
    setUrl: function (A) {
        this._url = A
    },
    getUrl: function () {
        return this._url
    },
    _validate: function () {
        if (!this._url) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "The URL attribute must be set.")
        }
    },
    setSynchronous: function (A) {
        this._synchronous = A
    },
    isSynchronous: function () {
        return (this._synchronous) ? true : false
    },
    setProxyUrl: function (A) {
        this._proxyUrl = A
    },
    getProxyUrl: function () {
        return this._proxyUrl
    },
    setPostData: function (A) {
        this._postData = A
    },
    getPostData: function () {
        return this._postData
    },
    setRequestHeader: function (B, A) {
        this._requestHeaders[B] = A
    },
    getRequestHeader: function (A) {
        return this._requestHeaders[A]
    },
    setRequestHeaders: function (A) {
        this._requestHeaders = A
    },
    getRequestHeaders: function () {
        return this._requestHeaders
    },
    getResponseHeader: function (A) {
        return this._response ? this._response.getResponseHeader(A) : null
    },
    getAllResponseHeaders: function () {
        return this._response ? this._response.getAllResponseHeaders() : null
    },
    getResponseText: function () {
        return this._response ? this._response.responseText : null
    },
    getResponseXml: function () {
        return this._response ? this._response.responseXML : null
    },
    getStatus: function () {
        return this._response ? this._response.status : null
    },
    getStatusText: function () {
        return this._response ? this._response.statusText : null
    },
    isBusy: function () {
        return this._busy
    },
    _flattenMap: function (E) {
        if (!E) {
            return null
        }
        var A = new Array();
        var C = 0;
        for (var B in E) {
            var D = E[B];
            if (typeof (D) == "string") {
                A[C++] = B;
                A[C++] = D
            }
        }
        return A
    },
    send: function () {
        this._validate();
        this._resetResponse();
        if (this._busy) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, "A connection already exists and is busy.")
        }
        var B = "";
        if (this._postData != null) {
            var A = "";
            if (actuate.util.browser.isAndroid || actuate.util.browser.isIPad) {
                var D = new DOMParser();
                A = D.parseFromString(this._postData, "text/xml")
            } else {
                A = this._postData
            }
            try {
                if (A.getElementsByTagName && A.getElementsByTagName("Operator")[0] && A.getElementsByTagName("Operator")[0].firstChild) {
                    B = A.getElementsByTagName("Operator")[0].firstChild.nodeValue
                }
            } catch (C) {
                B = ""
            }
        }
        if (this._proxyUrl) {
            this._makeCrossDomainRequest()
        } else {
            this._makeRequest()
        }
    },
    _makeCrossDomainRequest: function () {
        this._request = new actuate.XAjax();
        this._request.setAPI(this._proxyUrl);
        this._request.open(this._method, this._url);
        this._request.onload = actuate.Method.bind(this._responseHandler, this);
        this._request.onerror = actuate.Method.bind(this._invalidResponseHandler, this);
        this._request.onexception = actuate.Method.bind(this._exceptionHandler, this);
        if (this._requestHeaders) {
            for (var B in this._requestHeaders) {
                var A = this._requestHeaders[B];
                if (typeof (A) == "string") {
                    this._request.setRequestHeader(B, A)
                }
            }
            if (actuate._ajaxHttpSessionId) {
                this._request.setRequestHeader("JSESSIONID", actuate._ajaxHttpSessionId)
            }
            this._request.setRequestHeader("X-Requested-With", "CrossDomainAjax");
            this._request.setRequestHeader("Referer", "http://localhost:8700/iportal/test/Web2.0/changePageExample.html")
        }
        if (actuate.externalToken) {
            this._request.setRequestHeader("Authorization", "Bearer " + actuate.externalToken)
        }
        this._busy = true;
        this._request.send(this._method == this.METHOD_POST ? this._postData : null)
    },
    _makeRequest: function () {
        var A = {
            method: this._method,
            postBody: this._postData,
            onSuccess: actuate.Method.bindAsEventListener(this._responseHandler, this),
            onFailure: actuate.Method.bindAsEventListener(this._invalidResponseHandler, this),
            requestHeaders: this._flattenMap(this._requestHeaders)
        };
        if (this._synchronous) {
            A.asynchronous = false
        }
        this._request = new actuate.Ajax.Request(this._url, A)
    },
    _resetResponse: function () {
        this._status = null;
        this._statusText = null;
        this._request = null;
        this._busy = false
    },
    setOnSuccess: function (A) {
        this._onSuccess = A
    },
    setOnFailure: function (A) {
        this._onFailure = A
    },
    setOnException: function (A) {
        this._onException = A
    },
    _responseHandler: function (A) {
        try {
            this._updateResponseAttributes(A);
            this._busy = false;
            if (this._onSuccess) {
                this._onSuccess(this)
            }
        } catch (B) {
            if (this._onException) {
                this._onException(B)
            }
        }
    },
    _invalidResponseHandler: function (A) {
        try {
            if (A.status == 0) {
                if (actuate.util.browser && actuate.util.browser.isNativeApp()) {
                    window.location = "error://message=No connection&action=setting";
                    return
                }
            } else {
                if (A.status == 500 && A.getResponseHeader("SessionTimeOut") == "true") {
                    throw new actuate.Exception(actuate.Exception.ERR_CLIENT, "Error: session time out", null, 556)
                } else {
                    if (A.status == 502) {
                        if (actuate.util.browser && actuate.util.browser.isNativeApp()) {
                            window.location = "error://message=No connection&action=setting";
                            return
                        } else {
                            console.log("No connection");
                            return
                        }
                    }
                }
            }
            this._updateResponseAttributes(A);
            this._busy = false;
            if (this._onFailure) {
                this._onFailure(this)
            }
        } catch (B) {
            if (this._onException) {
                this._onException(B)
            }
        }
    },
    _exceptionHandler: function (A) {
        try {
            this._updateResponseAttributes(A);
            this._busy = false;
            if (this._onException) {
                this._onException(new actuate.ConnectionException(this._url, actuate.Exception.ERR_CLIENT, "Error connecting to URL"))
            }
        } catch (B) {
            if (this._onException) {
                this._onException(B)
            }
        }
    },
    _updateResponseAttributes: function (A) {
        if (!A) {
            A = this._request
        }
        this._response = A
    }
};
actuate.util.EventObservers = actuate.Class.create();
actuate.util.EventObservers.prototype = {
    _observers: false, initialize: function () {
    }, _observeAndCache: function (E, D, B, A, C) {
        if (!this._observers) {
            this._observers = {}
        }
        if (!this._observers[C]) {
            this._observers[C] = new actuate.util.CacheEventObservers(C)
        }
        try {
            var G = this._observers[C];
            G.observeAndCache(E, D, B, A)
        } catch (F) {
        }
    }, _unloadComponentObservers: function (B) {
        if (!B) {
            return
        }
        try {
            B.deleteAllFromCache()
        } catch (A) {
        }
    }, unlinkDetachedHTML: function (A) {
        var C = this._observers[A];
        if (C) {
            try {
                C.unlinkDetachedHTML()
            } catch (B) {
            }
        }
    }, unloadObservers: function () {
        if (!this._observers) {
            return
        }
        for (var A in this._observers) {
            this._unloadComponentObservers(this._observers[A]);
            delete this._observers[A]
        }
        this._observers = false
    }, observe: function (E, D, B, A, C) {
        this._observeAndCache(E, D, B, A, C)
    }, stopObserving: function (E, D, B, A, C) {
        if (!E) {
            return
        }
        var F = this._observers[C];
        if (F) {
            F.stopObserving(E, D, B, A)
        } else {
            A = A || false;
            if (D == "keypress" && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || E.detachEvent)) {
                D = "keydown"
            }
            if (E.removeEventListener) {
                E.removeEventListener(D, B, A)
            } else {
                if (E.detachEvent) {
                    E.detachEvent("on" + D, B)
                }
            }
        }
    }
};
actuate.util.CacheEventObservers = actuate.Class.create();
actuate.util.CacheEventObservers.prototype = {
    _cacheObservers: null, _keyIdx: 0, _count: 0, _componentName: null, initialize: function (A) {
        this._cacheObservers = {};
        this._componentName = A
    }, _getKey: function () {
        return this._keyIdx++
    }, observeAndCache: function (D, C, B, A) {
        if (!D) {
            return
        }
        D = this.getDom(D);
        A = A || false;
        if (C == "keypress" && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || D.attachEvent)) {
            C = "keydown"
        }
        this.stopObserving(D, C, B, A);
        if (D.addEventListener) {
            D.addEventListener(C, B, A)
        } else {
            if (D.attachEvent) {
                D.attachEvent("on" + C, B)
            }
        }
        this._addToCache(D, C, B, A)
    }, _addToCache: function (E, C, B, A) {
        var D = this._getKey();
        var F = [E, C, B, A];
        this._cacheObservers[D] = F;
        this._count++
    }, stopObserving: function (D, C, B, A) {
        if (!D) {
            return
        }
        A = A || false;
        if (C == "keypress" && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || D.detachEvent)) {
            C = "keydown"
        }
        if (D.removeEventListener) {
            D.removeEventListener(C, B, A)
        } else {
            if (D.detachEvent) {
                D.detachEvent("on" + C, B)
            }
        }
        this.deleteFromCache(D, C, B, A)
    }, deleteFromCache: function (E, D, C, A) {
        for (var B in this._cacheObservers) {
            var F = this._cacheObservers[B];
            if (F) {
                if (F[0] == E) {
                    if (F[1] == D) {
                        F[0] = null;
                        F[2] = null;
                        delete this._cacheObservers[B];
                        this._count--;
                        return
                    }
                }
            }
        }
    }, unlinkDetachedHTML: function () {
        for (var A in this._cacheObservers) {
            var C = this._cacheObservers[A];
            if (C) {
                if (C[0]) {
                    var D = this._isElementInDOM(C[0]);
                    if (!D) {
                        var B = 0;
                        C[0] = null;
                        C[2] = null;
                        delete this._cacheObservers[A];
                        this._count--
                    }
                }
            }
        }
    }, _generateRandomId: function () {
        var A = actuate.util.Utility.randomFloat();
        var B = (A * 1e+32).toString(36);
        return B
    }, _isElementInDOM: function (A) {
        if (!A || !A.parentNode) {
            return false
        }
        if (A.contains) {
            return document.body.contains(A)
        }
        var B = A.id || this._generateRandomId();
        A.id = B;
        return document.getElementById(B) !== null
    }, deleteAllFromCache: function () {
        for (var A in this._cacheObservers) {
            var B = this._cacheObservers[A];
            this.stopObserving(B[0], B[1], B[2], B[3]);
            delete this._cacheObservers[A]
        }
    }, getDom: function (A) {
        if (!A || !document) {
            return null
        }
        return A.dom ? A.dom : (typeof A == "string" ? document.getElementById(A) : A)
    }
};
actuate.util.Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB: 9,
    KEY_RETURN: 13,
    KEY_SHIFT: 16,
    KEY_ESC: 27,
    KEY_LEFT: 37,
    KEY_UP: 38,
    KEY_RIGHT: 39,
    KEY_DOWN: 40,
    KEY_DELETE: 46,
    KEY_SPACE: 32,
    observers: false,
    element: function (A) {
        var B = A.target || A.srcElement;
        if (A.touches && A.touches.length == 1) {
            B = A.touches[0].target
        }
        return B
    },
    findElement: function (C, B) {
        var A = C.target || C.srcElement;
        if (C.touches && C.touches.length == 1) {
            A = C.touches[0].target
        }
        while (A && A.className != B) {
            A = A.parentNode
        }
        return A
    },
    findElementContainingCLassName: function (C, B) {
        var A = C.target || C.srcElement;
        if (C.touches && C.touches.length == 1) {
            A = C.touches[0].target
        }
        while (A && A.className.indexOf(B) == -1) {
            A = A.parentNode
        }
        return A
    },
    isLeftClick: function (A) {
        if (A.touches) {
            return true
        }
        return (((A.which) && (A.which == 1)) || ((A.button) && (A.button == 1)))
    },
    pointer: function (C) {
        if (C.touches) {
            var D = C.touches[0];
            return {x: D.pageX, y: D.pageY}
        }
        var B = document.documentElement || {scrollLeft: 0, scrollTop: 0};
        var A = document.body || {scrollLeft: 0, scrollTop: 0};
        return {
            x: C.pageX || (C.clientX + (B.scrollLeft || A.scrollLeft || 0) - (B.clientLeft || 0)),
            y: C.pageY || (C.clientY + (B.scrollTop || A.scrollTop || 0) - (B.clientTop || 0))
        }
    },
    pointerX: function (C) {
        if (C.touches) {
            var D = C.touches[0];
            if (D && D.pageX) {
                return D.pageX
            }
        }
        var B = document.documentElement || {scrollLeft: 0, scrollTop: 0};
        var A = document.body || {scrollLeft: 0, scrollTop: 0};
        return C.pageX || (C.clientX + (B.scrollLeft || window.pageXOffset || A.scrollLeft || 0))
    },
    pointerY: function (C) {
        if (C.touches) {
            var D = C.touches[0];
            return D.pageY
        }
        var B = document.documentElement || {scrollLeft: 0, scrollTop: 0};
        var A = document.body || {scrollLeft: 0, scrollTop: 0};
        return C.pageY || (C.clientY + (B.scrollTop || window.pageYOffset || A.scrollTop || 0))
    },
    stop: function (A) {
        if (!actuate.util.browser.isAndroid && !actuate.util.browser.isIPad && A.type == "touchstart" && A.touches && A.touches.length > 1) {
            return
        }
        if (A.preventDefault) {
            A.preventDefault();
            A.stopPropagation()
        } else {
            A.returnValue = false;
            A.cancelBubble = true
        }
    },
    _observeAndCache: function (E, D, B, A, C) {
        if (!this.observers) {
            this.observers = new actuate.util.EventObservers()
        }
        this.observers._observeAndCache(E, D, B, A, C)
    },
    unloadCache: function () {
        if (!actuate.util.Event.observers) {
            return
        }
        actuate.util.Event.observers.unloadObservers();
        actuate.util.Event.observers = false
    },
    observe: function (E, D, B, A, C) {
        if (E) {
            E = this.getDom(E);
            A = A || false;
            if (D == "keypress" && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || E.attachEvent)) {
                D = "keydown"
            }
            var F = this._getObserverComponent(E, C);
            this._observeAndCache(E, D, B, A, F)
        }
    },
    _getObserverComponent: function (B, A) {
        if (!A) {
            if (B.tagName) {
                return "Event_" + B.tagName
            }
        }
        return "Event"
    },
    stopObserving: function (E, D, B, A, C) {
        if (!E || !this.observers) {
            return
        }
        var F = this._getObserverComponent(E, C);
        this.observers.stopObserving(E, D, B, A, F)
    },
    getDom: function (A) {
        if (!A || !document) {
            return null
        }
        return A.dom ? A.dom : (typeof A == "string" ? document.getElementById(A) : A)
    }
};
actuate.util.Event.observe(window, "unload", actuate.util.Event.unloadCache, false);
actuate.util.Element = {
    visible: function (A) {
        return A.style.display != "none"
    }, hide: function () {
        for (var B = 0; B < arguments.length; B++) {
            var A = arguments[B];
            A.style.display = "none";
            if (A.classList.contains("d-block")) {
                A.classList.replace("d-block", "d-none")
            } else {
                A.classList.add("d-none")
            }
        }
    }, show: function () {
        for (var B = 0; B < arguments.length; B++) {
            var A = arguments[B];
            A.style.display = "";
            if (A.classList.contains("d-none")) {
                A.classList.replace("d-none", "d-block")
            } else {
                A.classList.add("d-block")
            }
        }
    }, styleWidth: function (B) {
        var A = B.style.width.indexOf("px");
        var C = B.style.width.substring(0, A) * 1;
        return C
    }, styleHeight: function (B) {
        var A = B.style.height.indexOf("px");
        var C = B.style.height.substring(0, A) * 1;
        return C
    }, realOffset: function (B) {
        var A = 0, C = 0;
        do {
            A += B.scrollTop || 0;
            C += B.scrollLeft || 0;
            B = B.parentNode
        } while (B);
        return [C, A]
    }, cumulativeOffset: function (B) {
        var A = 0, C = 0;
        do {
            A += B.offsetTop || 0;
            C += B.offsetLeft || 0;
            B = B.offsetParent
        } while (B);
        return [C, A]
    }, getStyle: function (B, C) {
        var D = B.style[C];
        if (!D) {
            if (document.defaultView && document.defaultView.getComputedStyle) {
                var A = document.defaultView.getComputedStyle(B, null);
                D = A ? A.getPropertyValue(C) : null
            } else {
                if (B.currentStyle) {
                    D = B.currentStyle[C]
                }
            }
        }
        if (window.opera && ["left", "top", "right", "bottom"].include(C)) {
            if (actuate.util.Element.getStyle(B, "position") == "static") {
                D = "auto"
            }
        }
        return D == "auto" ? null : D
    }, getAttribute: function (B, A) {
        if (B.getAttribute(A)) {
            return B.getAttribute(A)
        } else {
            if (B.attributes[A]) {
                return B.attributes[A].nodeValue
            }
        }
        return null
    }, withinIncludingScrolloffsets: function (B, A, D) {
        var C = this.realOffset(B);
        this.xcomp = A + C[0] - this.deltaX;
        this.ycomp = D + C[1] - this.deltaY;
        this.offset = this.cumulativeOffset(B);
        return (this.ycomp >= this.offset[1] && this.ycomp < this.offset[1] + B.offsetHeight && this.xcomp >= this.offset[0] && this.xcomp < this.offset[0] + B.offsetWidth)
    }, within: function (B, A, C) {
        if (this.includeScrollOffsets) {
            return this.withinIncludingScrolloffsets(B, A, C)
        }
        this.xcomp = A;
        this.ycomp = C;
        this.offset = this.cumulativeOffset(B);
        return (C >= this.offset[1] && C < this.offset[1] + B.offsetHeight && A >= this.offset[0] && A < this.offset[0] + B.offsetWidth)
    }, prepare: function () {
        var B = document.documentElement || {scrollLeft: 0, scrollTop: 0};
        var A = document.body || {scrollLeft: 0, scrollTop: 0};
        this.deltaX = window.pageXOffset || B.scrollLeft || A.scrollLeft || 0;
        this.deltaY = window.pageYOffset || B.scrollTop || A.scrollTop || 0
    }, cumulativeOffsetAgainst: function (C, B) {
        if (!B) {
            return actuate.util.Element.cumulativeOffset(C)
        }
        var A = 0, D = 0;
        do {
            A += C.offsetTop || 0;
            D += C.offsetLeft || 0;
            C = C.offsetParent
        } while (C && C != B);
        return [D, A]
    }, getComputedStyle: function (B, A) {
        if (!B) {
            throw "element argument is required"
        }
        if (!A) {
            throw "styleName argument is required"
        }
        var C = "";
        if (document.defaultView && document.defaultView.getComputedStyle) {
            C = document.defaultView.getComputedStyle(B, "").getPropertyValue(A)
        } else {
            if (B.currentStyle) {
                A = A.replace(/\-(\w)/g, function (D, E) {
                    return E.toUpperCase()
                });
                C = B.currentStyle[A]
            }
        }
        return C
    }, getClientHeight: function (A) {
        if (A == window) {
            if (actuate.util.browser.isIPhone || actuate.util.browser.isIPod) {
                return window.innerHeight
            } else {
                return document.documentElement.clientHeight
            }
        }
    }, getElement: function (D, C, F) {
        if (D) {
            var E = D.getElementsByTagName(C);
            for (var B = 0; B < E.length; B++) {
                var A = E[B].getAttribute("id");
                if (A == F) {
                    return E[B]
                }
            }
        }
        return null
    }, hasClass: function (B, C) {
        if (B) {
            var A = B.className;
            return C && (" " + A + " ").indexOf(" " + C + " ") != -1
        }
    }
};
if (/Konqueror|Safari|KHTML/.test(navigator.userAgent)) {
    actuate.util.Element.cumulativeOffset = function (B) {
        var A = 0, C = 0;
        do {
            A += B.offsetTop || 0;
            C += B.offsetLeft || 0;
            if (B.offsetParent == document.body) {
                if (actuate.util.Element.getStyle(B, "position") == "absolute") {
                    break
                }
            }
            B = B.offsetParent
        } while (B);
        return [C, A]
    }
}
actuate.util.Package.define("actuate.module");
actuate.module.Version = {
    paramName: "__ver", getGlobalVersion: function () {
        return actuate.ModuleVersionInfo
    }, getVersionParam: function (B) {
        var A = actuate.module.Version.getGlobalVersion();
        if (B) {
            var C = actuate[B];
            if (C && C.version) {
                A = C.version
            }
        }
        return actuate.module.Version.paramName + "=" + A
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.Constant = actuate.Class.create();
actuate.Class.extend(actuate.model.Constant, {
    MetadataType: {
        ALL: "All",
        ELEMENT: "Element",
        FEATURES: "Features",
        TYPE: "Type",
        BASE: "Base",
        COLUMN_DEF: "ColumnDef",
        GROUP: "Group",
        FILTER: "Filter",
        BINDING: "Binding",
        DATA_ITEM: "DataItem",
        SORT: "Sort",
        REPORT_ITEMS: "ReportItems",
        FORMAT_RULES: "FormatRules",
        AGGREGATIONS: "Aggregations",
        STYLE: "Style",
        SUBSCRIPTION_LIST: "SubscriptionList",
        DATA_FORMAT: "DataFormat",
        FORMAT: "Format",
        RESULT_SET: "ResultSet",
        CAN_DRILL: "CanDrill",
        CATEGORIES: "Categories",
        SERIES: "Series",
        DATASETS: "DataSets",
        DATASET: "DataSet",
        DATASET_BINDING: "DataSetBinding",
        CUBES: "Cubes",
        CUBE: "Cube",
        DACROSSTAB: "DACrosstab",
        PARAMETERS: "Parameters",
        VALUEDEFINITIONS: "ValueDefinitions",
        DATAMARTS: "DataMarts",
        REPORTLIBRARY_FILES: "ReportLibraryFiles",
        REPORTLIBRARY_METADATA: "ReportLibraryMetadata",
        DATAMART_VERSIONS: "DataMartVersions",
        THEMESTYLES: "ThemeStyles",
        SINGLEMETRIC: "SingleMetric",
        THEMES: "Themes",
        FONTOPTIONS: "FontOptions",
        XAXISSERIES: "xAxisSeries",
        YAXISSERIES: "yAxisSeries",
        TOOLTIP: "tooltip",
        USEDEFAULTHYPERLINK: "useDefaultHyperLink",
        GADGET: "gadget",
        PRINT: "print",
        JSONMODEL: "JsonModel",
        CUSTOMVIZ_CONFIG: "CustomVizConfig",
        JOINBYINMAPKEY: "JoinByInMapKey"
    }
});
actuate.util.Package.define("actuate.model");
actuate.model.MetadataHandlers = {
    addMetadataHandlers: function (D, B) {
        for (var C = 0; C < B.length; C++) {
            var A = B[C];
            actuate.Class.extend(D, this[A])
        }
    }, Binding: {
        bindingsMap: null, getBinding: function (A) {
            return this.bindingsMap && this.bindingsMap[A]
        }, __getMetadata_Binding: function () {
            return this.bindingsMap
        }, __setMetadata_Binding: function (C) {
            this.bindingsMap = {};
            if (C) {
                for (var A in C) {
                    var B = C[A];
                    B.name = A;
                    var D = new actuate.model.Binding(this.documentModel, B, this);
                    this.bindingsMap[A] = D
                }
            }
            return true
        }
    }, DataSetBinding: {
        dataSetBindingsMap: null, getDataSetBinding: function (A) {
            return this.dataSetBindingsMap && this.dataSetBindingsMap[A]
        }, __getMetadata_DataSetBinding: function () {
            return this.dataSetBindingsMap
        }, __setMetadata_DataSetBinding: function (C) {
            this.dataSetBindingsMap = {};
            if (C) {
                for (var A in C) {
                    var B = C[A];
                    B.name = A;
                    var D = new actuate.model.Binding(this.documentModel, B, this);
                    this.dataSetBindingsMap[A] = D
                }
            }
            return true
        }
    }, Filter: {
        filterList: null, __getMetadata_Filter: function () {
            return this.filterList
        }, __setMetadata_Filter: function (A) {
            if (A) {
                this.filterList = new actuate.model.FilterList(A);
                this.hasAdvancedFilter = this.filterList.isAdvancedFilter ? true : false
            }
            return true
        }
    }, Subscriptions: {
        subscriptions: null, __getMetadata_Subscriptions: function () {
            return this.subscriptions
        }, __setMetadata_Subscriptions: function (A) {
            if (A) {
                this.subscriptions = new actuate.model.SubscriptionList(A)
            } else {
                this.subscriptions = null
            }
            return true
        }, __invalidateMetadata_Subscriptions: function () {
            this.subscriptions = null;
            this.documentModel.invalidateMetadata(actuate.model.Constant.MetadataType.SUBSCRIPTION_LIST);
            return true
        }
    }, Style: {
        style: null, __getMetadata_Style: function () {
            return this.style
        }, __setMetadata_Style: function (A) {
            if (A) {
                this.style = new actuate.model.Font(A)
            } else {
                this.style = null
            }
            return true
        }
    }, TableSaw: {
        tableSaw: null, __getMetadata_TableSaw: function () {
            return this.tableSaw
        }, __setMetadata_TableSaw: function (A) {
            this.tableSaw = A;
            return true
        }
    }, DataFormat: {
        dataFormat: null, __setMetadata_DataFormat: function (A) {
            if (A) {
                A.iid = this.iid;
                this.dataFormat = new actuate.model.DataFormat(A)
            } else {
                this.dataFormat = null
            }
            return true
        }, __getMetadata_DataFormat: function () {
            return this.dataFormat
        }
    }, ReportItems: {
        children: null, __setMetadata_ReportItems: function (C) {
            if (C) {
                this.children = C.children;
                for (var D in C.elements) {
                    var B = C.elements[D];
                    B.iid = D;
                    var A = this.documentModel.elements[D];
                    if (!A) {
                        A = this.documentModel.createElement(B.iid, B.type, null)
                    }
                    if (A) {
                        A.name = B.name;
                        A.visible = B.visibility == false ? false : true;
                        A.parentIid = B.parentIid;
                        A.children = B.children;
                        if (B.displayName) {
                            A.displayName = B.displayName
                        }
                        if (A.type === "SUMMARYTABLE" || A.type === "TABLE") {
                            if (A.__setMetadata_TableSaw) {
                                A.__setMetadata_TableSaw(A.TableSaw)
                            }
                        }
                    }
                }
            }
            return true
        }, __getMetadata_ReportItems: function () {
            return this.elements
        }, __invalidateMetadata_ReportItems: function () {
            this.children = null;
            delete this._metadata[actuate.model.Constant.MetadataType.REPORT_ITEMS]
        }
    }, ResultSet: {
        resultSetName: null, getResultSetMetadata: function () {
            var A = this.documentModel.resultSetsMap[this.resultSetName];
            if (actuate.util.Utility.isArray(A) && A.length <= 0) {
                A = null
            }
            if (A != null) {
                return [A]
            }
        }, __setMetadata_ResultSet: function (C) {
            var B = (C && C.length > 0) ? C[0] : C;
            if (B) {
                B.iid = this.iid;
                var A = new actuate.model.ResultSetMetadata(B);
                this.resultSetName = A.name;
                this.documentModel.resultSetsMap[A.name] = A
            } else {
                this.resultSetName = null
            }
            return true
        }, __getMetadata_ResultSet: function () {
            return this.getResultSetMetadata()
        }, __invalidateMetadata_ResultSet: function () {
            this.resultSetName = null;
            this.documentModel.invalidateMetadata(actuate.model.Constant.MetadataType.RESULT_SET);
            return true
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.Aggregation = actuate.Class.create();
actuate.model.Aggregation.prototype = {
    bindingName: null,
    functionName: null,
    functionParameter: null,
    inputLabel: null,
    labelFont: null,
    sortOrder: null,
    index: null,
    grandTotal: {enable: null, showInFooter: null},
    subTotal: {enable: null, showInFooter: null, groupName: null},
    initialize: function (A) {
        if (A) {
            this.bindingName = A.bindingName;
            this.functionName = A.func || "";
            this.functionParameter = A.param;
            this.inputLabel = A.inputLabel || "";
            this.labelFont = A.labelFont || "";
            this.sortOrder = A.sortOrder || "";
            this.isShared = A.isShared;
            this.IsAggregationMeasure = A.IsAggregationMeasure || "false";
            this.Id = A.Id || -1;
            if (this.inputLabel.length > 0 && this.inputLabel.charAt(this.inputLabel.length - 1) == " ") {
                this.inputLabel = this.inputLabel.substr(0, this.inputLabel.length - 1)
            }
            if (A.subTotal) {
                this.subTotal = {};
                this.subTotal.enable = A.subTotal.enable ? true : false;
                if (A.subTotal.showInFooter != null) {
                    this.subTotal.showInFooter = A.subTotal.showInFooter ? true : false
                } else {
                    this.subTotal.showInFooter = null
                }
                this.subTotal.groupName = A.subTotal.groupName
            }
            if (A.grandTotal) {
                this.grandTotal = {};
                this.grandTotal.enable = A.grandTotal.enable ? true : false;
                if (A.grandTotal.showInFooter != null) {
                    this.grandTotal.showInFooter = A.grandTotal.showInFooter ? true : false
                } else {
                    this.grandTotal.showInFooter = null
                }
            }
            if (A.index) {
                this.index = A.index
            }
        }
    },
    equal: function (A) {
        if (this.functionName != A.functionName) {
            return false
        }
        if (this.grandTotal.enable != A.grandTotal.enable) {
            return false
        }
        if (this.grandTotal.showInFooter !== A.grandTotal.showInFooter) {
            return false
        } else {
            return true
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.BaseModel = actuate.Class.create();
actuate.model.BaseModel.prototype = {
    type: "UNKNOWN", visible: true, documentModel: null, initialize: function (C, B, A) {
        if (!C) {
            return
        }
        this.documentModel = C;
        this.dom = B;
        if (B) {
            this.id = B.id
        } else {
            this.id = null
        }
        if (!A && B) {
            A = B.getAttribute("iid");
            if (A) {
                A = actuate.util.Utility.getDesignId(A)
            }
        }
        this.iid = A;
        this._metadata = {}
    }, clear: function () {
        this._metadata = {}
    }, isVisible: function () {
        return this.visible
    }, invalidateMetadata: function (A) {
        var B = this["__invalidateMetadata_" + A];
        if (B) {
            if (B.call(this)) {
                delete this._metadata[A];
                return true
            }
            return false
        } else {
            delete this._metadata[A];
            return true
        }
    }, __invalidateMetadata_All: function () {
        var B = [];
        for (var A in this._metadata) {
            B.push(A)
        }
        for (var C = 0; C < B.length; C++) {
            this.invalidateMetadata(B[C])
        }
        return true
    }, hasMetadata: function (A) {
        var B = this["__hasMetadata_" + A];
        if (B) {
            return B.call(this)
        } else {
            if (this._metadata[A]) {
                return this.getMetadata(A) ? true : false
            }
            return false
        }
    }, getMetadata: function (A) {
        var B = this["__getMetadata_" + A];
        if (B) {
            return B.call(this)
        } else {
            return this._metadata[A]
        }
    }, setMetadata: function (A, C) {
        var B = this["__setMetadata_" + A];
        if (B) {
            this._metadata[A] = B.call(this, C)
        } else {
            this._metadata[A] = C || true
        }
    }, getInstanceId: function () {
        if (this.dom) {
            return this.dom.getAttribute("iid")
        }
        return null
    }, getBookmark: function () {
        if (this.id) {
            return this.id.substr(this.id.indexOf("_") + 1)
        }
        return null
    }, toString: function () {
        return this.iid + "," + this.id + " (" + this.type + ")"
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.Binding = actuate.Class.create();
actuate.model.Binding.prototype = {
    name: null,
    displayName: null,
    dataType: null,
    isAnyDataType: null,
    expression: null,
    isAggregation: null,
    isInternal: null,
    isLinkedDataModel: null,
    aggregateOn: null,
    index: null,
    bindingType: null,
    hasDependents: false,
    isViewableBinding: true,
    isSubQuery: false,
    initialize: function (B, A) {
        if (A) {
            this.name = A.name;
            this.dataType = A.dataType;
            this.isAnyDataType = (this.dataType == actuate.Constant.DataType.ANY || this.dataType == actuate.Constant.DataType.JAVAOBJECT);
            this.isAggregation = A.isAggregation ? true : false;
            this.isInternal = A.isInternal ? true : false;
            this.aggregateOn = A.aggregateOn;
            this.displayName = A.displayNameKeyValue || A.displayName || A.name;
            this.expression = A.expression;
            this.index = A.index;
            this.bindingType = A.bindingType;
            this.aggregationFun = A.aggregationFun;
            this.hasDependents = A.hasDependents ? true : false;
            this.isLinkedDataModel = A.isLinkedDataModel ? true : false;
            this.isViewableBinding = A.isViewableBinding == false ? false : true;
            this.isSubQuery = A.isSubQuery ? true : false
        }
    },
    matchFilterDataType: function (D) {
        var C = actuate.Constant.DataType;
        var B = this.dataType;
        var A = D.dataType;
        if (A == C.DATETIME || A == C.DATE || A == C.TIME || A == C.STRING) {
            return B == A
        } else {
            return B == C.INTEGER || B == C.FLOAT || B == C.DECIMAL || B == C.BOOLEAN
        }
    },
    getBRDEscapedName: function () {
        return "[" + this.name.replace("'", "''").replace(/([\[\]])/g, "'$1'") + "]"
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.ChartModel = actuate.Class.create();
actuate.model.ChartModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.CHART,
    isFlash: false,
    isView: null,
    dataSet: null,
    canSwitchView: null,
    isCube: null,
    isMeasureView: null,
    isSharedBinding: null,
    isAllowExport: null,
    isAxisChart: null,
    chartType: null,
    chartSubType: null,
    supportPercentStacked: null,
    dimension: null,
    width: null,
    height: null,
    maxWidth: null,
    maxHeight: null,
    flipAxis: null,
    partChart: null,
    canDrillUpFromCategories: null,
    canDrillUpFromSeries: null,
    canDrillDownFromCategories: null,
    canDrillDownFromSeries: null,
    canDrillUpFromCategoriesNames: [],
    canDrillUpFromSeriesNames: [],
    canDrillDownFromCategoriesNames: [],
    canDrillDownFromSeriesNames: [],
    copyHyperlink: null,
    baseFont: null,
    outsideFont: null,
    doughnutRadius: null,
    gadget: null,
    pieRadius: null,
    gadgetType: null,
    showScrollBar: null,
    showRangeSelector: null,
    showBottomSlider: null,
    keepCubeHierarchy: null,
    dataSummarize: null,
    binsNumber: null,
    binWidth: null,
    maxHeight: null,
    xAxis: {
        title: null,
        titleVisible: null,
        titleFont: null,
        labelfont: null,
        groupingOn: null,
        groupingEnabled: null,
        dataType: null,
        datetimeFormat: null,
        categoryAxis: null,
        categoryLabels: {visible: null, interval: null, stagger: null, rotation: null},
        scale: {min: null, max: null, step: null, StepNumber: null}
    },
    yAxis: {
        title: null,
        titleVisible: null,
        titleFont: null,
        labelfont: null,
        groupingOn: null,
        groupingEnabled: null,
        dataType: null,
        chartFormat: null,
        datetimeFormat: null,
        categoryLabels: {visible: null, interval: null, stagger: null, rotation: null},
        scale: {min: null, max: null, step: null, StepNumber: null, stepUnit: null}
    },
    xAxisSeries: null,
    yAxisSeries: null,
    tooltip: null,
    useDefaultHyperLink: null,
    title: {title: null, visible: null, autoTitle: null, font: null},
    legend: {visible: null, title: null, titleVisible: null, position: null, font: null, labelfont: null},
    minColor: null,
    maxColor: null,
    borderColor: null,
    minValue: null,
    maxValue: null,
    valueSeriesShowLabel: null,
    chartDataLabel: null,
    initialize: function (D, C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, D, C, B);
        this.isFlash = A;
        if (A) {
            this.type = actuate.Constant.element.FLASHCHART
        }
    },
    __getMetadata_Base: function () {
        return this
    },
    __setMetadata_DataSet: function (A) {
        this.dataSet = A;
        return true
    },
    __getMetadata_DataSet: function () {
        return this
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this.gadgetType = A.gadgetType;
            this.isView = A.isView ? true : false;
            this.canSwitchView = A.canSwitchView ? true : false;
            this.isCube = A.isCube ? true : false;
            this.isMeasureView = A.isMeasureView ? true : false;
            this.isSharedBinding = A.isSharedBinding ? true : false;
            this.hasBindings = A.hasBoundData ? true : false;
            this.isAllowExport = A.isAllowExport;
            this.isAxisChart = A.isAxisChart;
            this.chartType = A.chartType;
            this.supportPercentStacked = A.supportPercentStacked ? true : false;
            this.chartSubType = A.chartSubType;
            this.partChart = A.partChart ? true : false;
            this.dimension = A.dimension ? parseInt(A.dimension) : null;
            this.copyHyperlink = A.copyHyperlink;
            this.keepCubeHierarchy = A.keepCubeHierarchy;
            this.dataSummarize = A.dataSummarize;
            this.isJSType = A.isJSType;
            this.binsNumber = A.binsNumber;
            this.binWidth = A.binWidth;
            this.hasAxes = A.hasAxes ? true : false;
            this.isCategoryDatetime = A.isCategoryDatetime ? true : false;
            this.CategoryDataType = A.CategoryDataType ? A.CategoryDataType : null;
            this.CategoryGroupType = A.CategoryGroupType ? A.CategoryGroupType : null
        }
        return true
    },
    __getMetadata_CanDrill: function () {
        return this
    },
    __setMetadata_CanDrill: function (A) {
        if (A) {
            this.canDrillUpFromCategories = A.canDrillUpFromCategories ? true : false;
            this.canDrillUpFromSeries = A.canDrillUpFromSeries ? true : false;
            this.canDrillDownFromCategories = A.canDrillDownFromCategories ? true : false;
            this.canDrillDownFromSeries = A.canDrillDownFromSeries ? true : false;
            this.canDrillUpFromCategoriesNames = A.canDrillUpFromCategoriesNames;
            this.canDrillUpFromSeriesNames = A.canDrillUpFromSeriesNames;
            this.canDrillDownFromCategoriesNames = A.canDrillDownFromCategoriesNames;
            this.canDrillDownFromSeriesNames = A.canDrillDownFromSeriesNames
        }
        return true
    },
    __getMetadata_XAxisSeries: function () {
        return this
    },
    __setMetadata_XAxisSeries: function (A) {
        if (A) {
            this.xAxisSeries = A.xAxisSeries
        }
        return true
    },
    __getMetadata_UseDefaultHyperLink: function () {
        return this
    },
    __setMetadata_UseDefaultHyperLink: function (A) {
        if (A) {
            this.useDefaultHyperLink = A.useDefaultHyperLink
        }
        return true
    },
    __getMetadata_Tooltip: function () {
        return this
    },
    __setMetadata_Tooltip: function (A) {
        if (A) {
            this.tooltip = A.tooltip
        }
        return true
    },
    __getMetadata_gadget: function () {
        return this
    },
    __setMetadata_gadget: function (A) {
        if (A) {
            this.gadget = A
        }
        return true
    },
    __getMetadata_YAxisSeries: function () {
        return this
    },
    __setMetadata_YAxisSeries: function (A) {
        if (A) {
            this.yAxisSeries = A.yAxisSeries
        }
        return true
    },
    __hasMetadata_ColumnDef: function () {
        return true
    },
    __getMetadata_Format: function () {
        return this
    },
    __setMetadata_Format: function (B) {
        if (B) {
            this.width = B.width;
            this.height = B.height;
            this.maxWidth = B.maxWidth;
            this.maxHeight = B.maxHeight;
            this.flipAxis = B.flipAxis ? true : false;
            this.minColor = B.minColor;
            this.maxColor = B.maxColor;
            this.borderColor = B.borderColor;
            this.minValue = B.minValue;
            this.maxValue = B.maxValue;
            this.valueSeriesShowLabel = B.valueSeriesShowLabel;
            this.chartDataLabel = B.chartDataLabel;
            if (B.xAxis) {
                this.xAxis = {
                    title: B.xAxis.title,
                    titleVisible: (B.xAxis.titleVisible == false) ? false : true,
                    titleFont: B.xAxis.font ? new actuate.model.Font(B.xAxis.font) : null,
                    labelFont: B.xAxis.labelfont ? new actuate.model.Font(B.xAxis.labelfont) : null,
                    categoryAxis: B.xAxis.categoryAxis ? true : false,
                    groupingOn: B.xAxis.groupingOn,
                    groupingEnabled: B.xAxis.groupingEnabled ? true : false,
                    dataType: B.xAxis.dataType ? B.xAxis.dataType : [],
                    datetimeFormat: B.xAxis.dateTimeFormat
                };
                if (B.xAxis.categoryLabels) {
                    this.xAxis.categoryLabels = {
                        visible: (B.xAxis.categoryLabels.visible == false) ? false : true,
                        interval: B.xAxis.categoryLabels.interval ? parseInt(B.xAxis.categoryLabels.interval) : null,
                        stagger: B.xAxis.categoryLabels.stagger ? true : false,
                        rotation: B.xAxis.categoryLabels.rotation
                    }
                }
                if (B.xAxis.scale) {
                    this.xAxis.scale = {
                        min: B.xAxis.scale.min ? B.xAxis.scale.min : "",
                        max: B.xAxis.scale.max ? B.xAxis.scale.max : "",
                        step: B.xAxis.scale.step ? B.xAxis.scale.step : "",
                        StepNumber: B.xAxis.scale.StepNumber ? B.xAxis.scale.StepNumber : ""
                    }
                }
            } else {
                this.xAxis = {dataType: [], datetimeFormat: null}
            }
            if (B.yAxis) {
                this.yAxis = new Array();
                if (actuate.util.Utility.isArray(B.yAxis)) {
                    for (var A = 0; A < B.yAxis.length; A++) {
                        var C = {
                            title: B.yAxis[A].title,
                            titleVisible: (B.yAxis[A].titleVisible == false) ? false : true,
                            titleFont: B.yAxis[A].font ? new actuate.model.Font(B.yAxis[A].font) : null,
                            labelFont: B.yAxis[A].labelfont ? new actuate.model.Font(B.yAxis[A].labelfont) : null,
                            groupingOn: B.yAxis[A].groupingOn,
                            groupingEnabled: B.yAxis[A].groupingEnabled ? true : false,
                            dataType: B.yAxis[A].dataType ? B.yAxis[A].dataType : [],
                            datetimeFormat: B.yAxis[A].dateTimeFormat
                        };
                        if (B.yAxis[A].categoryLabels) {
                            C.categoryLabels = {
                                visible: (B.yAxis[A].categoryLabels.visible == false) ? false : true,
                                interval: B.yAxis[A].categoryLabels.interval ? parseInt(B.yAxis[A].categoryLabels.interval) : null,
                                stagger: B.yAxis[A].categoryLabels.stagger ? true : false,
                                rotation: B.yAxis[A].categoryLabels.rotation
                            }
                        }
                        if (B.yAxis[A].scale) {
                            C.scale = {
                                min: B.yAxis[A].scale.min ? B.yAxis[A].scale.min : "",
                                max: B.yAxis[A].scale.max ? B.yAxis[A].scale.max : "",
                                step: B.yAxis[A].scale.step ? B.yAxis[A].scale.step : "",
                                StepNumber: B.yAxis[A].scale.StepNumber ? B.yAxis[A].scale.StepNumber : "",
                                stepUnit: B.yAxis[A].scale.stepUnit ? B.yAxis[A].scale.stepUnit : ""
                            }
                        }
                        this.yAxis.push(C)
                    }
                }
            } else {
                this.yAxis = new Array();
                var C = {dataType: [], datetimeFormat: null};
                this.yAxis.push(C)
            }
            this.title = {
                title: B.title.title,
                visible: (B.title.visible == false) ? false : true,
                autoTitle: (B.title.autoTitle == false) ? false : true,
                font: B.title.font ? new actuate.model.Font(B.title.font) : null
            };
            this.legend = {
                visible: (B.legend.visible == false) ? false : true,
                title: B.legend.title,
                titleVisible: (B.legend.titleVisible == false) ? false : true,
                position: B.legend.position,
                font: B.legend.font ? new actuate.model.Font(B.legend.font) : null,
                labelfont: B.legend.labelfont ? new actuate.model.Font(B.legend.labelfont) : null
            };
            if (this.isFlash) {
                this.baseFont = B.baseFont ? new actuate.model.Font(B.baseFont) : null;
                this.outsideFont = B.outsideFont ? new actuate.model.Font(B.outsideFont) : null;
                this.doughnutRadius = B.doughnutRadius;
                this.pieRadius = B.pieRadius;
                this.pieRotation = B.pieRotation;
                this.useglassstyle = B.useglassstyle;
                this.chartFormat = B.chartFormat
            } else {
                this.theme = B.theme;
                this.allowZoomX = B.allowZoomX;
                this.allowZoomY = B.allowZoomY;
                this.baseFont = B.baseFont ? new actuate.model.Font(B.baseFont) : null;
                this.outsideFont = B.outsideFont ? new actuate.model.Font(B.outsideFont) : null;
                this.doughnutRadius = B.doughnutRadius;
                this.pieRadius = B.pieRadius;
                this.pieRotation = B.pieRotation;
                this.useglassstyle = B.useglassstyle;
                this.chartFormat = B.chartFormat;
                this.showScrollBar = B.showScrollBar;
                this.showRangeSelector = B.showRangeSelector;
                this.showBottomSlider = B.showBottomSlider;
                if (B.valueFont) {
                    this.valueFont = new actuate.model.Font(B.valueFont)
                }
            }
            if (B.margin !== null && B.margin !== undefined) {
                this.marginTop = B.margin[0];
                this.marginTopUnit = B.margin[1];
                this.marginBottom = B.margin[4];
                this.marginBottomUnit = B.margin[5];
                this.marginLeft = B.margin[6];
                this.marginLeftUnit = B.margin[7];
                this.marginRight = B.margin[2];
                this.marginRightUnit = B.margin[3]
            }
            if (B.border !== null && B.border !== undefined) {
                this.border = B.border
            }
        }
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.ChartModel.prototype, [actuate.model.Constant.MetadataType.BINDING, actuate.model.Constant.MetadataType.DATASET, actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.RESULT_SET, actuate.model.Constant.MetadataType.CAN_DRILL, actuate.model.Constant.MetadataType.CATEGORIES, actuate.model.Constant.MetadataType.SERIES, actuate.model.Constant.MetadataType.XAXISSERIES, actuate.model.Constant.MetadataType.YAXISSERIES, actuate.model.Constant.MetadataType.TOOLTIP, actuate.model.Constant.MetadataType.USEDEFAULTHYPERLINK, actuate.model.Constant.MetadataType.GADGET]);
actuate.util.Package.define("actuate.model");
actuate.model.CrosstabCellModel = actuate.Class.create();
actuate.model.CrosstabCellModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.CrosstabCellType.MEASURE,
    binding: null,
    parentItem: null,
    initialize: function (E, D, C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, E, D, C);
        this.parentItem = B;
        this.type = A
    },
    getBinding: function () {
        return this.binding
    },
    __getMetadata_Base: function () {
        return this
    },
    __setMetadata_Base: function (C) {
        if (C) {
            var A = (this.type == actuate.Constant.CrosstabCellType.AGGREGATION);
            if (A) {
                this.headerIid = C.headerIid;
                this.rowLevelIid = C.rowLevelIid;
                this.columnLevelIid = C.columnLevelIid;
                if (C.rowHeaderIid) {
                    this.rowHeaderIid = C.rowHeaderIid
                }
                if (C.columnHeaderIid) {
                    this.columnHeaderIid = C.columnHeaderIid
                }
            }
            if (C.bindingName) {
                if (C.headerIid) {
                    this.headerIid = C.headerIid
                }
                var B = {
                    name: C.bindingName,
                    dataType: C.dataType,
                    isAggregation: A,
                    expression: C.expression,
                    aggregationFun: C.aggregationFun,
                    displayNameKeyValue: C.displayNameKeyValue
                };
                this.binding = new actuate.model.Binding(this.documentModel, B)
            }
        }
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.CrosstabCellModel.prototype, [actuate.model.Constant.MetadataType.STYLE, actuate.model.Constant.MetadataType.DATA_FORMAT]);
actuate.util.Package.define("actuate.model");
actuate.model.CrosstabModel = actuate.Class.create();
actuate.model.CrosstabModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.CROSSTAB,
    canSwitchView: null,
    direction: null,
    aggregations: null,
    measures: null,
    levels: null,
    headers: null,
    cellsMap: null,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A);
        this.cellsMap = {}
    },
    _getLazyCell: function (C, B) {
        var A = this.cellsMap[C];
        if (!A) {
            A = new actuate.model.CrosstabCellModel(this.documentModel, null, C, this);
            this.cellsMap[C] = A
        }
        if (B) {
            A.type = B
        }
        return A
    },
    getCellByIndex: function (A, C) {
        if ((A || A == 0) && (C || C == 0)) {
            if (!this.measures || this.measures.length == 0) {
                return null
            }
            var B = (this.direction == actuate.Constant.CrosstabDirection.VERTICAL) ? C : A;
            if (B || B == 0) {
                B %= this.measures.length;
                return this.measures[B]
            }
        } else {
            if (!this.levels || this.levels.length < 2) {
                return null
            }
            if (C || C == 0) {
                return this.levels[0][C]
            } else {
                if (A || A == 0) {
                    return this.levels[1][A]
                }
            }
        }
        return null
    },
    __getMetadata_Base: function () {
        return this
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this.canSwitchView = A.canSwitchView
        }
        return true
    },
    __getMetadata_ColumnDef: function () {
        return this
    },
    __setMetadata_ColumnDef: function (C) {
        if (C) {
            var F = actuate.model.Constant.MetadataType.BASE;
            var J = actuate.Constant.CrosstabCellType;
            var B = C.crosstabComparison;
            if (B != null && B) {
                this._metadata.compare = true
            }
            this.direction = C.direction;
            if (C.measures) {
                this.measures = [];
                this.aggregations = [];
                for (var K = 0; K < C.measures.length; K++) {
                    var D = C.measures[K];
                    var O = this._getLazyCell(D.iid, J.MEASURE);
                    O.setMetadata(F, D);
                    this.measures.push(O);
                    if (D.headerIid) {
                        var H = this._getLazyCell(D.headerIid, J.HEADER);
                        H.headerType = "measure"
                    }
                    if (D.aggregations) {
                        for (var G = 0; G < D.aggregations.length; G++) {
                            var L = D.aggregations[G];
                            L.measureIid = D.iid;
                            var O = this._getLazyCell(L.iid, J.AGGREGATION);
                            O.setMetadata(F, L);
                            if (L.rowHeaderIid) {
                                var H = this._getLazyCell(L.rowHeaderIid, J.HEADER);
                                H.headerType = "aggregation"
                            }
                            if (L.columnHeaderIid) {
                                var H = this._getLazyCell(L.columnHeaderIid, J.HEADER);
                                H.headerType = "aggregation"
                            }
                            if (L.measureIid) {
                                this._getLazyCell(L.measureIid, J.MEASURE)
                            }
                            this.aggregations.push(O)
                        }
                    }
                }
            }
            if (C.levels) {
                this.levels = [];
                for (var E = 0; E < 2; E++) {
                    var I = C.levels[E];
                    var N = [];
                    for (var K = 0; K < I.length; K++) {
                        var P = I[K];
                        var O = this._getLazyCell(P.iid, J.LEVEL);
                        if (P.headerIid) {
                            this._getLazyCell(P.headerIid, J.HEADER)
                        }
                        O.setMetadata(F, P);
                        N.push(O)
                    }
                    this.levels.push(N)
                }
            }
            if (C.headers) {
                this.headers = [];
                for (var E = 0; E < 2; E++) {
                    var M = C.headers[E];
                    var O = null;
                    if (M) {
                        O = this._getLazyCell(M.iid, J.HEADER);
                        O.setMetadata(F, M)
                    }
                    this.headers.push(O)
                }
                for (var A = 2; A < C.headers.length; A++) {
                    var M = C.headers[A];
                    var O = null;
                    if (M) {
                        O = this._getLazyCell(M.iid, J.HEADER);
                        O.setMetadata(F, M);
                        O.displayText = M.displayText
                    }
                    this.headers.push(O)
                }
            }
        }
        return true
    },
    __getMetadata_Style: function () {
        return this
    },
    __setMetadata_Style: function (B) {
        if (B) {
            var D = actuate.model.Constant.MetadataType.STYLE;
            for (var C in B) {
                var A = this.cellsMap[C];
                if (!A) {
                    A = this._getLazyCell(C);
                    this.cellsMap[C] = A
                }
                A.setMetadata(D, B[C])
            }
            return true
        }
    },
    __getMetadata_DataFormat: function () {
        return this
    },
    __setMetadata_DataFormat: function (B) {
        if (B) {
            var D = actuate.model.Constant.MetadataType.DATA_FORMAT;
            for (var C in B) {
                var A = this.cellsMap[C];
                if (!A) {
                    A = this._getLazyCell(C);
                    this.cellsMap[C] = A
                }
                A.setMetadata(D, B[C])
            }
        }
        return true
    },
    __hasMetadata_DataItem: function () {
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.CrosstabModel.prototype, [actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.REPORT_ITEMS]);
actuate.util.Package.define("actuate.model");
actuate.model.ColumnModel = actuate.Class.create();
actuate.model.ColumnModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    table: null,
    type: "COLUMN",
    iid: null,
    index: null,
    visible: true,
    header: null,
    spanCount: null,
    groupName: null,
    bindingName: null,
    isHeader: null,
    isMergedColumn: null,
    isDetailsVisible: null,
    isGrouped: null,
    isEditableExpression: null,
    expression: null,
    suppressDuplicates: null,
    style: null,
    headerStyle: null,
    dataItems: null,
    _dataItemsMap: null,
    _binding: null,
    hasAction: null,
    bindingPosition: null,
    originalBindingName: null,
    initialize: function (D, A, C, B) {
        actuate.model.BaseModel.prototype.initialize.call(this, D, C, B);
        this.table = A;
        this.definition = null;
        this._dataItemsMap = null
    },
    getSortDirection: function (A) {
        var B = this.getBinding(A);
        return B && table.getSortDirection(B.name)
    },
    getDataItems: function () {
        if (!this._dataItemsMap) {
            this._dataItemsMap = {};
            for (var C = 0; C < this.dataItems.length; C++) {
                var A = this.dataItems[C];
                var B = this.table.getDataItem(A);
                if (B) {
                    this._dataItemsMap[A] = B
                }
            }
        }
        return this._dataItemsMap
    },
    getBinding: function (A) {
        if (A) {
            var B = this.table.getDataItem(A);
            return B && B.getBinding()
        } else {
            if (!this._binding && this.bindingName) {
                this._binding = this.table.getBinding(this.bindingName)
            }
            return this._binding
        }
    },
    getBindings: function () {
        var D = [];
        if (this.isMergedColumn) {
            for (var C = 0; C < this.dataItems.length; C++) {
                var A = this.dataItems[C];
                var B = this.table.getDataItem(A);
                if (B) {
                    D.push(B.getBinding())
                }
            }
        } else {
            if (this.bindingName) {
                D.push(this.getBinding())
            }
        }
        return D
    },
    getDataType: function (A) {
        var B = this.getBinding(A);
        if (B) {
            return B.dataType
        } else {
            return null
        }
    },
    getGroup: function () {
        if (this.groupName) {
            return this.table.getGroup(this.groupName)
        } else {
            return null
        }
    },
    isHiddenGroupDetail: function () {
        var A = this.getGroup();
        return A && A.isHiddenDetail
    },
    __getMetadata_Base: function () {
        return this
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this.iid = A.iid;
            this.index = A.index;
            this.dataItems = A.dataItems;
            this.isHeader = A.isHeader;
            this.header = A.header;
            this.spanCount = A.spanCount;
            this.isMergedColumn = A.dataItems && (A.dataItems.length > 1);
            this.isDetailsVisible = A.isDetailsVisible;
            this.isGrouped = A.isGrouped;
            this.suppressDuplicates = A.suppressDuplicates;
            this.isEditableExpression = A.isEditableExpression;
            this.groupName = A.groupName;
            this.bindingName = A.bindingName;
            this.visible = A.visibility == false ? false : true;
            this.expression = A.expression;
            this.calculationInfo = A.calculationInfo;
            this.hasAction = A.hasAction;
            this.bindingPosition = A.bindingPosition != null ? A.bindingPosition : null;
            this.originalBindingName = A.originalBindingName
        }
        this._binding = null;
        this._bindings = null;
        this._dataItemsMap = null;
        return true
    },
    __getMetadata_Style: function () {
        return this.headerStyle
    },
    __setMetadata_Style: function (A) {
        if (A) {
            this.headerStyle = new actuate.model.Font(A.headerStyle);
            this.style = new actuate.model.Font(A.style)
        }
        return true
    }
});
actuate.util.Package.define("actuate.model");
actuate.model.DataFormat = actuate.Class.create();
actuate.model.DataFormat.prototype = {
    iid: null,
    category: null,
    locale: null,
    pattern: null,
    decimalPlaces: null,
    symbol: null,
    symbolPosition: null,
    negativeNumberFormat: null,
    useSeparator: null,
    roundingMode: null,
    initialize: function (A) {
        if (A) {
            this.iid = A.iid;
            this.category = A.category;
            this.locale = A.locale;
            this.pattern = A.pattern;
            this.decimalPlaces = A.decimalPlaces ? parseInt(A.decimalPlaces) : null;
            this.symbol = A.symbol;
            this.symbolPosition = (A.symbolPosition || A.symbolPosition == 0) ? parseInt(A.symbolPosition) : null;
            this.negativeNumberFormat = A.negativeNumberFormat;
            this.useSeparator = A.useSeparator ? true : false;
            this.roundingMode = A.roundingMode
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.DataItemModel = actuate.Class.create();
actuate.model.DataItemModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.DATAITEM,
    parentItem: null,
    bindingName: null,
    groupName: null,
    filterList: null,
    _binding: null,
    initialize: function (D, C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, D, C, B);
        this.parentItem = A;
        this._binding = null;
        this.formatRules = null
    },
    getBinding: function () {
        if (!this._binding && this.bindingName && this.parentItem && this.parentItem.getBinding) {
            this._binding = this.parentItem.getBinding(this.bindingName)
        }
        return this._binding
    },
    getDataType: function () {
        var A = this.getBinding();
        if (A) {
            return A.dataType
        } else {
            return null
        }
    },
    getGroup: function () {
        if (this.groupName && this.parentItem && this.parentItem.getGroup) {
            return this.parentItem.getGroup(this.groupName)
        }
        return null
    },
    isHiddenGroupDetail: function () {
        if (this.groupName && this.parentItem && this.parentItem.getGroup) {
            var A = this.parentItem.getGroup(this.groupName);
            return A && A.isHiddenDetail
        }
        return false
    },
    isGroupLevel: function () {
        if (this._groupLevel == null) {
            var B = this.getBinding();
            var A = B && this._isInGroup();
            if (A) {
                if (!(B && B.isAggregation) && !this.groupName) {
                    A = false
                }
            }
            this._groupLevel = A ? true : false
        }
        return this._groupLevel
    },
    _isInGroup: function () {
        if (this.dom && this.parentItem) {
            var A = this.dom;
            while (A != this.parentItem.dom) {
                var B = null;
                A = A.parentNode;
                if (A == null || A.tagName == null) {
                    break
                }
                if (A.tagName.toLowerCase() == "tr") {
                    B = A.getAttribute("row-type");
                    if (B == "group-header" || B == "group-footer") {
                        return true
                    }
                }
            }
        }
        return false
    },
    getSortDirection: function () {
        var A = this.getGroup();
        if (A) {
            return A.sortDirection
        }
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this._groupLevel = null;
            this.groupName = A.groupName;
            this.bindingName = A.bindingName
        }
        return true
    },
    __getMetadata_Base: function () {
        return this
    },
    __hasMetadata_ColumnDef: function () {
        return true
    },
    __getMetadata_Binding: function () {
        return this.bindingsMap
    },
    __setMetadata_Binding: function (A) {
        this.bindingsMap = {};
        if (A) {
            this._binding = new actuate.model.Binding(this.documentModel, A, this)
        }
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.DataItemModel.prototype, [actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.DATA_FORMAT, actuate.model.Constant.MetadataType.STYLE]);
actuate.util.Package.define("actuate.model");
actuate.model.DocumentModel = actuate.Class.create();
actuate.Class.extend(actuate.model.DocumentModel, {
    _instance: null, getInstance: function () {
        if (!actuate.model.DocumentModel._instance) {
            actuate.model.DocumentModel._instance = new actuate.model.DocumentModel()
        }
        return actuate.model.DocumentModel._instance
    }
});
actuate.model.DocumentModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.DOCUMENT,
    resultSetsMap: null,
    resultSetsOrder: null,
    elements: null,
    initialize: function () {
        actuate.model.BaseModel.prototype.initialize.call(this, this, null);
        this.iid = "Document";
        this.clear()
    },
    _createElement_TABLE: function (B, A) {
        return new actuate.model.TableModel(this, B, A)
    },
    _createElement_SUMMARYTABLE: function (B, A) {
        return new actuate.model.SummaryTableModel(this, B, A)
    },
    _createElement_CHART: function (B, A) {
        return new actuate.model.ChartModel(this, B, A, false)
    },
    _createElement_FLASHCHART: function (B, A) {
        return new actuate.model.ChartModel(this, B, A, true)
    },
    _createElement_FLASHGADGET: function (B, A) {
        return new actuate.model.FlashGadgetModel(this, B, A)
    },
    _createElement_HTML5GADGET: function (B, A) {
        return new actuate.model.HTML5GadgetModel(this, B, A)
    },
    _createElement_FLASHOBJECT: function (B, A) {
        return new actuate.model.FlashObjectModel(this, B, A)
    },
    _createElement_CROSSTAB: function (B, A) {
        return new actuate.model.CrosstabModel(this, B, A)
    },
    _createElement_LABEL: function (B, A) {
        return new actuate.model.LabelModel(this, B, A)
    },
    _createElement_TEXT: function (B, A) {
        return new actuate.model.LabelModel(this, B, A)
    },
    _createElement_DATAITEM: function (B, A) {
        return new actuate.model.DataItemModel(this, B, A)
    },
    _createElement_SELECTOR: function (B, A) {
        return new actuate.model.SelectorModel(this, B, A)
    },
    _createElement_SUBLIST: function (B, A) {
        return new actuate.model.SubscriptionList(this, B, A)
    },
    _createElement_HTMLCONTROL: function (B, A) {
        return new actuate.model.HTMLControlModel(this, B, A)
    },
    _createElement_SINGLEMETRIC: function (B, A) {
        return new actuate.model.SingleMetricModel(this, B, A)
    },
    createElement: function (D, B, E) {
        var C = null;
        var A = this.documentModel["_createElement_" + B];
        if (A) {
            C = A.call(this, E, D)
        } else {
            C = {iid: D, type: B || actuate.Constant.element.UNKNOWN}
        }
        this.elements[D] = C;
        return C
    },
    clear: function () {
        this.elements = {};
        this.children = [];
        this._metadata = {};
        this.resultSetsMap = {};
        this.resultSetsOrder = []
    },
    __addItem: function (B, A) {
        this.elements[B] = A
    },
    registerItemByIid: function (D, A, E) {
        if (A != null && (A.toUpperCase() == "FLASHCHART" || A.toUpperCase() == "FLASHGADGET" || A.toUpperCase() == "CHART") && D != null && D.lastIndexOf("/") > 0) {
        } else {
            D = actuate.util.Utility.getDesignId(D)
        }
        var C = this.elements[D];
        if (!C) {
            if (!A) {
                A = E.getAttribute("element_type")
            }
            var B = this["_createElement_" + A];
            if (B) {
                C = B.call(this, E, D);
                this.elements[C.iid || D] = C
            }
        } else {
            C.dom = E;
            C.id = E.getAttribute("id")
        }
        return C
    },
    deRegisterItemByIid: function (B) {
        var A = this.elements[B];
        if (A) {
            this.removeItem(A)
        }
    },
    registerItem: function (C, A) {
        if (!C) {
            return null
        }
        var B = C.getAttribute("iid");
        if (B) {
            return this.registerItemByIid(B, A, C)
        }
        return null
    },
    removeItem: function (B) {
        var C = B.iid;
        if (C && this.elements[C]) {
            B.clear();
            if (B.parentIid) {
                var A = this.documentModel.elements[B.parentIid];
                if (A && A.children) {
                    actuate.util.Utility.arrayRemoveValue(A.children, B.iid)
                }
            }
            delete this.elements[C]
        }
    },
    getElementByIId: function (A) {
        A = actuate.util.Utility.getDesignId(A);
        return this.elements[A]
    },
    getElementBySId: function (B, A) {
        if (A != null && (A.toUpperCase() == "FLASHCHART" || A.toUpperCase() == "FLASHGADGET" || A.toUpperCase() == "CHART") && B != null && B.lastIndexOf("/") > 0 && this.elements[B] != null) {
            return this.elements[B]
        }
        return this.getElementByIId(B)
    },
    getKnownDesignIds: function () {
        var B = actuate.model.Constant.MetadataType.FEATURES;
        var D = [];
        for (var C in this.elements) {
            var A = this.elements[C];
            if (A.hasMetadata && A.hasMetadata(B)) {
                D.push(C.substr(1))
            }
        }
        return D
    },
    __invalidateMetadata_All: function () {
        this.clear()
    },
    getResultSets: function () {
        if (this.resultSetsOrder.length == 0) {
            return []
        }
        var A = [];
        for (var B = 0; B < this.resultSetsOrder.length; B++) {
            A.push(this.resultSetsMap[this.resultSetsOrder[B]])
        }
        return A
    },
    __setMetadata_ResultSet: function (D) {
        if (D) {
            this.resultSetsMap = {};
            this.resultSetsOrder = [];
            for (var A = 0; A < D.length; A++) {
                var C = D[A];
                var B = new actuate.model.ResultSetMetadata(C);
                this.resultSetsMap[B.name] = B;
                this.resultSetsOrder.push(B.name)
            }
        }
        return true
    },
    __getMetadata_ThemeStyles: function () {
        return this.ThemeStyles
    },
    __setMetadata_ThemeStyles: function (A) {
        if (A) {
            this.ThemeStyles = A
        }
        return true
    },
    __getMetadata_ResultSet: function () {
        return this.getResultSets()
    },
    __hasMetadata_ResultSet: function () {
        return false
    },
    __invalidateMetadata_ResultSet: function () {
        this.resultSetsMap = {};
        this.resultSetsOrder = [];
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.DocumentModel.prototype, [actuate.model.Constant.MetadataType.REPORT_ITEMS]);
actuate.util.Package.define("actuate.model");
actuate.model.FilterCondition = actuate.Class.create();
actuate.model.FilterCondition.prototype = {
    logicOp: null,
    hasLeftBracket: false,
    hasRightBracket: false,
    hasNot: false,
    row: null,
    operator: null,
    operands: null,
    initialize: function (A) {
        if (A) {
            this.logicOp = A.logicOp;
            this.hasLeftBracket = A.hasLeftBracket ? true : false;
            this.hasRightBracket = A.hasRightBracket ? true : false;
            this.hasNot = A.hasNot ? true : false;
            this.row = A.row || A.bindingName;
            this.operator = A.operator;
            this.operands = A.operands
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.FilterList = actuate.Class.create();
actuate.model.FilterList.prototype = {
    isAdvancedFilter: null, simpleFilters: null, initialize: function (E) {
        if (E) {
            this.isAdvancedFilter = E.isAdvanced;
            this.hasAggregation = E.hasAggregation;
            this.updateAggregation = E.updateAggregation;
            this.simpleFilters = null;
            this.filters = E.filters;
            this.topBottomFilter = E.topBottomFilter;
            if (E.filters != null && E.filters.length > 0) {
                if (this.isAdvancedFilter) {
                    for (var B = 0; B < this.filters.length; B++) {
                        this.filters[B] = new actuate.model.FilterCondition(this.filters[B])
                    }
                } else {
                    for (var B = 0; B < this.filters.length; B++) {
                        this.filters[B] = new actuate.model.SimpleFilter(this.filters[B])
                    }
                }
            }
            if (E.topBottomFilter != null && E.topBottomFilter.length > 0) {
                for (var B = 0; B < this.topBottomFilter.length; B++) {
                    this.topBottomFilter[B] = new actuate.model.SimpleFilter(this.topBottomFilter[B])
                }
            }
            if (E.advancedFilters != null && E.advancedFilters.length > 0) {
                this.advancedFilters = E.advancedFilters;
                for (var B = 0; B < this.advancedFilters.length; B++) {
                    var D = this.advancedFilters[B];
                    if (D != null && D.length > 0) {
                        for (var A = 0; A < D.length; A++) {
                            D[A] = new actuate.model.FilterCondition(D[A])
                        }
                        this.advancedFilters[B] = D
                    }
                }
            }
            if (E.designtimeFilters != null && E.designtimeFilters.length > 0) {
                this.designtimeFilters = E.designtimeFilters;
                for (var B = 0; B < this.designtimeFilters.length; B++) {
                    if (E.filterTarget && E.filterTarget == "selector") {
                        this.designtimeFilters[B] = new actuate.model.FilterCondition(this.designtimeFilters[B])
                    } else {
                        var C = new actuate.model.SimpleFilter(this.designtimeFilters[B]);
                        this.designtimeFilters[B] = new actuate.model.FilterCondition(C.toFilterCondition())
                    }
                }
            }
            if (E.measureFilters != null && E.measureFilters.length > 0) {
                this.measureFilters = E.measureFilters;
                for (var B = 0; B < this.measureFilters.length; B++) {
                    var C = new actuate.model.SimpleFilter(this.measureFilters[B]);
                    this.measureFilters[B] = new actuate.model.FilterCondition(C.toFilterCondition())
                }
            }
        }
    }, getSimpleFilter: function (B) {
        if (this.isAdvancedFilter) {
            return null
        }
        for (var A = 0; A < this.filters.length; A++) {
            if (this.filters[A].bindingName == B) {
                return this.filters[A]
            }
        }
    }, getTopBottomFilter: function (B) {
        if (this.topBottomFilter) {
            for (var A = 0; A < this.topBottomFilter.length; A++) {
                if (this.topBottomFilter[A].bindingName == B) {
                    return this.topBottomFilter[A]
                }
            }
        }
    }, toAdvancedFilter: function (D) {
        if (this.isAdvancedFilter) {
            return this
        }
        var A = new actuate.model.FilterList();
        A.isAdvancedFilter = true;
        A.filters = [];
        for (var C = 0; C < this.filters.length; C++) {
            var B = this.filters[C].toFilterCondition();
            if (A.filters.length > 0) {
                B.logicOp = "and"
            }
            A.filters.push(B)
        }
        return A
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.FlashGadgetModel = actuate.Class.create();
(function () {
    var A = actuate.Constant.GadgetType;
    actuate.Class.extend(actuate.model.FlashGadgetModel, {COMPATIBLE_TYPES: [[A.Spark], [A.LinearGauge, A.Meter], [A.Bullet, A.Cylinder, A.Thermometer]]})
})();
actuate.model.FlashGadgetModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.FLASHGADGET,
    gadgetType: null,
    isSharedBinding: null,
    isAllowExport: null,
    isView: null,
    hasBoundData: null,
    gadget: null,
    canDrillUpFromCategories: null,
    canDrillUpFromSeries: null,
    canDrillDownFromCategories: null,
    canDrillDownFromSeries: null,
    copyHyperlink: null,
    isFlashGadget: null,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A)
    },
    getCompatibleTypes: function (D) {
        var G = actuate.model.FlashGadgetModel.COMPATIBLE_TYPES;
        var F = null;
        if (!actuate.util.Utility.isEmpty(D, false)) {
            F = D
        } else {
            F = this.gadgetType
        }
        var E = null;
        var A;
        for (var C = 0; C < G.length; C++) {
            E = G[C];
            for (A = 0; A < E.length; A++) {
                if (E[A] == F) {
                    break
                }
            }
            if (A < E.length) {
                break
            }
        }
        var B = [];
        if (E != null) {
            for (var C = 0; C < E.length; C++) {
                if (E[C] != F) {
                    B.push(E[C])
                }
            }
        }
        return B
    },
    __getMetadata_gadget: function () {
        return this
    },
    __setMetadata_gadget: function (A) {
        if (A) {
            this.gadget = A
        }
        return true
    },
    __getMetadata_Base: function () {
        return this
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this.gadgetType = A.gadgetType;
            this.isView = A.isView ? true : false;
            this.isSharedBinding = A.isSharedBinding ? true : false;
            this.hasBindings = A.hasBoundData;
            this.isAllowExport = A.isAllowExport;
            this.copyHyperlink = A.copyHyperlink;
            this.isFlashGadget = A.isFlashGadget
        }
        return true
    },
    __getMetadata_CanDrill: function () {
        return this
    },
    __setMetadata_CanDrill: function (A) {
        if (A) {
            this.canDrillUpFromCategories = A.canDrillUpFromCategories ? true : false;
            this.canDrillUpFromSeries = A.canDrillUpFromSeries ? true : false;
            this.canDrillDownFromCategories = A.canDrillDownFromCategories ? true : false;
            this.canDrillDownFromSeries = A.canDrillDownFromSeries ? true : false
        }
        return true
    },
    __hasMetadata_ColumnDef: function () {
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.FlashGadgetModel.prototype, [actuate.model.Constant.MetadataType.BINDING, actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.RESULT_SET, actuate.model.Constant.MetadataType.CAN_DRILL, actuate.model.Constant.MetadataType.GADGET]);
actuate.util.Package.define("actuate.model");
actuate.model.HTML5GadgetModel = actuate.Class.create();
actuate.model.HTML5GadgetModel.prototype = actuate.Class.extend(new actuate.model.FlashGadgetModel(), {type: actuate.Constant.element.HTML5GADGET});
actuate.util.Package.define("actuate.model");
actuate.model.FlashObjectModel = actuate.Class.create();
actuate.model.FlashObjectModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.FLASHOBJECT,
    isSharedBinding: null,
    hasBoundData: null,
    isAllowExport: null,
    flashComponentType: null,
    canDrillUpFromCategories: null,
    canDrillUpFromSeries: null,
    canDrillDownFromCategories: null,
    canDrillDownFromSeries: null,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A)
    },
    __getMetadata_Base: function () {
        return this
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this.isSharedBinding = A.isSharedBinding;
            this.hasBindings = A.hasBoundData;
            this.isAllowExport = A.isAllowExport;
            this.flashComponentType = A.flashComponentType
        }
        return true
    },
    __getMetadata_CanDrill: function () {
        return this
    },
    __setMetadata_CanDrill: function (A) {
        if (A) {
            this.canDrillUpFromCategories = A.canDrillUpFromCategories ? true : false;
            this.canDrillUpFromSeries = A.canDrillUpFromSeries ? true : false;
            this.canDrillDownFromCategories = A.canDrillDownFromCategories ? true : false;
            this.canDrillDownFromSeries = A.canDrillDownFromSeries ? true : false
        }
        return true
    },
    __hasMetadata_ColumnDef: function () {
        return this._metadata.ColumnDef ? true : false
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.FlashObjectModel.prototype, [actuate.model.Constant.MetadataType.BINDING, actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.RESULT_SET, actuate.model.Constant.MetadataType.CAN_DRILL]);
actuate.util.Package.define("actuate.model");
actuate.model.Font = actuate.Class.create();
actuate.model.Font.prototype = {
    family: null,
    style: null,
    size: null,
    effect: null,
    weight: null,
    color: null,
    backgroundColor: null,
    bold: null,
    italic: null,
    underline: null,
    alignment: null,
    borderColor: null,
    borderStyle: null,
    borderSize: null,
    initialize: function (A) {
        if (A) {
            this.family = A.family || null;
            this.style = A.style || null;
            this.size = A.size || null;
            this.effect = A.effect || null;
            this.weight = A.weight || null, this.color = A.color || null;
            this.backgroundColor = A.backgroundColor || null;
            this.bold = A.bold ? true : false;
            this.italic = A.italic ? true : false;
            this.underline = A.underline ? true : false;
            this.alignment = A.alignment || null;
            this.borderColor = A.borderColor || null;
            this.borderSize = A.borderSize || null;
            this.borderStyle = A.borderStyle || null
        }
    },
    isEmpty: function () {
        if (this.backgroundColor == null && this.family == null && this.color == null && this.weight == null) {
            return true
        }
        return false
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.FormatRule = actuate.Class.create();
actuate.model.FormatRule.prototype = {
    bindingName: null, condition: null, effect: null, initialize: function (A) {
        if (A) {
            this.bindingName = A.bindingName;
            this.effect = new actuate.model.Font(A.effect);
            this.condition = new actuate.model.FilterCondition(A)
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.LabelModel = actuate.Class.create();
actuate.model.LabelModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.LABEL,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A)
    },
    __hasMetadata_Base: function () {
        return true
    },
    __hasMetadata_Features: function () {
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.LabelModel.prototype, [actuate.model.Constant.MetadataType.STYLE]);
actuate.util.Package.define("actuate.model");
actuate.model.Group = actuate.Class.create();
actuate.model.Group.prototype = {
    name: null,
    index: null,
    intervalType: null,
    isHiddenDetail: null,
    sortDirection: null,
    sortKey: null,
    headerCount: null,
    footerCount: null,
    pageBreakBefore: null,
    pageBreakAfter: null,
    initialize: function (C, B, A) {
        if (B) {
            this.isHiddenDetail = B.isHiddenDetail;
            this.sortDirection = B.sortDirection;
            this.sortKey = B.sortKey;
            this.name = B.name;
            this.index = B.index;
            this.intervalType = B.intervalType;
            this.headerCount = B.headerCount || 1;
            this.footerCount = B.footerCount || 0;
            this.pageBreakBefore = (B.pageBreakBefore || B.pageBreakBefore == 0) ? B.pageBreakBefore : 3;
            this.pageBreakAfter = (B.pageBreakAfter || B.pageBreakAfter == 0) ? B.pageBreakAfter : 3
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.ResultSetMetadata = actuate.Class.create();
actuate.model.ResultSetMetadata.prototype = {
    iid: null, name: null, columns: null, initialize: function (C) {
        if (C) {
            this.iid = C.iid;
            this.name = C.name;
            this.isCube = C.isCube;
            this.displayName = C.displayName;
            this.columns = [];
            if (C.columns) {
                for (var B = 0; B < C.columns.length; B++) {
                    var A = C.columns[B];
                    this.columns.push({name: A.name, label: A.label || A.name, dataType: A.dataType})
                }
            }
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.SimpleFilter = actuate.Class.create();
actuate.model.SimpleFilter.prototype = {
    bindingName: null,
    operator: null,
    values: null,
    updateAggregation: null,
    logicOp: null,
    initialize: function (A) {
        if (A) {
            this.bindingName = A.bindingName;
            this.operator = A.operator;
            this.values = A.values;
            this.updateAggregation = A.updateAggregation;
            this.logicOp = A.logicOp
        }
    },
    toFilterCondition: function () {
        var A = new actuate.model.FilterCondition();
        A.row = this.bindingName;
        A.logicOp = this.logicOp;
        A.operator = this.operator;
        if (this.operator == "in" || this.operator == "BirtComp.anyOf") {
            A.operator = "BirtComp.anyOf";
            var B = [];
            B.push({anyOfLiteral: this.values});
            A.operands = B
        } else {
            if (this.operator == "not-in" || this.operator == "!BirtComp.anyOf") {
                A.operator = "!BirtComp.anyOf";
                var B = [];
                B.push({anyOfLiteral: this.values});
                A.operands = B
            } else {
                var B = [];
                if (this.values) {
                    if (this.values.length > 0) {
                        B.push({literal: this.values[0]})
                    }
                    if (this.values.length > 1) {
                        B.push({literal: this.values[1]})
                    }
                }
                A.operands = B
            }
        }
        return A
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.SingleMetricModel = actuate.Class.create();
actuate.model.SingleMetricModel.prototype = actuate.Class.extend(new actuate.model.FlashGadgetModel(), {type: actuate.Constant.element.SINGLEMETRIC});
actuate.util.Package.define("actuate.model");
actuate.model.Sort = actuate.Class.create();
actuate.model.Sort.prototype = {
    index: null, bindingName: null, sortDirection: null, initialize: function (C, B, A) {
        if (B) {
            this.index = B.index;
            this.bindingName = B.bindingName;
            this.sortDirection = B.sortDirection
        }
    }
};
actuate.util.Package.define("actuate.model");
actuate.model.TableModel = actuate.Class.create();
actuate.model.TableModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.TABLE,
    columnsMap: null,
    columnsOrder: null,
    groupsMap: null,
    groupsOrder: null,
    sorts: null,
    formatRules: null,
    aggregations: null,
    dataItemsMap: null,
    hasAdvancedFilter: null,
    isSharedBinding: null,
    isAllowExport: null,
    isView: null,
    canSwitchView: null,
    canSecureDeleteLastGroup: null,
    pageBreakInterval: null,
    isSummaryTable: null,
    gadget: null,
    copyHyperlink: null,
    tableSaw: null,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A);
        this.columnsMap = {};
        this.columnsOrder = [];
        this.bindingsMap = {};
        this.dataSetBindingsMap = {};
        this.dataSet = null;
        this.groupsMap = {};
        this.dataItemsMap = {};
        this.sorts = [];
        this.filterList = null;
        this.tableSaw = {}
    },
    _getLazyDataItem: function (B) {
        var A = this.dataItemsMap[B];
        if (!A) {
            A = this.documentModel.elements[B];
            if (!A) {
                A = new actuate.model.DataItemModel(this.documentModel, null, B, this);
                this.documentModel.__addItem(B, A)
            } else {
                A.parentItem = this
            }
            this.dataItemsMap[B] = A
        }
        return A
    },
    _getLazyColumn: function (B) {
        var A = this.columnsMap[B];
        if (!A) {
            A = new actuate.model.ColumnModel(this.documentModel, this, null, B);
            this.columnsMap[B] = A
        }
        return A
    },
    __getMetadata_Group: function () {
        return this.groupsMap
    },
    __setMetadata_Group: function (C) {
        this.groupsMap = {};
        if (C) {
            this.groupsOrder = [];
            for (var A in C) {
                var B = C[A];
                B.name = A;
                var D = new actuate.model.Group(this.documentModel, B, this);
                this.groupsMap[A] = D;
                this.groupsOrder[D.index] = A
            }
            return true
        }
    },
    __invalidateMetadata_Group: function () {
        this.groupsMap = {};
        this.groupsOrder = [];
        return true
    },
    __getMetadata_TableSaw: function () {
        return this.tableSaw
    },
    __setMetadata_TableSaw: function (A) {
        this.tableSaw = A;
        return true
    },
    __invalidateMetadata_TableSaw: function () {
        this.tableSaw = null
    },
    __getMetadata_Sort: function () {
        return this.sorts
    },
    __setMetadata_Sort: function (D) {
        this.sorts = [];
        if (D) {
            for (var A = 0; A < D.length; A++) {
                var C = D[A];
                C.index = A;
                var B = new actuate.model.Sort(this.documentModel, C, this);
                this.sorts[A] = B
            }
            return true
        }
    },
    __getMetadata_DataItem: function () {
        return this.dataItemsMap
    },
    __setMetadata_DataItem: function (C) {
        if (C) {
            var A = actuate.model.Constant.MetadataType.BASE;
            for (var D in C) {
                var B = this._getLazyDataItem(D);
                B.setMetadata(A, C[D])
            }
            return true
        }
    },
    __invalidateMetadata_DataItem: function () {
        for (var A in this.dataItemsMap) {
            this.documentModel.removeItem(this.dataItemsMap[A])
        }
        this.dataItemsMap = {};
        return true
    },
    __getMetadata_FormatRules: function () {
        return this.formatRules
    },
    __setMetadata_FormatRules: function (E) {
        if (E) {
            this.formatRules = {};
            for (var D in E) {
                var B = E[D];
                var G = [];
                for (var A = 0; A < B.length; A++) {
                    var C = B[A];
                    C.bindingName = D;
                    var F = new actuate.model.FormatRule(C);
                    G.push(F)
                }
                this.formatRules[D] = G
            }
            return true
        }
    },
    __invalidateMetadata_FormatRules: function () {
        this.formatRules = {};
        return true
    },
    __getMetadata_Aggregations: function () {
        return this.aggregations
    },
    __setMetadata_Aggregations: function (F) {
        if (F) {
            this.aggregations = {};
            for (var D in F) {
                var E = F[D];
                var B = [];
                for (var C = 0; C < E.length; C++) {
                    var G = E[C];
                    if (G.bindingName == null) {
                        G.bindingName = D
                    }
                    var A = new actuate.model.Aggregation(G);
                    B.push(A)
                }
                this.aggregations[D] = B
            }
            return true
        }
    },
    __invalidateMetadata_Aggregations: function () {
        this.aggregations = {};
        return true
    },
    __getMetadata_ColumnDef: function () {
        return this.columnsMap
    },
    __setMetadata_ColumnDef: function (D) {
        if (D) {
            var B = actuate.model.Constant.MetadataType.BASE;
            this.columnsOrder = [];
            for (var E in D) {
                var A = D[E];
                A.iid = E;
                var C = this._getLazyColumn(E);
                C.setMetadata(B, A);
                this.columnsOrder[C.index] = E
            }
            return true
        }
    },
    __invalidateMetadata_ColumnDef: function () {
        this.columnsOrder = [];
        this.columnsMap = {};
        return true
    },
    __getMetadata_DataSet: function () {
        return this.dataSet
    },
    __setMetadata_DataSet: function (A) {
        this.dataSet = A;
        return true
    },
    __setMetadata_Style: function (C) {
        if (C) {
            var E = actuate.model.Constant.MetadataType.STYLE;
            if (C.columnStyles) {
                for (var D in C.columnStyles) {
                    var B = this._getLazyColumn(D);
                    B.setMetadata(E, C.columnStyles[D])
                }
            }
            if (C.dataItemsStyles) {
                for (var D in C.dataItemsStyles) {
                    var A = this._getLazyDataItem(D);
                    A.setMetadata(E, C.dataItemsStyles[D])
                }
            }
            return true
        }
    },
    __getMetadata_Style: function () {
        return this
    },
    __invalidateMetadata_Style: function () {
        if (this.columnsOrder == null) {
            return true
        }
        for (var A = 0; A < this.columnsOrder.length; A++) {
            var B = this.columnsMap[A];
            if (B != null) {
                B.headerStyle = null;
                B.style = null
            }
        }
        return true
    },
    __setMetadata_DataFormat: function (B) {
        if (B) {
            var D = actuate.model.Constant.MetadataType.DATA_FORMAT;
            for (var C in B) {
                var A = this._getLazyDataItem(C);
                A.setMetadata(D, B[C])
            }
        }
        return true
    },
    __getMetadata_DataFormat: function () {
        return this
    },
    __getMetadata_gadget: function () {
        return this
    },
    __setMetadata_gadget: function (A) {
        if (A) {
            this.gadget = A
        }
        return true
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this.hasAdvancedFilter = A.hasAdvancedFilter;
            this.isSharedBinding = A.isSharedBinding;
            this.hasBindings = A.hasBoundData ? true : false;
            this.isView = A.isView;
            this.canSwitchView = A.canSwitchView;
            this.canSecureDeleteLastGroup = A.canSecureDeleteLastGroup;
            this.pageBreakInterval = A.pageBreakInterval ? A.pageBreakInterval : 0;
            this.isSummaryTable = A.isSummaryTable;
            this.copyHyperlink = A.copyHyperlink;
            this.isAllowExport = A.isAllowExport;
            return true
        }
    },
    __getMetadata_Base: function () {
        return this
    },
    getColumnCount: function () {
        if (this.columnsOrder) {
            return this.columnsOrder.length
        } else {
            return 0
        }
    },
    getColumn: function (A) {
        return this.columnsMap[A]
    },
    getColumnByIndex: function (A) {
        var B = this.columnsOrder[A];
        if (B) {
            return this.columnsMap[B]
        }
        return null
    },
    getGroupsArray: function () {
        if (!this.groupsOrder && !this.groupsMap) {
            return null
        }
        var A = [];
        for (var B = 0; B < this.groupsOrder.length; B++) {
            A.push(this.groupsMap[this.groupsOrder[B]])
        }
        return A
    },
    getColumnsArray: function () {
        if (!this.columnsOrder || !this.columnsMap) {
            return null
        }
        var B = [];
        for (var A = 0; A < this.columnsOrder.length; A++) {
            B.push(this.columnsMap[this.columnsOrder[A]])
        }
        return B
    },
    getBindingsArray: function () {
        if (!this.bindingsMap) {
            return null
        }
        var B = [];
        for (var A in this.bindingsMap) {
            B.push(this.bindingsMap[A])
        }
        return B
    },
    getDataSetBindingsArray: function () {
        if (!this.dataSetBindingsMap) {
            return null
        }
        var B = [];
        for (var A in this.dataSetBindingsMap) {
            B.push(this.dataSetBindingsMap[A])
        }
        return B
    },
    getGroup: function (A) {
        return this.groupsMap[A]
    },
    getDataItem: function (A) {
        return this.dataItemsMap[A]
    },
    getSortDirection: function (B) {
        if (!this.sorts) {
            return null
        }
        for (var A = 0; A < this.sorts.length; A++) {
            if (this.sorts[A].bindingName == B) {
                return this.sorts[A].sortDirection
            }
        }
        return null
    },
    clear: function () {
        for (var A in this.dataItemsMap) {
            this.documentModel.removeItem(this.dataItemsMap[A])
        }
        actuate.model.BaseModel.prototype.clear.call(this)
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.TableModel.prototype, [actuate.model.Constant.MetadataType.BINDING, actuate.model.Constant.MetadataType.DATASET_BINDING, actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.REPORT_ITEMS, actuate.model.Constant.MetadataType.RESULT_SET, actuate.model.Constant.MetadataType.GADGET]);
actuate.util.Package.define("actuate.model");
actuate.model.SummaryTableModel = actuate.Class.create();
actuate.model.SummaryTableModel.prototype = actuate.Class.extend(new actuate.model.TableModel(), {
    type: actuate.Constant.element.SUMMARYTABLE,
    initialize: function (C, B, A) {
        actuate.model.TableModel.prototype.initialize.call(this, C, B, A)
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.TableModel.prototype, [actuate.model.Constant.MetadataType.BINDING, actuate.model.Constant.MetadataType.DATASET_BINDING, actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.REPORT_ITEMS, actuate.model.Constant.MetadataType.RESULT_SET, actuate.model.Constant.MetadataType.GADGET]);
actuate.util.Package.define("actuate.model");
actuate.model.SelectorModel = actuate.Class.create();
actuate.model.SelectorModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: "Selector",
    _metadata: {},
    gadget: null,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A)
    },
    __getMetadata_gadget: function () {
        return this
    },
    __setMetadata_gadget: function (A) {
        if (A) {
            this.gadget = A
        }
        return true
    },
    __getMetadata_Base: function () {
        return this._metadata.Base
    },
    __getMetadata_Format: function () {
        return this._metadata.Format
    },
    __setMetadata_Base: function (A) {
        if (A) {
            this._metadata.Base = A
        }
        return this._metadata.Base
    },
    __setMetadata_Format: function (A) {
        if (A) {
            this._metadata.Format = A
        }
        return this._metadata.Format
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.SelectorModel.prototype, [actuate.model.Constant.MetadataType.GADGET, actuate.model.Constant.MetadataType.FILTER]);
actuate.util.Package.define("actuate.model");
actuate.model.SubscriptionList = actuate.Class.create();
actuate.model.SubscriptionList.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.SUBLIST,
    isCompleted: null,
    length: null,
    subscriptions: null,
    initialize: function (C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, C, B, A)
    },
    __getMetadata_SubscriptionList: function () {
        return this
    },
    __invalidateMetadata_SubscriptionList: function () {
        this.subscriptions = null;
        return true
    },
    __setMetadata_SubscriptionList: function (E) {
        if (E) {
            this.isCompleted = E.isCompleted || null;
            this.length = E.length || null;
            if (E.subs) {
                if (this.subscriptions == null) {
                    this.subscriptions = new Array()
                }
                if (E.subs) {
                    for (var B in E.subs) {
                        var C = E.subs[B];
                        var G = {
                            id: B,
                            displayName: C.displayName ? C.displayName : "",
                            fullPath: C.fullPath ? C.fullPath : "",
                            lastUpdatedTime: C.lastUpdatedTime ? C.lastUpdatedTime : "",
                            description: C.description ? C.description : "",
                            bookmark: C.bookmark ? C.bookmark : "",
                            sequenceNumber: C.sequenceNumber ? C.sequenceNumber : ""
                        };
                        if (C.parameters) {
                            G.parameters = new Array();
                            var F = C.parameters;
                            for (var A in F) {
                                var D = {name: A, value: F[A]};
                                G.parameters.push(D)
                            }
                        }
                        this.subscriptions.push(G)
                    }
                }
            }
        }
        return true
    },
    isEmpty: function () {
        if (this.subscriptions == null) {
            return true
        }
        return false
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.SubscriptionList.prototype, [actuate.model.Constant.MetadataType.SUBSCRIPTION_LIST]);
actuate.util.Package.define("actuate.model");
actuate.model.HTMLControlModel = actuate.Class.create();
actuate.model.HTMLControlModel.prototype = actuate.Class.extend(new actuate.model.BaseModel(), {
    type: actuate.Constant.element.HTMLCONTROL,
    isSharedBinding: null,
    isAllowExport: null,
    subType: null,
    width: null,
    height: null,
    title: {title: null, visible: null, autoTitle: null, font: null},
    initialize: function (D, C, B, A) {
        actuate.model.BaseModel.prototype.initialize.call(this, D, C, B)
    },
    __getMetadata_Base: function () {
        return this._metadata.Base
    },
    __setMetadata_DataSet: function (A) {
        this.dataSet = A;
        return true
    },
    __getMetadata_DataSet: function () {
        return this
    },
    __hasMetadata_ColumnDef: function () {
        return true
    },
    __getMetadata_Format: function () {
        return this
    },
    __setMetadata_Format: function (A) {
        if (A) {
        }
        return true
    }
});
actuate.model.MetadataHandlers.addMetadataHandlers(actuate.model.HTMLControlModel.prototype, [actuate.model.Constant.MetadataType.BINDING, actuate.model.Constant.MetadataType.DATASET, actuate.model.Constant.MetadataType.FILTER, actuate.model.Constant.MetadataType.RESULT_SET]);
actuate.util.Package.define("actuate.data");
actuate.data.BoundDataColumn = actuate.Class.create();
actuate.data.BoundDataColumn.prototype = {
    _TAG_NAME: "Name",
    _TAG_TYPE: "Type",
    _TAG_DISPLAY_NAME: "DisplayName",
    _TAG_DATA_TYPE: "DataType",
    _TAG_EXPRESSION: "Expression",
    _name: null,
    _expression: null,
    _type: null,
    _dataType: null,
    _displayName: null,
    _pattern: null,
    initialize: function () {
    },
    getName: function () {
        return this._name
    },
    setName: function (A) {
        this._name = A
    },
    getExpression: function () {
        return this._expression
    },
    setExpression: function (A) {
        this._expression = A
    },
    getType: function () {
        return this._type
    },
    setType: function (A) {
        this._type = A
    },
    getDataType: function () {
        return this._dataType
    },
    setDataType: function (A) {
        this._dataType = A
    },
    getDisplayName: function () {
        return this._displayName
    },
    setDisplayName: function (A) {
        this._displayName = A
    },
    getPattern: function () {
        return this._pattern
    },
    setPattern: function (A) {
        this._pattern = A
    },
    getSoapRequest: function (C, E) {
        var A = actuate.util.XmlDom.createElement(C, E);
        var B = actuate.util.XmlDom.createElement(C, this._TAG_NAME);
        A.appendChild(B);
        var D = C.createTextNode(this.getName());
        B.appendChild(D);
        return A
    },
    breakDownData: function (B) {
        if (B != null) {
            var A = actuate.iv.utility.ivUtility;
            this._name = A.getValueByTagName(B, this._TAG_NAME);
            this._displayName = A.getValueByTagName(B, this._TAG_DISPLAY_NAME);
            this._type = A.getValueByTagName(B, this._TAG_TYPE);
            this._dataType = A.getValueByTagName(B, this._TAG_DATA_TYPE);
            if (this._dataType) {
                this._dataType = parseInt(this._dataType)
            }
            this._expression = A.getValueByTagName(B, this._TAG_EXPRESSION)
        }
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.BoundDataColumnList = actuate.Class.create();
actuate.data.BoundDataColumnList.prototype = {
    _boundDataColumnList: null,
    _BOUNDDATACOLUMN: "BoundDataColumn",
    initialize: function () {
        this._boundDataColumnList = new Array()
    },
    getBoundDataColumnList: function () {
        return this._boundDataColumnList
    },
    setBoundDataColumn: function (A) {
        this._boundDataColumnList.push(A)
    },
    clearBoundDataColumnList: function () {
        this._boundDataColumnList.length = 0
    },
    getSoapRequest: function (E, F) {
        var D = actuate.util.XmlDom.createElement(E, F);
        var B = this.getBoundDataColumnList();
        for (var C = 0; C < B.length; C++) {
            if (B[C] != null) {
                var A = B[C].getSoapRequest(E, this._BOUNDDATACOLUMN);
                D.appendChild(A)
            }
        }
        return D
    },
    breakDownData: function (D) {
        var C = D.getElementsByTagName(this._BOUNDDATACOLUMN);
        for (var B = 0; B < C.length; B++) {
            var A = new actuate.iv.data.IVBoundDataColumn();
            A.breakDownData(C[B]);
            this._boundDataColumnList.push(A)
        }
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.ConditionLine = actuate.Class.create();
actuate.data.ConditionLine.prototype = {
    _TAG_LOGIC_OP: "LogicOp",
    _TAG_HASLEFTBRACKET: "HasLeftBracket",
    _TAG_HASNOT: "HasNot",
    _TAG_ROW: "Row",
    _TAG_OPERATOR: "Operator",
    _TAG_FILTEROPERAND: "FilterOperand",
    _TAG_HASRIGHTBRACKET: "HasRightBracket",
    _LITERAL: "Literal",
    _ANYOF_LITERAL: "AnyOfLiteral",
    _DATA_FIELD: "DataField",
    _logicOp: null,
    _hasLeftBracket: false,
    _hasNot: false,
    _row: null,
    _operator: null,
    _hasRightBracket: false,
    _filterOperands: null,
    initialize: function () {
    },
    getLogicOp: function () {
        return this._logicOp
    },
    setLogicOp: function (A) {
        this._logicOp = A
    },
    getHasLeftBracket: function () {
        return this._hasLeftBracket
    },
    setHasLeftBracket: function (A) {
        this._hasLeftBracket = A
    },
    getHasRightBracket: function () {
        return this._hasRightBracket
    },
    setHasRightBracket: function (A) {
        this._hasRightBracket = A
    },
    getHasNot: function () {
        return this._hasNot
    },
    setHasNot: function (A) {
        this._hasNot = A
    },
    getRow: function () {
        return this._row
    },
    setRow: function (A) {
        this._row = A
    },
    getOperator: function () {
        return this._operator
    },
    setOperator: function (A) {
        this._operator = A
    },
    getFilterOperands: function () {
        return this._filterOperands
    },
    setFilterOperands: function (A) {
        this._filterOperands = A
    },
    resetValues: function () {
        this._logicOp = null;
        this._hasLeftBracket = false;
        this._hasRightBracket = false;
        this._hasNot = false;
        this._row = null;
        this._operator = null;
        this._filterOperands = null
    },
    getSoapRequest: function (E, H) {
        var G = actuate.util.XmlDom.createElement(E, H);
        if (this._logicOp != null) {
            var F = actuate.util.XmlDom.createElement(E, this._TAG_LOGIC_OP);
            F.appendChild(E.createTextNode(this._logicOp));
            G.appendChild(type)
        }
        var C = actuate.util.XmlDom.createElement(E, this._TAG_HASLEFTBRACKET);
        C.appendChild(E.createTextNode(this._hasLeftBracket ? "1" : "0"));
        G.appendChild(C);
        var I = actuate.util.XmlDom.createElement(E, this._TAG_HASNOT);
        I.appendChild(E.createTextNode(this._hasNot ? "1" : "0"));
        G.appendChild(I);
        var J = actuate.util.XmlDom.createElement(E, this._TAG_ROW);
        J.appendChild(E.createTextNode(this._row));
        G.appendChild(J);
        var B = actuate.util.XmlDom.createElement(this._TAG_OPERATOR);
        B.appendChild(E.createTextNode(this._operator));
        G.appendChild(B);
        if (this._filterOperands != null) {
            for (var D = 0; D < this._filterOperands.length; D++) {
                G.appendChild(this._filterOperands[D].getSoapRequest(E, this._TAG_FILTEROPERAND))
            }
        }
        var A = actuate.util.XmlDom.createElement(this._TAG_HASRIGHTBRACKET);
        A.appendChild(E.createTextNode(this._hasRightBracket ? "1" : "0"));
        G.appendChild(A)
    },
    setFromMetadata: function (C, B) {
        this._logicOp = C.logicOp;
        this._hasLeftBracket = C.hasLeftBracket ? true : false;
        this._hasRightBracket = C.hasRightBracket ? true : false;
        this._hasNot = C.hasNot ? true : false;
        this._row = C.row;
        this._operator = C.operator;
        var G = C.operands || [];
        var J = new Array();
        for (var E = 0; E < G.length; E++) {
            var F = G[E];
            if (F) {
                var K = F.anyOfLiteral;
                if (K != null && K.length > 0) {
                    var L = new Object();
                    L.isAnyOf = true;
                    L.isLiteral = true;
                    L.isDataField = false;
                    var I = "";
                    for (var D = 0; D < K.length; D++) {
                        var H = K[D];
                        if (D > 0) {
                            I += "|"
                        }
                        I += H
                    }
                    L.value = I;
                    L.boundDataColumn = null;
                    J.push(L)
                } else {
                    var H = F.literal;
                    if (F.dataField) {
                        var L = new Object();
                        L.isAnyOf = false;
                        L.isLiteral = false;
                        L.isDataField = true;
                        var A = B[F.dataField];
                        L.boundDataColumnName = A.name;
                        L.value = A.name;
                        J.push(L)
                    } else {
                        var L = new Object();
                        L.isAnyOf = false;
                        L.isLiteral = true;
                        L.isDataField = false;
                        L.value = H;
                        L.boundDataColumn = null;
                        J.push(L)
                    }
                }
            }
        }
        this.setFilterOperands(J)
    },
    toSimpleFilter: function () {
        var G = new actuate.data.Filters();
        G.setFilterType(actuate.data.Filters.FILTER_TYPE_SIMPLE);
        G.setOperator(this.getOperator());
        var F = new actuate.data.BoundDataColumn();
        F.setName(this.getRow());
        G.setColumnName(F);
        var B = [];
        var D = this.getFilterOperands();
        for (var E = 0; E < D.length; E++) {
            var A = D[E];
            if (A.isLiteral) {
                if (A.isAnyOf && A.value) {
                    var H = A.value.split("|");
                    for (var C = 0; C < H.length; C++) {
                        B.push('"' + H[C].replaceAll('"', '\\"') + '"')
                    }
                    break
                } else {
                    B.push(A.value)
                }
            }
        }
        G.setValueList(B);
        return G
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.Data = actuate.Class.create();
actuate.data.Data.prototype = {
    FONT: "Font",
    RESULTSETS: "ResultSets",
    FORMAT: "Format",
    TOC: "TOC",
    EXPORT: "Export",
    PARAMETE_RDEFINITIONS: "ParameterDefinitions",
    PARAMETER_SELECTIONS: "ParameterSelections",
    CASCADE_PARAMETER: "CascadeParameter",
    _TAG_FILTER: "Filter",
    _TAG_PARAMETERVALUES: "ParameterValues",
    FILTER_LIST: "FilterList",
    COLUMNVALUES: "ColumnValues",
    PAGE: "Page",
    DATASETS: "DataSets",
    EDITABLE_ITEMLIST: "EditableItemList",
    REPORT_ITEMLIST: "ReportItemList",
    THEMES: "Themes",
    _TAG_COLUMNDEFS: "ColumnDefs",
    GROUP_DETAIL: "GroupDetail",
    CELL_DEFS: "CellDefs",
    CELL_DEF: "CellDef",
    SECTION_DEF: "SectionDef",
    _TAG_CHART: "Chart",
    LABEL_TEXT: "LabelText",
    FILE_BROWSING: "FileBrowsing",
    FILE: "File",
    DATA_SOURCES: "DataSources",
    BINDING_LIST: "BindingList",
    DATASET_DEF: "DataSetDef",
    DATASETS_TOUSE: "DataSetsToUse",
    DESIGN_STATE: "DesignState",
    TOOLBAR_STATE: "ToolbarState",
    REDIRECT_URL: "RedirectURL",
    POPUP_URL: "PopupURL",
    PREVIEW_FORMAT: "PreviewFormat",
    PAGE_LAYOUT: "PageLayout",
    BRS_LAYOUT: "BRSLayout",
    BRD_EXPRESSION: "BRDExpression",
    JOIN_METADATA: "JoinMetadata",
    _TAG_BOUNDDATACOLUMNLIST: "BoundDataColumnList",
    IOINFO_LIST: "IOInfoList",
    TABLECOL_CONTEXTMENU: "TableColContextMenu",
    TABLESELECT_CONTEXTMENU: "TableSectContextMenu",
    TABLE_CONTEXTMENU: "TableContextMenu",
    TABLELAYOUT_LIST: "TableLayoutList",
    AVAILABLE_OPERATION: "AvailableOperation",
    SORTDEFINITION_LIST: "SortDefinitionList",
    CONDFORMATTING: "CondFormatting",
    VALUE_LIST: "ValueList",
    REPORTITEM_VISIBLE_LIST: "ReportItemVisibleList",
    MESSAGE_LIST: "MessageList",
    TEMPLATE_CATEGORY: "TemplateCategory",
    INITIALIZATIONID_LIST: "InitializationIdList",
    AVAILABLE_DATAITEM_LIST: "AvailableDataItemList",
    MERGE_SPLIT: "MergeSplit",
    INSERT_DELETE_ROW: "InsertDeleteRow",
    PRINTERS: "Printers",
    PRINTER_OPTIONS: "PrinterOptions",
    FORM_REQUEST: "FormRequest",
    DATASET_REORDER: "DataSetReorder",
    RESULTSETDATA: "ResultSetData",
    _TAG_LABELTEXT: "LabelText",
    _TAG_DATA: "Data",
    _TAG_RESULTSETREQUEST: "ResultSetRequest",
    initialize: function () {
    },
    getParameterValues: function (C, A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_PARAMETERVALUES));
        return B
    },
    getBoundDataColumnList: function (A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_BOUNDDATACOLUMNLIST));
        return B
    },
    getColumnDefinitionGroup: function (C, A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_COLUMNDEFS));
        return B
    },
    getResultSetRequest: function (C, A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_RESULTSETREQUEST));
        return B
    },
    getFilter: function (C, A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_FILTER));
        return B
    },
    getChartProperties: function (C, A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_CHART));
        return B
    },
    getLabelText: function (C, A) {
        var B = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, this._TAG_DATA);
        B.documentElement.appendChild(A.getSoapRequest(B, this._TAG_LABELTEXT));
        return B
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.ResultSetData = actuate.Class.create();
actuate.data.ResultSetData.prototype = {
    _TAG_COLUMNNAMES: "ColumnNames",
    _TAG_ROW: "Row",
    _TAG_ROW_COUNT: "RowCount",
    _TAG_ENDOF_RESULTSET: "EndOfResultSet",
    _columnNames: null,
    _rows: null,
    _rowCount: 0,
    _endOfResultSet: false,
    _cursor: 0,
    initialize: function (B) {
        this._columnNames = null;
        this._rows = [];
        this._rowCount = 0;
        this._endOfResultSet = true;
        if (!B) {
            return
        }
        if (B.columnNames) {
            this._columnNames = B.columnNames
        }
        if (B.rows) {
            this._rows = [];
            for (var A = 0; A < B.rows.length; A++) {
                var C = B.rows[A];
                if (!actuate.util.Utility.isArray(C)) {
                    C = [C]
                }
                this._rows.push(C)
            }
        }
        this.setRowCount(B.rowCount ? B.rowCount : 0);
        this.setEndOfResultSet(B.endOfResultSet ? true : false)
    },
    getColumnNames: function () {
        return this._columnNames
    },
    setColumnNames: function (A) {
        this._columnNames = A
    },
    getCursor: function () {
        return this._cursor
    },
    setCursor: function (A) {
        this._cursor = A
    },
    getRows: function () {
        return this._rows
    },
    setRows: function (A) {
        this._rows = A
    },
    getRowCount: function () {
        return this._rowCount
    },
    setRowCount: function (A) {
        this._rowCount = A
    },
    getEndOfResultSet: function () {
        return this._endOfResultSet
    },
    setEndOfResultSet: function (A) {
        this._endOfResultSet = A
    },
    getSoapRequest: function () {
    },
    getConvertedRows: function () {
        var D = null;
        var E = null;
        if (this._rows && this._rows.length > 0) {
            D = new Array();
            for (var B = 0; B < this._rows.length; B++) {
                var C = this._rows[B];
                if (C && C.length > 0) {
                    E = new Array();
                    for (var A = 0; A < this._rows[B].length; A++) {
                        E.push(C[A])
                    }
                    D.push(E)
                }
            }
        }
        return D
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.Filters = actuate.Class.create();
actuate.data.Filters.prototype = {
    FILTER_TYPE_SIMPLE: "Simple",
    FILTER_TYPE_ADVANCED: "Advanced",
    _TAG_LITERAL: "Literal",
    _TAG_FILTEROPERAND: "FilterOperand",
    _TAG_ANYOFLITERAL: "AnyOfLiteral",
    _TAG_COLUMNNAME: "ColumnName",
    _TAG_TYPE: "Type",
    _TAG_EXPRESSION: "Expression",
    _TAG_CLAUSE: "Clause",
    _TAG_FILTEROP: "FilterOp",
    _TAG_OPERAND: "Operand",
    _TAG_CONDITIONLINE: "ConditionLine",
    _TAG_CONDITIONLINELIST: "ConditionLineList",
    _TAG_UPDATEAGGREGATION: "UpdateAggregation",
    _filterType: null,
    _columnName: null,
    _operator: null,
    _valueList: null,
    _conditionLineList: null,
    _updateAggregation: null,
    initialize: function () {
    },
    getColumnName: function () {
        return this._columnName
    },
    setColumnName: function (A) {
        this._columnName = A
    },
    getFilterType: function () {
        return this._filterType
    },
    setFilterType: function (A) {
        this._filterType = A
    },
    getOperator: function () {
        return this._operator
    },
    setOperator: function (A) {
        this._operator = A
    },
    getValueList: function () {
        return this._valueList
    },
    setValueList: function (A) {
        this._valueList = A
    },
    getConditionLineList: function () {
        return this._conditionLineList
    },
    setConditionLineList: function (A) {
        this._conditionLineList = A
    },
    getUpdateAggregation: function () {
        return this._updateAggregation
    },
    setUpdateAggregation: function (A) {
        this._updateAggregation = A
    },
    getSoapRequest: function (B, C) {
        var A = actuate.util.XmlDom.createElement(B, C);
        if (this._filterType != this.FILTER_TYPE_ADVANCED) {
            this._getSimpleFilter(B, A)
        } else {
            this._getAdvancedFilter(B, A)
        }
        return A
    },
    _getSimpleFilter: function (G, C) {
        var J = actuate.util.XmlDom.createElement(G, this._TAG_TYPE);
        J.appendChild(G.createTextNode(this.FILTER_TYPE_SIMPLE));
        C.appendChild(J);
        var L = actuate.util.XmlDom.createElement(G, this._TAG_CLAUSE);
        var A = this.getColumnName();
        L.appendChild(A.getSoapRequest(G, this._TAG_COLUMNNAME));
        var K = actuate.util.XmlDom.createElement(G, this._TAG_FILTEROP);
        var H = G.createTextNode(this.getOperator());
        K.appendChild(H);
        L.appendChild(K);
        if (this.getValueList() != null && this._operator != "is-true" && this._operator != "is-false") {
            var E = actuate.util.XmlDom.createElement(G, this._TAG_OPERAND);
            var D = "";
            D = G.createTextNode(this.getValueList());
            E.appendChild(D);
            L.appendChild(E)
        }
        var I = actuate.util.XmlDom.createElement(G, this._TAG_EXPRESSION);
        I.appendChild(L);
        C.appendChild(I);
        if (this.getUpdateAggregation() != null) {
            var F = G.createTextNode(this.getUpdateAggregation() + "");
            var B = actuate.util.XmlDom.createElement(G, actuate.Constant.tag.UpdateAggregation);
            B.appendChild(F);
            C.appendChild(B)
        }
    },
    _getAdvancedFilter: function (C, B) {
        var A = actuate.util.XmlDom.createElement(C, this._TAG_TYPE);
        A.appendChild(C.createTextNode(this.FILTER_TYPE_ADVANCED));
        B.appendChild(A);
        if (this._conditionLineList != null) {
            B.appendChild(this._conditionLineList.getSoapRequest(C, this._TAG_CONDITIONLINELIST))
        }
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.FilterLists = actuate.Class.create();
actuate.data.FilterLists.prototype = {
    _TAG_FILTER: "Filter", _filterList: null, initialize: function () {
        this._filterList = new Array()
    }, getFilterList: function () {
        return this._filterList
    }, setFilter: function (A) {
        this._filterList.push(A)
    }, addFilter: function (A) {
        this._filterList.push(A)
    }, clearFilterList: function () {
        this._filterList.length = 0
    }, getSoapRequest: function (E, F) {
        var B = actuate.util.XmlDom.createElement(E, F);
        var D = this._filterList;
        for (var A = 0; A < D.length; A++) {
            if (D[A] != null) {
                var C = D[A].getSoapRequest(E, this._TAG_FILTER);
                B.appendChild(C)
            }
        }
        return B
    }, breakDownData: function (B) {
        var D = B.getElementsByTagName(this._TAG_FILTER);
        for (var A = 0; A < D.length; A++) {
            var C = new actuate.iv.data.IVFilter();
            if (D[A] != null) {
                C.breakDownData(D[A]);
                this._filterList.push(C)
            }
        }
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.TableColumnDefinition = actuate.Class.create();
actuate.data.TableColumnDefinition.prototype = {
    SORTDIR_ASC: "asc",
    SORTDIR_DESC: "desc",
    _TAG_BOUNDDATACOLUMN: "BoundDataColumn",
    _TAG_INDEX: "Index",
    _TAG_ISGROUPED: "IsGrouped",
    _TAG_IID: "Iid",
    _TAG_SORTDIR: "SortDir",
    _index: null,
    _iid: null,
    _header: null,
    _hidden: null,
    _dataType: null,
    _expr: null,
    _newIndex: null,
    _isGrouped: null,
    _pageBreak: null,
    _sortDir: null,
    _aggregate: null,
    _font: null,
    _format: null,
    _properties: null,
    _formatRuleSet: null,
    _boundDataColumn: null,
    _isCurrent: null,
    initialize: function () {
    },
    getIndex: function () {
        return this._index
    },
    setIndex: function (A) {
        this._index = A
    },
    getHeader: function () {
        return this._header
    },
    setHeader: function (A) {
        this._header = A
    },
    getIid: function () {
        return this._iid
    },
    setIid: function (A) {
        this._iid = A
    },
    getHidden: function () {
        return this._hidden
    },
    setHidden: function (A) {
        this._hidden = A
    },
    getDataType: function () {
        return this._dataType
    },
    setDataType: function (A) {
        this._dataType = A
    },
    getExpr: function () {
        return this._expr
    },
    setExpr: function (A) {
        this._header = _expr
    },
    getNewIndex: function () {
        return this._newIndex
    },
    setNewIndex: function (A) {
        this._newIndex = A
    },
    getIsGrouped: function () {
        return this._isGrouped
    },
    setIsGrouped: function (A) {
        this._isGrouped = A
    },
    getPageBreak: function () {
        return this._pageBreak
    },
    setPageBreak: function (A) {
        this._pageBreak = A
    },
    getSortDir: function () {
        return this._sortDir
    },
    setSortDir: function (A) {
        this._sortDir = A
    },
    getAggregate: function () {
        return this._aggregate
    },
    setAggregate: function (A) {
        this._aggregate = A
    },
    getFont: function () {
        return this._font
    },
    setFont: function (A) {
        this._font = A
    },
    getFormat: function () {
        return this._format
    },
    setFormat: function (A) {
        this._format = A
    },
    getProperties: function () {
        return this._properties
    },
    setProperties: function (A) {
        this._properties = A
    },
    getFormatRuleSet: function () {
        return this._formatRuleSet
    },
    setFormatRuleSet: function (A) {
        this._formatRuleSet = A
    },
    getBoundDataColumn: function () {
        return this._boundDataColumn
    },
    setBoundDataColumn: function (A) {
        this._boundDataColumn = A
    },
    getIsCurrent: function () {
        return this._isCurrent
    },
    setIsCurrent: function (A) {
        this._isCurrent = A
    },
    getSoapRequest: function (C, E) {
        var B = actuate.util.XmlDom.createElement(C, E);
        if (this._index != null) {
            var A = actuate.util.XmlDom.createElement(C, this._TAG_INDEX);
            var D = C.createTextNode(this._index);
            A.appendChild(D);
            B.appendChild(A)
        }
        if (this._iid != null) {
            A = actuate.util.XmlDom.createElement(C, this._TAG_IID);
            D = C.createTextNode(this._iid);
            A.appendChild(D);
            B.appendChild(A)
        }
        if (this._isGrouped) {
            A = actuate.util.XmlDom.createElement(C, this._TAG_ISGROUPED);
            A.appendChild(C.createTextNode(this._isGrouped));
            B.appendChild(A)
        }
        if (this._sortDir) {
            A = actuate.util.XmlDom.createElement(C, this._TAG_SORTDIR);
            A.appendChild(C.createTextNode(this._sortDir));
            B.appendChild(A)
        }
        if (this._boundDataColumn != null) {
            B.appendChild(this._boundDataColumn.getSoapRequest(C, this._TAG_BOUNDDATACOLUMN))
        }
        return B
    },
    breakDownData: function (D) {
        this.setHeader(D.getElementsByTagName(actuate.Constant.tag.HEADER)[0].firstChild.data);
        var B = actuate.iv.utility.ivUtility;
        this._dataType = B.getValueByTagName(D, "DataType");
        this._index = B.getValueByTagName(D, "Index");
        this._iid = B.getValueByTagName(D, "Iid");
        this._isGrouped = B.getValueByTagName(D, "IsGrouped") == "true";
        var A = D.getElementsByTagName(actuate.Constant.tag.BOUNDDATACOLUMN);
        var C = new actuate.iv.data.IVBoundDataColumn();
        C.breakDownData(A[0]);
        this.setBoundDataColumn(C)
    }
};
actuate.util.Package.define("actuate.data");
actuate.data.ColumnDefinitionGroup = actuate.Class.create();
actuate.data.ColumnDefinitionGroup.prototype = {
    _TAG_COLUMNDEF: "ColumnDef",
    _tableColumnDefinitionList: null,
    initialize: function () {
        this._tableColumnDefinitionList = new Array()
    },
    getTableColumnDefinitionList: function () {
        return this._tableColumnDefinitionList
    },
    addTableColumnDefinition: function (A) {
        this._tableColumnDefinitionList.push(A)
    },
    getSoapRequest: function (D, E) {
        var C = actuate.util.XmlDom.createElement(D, E);
        for (var A = 0; A < this._tableColumnDefinitionList.length; A++) {
            var B = this._tableColumnDefinitionList[A];
            if (B != null) {
                C.appendChild(B.getSoapRequest(D, this._TAG_COLUMNDEF))
            }
        }
        return C
    },
    breakDownData: function (D) {
        var A = D.getElementsByTagName(actuate.Constant.tag.COLUMNDEFS);
        var C = A[0].getElementsByTagName(this._TAG_COLUMNDEF);
        for (var B = 0; B < C.length; B++) {
            var E = new actuate.data.TableColumnDefinition();
            E.breakDownData(C[B]);
            this._tableColumnDefinitionList.push(E)
        }
    }
}
/*
 * HeadJS     The only script in your <HEAD>
 * Author     Tero Piirainen  (tipiirai)
 * Maintainer Robert Hoffmann (itechnology)
 * License    MIT / http://bit.ly/mit-license
 *
 * Version 0.99
 * http://headjs.com
 */
;(function (F, G) {
    var Z = F.document, H = F.navigator, J = F.location, L = Z.documentElement, K = [], I = {
        screens: [240, 320, 480, 640, 768, 800, 1024, 1280, 1440, 1680, 1920],
        screensCss: {gt: true, gte: false, lt: true, lte: false, eq: false},
        browsers: [{ie: {min: 6, max: 10}}],
        browserCss: {gt: true, gte: false, lt: true, lte: false, eq: true},
        section: "-section",
        page: "-page",
        head: "head"
    };
    if (F.head_conf) {
        for (var V in F.head_conf) {
            if (F.head_conf[V] !== G) {
                I[V] = F.head_conf[V]
            }
        }
    }

    function W(a) {
        K[K.length] = a
    }

    function N(a) {
        var b = new RegExp("\\b" + a + "\\b");
        L.className = L.className.replace(b, "")
    }

    function D(a, d) {
        for (var c = 0, b = a.length; c < b; c++) {
            d.call(a, a[c], c)
        }
    }

    var O = F[I.head] = function () {
        O.ready.apply(null, arguments)
    };
    O.feature = function (c, b, a) {
        if (!c) {
            L.className += " " + K.join(" ");
            K = [];
            return O
        }
        if (Object.prototype.toString.call(b) === "[object Function]") {
            b = b.call()
        }
        W((b ? "" : "no-") + c);
        O[c] = !!b;
        if (!a) {
            N("no-" + c);
            N(c);
            O.feature()
        }
        return O
    };
    O.feature("js", true);
    var U = H.userAgent.toLowerCase(), B = /mobile|midp/.test(U);
    O.feature("mobile", B, true);
    O.feature("desktop", !B, true);
    U = /(chrome|firefox)[ \/]([\w.]+)/.exec(U) || /(iphone|ipad|ipod)(?:.*version)?[ \/]([\w.]+)/.exec(U) || /(android)(?:.*version)?[ \/]([\w.]+)/.exec(U) || /(webkit|opera)(?:.*version)?[ \/]([\w.]+)/.exec(U) || /(msie) ([\w.]+)/.exec(U) || [];
    var X = U[1], E = parseFloat(U[2]);
    switch (X) {
        case"msie":
            X = "ie";
            E = Z.documentMode || E;
            break;
        case"firefox":
            X = "ff";
            break;
        case"ipod":
        case"ipad":
        case"iphone":
            X = "ios";
            break;
        case"webkit":
            X = "safari";
            break
    }
    O.browser = {name: X, version: E};
    O.browser[X] = true;
    for (var T = 0, R = I.browsers.length; T < R; T++) {
        for (var Y in I.browsers[T]) {
            if (X === Y) {
                W(Y);
                var Q = I.browsers[T][Y].min;
                var S = I.browsers[T][Y].max;
                for (var M = Q; M <= S; M++) {
                    if (E > M) {
                        if (I.browserCss.gt) {
                            W("gt-" + Y + M)
                        }
                        if (I.browserCss.gte) {
                            W("gte-" + Y + M)
                        }
                    } else {
                        if (E < M) {
                            if (I.browserCss.lt) {
                                W("lt-" + Y + M)
                            }
                            if (I.browserCss.lte) {
                                W("lte-" + Y + M)
                            }
                        } else {
                            if (E === M) {
                                if (I.browserCss.lte) {
                                    W("lte-" + Y + M)
                                }
                                if (I.browserCss.eq) {
                                    W("eq-" + Y + M)
                                }
                                if (I.browserCss.gte) {
                                    W("gte-" + Y + M)
                                }
                            }
                        }
                    }
                }
            } else {
                W("no-" + Y)
            }
        }
    }
    if (X === "ie" && E < 9) {
        D("abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video".split("|"), function (a) {
            Z.createElement(a)
        })
    }
    D(J.pathname.split("/"), function (b, a) {
        if (this.length > 2 && this[a + 1] !== G) {
            if (a) {
                W(this.slice(1, a + 1).join("-").toLowerCase() + I.section)
            }
        } else {
            if (!a) {
                W("root" + I.section)
            }
        }
    });
    O.screen = {height: F.screen.height, width: F.screen.width};

    function P() {
        L.className = L.className.replace(/ (w-|eq-|gt-|gte-|lt-|lte-|portrait|no-portrait|landscape|no-landscape)\d+/g, "");
        var a = F.innerWidth || L.clientWidth, b = F.outerWidth || F.screen.width;
        O.screen.innerWidth = a;
        O.screen.outerWidth = b;
        W("w-" + a);
        D(I.screens, function (e) {
            if (a > e) {
                if (I.screensCss.gt) {
                    W("gt-" + e)
                }
                if (I.screensCss.gte) {
                    W("gte-" + e)
                }
            } else {
                if (a < e) {
                    if (I.screensCss.lt) {
                        W("lt-" + e)
                    }
                    if (I.screensCss.lte) {
                        W("lte-" + e)
                    }
                } else {
                    if (a === e) {
                        if (I.screensCss.lte) {
                            W("lte-" + e)
                        }
                        if (I.screensCss.eq) {
                            W("e-q" + e)
                        }
                        if (I.screensCss.gte) {
                            W("gte-" + e)
                        }
                    }
                }
            }
        });
        var c = F.innerHeight || L.clientHeight, d = F.outerHeight || F.screen.height;
        O.screen.innerHeight = c;
        O.screen.outerHeight = d;
        O.feature("portrait", (c > a));
        O.feature("landscape", (c < a))
    }

    P();
    var A = 0;

    function C() {
        F.clearTimeout(A);
        A = F.setTimeout(P, 100)
    }

    if (F.addEventListener) {
        F.addEventListener("resize", C, false)
    } else {
        F.attachEvent("onresize", C)
    }
})(window);
/*
 * HeadJS     The only script in your <HEAD>
 * Author     Tero Piirainen  (tipiirai)
 * Maintainer Robert Hoffmann (itechnology)
 * License    MIT / http://bit.ly/mit-license
 *
 * Version 0.99
 * http://headjs.com
 */
(function (I, D) {
    var J = I.document, B = J.createElement("i"), A = B.style, M = " -o- -moz- -ms- -webkit- -khtml- ".split(" "),
        E = "Webkit Moz O ms Khtml".split(" "), L = I.head_conf && I.head_conf.head || "head", H = I[L];

    function F(O) {
        for (var N in O) {
            if (A[O[N]] !== D) {
                return true
            }
        }
        return false
    }

    function G(P) {
        var N = P.charAt(0).toUpperCase() + P.substr(1), O = (P + " " + E.join(N + " ") + N).split(" ");
        return !!F(O)
    }

    var C = {
        gradient: function () {
            var P = "background-image:", O = "gradient(linear,left top,right bottom,from(#9f9),to(#fff));",
                N = "linear-gradient(left top,#eee,#fff);";
            A.cssText = (P + M.join(O + P) + M.join(N + P)).slice(0, -P.length);
            return !!A.backgroundImage
        }, rgba: function () {
            A.cssText = "background-color:rgba(0,0,0,0.5)";
            return !!A.backgroundColor
        }, opacity: function () {
            return B.style.opacity === ""
        }, textshadow: function () {
            return A.textShadow === ""
        }, multiplebgs: function () {
            A.cssText = "background:url(//:),url(//:),red url(//:)";
            return new RegExp("(url\\s*\\(.*?){3}").test(A.background)
        }, boxshadow: function () {
            return G("boxShadow")
        }, borderimage: function () {
            return G("borderImage")
        }, borderradius: function () {
            return G("borderRadius")
        }, cssreflections: function () {
            return G("boxReflect")
        }, csstransforms: function () {
            return G("transform")
        }, csstransitions: function () {
            return G("transition")
        }, touch: function () {
            return "ontouchstart" in I
        }, retina: function () {
            return (I.devicePixelRatio > 1)
        }, fontface: function () {
            var O = H.browser.name, N = H.browser.version;
            switch (O) {
                case"ie":
                    return N >= 9;
                case"chrome":
                    return N >= 13;
                case"ff":
                    return N >= 6;
                case"ios":
                    return N >= 5;
                case"android":
                    return false;
                case"webkit":
                    return N >= 5.1;
                case"opera":
                    return N >= 10;
                default:
                    return false
            }
        }
    };
    for (var K in C) {
        if (C[K]) {
            H.feature(K, C[K].call(), true)
        }
    }
    H.feature()
})(window);
/*
 * HeadJS     The only script in your <HEAD>
 * Author     Tero Piirainen  (tipiirai)
 * Maintainer Robert Hoffmann (itechnology)
 * License    MIT / http://bit.ly/mit-license
 *
 * Version 0.99
 * http://headjs.com
 */
(function (H, K) {
    var i = H.document, I = [], W = [], U = {}, c = {},
        N = "async" in i.createElement("script") || "MozAppearance" in i.documentElement.style || H.opera, R, E,
        B = H.head_conf && H.head_conf.head || "head", S = H[B] = (H[B] || function () {
            S.ready.apply(null, arguments)
        }), g = 1, Y = 2, b = 3, J = 4;
    if (N) {
        S.load = function () {
            var j = arguments, k = j[j.length - 1], e = {};
            if (!A(k)) {
                k = null
            }
            F(j, function (m, l) {
                if (m !== k) {
                    m = h(m);
                    e[m.name] = m;
                    M(m, k && l === j.length - 2 ? function () {
                        if (a(e)) {
                            V(k)
                        }
                    } : null)
                }
            });
            return S
        }
    } else {
        S.load = function () {
            var e = arguments, k = [].slice.call(e, 1), j = k[0];
            if (!R) {
                W.push(function () {
                    S.load.apply(null, e)
                });
                return S
            }
            if (!!j) {
                F(k, function (l) {
                    if (!A(l)) {
                        X(h(l))
                    }
                });
                M(h(e[0]), A(j) ? j : function () {
                    S.load.apply(null, k)
                })
            } else {
                M(h(e[0]))
            }
            return S
        }
    }
    S.js = S.load;
    S.test = function (n, k, e, m) {
        var j = (typeof n === "object") ? n : {
            test: n,
            success: !!k ? Q(k) ? k : [k] : false,
            failure: !!e ? Q(e) ? e : [e] : false,
            callback: m || G
        };
        var l = !!j.test;
        if (l && !!j.success) {
            j.success.push(j.callback);
            S.load.apply(null, j.success)
        } else {
            if (!l && !!j.failure) {
                j.failure.push(j.callback);
                S.load.apply(null, j.failure)
            } else {
                m()
            }
        }
        return S
    };
    S.ready = function (j, l) {
        if (j === i) {
            if (E) {
                V(l)
            } else {
                I.push(l)
            }
            return S
        }
        if (A(j)) {
            l = j;
            j = "ALL"
        }
        if (typeof j !== "string" || !A(l)) {
            return S
        }
        var k = c[j];
        if (k && k.state === J || j === "ALL" && a() && E) {
            V(l);
            return S
        }
        var e = U[j];
        if (!e) {
            e = U[j] = [l]
        } else {
            e.push(l)
        }
        return S
    };
    S.ready(i, function () {
        if (a()) {
            F(U.ALL, function (e) {
                V(e)
            })
        }
        if (S.feature) {
            S.feature("domloaded", true)
        }
    });

    function G() {
    }

    function F(e, m) {
        if (!e) {
            return
        }
        if (typeof e === "object") {
            e = [].slice.call(e)
        }
        for (var k = 0, j = e.length; k < j; k++) {
            m.call(e, e[k], k)
        }
    }

    function L(e, j) {
        var k = Object.prototype.toString.call(j).slice(8, -1);
        return j !== K && j !== null && k === e
    }

    function A(e) {
        return L("Function", e)
    }

    function Q(e) {
        return L("Array", e)
    }

    function Z(k) {
        var e = k.split("/"), j = e[e.length - 1], l = j.indexOf("?");
        return l !== -1 ? j.substring(0, l) : j
    }

    function V(e) {
        e = e || G;
        if (e._done) {
            return
        }
        e();
        e._done = 1
    }

    function h(l) {
        var j = {};
        if (typeof l === "object") {
            for (var e in l) {
                if (!!l[e]) {
                    j = {name: e, url: l[e]}
                }
            }
        } else {
            j = {name: Z(l), url: l}
        }
        var k = c[j.name];
        if (k && k.url === j.url) {
            return k
        }
        c[j.name] = j;
        return j
    }

    function a(e) {
        e = e || c;
        for (var j in e) {
            if (e.hasOwnProperty(j) && e[j].state !== J) {
                return false
            }
        }
        return true
    }

    function f(e) {
        e.state = Y;
        F(e.onpreload, function (j) {
            j.call()
        })
    }

    function X(e, j) {
        if (e.state === K) {
            e.state = g;
            e.onpreload = [];
            C({url: e.url, type: "cache"}, function () {
                f(e)
            })
        }
    }

    function M(e, j) {
        j = j || G;
        if (e.state === J) {
            j();
            return
        }
        if (e.state === b) {
            S.ready(e.name, j);
            return
        }
        if (e.state === g) {
            e.onpreload.push(function () {
                M(e, j)
            });
            return
        }
        e.state = b;
        C(e, function () {
            e.state = J;
            j();
            F(U[e.name], function (k) {
                V(k)
            });
            if (E && a()) {
                F(U.ALL, function (k) {
                    V(k)
                })
            }
        })
    }

    function C(k, n) {
        n = n || G;
        var l;
        if (/\.css[^\.]*$/.test(k.url)) {
            l = i.createElement("link");
            l.type = "text/" + (k.type || "css");
            l.rel = "stylesheet";
            l.href = k.url
        } else {
            l = i.createElement("script");
            l.type = "text/" + (k.type || "javascript");
            l.src = k.url
        }
        if (actuate && actuate.getNonce()) {
            l.nonce = actuate.getNonce()
        }
        l.onload = l.onreadystatechange = m;
        l.onerror = e;
        l.async = false;
        l.defer = false;

        function e(o) {
            o = o || H.event;
            l.onload = l.onreadystatechange = l.onerror = null;
            n()
        }

        function m(o) {
            o = o || H.event;
            if (o.type === "load" || (/loaded|complete/.test(l.readyState) && (!i.documentMode || i.documentMode < 9))) {
                l.onload = l.onreadystatechange = l.onerror = null;
                n()
            }
        }

        var j = i.head || i.getElementsByTagName("head")[0];
        j.insertBefore(l, j.lastChild)
    }

    function O() {
        if (!i.body) {
            H.clearTimeout(S.readyTimeout);
            S.readyTimeout = H.setTimeout(O, 50);
            return
        }
        if (!E) {
            E = true;
            F(I, function (e) {
                V(e)
            })
        }
    }

    function P() {
        if (i.addEventListener) {
            i.removeEventListener("DOMContentLoaded", P, false);
            O()
        } else {
            if (i.readyState === "complete") {
                i.detachEvent("onreadystatechange", P);
                O()
            }
        }
    }

    if (i.readyState === "complete") {
        O()
    } else {
        if (i.addEventListener) {
            i.addEventListener("DOMContentLoaded", P, false);
            H.addEventListener("load", O, false)
        } else {
            i.attachEvent("onreadystatechange", P);
            H.attachEvent("onload", O);
            var T = false;
            try {
                T = H.frameElement == null && i.documentElement
            } catch (d) {
            }
            if (T && T.doScroll) {
                (function D() {
                    if (!E) {
                        try {
                            T.doScroll("left")
                        } catch (e) {
                            H.clearTimeout(S.readyTimeout);
                            S.readyTimeout = H.setTimeout(D, 50);
                            return
                        }
                        O()
                    }
                })()
            }
        }
    }
    setTimeout(function () {
        R = true;
        F(W, function (e) {
            e()
        })
    }, 300)
})(window);
actuate.util.Package.define("actuate.app");
actuate.app.loader = head;
birt = {};
birt.loader = head;
actuate.util.Package.define("actuate.resource");
actuate.resource.module = {
    modules: new Object(), define: function (B, A) {
        if (this.modules[B]) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Module "' + B + '" already defined')
        }
        actuate.util.Package.define(B);
        return this.modules[B] = actuate.Class.extend(new actuate.resource.ModuleLoader(B), A)
    }, require: function (B, H, C, E, A) {
        var D = actuate.util.Utility;
        if (B && B.length > 0) {
            for (var F = 0; F < B.length; F++) {
                if (B[F] == "actuate.viewer") {
                    if (actuate._notAllowLoadJquery) {
                        D.arrayRemoveValue(B, "actuate.jquery");
                        if (!D.arrayContains(B, "actuate.html5charts")) {
                            B.push("actuate.html5charts")
                        }
                    } else {
                        if (!D.arrayContains(B, "actuate.html5charts")) {
                            if (D.needLoadJquery()) {
                                D.arrayRemoveValue(B, "actuate.jquery");
                                D.arrayRemoveValue(B, "actuate.html5charts");
                                this.require(["actuate.jquery"], actuate.Method.bind(function () {
                                    this.require(["actuate.html5charts"])
                                }, this))
                            } else {
                                B.push("actuate.html5charts")
                            }
                        } else {
                            if (D.needLoadJquery()) {
                                D.arrayRemoveValue(B, "actuate.html5charts");
                                this.require(["actuate.jquery"], actuate.Method.bind(function () {
                                    this.require(["actuate.html5charts"])
                                }, this))
                            }
                        }
                    }
                }
            }
            B = D.arrayUnique(B);
            var G = new actuate.resource.ResourceLoader(E || actuate.getDefaultIportalUrl(), A || actuate.getDefaultRequestOptions(), B);
            G.setOnLoad(H);
            G.setOnError(C);
            G.load()
        }
    }, getResourcesContainerId: function (A) {
        A += ".resourcesContainer";
        return A.replace(/\./g, "_")
    }
};
actuate.resource.ModuleLoader = actuate.Class.create();
actuate.resource.ModuleLoader.prototype = {
    loaded: false,
    _loading: false,
    _licenseFailure: false,
    _sessionTimeout: false,
    _moduleName: null,
    _moduleDependencies: null,
    _jsPath: null,
    _jsFiles: null,
    _cssFiles: null,
    _cssPath: null,
    _htmlResourcesUri: null,
    _publicClasses: null,
    _onAfterHtmlResourcesLoaded: null,
    _onLoad: null,
    _packageLoaded: false,
    _htmlLoaded: false,
    _localizedStringLoaded: false,
    _container: null,
    initialize: function (A) {
        this._moduleName = A;
        this._exceptionClosure = actuate.Method.bind(this._exception, this)
    },
    getModuleName: function () {
        return this._moduleName
    },
    getModuleDependencies: function () {
        return this._moduleDependencies
    },
    load: function (D, A, B) {
        var C = this;
        this._exceptionHandler = B;
        this._iportalUrl = actuate.util.Utility.makeAbsoluteUrl(D);
        this._requestOptions = A;
        if (this.loaded || this._loading) {
            return
        }
        this._loading = true;
        if (this._jsFiles && this._jsFiles.length > 0) {
            this._loadScripts(function () {
                C._packageLoaded = true
            })
        } else {
            this._packageLoaded = true
        }
        if (this._localizedString) {
            this._loadLocalizedString(function () {
                C._localizedStringLoaded = true
            })
        } else {
            this._localizedStringLoaded = true
        }
        if (this._cssFiles != null && this._cssFiles.length > 0) {
            this._loadCss(this._cssPath, this._cssFiles)
        }
        if (this._mobileCssFiles != null && this._mobileCssFiles.length > 0 && actuate.util.browser && actuate.util.browser.useMobile()) {
            this._loadCss(this._mobileCssPath, this._mobileCssFiles)
        }
        if (this._desktopCssFiles != null && this._desktopCssFiles.length > 0 && actuate.util.browser && !actuate.util.browser.useMobile()) {
            this._loadCss(this._cssPath, this._desktopCssFiles)
        }
        if (this._htmlResourcesUri != null) {
            this._loadHtmlResources(function () {
                C._htmlLoaded = true
            })
        } else {
            this._htmlLoaded = true
        }
        this.timerInterval = window.setInterval(function () {
            C._rendezvous()
        }, 10)
    },
    _rendezvous: function () {
        if (this._licenseFailure == true || this._sessionTimeout == true) {
            clearInterval(this.timerInterval);
            this._loading = false;
            return
        }
        if (!this._isDependentModuleLoaded()) {
            return
        }
        if (this._htmlLoaded == true && this._packageLoaded == true && this._localizedStringLoaded) {
            clearInterval(this.timerInterval);
            this._loading = false;
            if (this._onAfterHtmlResourcesLoaded) {
                this._onAfterHtmlResourcesLoaded()
            }
            if (this._publicClasses) {
                this._exportModulePublicClasses()
            }
            if (this._onLoad) {
                this._onLoad()
            }
            this.loaded = true
        }
    },
    _isDependentModuleLoaded: function () {
        if (this._moduleName == "actuate.viewer") {
            var A = actuate.resource.module.modules["actuate.html5charts"];
            if (!A || !A.loaded) {
                return false
            }
        }
        return true
    },
    _loadCss: function (C, B) {
        if (C && C.charAt(C.length - 1) != "/") {
            C += "/"
        }
        for (var A = 0; A < B.length; A++) {
            actuate.util.Style.addExternalStyleSheet(this._iportalUrl + C + B[A])
        }
    },
    _loadLocalizedString: function (E) {
        var B = new actuate.RequestOptions(actuate.getDefaultRequestOptions());
        var A = B.getLocale();
        if (!A) {
            A = B._customParameters.__locale
        }
        var D = this._localizedStringServlet || "ivresource";
        var C = D;
        if (B && B.__getJsessionId()) {
            C += ";jsessionid=" + B.__getJsessionId()
        }
        C += "?__localizedstrings=module::" + this._moduleName + "&__locale=" + (A ? A : "");
        if (actuate.util.Utility.getToken()) {
            C += "&" + actuate.util.Utility.getTokenName() + "=" + actuate.util.Utility.getToken()
        }
        actuate.resource.Script.loadScripts(actuate.getDefaultIportalUrl(), C, E)
    },
    _createContainer: function () {
        if (!this._container) {
            var A = actuate.resource.module.getResourcesContainerId(this._moduleName);
            this._container = new actuate.resource.Container(A);
            this._container.reset()
        }
    },
    _loadHtmlResources: function (B) {
        this._createContainer();
        if (this._requestOptions) {
            this._requestOptions._customParameters.connectionHandle = null
        }
        var A = new actuate.common.IportalRequest();
        A.setService(this._iportalUrl, this._requestOptions);
        A.setExceptionHandler(this._exceptionClosure);
        this._container.load(A, this._htmlResourcesUri, B)
    },
    _exportModulePublicClasses: function () {
        var E = actuate.util.Package;
        for (var A in this._publicClasses) {
            if (A != "noClass") {
                var D = this._publicClasses[A];
                var B = E.getNamespaceObjectReference(D);
                if (B) {
                    var C = actuate.Class.createFacadeClass(B);
                    actuate.util.Package.define(A, C)
                } else {
                    throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Source class "' + D + '" to be published not found')
                }
            }
        }
    },
    _loadScripts: function (F) {
        var A = new Array();
        for (var B = 0; B < this._jsFiles.length; B++) {
            A.push(this._jsFiles[B])
        }
        var D = this._iportalUrl + (this._jsPath && this._jsPath != "" ? this._jsPath + "/" : "");
        var C = this;
        actuate.resource.Script.loadScripts(D, A, function E(G) {
            var H = G.failedUrls;
            if (H && H.length > 0) {
                C._throwFailedUrls(H)
            } else {
                F()
            }
        })
    },
    _throwFailedUrls: function _throwFailedUrls(C) {
        var B = "Failed to load the following files:";
        for (var A = 0; A < C.length; A++) {
            B += "\n" + C[A]
        }
        this._exception(new actuate.ConnectionException(C, actuate.Exception.ERR_CLIENT, B))
    },
    _exception: function (B) {
        B = actuate.util.Utility.createException(B);
        if (B.getErrCode() == 555) {
            this._licenseFailure = true
        } else {
            if (B.getErrCode() == 556) {
                this._sessionTimeout = true
            }
        }
        if (this._exceptionHandler) {
            this._exceptionHandler(B)
        } else {
            if (B.getErrCode() == 556) {
                actionFunc = function () {
                    window.close()
                };
                var A = actuate.iv.core.ClassLoader.getInstance().forName("actuate.iv.ui.dialog.IVPromptDialog");
                A.setYesClickHandler(actionFunc);
                A.setNoClickHandler(null);
                A.processBind(this, "Iportal session timeout!", null);
                return
            }
            throw B
        }
    }
};
actuate.util.Package.define("actuate.resource");
actuate.resource.module.feature = {
    features: new Object(), define: function (A, B) {
        if (this.features[A]) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Feature Definition for "' + A + '" already defined')
        }
        actuate.util.Package.define(A);
        this.features[A] = actuate.Class.extend(new actuate.resource.FeatureLoader(A), B.AVAILABLE_FEATURES);
        this.features[A].javaScriptAlias = B.javaScriptAlias
    }, require: function (F, B, E, C, A) {
        if (F && F.length > 0) {
            var D = new actuate.resource.ResourceLoader(C || actuate.getDefaultIportalUrl(), A || actuate.getDefaultRequestOptions(), null, F);
            D.setOnLoad(B);
            D.setOnError(E);
            D.loadFeature()
        }
    }
};
actuate.resource.FeatureLoader = actuate.Class.create();
actuate.resource.FeatureLoader.prototype = {
    _moduleName: null,
    javaScriptAlias: null,
    loaded: new Object(),
    loading: {},
    loadingIntervals: new Object(),
    finishLoadingJSList: new Object(),
    finishLoadingHTMLList: new Object(),
    _licenseFailure: false,
    _sessionTimeout: false,
    finishLoadingLocalizedStringsList: new Object(),
    initialize: function (A) {
        this._moduleName = A;
        this._exceptionClosure = actuate.Method.bind(this._exception, this)
    },
    _exception: function (B) {
        B = actuate.util.Utility.createException(B);
        if (B.getErrCode() == 555) {
            this._licenseFailure = true
        } else {
            if (B.getErrCode() == 556) {
                this._sessionTimeout = true
            }
        }
        if (this._exceptionHandler) {
            this._exceptionHandler(B)
        } else {
            if (B.getErrCode() == 556) {
                actionFunc = function () {
                    window.close()
                };
                var A = actuate.iv.core.ClassLoader.getInstance().forName("actuate.iv.ui.dialog.IVPromptDialog");
                A.setYesClickHandler(actionFunc);
                A.setNoClickHandler(null);
                A.processBind(this, "Iportal session timeout!", null);
                return
            }
            throw B
        }
    },
    loadFeature: function (D, E, C, A) {
        this._exceptionHandler = E;
        if (D.root) {
            if (this.loading[D.root]) {
                return
            }
            if (this[D.root] && !this.loaded[D.root]) {
                this._loadSingleFeature(D, D.root, this._exceptionClosure, C, A)
            }
            for (var B = 0; B < D.children.length; B++) {
                this._loadSingleFeature(D, D.children[B], this._exceptionClosure, C, A)
            }
        } else {
            this._loadSingleFeature(D, D, this._exceptionClosure, C, A)
        }
    },
    _loadSingleFeature: function (B, E, A, J, M) {
        this._exceptionHandler = A;
        if (this.loading[E]) {
            return
        }
        if (B.type == "Map") {
            if (this.loaded.MAP_COLLECTION_TAB) {
                this.loaded.MAP_COLLECTION_TAB = false
            }
        }
        if (!this[E] || this.loaded[E]) {
            return
        }
        this.loading[E] = true;
        var C = [];
        var S = this[E]._javaScript || C;
        var K = this[E]._html || C;
        var D = this[E]._localizedString;
        if (this[E]._cssFiles != null && this[E]._cssFiles.length > 0) {
            this._loadCss(J, actuate.resource.module.modules[this._moduleName]._cssPath + "/feature/", this[E]._cssFiles)
        }
        if (this[E]._mobileCssFiles != null && this[E]._mobileCssFiles.length > 0 && actuate.util.browser && actuate.util.browser.useMobile()) {
            this._loadCss(J, actuate.resource.module.modules[this._moduleName]._cssPath + "/feature/", this[E]._mobileCssFiles)
        }
        if (this[E]._desktopCssFiles != null && this[E]._desktopCssFiles.length > 0) {
            this._loadCss(J, actuate.resource.module.modules[this._moduleName]._cssPath + "/feature/", this[E]._desktopCssFiles)
        }
        var F = this;
        if (!actuate.resource.featureLoader.finishLoadingHTMLList) {
            actuate.resource.featureLoader.finishLoadingHTMLList = new Object()
        }
        var Q = function L(T, U) {
            actuate.resource.featureLoader.finishLoadingHTMLList[U] = true;
            F._afterFeatureLoaded(T)
        };
        for (var N = 0; N < K.length; N++) {
            if (actuate.resource.featureLoader.finishLoadingHTMLList[K[N]] != true) {
                this._loadHTML(K[N], actuate.Method.bind2(Q, this, B, K[N]), J, B.element, M)
            }
        }
        if (D) {
            if (!actuate.resource.featureLoader.finishLoadingLocalizedStringsList) {
                actuate.resource.featureLoader.finishLoadingLocalizedStringsList = new Object()
            }
            var R = function L(T, U) {
                actuate.resource.featureLoader.finishLoadingLocalizedStringsList[U] = true;
                F._afterFeatureLoaded(T)
            };
            for (var P = 0; P < D.length; P++) {
                if (actuate.resource.featureLoader.finishLoadingLocalizedStringsList[D[P]] != true) {
                    this._loadLocalizedStrings(D[P], actuate.Method.bind2(R, this, B, D[P]), J, M)
                }
            }
        }
        if (!actuate.resource.featureLoader.finishLoadingJSList) {
            actuate.resource.featureLoader.finishLoadingJSList = new Object()
        }
        var G = function H(U, T) {
            actuate.resource.featureLoader.finishLoadingJSList[T] = true;
            F._afterFeatureLoaded(U)
        };
        if (!this[E]._hasDependency) {
            for (var O = 0; O < S.length; O++) {
                var I = S[O];
                if (actuate.resource.featureLoader.finishLoadingJSList[I] != true) {
                    actuate.resource.Script.loadScripts(J || actuate.getDefaultIportalUrl(), actuate.resource.module.modules[this._moduleName]._jsPath + this.javaScriptAlias[S[O]], actuate.Method.bind2(G, this, B, S[O]))
                }
            }
        } else {
            this._loadFeatureScriptsInSequnece(J, S, G, B, 0)
        }
        this._afterFeatureLoaded(B)
    },
    _loadFeatureScriptsInSequnece: function (B, D, F, C, A) {
        var E = D[A];
        if (A > 0) {
            F(C, D[A - 1])
        }
        if (actuate.resource.featureLoader.finishLoadingJSList[E] != true) {
            if (A == D.length - 1) {
                actuate.resource.Script.loadScripts(B || actuate.getDefaultIportalUrl(), actuate.resource.module.modules[this._moduleName]._jsPath + this.javaScriptAlias[E], actuate.Method.bind2(F, this, C, E))
            } else {
                if (A < D.length - 1) {
                    actuate.resource.Script.loadScripts(B || actuate.getDefaultIportalUrl(), actuate.resource.module.modules[this._moduleName]._jsPath + this.javaScriptAlias[E], actuate.Method.bind2(this._loadFeatureScriptsInSequnece, this, B, D, F, C, A + 1))
                }
            }
        } else {
            this._loadFeatureScriptsInSequnece(B, D, F, C, A + 1)
        }
    },
    _loadCss: function (A, D, C) {
        if (D && D.charAt(D.length - 1) != "/") {
            D += "/"
        }
        if (D) {
            D = D.replace(/\/{2,}/g, "/")
        }
        for (var B = 0; B < C.length; B++) {
            actuate.util.Style.addExternalStyleSheet(A + D + C[B])
        }
    },
    _afterFeatureLoaded: function (K) {
        if (K.root) {
            if (!this._afterSingleFeatureLoaded(K.root)) {
                return
            }
            for (var B = 0; B < K.children.length; B++) {
                if (!this._afterSingleFeatureLoaded(K.children[B])) {
                    return
                }
            }
        } else {
            if (!this._afterSingleFeatureLoaded(K)) {
                return
            }
        }
        var J = K.root || K;
        if (actuate.resource.featureLoader.loaded[J] != true) {
            actuate.resource.featureLoader.loaded[J] = true;
            if (K.root) {
                for (var B = 0; B < K.children.length; B++) {
                    actuate.resource.featureLoader.loaded[K.children[B]] = true
                }
            }
            if (this[J]._publicClasses) {
                this._exportPublicClasses(this[J]._publicClasses, this[J]._functions, this[J]._staticFunctions)
            }
            var A = this[J]._classInstance;
            if (A) {
                for (var C = A.length - 1; C >= 0; C--) {
                    var G = actuate.util.Package.getInstanceName(A[C]);
                    var F = G.split(".");
                    if ((F.length > 0) && (window[F[0]] || global[F[0]])) {
                        var L = window[F[0]] || global[F[0]];
                        try {
                            for (var I = 1; I < F.length; I++) {
                                L = L[F[I]]
                            }
                            if (L) {
                                A.pop()
                            }
                        } catch (E) {
                            console.log("error while extracting func object")
                        }
                    }
                }
                if (A.length > 0) {
                    var D = new actuate.resource.ResourceFactory();
                    D.createResources("", A, K)
                }
            }
        } else {
            var H = false;
            if (K.root) {
                for (var B = 0; B < K.children.length; B++) {
                    if (!actuate.resource.featureLoader.loaded[K.children[B]]) {
                        H = true
                    }
                    actuate.resource.featureLoader.loaded[K.children[B]] = true
                }
            }
            if (H) {
                var A = this[J]._classInstance;
                if (A) {
                    var D = new actuate.resource.ResourceFactory();
                    D.establishResources("", A, K)
                }
            }
        }
        if (K.root) {
            delete this.loading[K.root];
            for (var B = 0; B < K.children.length; B++) {
                delete this.loading[K.children[B]]
            }
        } else {
            delete this.loading[K]
        }
    },
    _afterSingleFeatureLoaded: function (D) {
        if (this._licenseFailure == true || this._sessionTimeout == true) {
            return false
        }
        if (actuate.resource.featureLoader.loaded[D]) {
            return true
        }
        var F = this[D]._html;
        if (F) {
            for (var C = 0; C < F.length; C++) {
                if (actuate.resource.featureLoader.finishLoadingHTMLList[F[C]] != true) {
                    return false
                }
            }
        }
        var E = this[D]._javaScript;
        if (E) {
            for (var B = 0; B < E.length; B++) {
                if (actuate.resource.featureLoader.finishLoadingJSList[E[B]] != true) {
                    return false
                }
            }
        }
        var G = this[D]._localizedString;
        if (G) {
            for (var A = 0; A < G.length; A++) {
                if (actuate.resource.featureLoader.finishLoadingLocalizedStringsList[G[A]] != true) {
                    return false
                }
            }
        }
        return true
    },
    _loadLocalizedStrings: function (E, G, D, B) {
        if (!B) {
            B = new actuate.RequestOptions(actuate.getDefaultRequestOptions())
        }
        var A = B.getLocale();
        if (!A) {
            A = B._customParameters.__locale
        }
        var F = actuate.resource.module.modules[this._moduleName]._localizedStringServlet || "ivresource";
        var C = F;
        if (B && B.__getJsessionId()) {
            C += ";jsessionid=" + B.__getJsessionId()
        }
        C += "?__localizedstrings=" + this._moduleName + "::" + E + "&__locale=" + (A ? A : "");
        if (actuate.util.Utility.getToken()) {
            C += "&" + actuate.util.Utility.getTokenName() + "=" + actuate.util.Utility.getToken()
        }
        actuate.resource.Script.loadScripts(D || actuate.getDefaultIportalUrl(), C, G)
    },
    _loadHTML: function (J, I, G, F, C) {
        var E = actuate.resource.module.modules[this._moduleName];
        if (!E._featureContainer) {
            var A = actuate.resource.module.getResourcesContainerId(this._moduleName + "_feature");
            E._featureContainer = new actuate.resource.Container(A, F);
            E._featureContainer.reset()
        }
        var D = new actuate.common.IportalRequest();
        var B = new actuate.RequestOptions(C || actuate.getDefaultRequestOptions());
        B._customParameters.__feature = J;
        B._customParameters.connectionHandle = null;
        D.setService(G || actuate.getDefaultIportalUrl(), B);
        D.setExceptionHandler(this._exceptionClosure);
        var H = E._htmlResourcesUri || "ivresource";
        E._featureContainer.insert(D, H, I)
    },
    _exportPublicClasses: function (B, F, C) {
        var H = actuate.util.Package;
        for (var A in B) {
            if (A != "noClass") {
                var G = B[A];
                var D = H.getNamespaceObjectReference(G);
                if (D) {
                    var E = actuate.Class.createFacadeClass(D, F, C);
                    actuate.util.Package.define(A, E)
                }
            }
        }
    }
};
actuate.resource.featureLoader = new actuate.resource.FeatureLoader();
actuate.util.Package.define("actuate.resource");
actuate.resource.ResourceLoader = actuate.Class.create();
actuate.resource.ResourceLoader.prototype = {
    MODULE_PATH_MAPPING: {
        "actuate.viewer": "iv.viewer",
        "actuate.parameter": "iv.parameter",
        "actuate.xtabanalyzer": "da.viewer"
    },
    _onLoad: null,
    _onError: null,
    _iportalUrl: null,
    _requestOptions: null,
    _exceptionClosure: null,
    _requestedModuleNames: null,
    _requestedFeatures: null,
    initialize: function (B, A, D, C) {
        this._iportalUrl = B;
        this._requestOptions = A;
        this._onLoad = null;
        this._onError = null;
        this._requestedModuleNames = D;
        this._requestedFeatures = C;
        this._exceptionClosure = actuate.Method.bind(this._exception, this)
    },
    setOnLoad: function (A) {
        this._onLoad = A
    },
    setOnError: function (A) {
        this._onError = A
    },
    loadFeature: function () {
        if (this._requestedFeatures) {
            for (var C = 0; C < this._requestedFeatures.length; C++) {
                var B = this._requestedFeatures[C];
                var A = actuate.resource.module.feature.features[B.module];
                if (A) {
                    if (!A.loaded[B.feature.root ? B.feature.root : B.feature]) {
                        B.firstTime = true
                    }
                    A.loadFeature(B.feature, this._exceptionClosure, this._iportalUrl, this._requestOptions)
                }
            }
        }
        var D = this;
        this.timerInterval = window.setInterval(function () {
            D._rendezvousFeature()
        }, 10)
    },
    _rendezvousFeature: function () {
        for (var E = 0; E < this._requestedFeatures.length; E++) {
            var B = this._requestedFeatures[E];
            var A = actuate.resource.module.feature.features[B.module];
            if (A && !A.loaded[B.feature.root ? B.feature.root : B.feature]) {
                return
            }
            if (B.feature.children) {
                for (var D = 0; D < B.feature.children.length; D++) {
                    if (A && !A._afterSingleFeatureLoaded(B.feature.children[D])) {
                        return
                    }
                }
            }
        }
        clearInterval(this.timerInterval);
        var F = [];
        for (var E = 0; E < this._requestedFeatures.length; E++) {
            var B = this._requestedFeatures[E];
            var C = B.feature.root ? B.feature.root : B.feature;
            var A = actuate.resource.module.feature.features[B.module];
            if (A) {
                var G = A[C]._entryPoint;
                if (G && B.firstTime) {
                    var H = actuate.util.Package;
                    F.push(H.getNamespaceObjectReference(H.getInstanceName(G)))
                }
            }
        }
        if (this._onLoad) {
            window.setTimeout(actuate.Method.bind2(this._onLoad, this, F), 0)
        }
    },
    load: function () {
        if (this._requestedModuleNames) {
            for (var A = 0; A < this._requestedModuleNames.length; A++) {
                var C = actuate.resource.module.modules[this._requestedModuleNames[A]];
                C.load(this._iportalUrl, this._requestOptions, this._exceptionClosure)
            }
        }
        var B = this;
        this.timerInterval = window.setInterval(function () {
            B._rendezvous()
        }, 10)
    },
    _rendezvous: function () {
        for (var A = 0; A < this._requestedModuleNames.length; A++) {
            var B = actuate.resource.module.modules[this._requestedModuleNames[A]];
            if (!B.loaded) {
                return
            }
        }
        clearInterval(this.timerInterval);
        if (this._onLoad) {
            window.setTimeout(this._onLoad, 0)
        }
    },
    _exception: function (A) {
        A = actuate.util.Utility.createException(A);
        if (this._onError) {
            return this._onError(A)
        } else {
            throw A
        }
    }
};
actuate.util.Package.define("actuate.resource");
actuate.resource.ResourceFactory = actuate.Class.create();
actuate.resource.ResourceFactory.prototype = {
    initialize: function () {
    }, establishResources: function (A, F, C) {
        var D;
        if (A) {
            A += "."
        } else {
            A = ""
        }
        for (var B = 0; B < F.length; B++) {
            try {
                D = A + F[B];
                this._establishResource(D, actuate.util.Package.getInstanceName(D).replace(/\./g, "_"), C)
            } catch (E) {
                throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Exception occured while creating resource with class name "' + D + '": ' + E)
            }
        }
    }, _establishResource: function (G, B, J) {
        var I = actuate.util.Package;
        var D = I.getNamespaceObjectReference(G);
        if (!D) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Class "' + G + '" not found')
        }
        var A = null;
        var H = I.getInstanceName(G);
        var F = I.getLastNamespaceObjectName(H);
        var C = I.getNamespaceObjectReference(I.getParentPackageName(G), window);
        var E = C[F];
        if (E) {
            if (E.establishTabs) {
                E.establishTabs(J, null, false)
            }
        }
    }, createResources: function (A, F, C) {
        var D;
        if (A) {
            A += "."
        } else {
            A = ""
        }
        for (var B = 0; B < F.length; B++) {
            try {
                D = A + F[B];
                this._createResource(D, actuate.util.Package.getInstanceName(D).replace(/\./g, "_"), C)
            } catch (E) {
                throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Exception occured while creating resource with class name "' + D + '": ' + E)
            }
        }
    }, _createResource: function (G, B, J) {
        var I = actuate.util.Package;
        var D = I.getNamespaceObjectReference(G);
        if (!D) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Class "' + G + '" not found')
        }
        var A = null;
        var H = I.getInstanceName(G);
        var F = I.getLastNamespaceObjectName(H);
        var C = I.getNamespaceObjectReference(I.getParentPackageName(G), window);
        var E = C[F];
        if (E) {
            if (E.establishTabs) {
                E.establishTabs(J)
            } else {
                throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Instance of "' + G + '" would overwrite symbol "' + H + '"')
            }
        } else {
            A = new D(B, J);
            if (!A._classname) {
                A._classname = G
            }
        }
        C[F] = A
    }
};
actuate.util.Package.define("actuate.resource");
actuate.resource.ScriptLoader = actuate.Class.create();
actuate.resource.ScriptLoader.prototype = {
    _headElement: null,
    onLoad: null,
    onError: null,
    basePath: null,
    _urlList: null,
    _currentUrl: null,
    _loadedClosure: null,
    _errorClosure: null,
    _finishClosure: null,
    _charset: "utf-8",
    _cleanUpScripts: true,
    _scriptTagsList: null,
    failedUrls: null,
    _busy: false,
    initialize: function () {
        this._headElement = document.getElementsByTagName("head")[0];
        this._loadedClosure = actuate.Method.bindAsEventListener(this._loaded, this);
        this._errorClosure = actuate.Method.bindAsEventListener(this._error, this);
        this._finishClosure = actuate.Method.bindAsEventListener(this._finish, this);
        this.failedUrls = new Array();
        this._scriptTagsList = new Array();
        this._busy = false;
        this._urlList = new Array()
    },
    loadScripts: function (A) {
        this._urlList = this._urlList.concat(A);
        if (this._busy) {
            return
        }
        this._busy = true;
        this._next()
    },
    _next: function () {
        if (this._urlList.length > 0) {
            var A = this._urlList.shift();
            if (this.basePath && this.basePath != "") {
                A = this.basePath + A
            }
            A = actuate.util.Utility.makeAbsoluteUrl(A);
            this._currentUrl = A;
            if (A.indexOf("?") > -1) {
                this._loadScript(A + "&" + actuate.module.Version.getVersionParam())
            } else {
                this._loadScript(A + "?" + actuate.module.Version.getVersionParam())
            }
        } else {
            self.setTimeout(this._finishClosure, 0)
        }
    },
    _finish: function () {
        if (this._cleanUpScripts) {
            while (this._scriptTagsList.length > 0) {
                var A = this._scriptTagsList.pop();
                if (A.parentNode) {
                    A.parentNode.removeChild(A)
                }
            }
        }
        if (this._scriptTagsList.length == 0) {
            this._scriptTagsList = null
        }
        this._urlList = null;
        this._busy = false;
        if (this.onLoad) {
            this.onLoad(this)
        }
    },
    _error: function (A) {
        this.failedUrls.unshift(this._currentUrl);
        var B = false;
        if (this.onError) {
            B = !this.onError(this._currentUrl)
        }
        if (!B) {
            this._next()
        }
    }
};
actuate.resource.GenericScriptLoader = actuate.Class.create();
actuate.resource.GenericScriptLoader.prototype = actuate.Class.extend(new actuate.resource.ScriptLoader(), {
    _currentScript: null,
    initialize: function () {
        actuate.resource.ScriptLoader.prototype.initialize.call(this)
    },
    _loadScript: function (A) {
        this._currentScript = document.createElement("script");
        this._currentScript.setAttribute("type", "text/javascript");
        this._currentScript.setAttribute("src", A);
        this._currentScript.setAttribute("charset", this._charset);
        actuate.util.Event.observe(this._currentScript, "load", this._loadedClosure);
        actuate.util.Event.observe(this._currentScript, "error", this._errorClosure);
        this._headElement.appendChild(this._currentScript);
        this._scriptTagsList.push(this._currentScript)
    },
    _loaded: function () {
        actuate.util.Event.stopObserving(this._currentScript, "load", this._loadedClosure);
        actuate.util.Event.stopObserving(this._currentScript, "error", this._errorClosure);
        this._next()
    }
});
actuate.resource.IEScriptLoader = actuate.Class.create();
actuate.resource.IEScriptLoader.prototype = actuate.Class.extend(new actuate.resource.ScriptLoader(), {
    _currentScript: null,
    initialize: function () {
        actuate.resource.ScriptLoader.prototype.initialize.call(this)
    },
    _loadScript: function (A) {
        this._currentScript = document.createElement("script");
        this._currentScript.setAttribute("type", "text/javascript");
        this._currentScript.setAttribute("src", A);
        this._currentScript.setAttribute("charset", this._charset);
        actuate.util.Event.observe(this._currentScript, "readystatechange", this._loadedClosure);
        this._headElement.appendChild(this._currentScript);
        this._scriptTagsList.push(this._currentScript)
    },
    _loaded: function () {
        if (this._currentScript.readyState == "complete" || this._currentScript.readyState == "loaded") {
            actuate.util.Event.stopObserving(this._currentScript, "readystatechange", this._loadedClosure);
            this._next()
        }
    }
});
actuate.resource.Script = {
    _getScriptLoader: function () {
        var A;
        if (navigator.userAgent.toLowerCase().indexOf("msie") > -1) {
            A = new actuate.resource.IEScriptLoader()
        } else {
            A = new actuate.resource.GenericScriptLoader()
        }
        return A
    }, loadScripts: function (E, B, D, A) {
        var C = this._getScriptLoader();
        C.onLoad = D;
        if (A != null) {
            C.onError = A
        }
        C.basePath = E;
        C.loadScripts(B)
    }
};
actuate.util.Package.define("actuate.resource");
actuate.resource.Container = actuate.Class.create();
actuate.resource.Container.prototype = {
    container: null, _sharedResource: null, _nonSharedResource: null, _contentId: null, initialize: function (D, B) {
        var A = document.getElementById(D);
        if (!A) {
            A = document.createElement("span");
            A.id = D;
            A.style.display = "none";
            if (B) {
                B.appendChild(A)
            } else {
                var C = document.getElementsByTagName("body")[0];
                C.appendChild(A)
            }
        }
        this.container = A;
        this._contentId = D
    }, reset: function () {
        while (this.container.childNodes.length > 0) {
            this.container.removeChild(this.container.firstChild)
        }
    }, load: function (A, C, B) {
        A.makeAjaxConnection("get", C, null, "", actuate.Method.bind2(this._onLoad, this, B))
    }, insert: function (A, C, B) {
        A.makeAjaxConnection("get", C, null, "", actuate.Method.bind2(this._onInsert, this, B))
    }, _onLoad: function (C, A) {
        if (A.getStatus() == 200) {
            var B = A.getResponseText();
            this._updateContent(B, C)
        }
    }, _onInsert: function (C, A) {
        if (A.getStatus() == 200) {
            var B = A.getResponseText();
            this._insertContent(B, C)
        }
    }, _updateContent: function (C, E) {
        var B = actuate.util.Utility;
        if (B.isIE && C.match(/^[\s]*\<script/i)) {
            C = "<span style='display:none'>&nbsp;</span>\n" + C
        }
        var A = document.createElement("div");
        C = actuate.util.Utility.removeInlineStyles(C, true);
        A.innerHTML = C;
        this.container.appendChild(A);
        var D = actuate.util.browser;
        if (D.isFirefox4 || D.isFirefox5 || D.isFirefox6 || D.isFirefoxHigherVersion || (!B.isMozilla && !B.isGecko)) {
            actuate.util.Script.executeInlineScripts(A)
        }
        if (E) {
            window.setTimeout(E, 1)
        }
    }, _getSharedResourceContainer: function () {
        if (this.container.firstChild) {
            var D = this.container.firstChild.childNodes;
            for (var C = 0; C < D.length; C++) {
                if (D[C].tagName && D[C].tagName == "DIV") {
                    return D[C]
                }
            }
        } else {
            var B = document.createElement("div");
            B.id = "sharedresource";
            B.className = "actuate_shared_resource";
            B.style.height = "100%";
            B.style.width = "100%";
            B.style.display = "inline";
            var A = document.createElement("div");
            A.appendChild(B);
            this.container.appendChild(A);
            return B
        }
    }, _insertContent: function (C, D) {
        var B = actuate.util.Utility;
        if (B.isIE && C.match(/^[\s]*\<script/i)) {
            C = "<span style='display:none'>&nbsp;</span>\n" + C
        }
        this._sharedResource = this._getSharedResourceContainer();
        var A = document.createElement("div");
        C = B.removeInlineStyles(C, true);
        A.innerHTML = C;
        this._sharedResource.appendChild(A);
        if (!B.isMozilla && !B.isGecko && !B.isChrome) {
            actuate.util.Script.executeInlineScripts(A)
        }
        if (D) {
            window.setTimeout(D, 1)
        }
    }, _getNonShareResource: function () {
        if (!this._nonSharedResource) {
            if (this.container.firstChild == null) {
                return null
            }
            var C = this.container.firstChild.childNodes;
            var B = 0;
            for (var A = 0; A < C.length; A++) {
                if (C[A].tagName && C[A].tagName == "DIV") {
                    if (B == 1) {
                        this._nonSharedResource = C[A];
                        break
                    } else {
                        B++
                    }
                }
            }
        }
        return this._nonSharedResource
    }, cloneResource: function () {
        var C = this._getNonShareResource();
        var D = document.createElement("div");
        if (C != null) {
            var B = C.childNodes;
            for (var A = 0; A < B.length; A++) {
                D.appendChild(B[A].cloneNode(true))
            }
        }
        return D
    }
};
actuate.util.Package.define("actuate.util");
actuate.util.Utility = {
    _numberFormat: null,
    dynamicStyleSheet: undefined,
    CSRF_TOKEN_NAME: "otToken",
    _OT_TokenValue: undefined,
    hexArray: new Array("00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"),
    CSRF_TOKEN_LENGTH: 49,
    _headElement: null,
    initialize: function () {
        var B = navigator.userAgent.toLowerCase();
        var C = actuate.util.Utility;
        C.isStrict = document.compatMode == "CSS1Compat";
        C.isOpera = B.indexOf("opera") > -1;
        C.isChrome = B.indexOf("chrome") > -1;
        C.isFirefox = B.indexOf("firefox") > -1;
        C.isSafari = !C.isChrome && (/webkit|khtml/).test(B);
        C.isSafari3 = C.isSafari && B.indexOf("webkit/5") != -1;
        C.isIE = !C.isOpera && B.indexOf("msie") > -1;
        C.isIE7 = !C.isOpera && B.indexOf("msie 7") > -1;
        C.isIE8 = !C.isOpera && B.indexOf("msie 8") > -1;
        C.isIE9 = !C.isOpera && B.indexOf("msie 9") > -1;
        C.isIE10 = !C.isOpera && B.indexOf("trident/6.0") > -1;
        C.isIE11 = !C.isOpera && B.indexOf("trident/7.0") > -1;
        C.isEdge = /edge\/\d+/.test(B);
        C.isIE8Compat = C.isIE7 && document.documentMode == 8;
        C.isKonqueror = B.indexOf("konqueror") > -1;
        C.isIE6 = C.isIE && !C.isIE7 && !C.isIE8 && !C.isIE9 && !C.isIE10 && !C.isIE11;
        C.isGecko = !C.isKonqueror && !C.isSafari && !C.isChrome && B.indexOf("gecko") > -1 && !C.isIE11;
        C.isGecko3 = C.isGecko && B.indexOf("rv:1.9") > -1;
        if (/Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent)) {
            var A = new Number(RegExp.$1);
            if (A >= 4) {
                C.isFirefox4 = true
            }
        }
        C.isBorderBox = C.isIE && !C.isStrict;
        C.isWindows = (B.indexOf("windows") != -1 || B.indexOf("win32") != -1);
        C.isMac = (B.indexOf("macintosh") != -1 || B.indexOf("mac os x") != -1);
        C.isAir = (B.indexOf("adobeair") != -1);
        C.isLinux = (B.indexOf("linux") != -1);
        C.isAndroid = (B.indexOf("android") != -1);
        C.isSecure = window.location.href.toLowerCase().indexOf("https") === 0;
        if (C.isWindows) {
            C.isWindowsVista = B.indexOf("windows nt 6.0");
            C.isWindows7 = B.indexOf("windows nt 6.1")
        }
    },
    addWordWrap: function (A) {
        A.style.wordWrap = "break-word";
        A.style.overflow = "auto";
        if (A.addEventListener) {
            A.style.display = "block";
            A.style.position = "relative";
            A.style.overflow = "hidden";
            A.addEventListener("overflow", function () {
                var E = new RegExp("<&#8203;\\/*[&#8203;_\\-:;\\s=\"'\\w]+>", "g");
                var B = A.innerHTML;
                var D = B.split("");
                var C = D.join("&#8203;");
                C = C.replace(E, function (F) {
                    return F.replace(/&#8203;/g, "")
                });
                A.innerHTML = C
            }, false)
        }
    },
    getFunctionFromString: function (G, H) {
        try {
            var A = "func" + Date.now();
            var D = document.getElementsByTagName("head")[0];
            var B = document.createElement("script");
            B.setAttribute("nonce", actuate.getNonce());
            B.setAttribute("id", A);
            B.language = "text/javascript";
            var I = document.createTextNode(G);
            B.appendChild(I);
            D.appendChild(B);
            var C = window[H];
            var E = document.getElementById(A);
            document.head.removeChild(E);
            return C
        } catch (F) {
            console.log("Exception in strToFunction: " + F);
            return
        }
    },
    appendFunctiontoHead: function (C) {
        try {
            var F = "func" + Date.now();
            var D = document.getElementsByTagName("head")[0];
            var B = document.createElement("script");
            B.setAttribute("nonce", actuate.getNonce());
            B.setAttribute("id", F);
            B.language = "text/javascript";
            var A = document.createTextNode(C);
            B.appendChild(A);
            D.appendChild(B)
        } catch (E) {
            console.log("Exception in strToFunction: " + E);
            return
        }
    },
    switchDisplayClass: function (A, C, B) {
        if (A.classList.contains(C)) {
            A.classList.replace(C, B)
        } else {
            A.classList.add(B)
        }
    },
    convertPixelToInches: function (B) {
        var A = actuate.util.Utility.getDPI();
        return B / A
    },
    getDPI: function (B) {
        var A = document.getElementById("ac__dot__per__inch");
        if (!A) {
            A = document.createElement("DIV");
            A.id = "ac__dot__per__inch";
            A.style.height = "1in";
            A.style.left = "-100%";
            A.style.padding = "0px";
            A.style.position = "absolute";
            A.style.top = "-100%";
            A.style.width = "1in";
            A.setAttribute("aria-hidden", "true");
            if (B) {
                B.appendChild(A)
            } else {
                document.body.appendChild(A)
            }
        }
        return A.offsetHeight
    },
    escapeHtml: function (B) {
        var A = document.createElement("div");
        A.appendChild(document.createTextNode(B));
        return A.innerHTML
    },
    xmlEncode: function (B) {
        if (!B || typeof B != "string") {
            return B
        }
        var A = B;
        A = A.replace(/\r/g, "&#13;");
        A = A.replace(/\n/g, "&#10;");
        return A
    },
    encode: function (E, F) {
        E = new String(E);
        if (F) {
            F = new String(F)
        } else {
            F = "%"
        }
        var G = new String("");
        var A = E.length;
        for (var C = 0; C < A; C++) {
            var D = E.charAt(C);
            var B = E.charCodeAt(C);
            if ("A" <= D && D <= "Z") {
                G += D
            } else {
                if ("a" <= D && D <= "z") {
                    G += D
                } else {
                    if ("0" <= D && D <= "9") {
                        G += D
                    } else {
                        if (B <= 127) {
                            G += F + actuate.util.Utility.hexArray[B]
                        } else {
                            if (B <= 2047) {
                                G += F + (actuate.util.Utility.hexArray[192 | (B >> 6)]);
                                G += F + (actuate.util.Utility.hexArray[128 | (B & 63)])
                            } else {
                                G += F + (actuate.util.Utility.hexArray[224 | (B >> 12)]);
                                G += F + (actuate.util.Utility.hexArray[128 | ((B >> 6) & 63)]);
                                G += F + (actuate.util.Utility.hexArray[128 | (B & 63)])
                            }
                        }
                    }
                }
            }
        }
        return G
    },
    decode: function (K, J) {
        K = new String(K);
        if (J) {
            J = new String(J)
        } else {
            J = "%"
        }
        var C = new String("");
        var E = K.length;
        var A = -1;
        var I, D = 0;
        for (var F = 0, H = -1; F < E; F++) {
            A = K.charAt(F);
            if (A == J) {
                A = K.charAt(++F);
                var G = (actuate.util.Utility.isDigit(A) ? A - "0" : 10 + (actuate.util.Utility.toLowerCase(A)).charCodeAt(0) - (new String("a")).charCodeAt(0)) & 15;
                A = K.charAt(++F);
                var B = (actuate.util.Utility.isDigit(A) ? A - "0" : 10 + (actuate.util.Utility.toLowerCase(A)).charCodeAt(0) - (new String("a")).charCodeAt(0)) & 15;
                I = (String.fromCharCode((G << 4) | B)).charCodeAt(0)
            } else {
                I = A.charCodeAt(0)
            }
            if ((I & 192) == 128) {
                D = D.toString();
                D = String.fromCharCode(((D.charCodeAt(0) << 6) | (I & 63)));
                if (--H == 0) {
                    C += D
                }
            } else {
                if ((I & 128) == 0) {
                    C += String.fromCharCode(I)
                } else {
                    if ((I & 224) == 192) {
                        D = String.fromCharCode(I & 31);
                        H = 1
                    } else {
                        if ((I & 240) == 224) {
                            D = String.fromCharCode(I & 15);
                            H = 2
                        } else {
                            if ((I & 248) == 240) {
                                D = String.fromCharCode(I & 7);
                                H = 3
                            } else {
                                if ((I & 252) == 248) {
                                    D = String.fromCharCode(I & 3);
                                    H = 4
                                } else {
                                    D = String.fromCharCode(I & 1);
                                    H = 5
                                }
                            }
                        }
                    }
                }
            }
        }
        return C
    },
    isDigit: function (A) {
        return (A >= "0" && A <= "9")
    },
    toLowerCase: function (A) {
        var B = new String(A);
        B = B.toLowerCase();
        return B.charAt(0)
    },
    isArray: function (A) {
        if (!A || !A.constructor) {
            return false
        }
        return (A.constructor == Array)
    },
    isEmpty: function (B, A) {
        return B === null || B === undefined || (!A ? B === "" : false)
    },
    value: function (C, A, B) {
        return this.isEmpty(C, B) ? A : C
    },
    escapeRe: function (A) {
        return A.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1")
    },
    getXmlElementValue: function (C, B) {
        var A = C.getElementsByTagName(B);
        if (A.length > 0) {
            return A[0].firstChild.data
        }
        return null
    },
    isSameDomain: function (D, B) {
        if (!D || !B) {
            return false
        }
        var C = D.match(/^([^:]*:\/\/[^\/]*)/);
        var A = B.match(/^([^:]*:\/\/[^\/]*)/);
        if (!C && !A) {
            return true
        }
        if ((C && !A) || (!C && A)) {
            return false
        }
        if (C[0] && A[0]) {
            if (C[0].toUpperCase() == A[0].toUpperCase()) {
                return true
            } else {
                if (C[0].replace(":80", "").toUpperCase() == A[0].replace(":80", "").toUpperCase()) {
                    return true
                } else {
                    if (C[0].replace(":443", "").toUpperCase() == A[0].replace(":443", "").toUpperCase()) {
                        return true
                    } else {
                        return false
                    }
                }
            }
        }
        return true
    },
    isCrossDomainAndCorsDisabled: function (B, A) {
        return !actuate.util.Utility.isSameDomain(B, A) && actuate.corsEnabled !== true
    },
    randomFloat: function () {
        var B = window.crypto || window.msCrypto;
        var A = B.getRandomValues(new Uint32Array(1))[0];
        return A / Math.pow(2, 32)
    },
    isInteger: function (A) {
        A = Number(A);
        if (Number.isInteger) {
            return Number.isInteger(A)
        } else {
            return typeof A === "number" && isFinite(A) && Math.floor(A) === A
        }
    },
    isLocaleString: function (A) {
        return (A.match(/^[a-z]{2}((_[A-Z]{2})(_[\w]*)?)?$/) != null)
    },
    isUrlDomainRelative: function (A) {
        return (A ? A.match(/^[a-zA-Z]*:\/\//) == null : false)
    },
    makeAbsoluteUrl: function (A, L) {
        if (!A || A.length == 0) {
            A = "."
        }
        if (!A.match(/^[a-zA-Z]*:\/\//)) {
            if (!L) {
                L = location.href
            }
            var D = L.match(/(^[a-zA-Z]*:\/\/[^\/]*)\//);
            if (D) {
                var O = D[1];
                var K = L.substr(O.length).indexOf("/");
                var J = L.substr(O.length + K);
                if (A.charAt(0) == "/") {
                    J = J.substr(0, J.indexOf("/") + 1)
                } else {
                    var B = J.indexOf("?");
                    if (B < 0) {
                        B = J.length
                    }
                    var G = J.lastIndexOf("/", B);
                    if (G >= 0) {
                        J = J.substr(0, G) + "/"
                    }
                }
                var F = A.indexOf("?");
                if (F < 0) {
                    F = A.length
                }
                var M = A.lastIndexOf("/", F);
                var E = A.substr(M + 1);
                if (E != "." && E != "..") {
                    A = A.substr(0, M)
                } else {
                    E = ""
                }
                J = J.substr(0, J.length - 1);
                var C = A.split("/");
                for (var H = 0; H < C.length; H++) {
                    var I = C[H];
                    if (I == "..") {
                        var G = J.lastIndexOf("/");
                        J = J.substr(0, G)
                    } else {
                        if (I != "." && I != "") {
                            J += "/" + I
                        }
                    }
                }
                var N = A.charAt(A.length - 1);
                if (J != "/") {
                    J += "/" + E
                }
                A = O + J
            }
        }
        return A
    },
    removeURLParameter: function (B, A) {
        if (B && A) {
            var C = new RegExp(A + "=([%]|\\d|\\w|\\.|-)*&");
            if (C.test(B)) {
                return B.replace(C, "")
            }
            C = new RegExp(A + "=([%]|\\d|\\w|\\.|-)*$");
            if (C.test(B)) {
                return B.replace(C, "")
            }
        }
        return B
    },
    makeCookiePrefix: function (B) {
        var A = "xmlhttp_";
        var C = B.match(/^(([^:]*:\/\/[^\/]*)\/([^\/]*\/))/);
        if (C && C[1]) {
            C = encodeURIComponent(C[1]);
            return A + C.length + "_" + C + "_"
        }
        return A
    },
    getJSessionId: function (A) {
        var D = null;
        var F = document.cookie;
        if (F) {
            var H = this.makeCookiePrefix(A);
            var E = /^JSESSIONID=(.+)$/;
            var F = F.split("; ");
            for (var C = 0; C < F.length; C++) {
                var B = F[C];
                if (B.substr(0, H.length) == H) {
                    var G = B.substr(H.length);
                    if (E.test(G)) {
                        D = G.match(E)[1];
                        break
                    }
                }
            }
        }
        return D
    },
    getProxyUrl: function (B) {
        if (actuate.util.Utility.isUrlDomainRelative(B)) {
            return null
        }
        var D = actuate.util.Utility.isCrossDomainAndCorsDisabled(location.href, B);
        if (D) {
            B = actuate.util.Utility.makeAbsoluteUrl(B);
            var A = B + actuate.util.Constants.AJAXPROXY_SERVLET_NAME;
            var C = this.getJSessionId(B);
            if (C) {
                A += ";jsessionid=" + C
            }
            return A
        }
        return null
    },
    addOtTokenToUrl: function (B) {
        var A = B;
        var D = actuate.util.Utility.getCsrfTokenValue();
        if (A && D) {
            var C = actuate.util.Utility.getTokenName();
            if (A.indexOf("?") > 0) {
                A = A + "&" + C + "=" + D
            } else {
                A = A + "?" + C + "=" + D
            }
        }
        return A
    },
    addJSessionId: function (E, C) {
        if (actuate.util.Utility.isUrlDomainRelative(C)) {
            return E
        }
        var A = E;
        var F = !actuate.util.Utility.isSameDomain(location.href, C);
        if (F) {
            var D = this.getJSessionId(C);
            if (D) {
                var B = A.indexOf("?");
                A = A.substring(0, B) + ";jsessionid=" + D + A.substring(B)
            }
        }
        return A
    },
    getCsrfTokenWithSeparater: function (E) {
        var B = location.href;
        var C = "";
        if (B) {
            var A = B.indexOf(this.CSRF_TOKEN_NAME);
            if (A > 0) {
                C = B.substring(A, A + actuate.util.Utility.CSRF_TOKEN_LENGTH);
                var D = "&";
                if (E) {
                    D = "?"
                }
                return D + C
            }
        }
        return C
    },
    getCsrfToken: function () {
        var B = location.href;
        var D = "";
        if (B) {
            var A = B.indexOf(this.CSRF_TOKEN_NAME);
            if (A > 0) {
                D = B.substring(A, A + actuate.util.Utility.CSRF_TOKEN_LENGTH)
            }
            if (D.length === 0) {
                var C = actuate.util.Utility.getToken();
                if (C) {
                    D = actuate.util.Utility.getTokenName() + "=" + C
                }
            }
        }
        return D
    },
    getCsrfTokenValue: function () {
        if (actuate.util.Utility.getToken()) {
            return actuate.util.Utility.getToken()
        }
        var B = actuate.util.Utility.getCsrfToken();
        var C = "";
        if (B) {
            var A = B.indexOf("=");
            if (A > 0) {
                C = B.substring(A + 1)
            }
        }
        return C
    },
    setToken: function (A) {
        this._OT_TokenValue = A
    },
    getToken: function () {
        return this._OT_TokenValue
    },
    getTokenName: function () {
        return this.CSRF_TOKEN_NAME
    },
    chainCallbacks: function () {
        if (arguments && arguments.length > 0) {
            var B = new Array();
            for (var A = 0; A < arguments.length; A++) {
                if (arguments[A] != null && typeof (arguments[A]) == "function") {
                    B.push(arguments[A])
                }
            }
            this.chainCallbacksArray(B, null)
        }
    },
    chainCallbacksWithException: function () {
        var A = arguments.shift();
        this.chainCallbacksArray(functions, A)
    },
    chainCallbacksArray: function (B, A) {
        var C = new this._CallbackChain(B, A);
        C.start()
    },
    makeCallbackFunction: function _makeCallbackFunction(A) {
        return function (B) {
            A();
            if (B) {
                B()
            }
        }
    },
    readCookie: function (F, E) {
        if (!E) {
            E = document
        }
        var D = E.cookie;
        var A = new RegExp(encodeURIComponent(F) + "=([^;]*)", "g");
        var C = A.exec(D);
        if (C && C.length > 1) {
            if (C.length == 2) {
                return decodeURIComponent(C[1])
            } else {
                C.shift();
                for (var B = 0; B < cookiesValues.length; B++) {
                    C[B] = decodeURIComponent(C[B])
                }
                return C
            }
        } else {
            return null
        }
    },
    writeCookie: function (F, C, A, E, D) {
        if (!D) {
            D = document
        }
        var B = encodeURIComponent(F) + "=" + ((C != null) ? encodeURIComponent(C) : "");
        if (A && A.toGMTString) {
            B += "; Expires=" + A.toGMTString()
        }
        if (E) {
            B += "; Path=" + E
        }
        D.cookie = B
    },
    clearCookie: function (C, B) {
        var A = new Date();
        A.setTime(A.getTime() - 1);
        this.writeCookie(C, null, A, null, B)
    },
    stripPath: function (A) {
        var B = A.lastIndexOf("/");
        if (B >= 0) {
            A = A.substr(B + 1)
        }
        return A
    },
    stripFileName: function (A) {
        var C = A.lastIndexOf("/");
        var B = "";
        if (C >= 0) {
            B = A.substr(0, C + 1)
        }
        return B
    },
    indexOf: function (C, B) {
        for (var A = 0; A < C.length; A++) {
            if (C[A] == B) {
                return A
            }
        }
        return -1
    },
    arrayRemoveValue: function (A, C) {
        if (!A) {
            return null
        }
        if (A.remove) {
            A.remove(C)
        } else {
            var B = this.arrayIndexOf(A, C);
            if (B != -1) {
                A.splice(B, 1)
            }
        }
    },
    getElementsByClassName: function (D) {
        var F = new Array();
        var E = document.getElementsByTagName("*");
        for (var C = 0; C < E.length; C++) {
            if (E[C] && typeof (E[C].className) == "string") {
                if (E[C].className.indexOf(" ") >= 0) {
                    var B = E[C].className.split(" ");
                    for (var A = 0; A < B.length; A++) {
                        if (B[A] == D) {
                            F.push(E[C])
                        }
                    }
                } else {
                    if (E[C].className == D) {
                        F.push(E[C])
                    }
                }
            }
        }
        return F
    },
    stripFileExtension: function (A) {
        var B = A.lastIndexOf(".");
        if (B >= 0) {
            A = A.substr(0, B)
        }
        return A
    },
    getFileExtension: function (D) {
        if (actuate.util.Utility.isEmpty(D, false)) {
            return ""
        }
        var A = D.lastIndexOf(";");
        if (A != -1) {
            D = D.substr(0, A)
        }
        var B = D.lastIndexOf(".");
        if (B == -1) {
            return ""
        }
        var C = D.substr(B + 1, D.length);
        return C
    },
    extensionToLowerCase: function (B) {
        var A = this.getFileExtension(B);
        return this.stripFileExtension(B) + "." + A.toLowerCase()
    },
    fileNameToLowerCase: function (B) {
        var A = this.stripPath(B);
        return this.stripFileName(B) + A.toLowerCase()
    },
    base64encode: function (D) {
        var B = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var A = "", K, I, G, J, H, F, E, C = 0;
        do {
            K = D.charCodeAt(C++);
            I = D.charCodeAt(C++);
            G = D.charCodeAt(C++);
            J = K >> 2;
            H = ((K & 3) << 4) | (I >> 4);
            F = ((I & 15) << 2) | (G >> 6);
            E = G & 63;
            if (isNaN(I)) {
                F = E = 64
            } else {
                if (isNaN(G)) {
                    E = 64
                }
            }
            A = A + B.charAt(J) + B.charAt(H) + B.charAt(F) + B.charAt(E)
        } while (C < D.length);
        return A
    },
    utf8encode: function (B) {
        if ("string" != typeof B) {
            return ""
        }
        B = B.replace(/\r\n/g, "\n");
        var A = "";
        for (var D = 0; D < B.length; D++) {
            var C = B.charCodeAt(D);
            if ("null" != typeof C) {
                if (C < 128) {
                    A += String.fromCharCode(C)
                } else {
                    if ((C > 127) && (C < 2048)) {
                        A += String.fromCharCode((C >> 6) | 192);
                        A += String.fromCharCode((C & 63) | 128)
                    } else {
                        A += String.fromCharCode((C >> 12) | 224);
                        A += String.fromCharCode(((C >> 6) & 63) | 128);
                        A += String.fromCharCode((C & 63) | 128)
                    }
                }
            }
        }
        return A
    },
    isActuateException: function (A) {
        return (A instanceof actuate.Exception || (A.getType && A.getErrCode))
    },
    createException: function (E, A) {
        if (this.isActuateException(E)) {
            return E
        } else {
            if (typeof (E) == "string") {
                return new actuate.Exception(actuate.Exception.ERR_CLIENT, E)
            }
        }
        if (!A) {
            A = actuate.Exception
        }
        var D = E.message ? E.message : E.description;
        if (!D) {
            D = E
        }
        var B = E.number ? E.number : null;
        var C = "";
        if (E.fileName) {
            C += "\n fileName=" + E.fileName
        } else {
            if (E.filename) {
                C += "\n filename=" + E.filename
            }
        }
        if (E.lineNumber) {
            C += "\n lineNumber=" + E.lineNumber
        }
        if (E.stack) {
            C += "\n stack=" + E.stack
        }
        if (E.description && E.description != D) {
            C += "\n description=" + E.description
        }
        return new A(actuate.Exception.ERR_CLIENT, D, C, B)
    },
    showProgressIndicator: function (F, I, E, B, J) {
        if (F == null) {
            if (actuate.USER_ENV && (actuate.USER_ENV == "tablet" || actuate.USER_ENV == "tabletapp")) {
                F = document.createElement("DIV");
                F.id = "progress_animation_" + I;
                F.className = "x-loading-spinner";
                var H = '<span class="x-loading-top"></span><span class="x-loading-right"></span><span class="x-loading-bottom"></span><span class="x-loading-left"></span>';
                F.innerHTML = H
            } else {
                if (actuate.getProfile() === "dataprovision") {
                    F = document.createElement("DIV");
                    F.id = "progress_animation_" + I;
                    F.className = "opentext-ux";
                    var H = '<div class="application"><div class="spinner active"><div class="spinner-overlay"></div><div class="spinner-icon"></div></div></div>';
                    F.innerHTML = H
                } else {
                    F = document.createElement("DIV");
                    F.id = "progress_animation_" + I;
                    F.className = "progress_animation";
                    var A = actuate.util.Constants.LOC_IMG_PROGRESS_ANIMATION;
                    var D = '<img align="center" valign="middle" src="' + E + A + '" alt="Progress"/>';
                    F.innerHTML = D
                }
            }
            var C = null;
            if (I) {
                C = document.getElementById(I)
            }
            if (!C) {
                C = document.body
            }
            C.appendChild(F);
            if (actuate.getProfile() != "dataprovision") {
                F.style.position = "absolute";
                F.style.zIndex = "1000000"
            }
        }
        if (actuate.getProfile() != "dataprovision") {
            var G = null;
            if (window.getComputedStyle) {
                G = window.getComputedStyle(F, null)
            }
            if (I && G && G.getPropertyValue("width")) {
                F.style.left = B / 2 - parseInt(G.getPropertyValue("width")) / 2 + "px"
            } else {
                if (B) {
                    F.style.left = B / 2 - 23 + "px"
                }
            }
            if (I && G && G.getPropertyValue("height")) {
                F.style.top = J / 2 - parseInt(G.getPropertyValue("height")) / 2 + "px"
            } else {
                if (J) {
                    F.style.top = J / 2 - 23 + "px"
                }
            }
            F.style.display = "block"
        } else {
            F.style.display = ""
        }
        return F
    },
    showProgressIndicatorInTouchDevice: function (B, D, E, A) {
        var C = document.getElementById("progress_animation_" + B);
        if (C != null) {
            C.className = "opentext-ux";
            C.style = "";
            var G = '<div class="application"><div class="spinner active"><div class="spinner-overlay"></div><div class="spinner-icon"></div></div></div>';
            C.innerHTML = G;
            return C
        } else {
            C = document.createElement("DIV");
            C.id = "progress_animation_" + B;
            C.className = "opentext-ux";
            var G = '<div class="application"><div class="spinner active"><div class="spinner-overlay"></div><div class="spinner-icon"></div></div></div>';
            C.innerHTML = G;
            var F = null;
            if (B) {
                F = document.getElementById(B)
            }
            if (!F) {
                F = document.body
            }
            F.appendChild(C)
        }
    },
    isTouchDevice: function () {
        try {
            document.createEvent("TouchEvent");
            return true
        } catch (A) {
            return false
        }
    },
    notifyScreenReader: function (B) {
        try {
            var A = document.createElement("SPAN");
            A.setAttribute("role", "alert");
            A.setAttribute("aria-label", B);
            document.body.appendChild(A);
            setTimeout(function () {
                document.body.removeChild(A)
            }, 5000)
        } catch (C) {
            console.log("Unable to notify screen reader user")
        }
    },
    addScreenReaderElementDesc: function (A) {
        try {
            var B = document.getElementById("actuateScreenReaderEleDesc");
            if (!B) {
                var D = document.createElement("SPAN");
                D.setAttribute("aria-label", A);
                D.setAttribute("id", "actuateScreenReaderEleDesc");
                document.body.appendChild(D)
            } else {
                B.setAttribute("aria-label", A)
            }
        } catch (C) {
            console.log("Unable to notify screen reader user")
        }
    },
    convertInchToPixel: function () {
        var A = document.createElement("DIV");
        A.style.width = "1in";
        A.style.position = "absolute";
        document.body.appendChild(A);
        var B = A.offsetWidth;
        document.body.removeChild(A);
        return B
    },
    hideProgressIndicator: function (A) {
        if (A != null) {
            A.style.display = "none"
        }
    },
    hideProgressIndicatorInTouchDevice: function (A) {
        if (A != null) {
            A.style.display = "none"
        }
    },
    htmlEncode: function (C, A) {
        var B = !C ? "&nbsp;" : String(C).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/\"/g, "&quot;").replace(/'/g, "&#039;");
        return A ? B : B.replace(/ /g, "&nbsp;")
    },
    htmlDecode: function (B) {
        var A = B;
        if (A) {
            A = String(A).replace(/&gt;/g, ">");
            A = A.replace(/&lt;/g, "<");
            A = A.replace(/&quot;/g, '"');
            A = A.replace(/&nbsp;/g, " ");
            A = A.replace(/&amp;/g, "&");
            A = A.replace(/&#039;/g, "'")
        }
        return A
    },
    isEmpty: function (B, A) {
        return B === null || B === undefined || (!A ? B === "" : false)
    },
    isNumeric: function (B) {
        if (isNaN(B)) {
            return false
        }
        var A = "-+0123456789.,";
        var D;
        for (var C = 0; C < B.length; C++) {
            D = B.charAt(C);
            if (A.indexOf(D) == -1) {
                return false
            }
        }
        return true
    },
    isNumericCharacters: function (B) {
        var A = "-+0123456789.,";
        var D;
        for (var C = 0; C < B.length; C++) {
            D = B.charAt(C);
            if (A.indexOf(D) == -1) {
                return false
            }
        }
        return true
    },
    getNumberPrecision: function (A) {
        if (A != null) {
            if (typeof (A) == "number") {
                A = "" + A
            }
            var B = A.indexOf(".");
            if (B > 0) {
                return A.length - B - 1
            }
        }
        return 0
    },
    value: function (C, A, B) {
        return actuate.util.Utility.isEmpty(C, B) ? A : C
    },
    arrayIndexOf: function (A, C) {
        if (!A) {
            return -1
        }
        if (A.indexOf) {
            return A.indexOf(C)
        } else {
            for (var B = 0; B < A.length; B++) {
                if (A[B] == C) {
                    return B
                }
            }
        }
        return -1
    },
    arraySwap: function (A, C, B) {
        A[B] = A.splice(C, 1, A[B])[0]
    },
    arrayContains: function (A, B) {
        return (actuate.util.Utility.arrayIndexOf(A, B) != -1)
    },
    arrayUnique: function (D) {
        var A = new Array();
        label:for (var C = 0; C < D.length; C++) {
            for (var B = 0; B < A.length; B++) {
                if (A[B] == D[C]) {
                    continue label
                }
            }
            A[A.length] = D[C]
        }
        return A
    },
    arrayUnion: function (C, A) {
        var B = [].concat(C);
        B = B.concat(A);
        return actuate.util.Utility.arrayUnique(B)
    },
    needLoadJquery: function () {
        var B = true;
        if (window.jQuery) {
            var A = jQuery.fn.jquery;
            var C = A.split(".");
            if (C[1] > 9) {
                B = false
            } else {
                if (C[1] == 9) {
                    if (C[2] >= 1) {
                        B = false
                    }
                }
            }
        }
        return B
    },
    urlEncode: function (A) {
        if (!A) {
            return ""
        }
        var B = [];
        for (var I in A) {
            var C = A[I], D = encodeURIComponent(I);
            var G = typeof C;
            if (G == "undefined") {
                B.push(D, "=&")
            } else {
                if (G != "function" && G != "object") {
                    B.push(D, "=", encodeURIComponent(C), "&")
                } else {
                    if (actuate.util.Utility.isDate(C)) {
                        var H = actuate.util.browser && actuate.util.browser.useMobile();
                        if (H) {
                            var J = Ext.encode(C).replace(/"/g, "")
                        } else {
                            var J = actuate.widget.encode(C).replace(/"/g, "")
                        }
                        B.push(D, "=", J, "&")
                    } else {
                        if (actuate.util.Utility.isArray(C)) {
                            if (C.length) {
                                for (var E = 0, F = C.length; E < F; E++) {
                                    B.push(D, "=", encodeURIComponent(C[E] === undefined ? "" : C[E]), "&")
                                }
                            } else {
                                B.push(D, "=&")
                            }
                        }
                    }
                }
            }
        }
        B.pop();
        return B.join("")
    },
    apply: function (C, D, B) {
        if (B) {
            actuate.util.Utility.apply(C, B)
        }
        if (C && D && typeof D == "object") {
            for (var A in D) {
                C[A] = D[A]
            }
        }
        return C
    },
    applyIf: function (B, C) {
        if (B && C) {
            for (var A in C) {
                if (typeof B[A] == "undefined") {
                    B[A] = C[A]
                }
            }
        }
        return B
    },
    fixIE8ImageButtons: function (E, G) {
        var F = actuate.util.Utility;
        var B = actuate.util.Event;
        var A = E.getElementsByTagName("input");
        if (!G) {
            G = "CSSSprite"
        }
        for (var D = 0; D < A.length; D++) {
            var C = A[D];
            if (C.className && C.className.indexOf(G) >= 0) {
                if (C.buttonFixType == 2) {
                    B.observe(C, "keydown", F.__fixIE8ImageButton2);
                    B.observe(C, "keyup", F.__fixIE8ImageButton2);
                    B.observe(C, "mousedown", F.__fixIE8ImageButton2);
                    B.observe(C, "mouseup", F.__fixIE8ImageButton2);
                    B.observe(C, "mouseleave", F.__fixIE8ImageButton2);
                    B.observe(C, "mousemove", F.__fixIE8ImageButton2)
                } else {
                    B.observe(C, "keydown", F.__fixIE8ImageButton);
                    B.observe(C, "keyup", F.__fixIE8ImageButton);
                    B.observe(C, "mousedown", F.__fixIE8ImageButton);
                    B.observe(C, "mouseup", F.__fixIE8ImageButton);
                    B.observe(C, "mouseleave", F.__fixIE8ImageButton);
                    B.observe(C, "mouseenter", F.__fixIE8ImageButton)
                }
            }
        }
    },
    __fixIE8ImageButton: function (B) {
        var A = actuate.util.Event.element(B);
        if (A) {
            if ((B.button == 1 && B.type == "mousedown") || (B.type == "keydown" && B.keyCode == 32)) {
                A.style.border = "1px solid transparent"
            } else {
                A.style.border = "0"
            }
        }
    },
    __fixIE8ImageButton2: function (E) {
        var A = actuate.util.Event.element(E);
        if (A) {
            var D = false;
            if ((E.type == "keydown" && E.keyCode == 32) || (E.button == 1 && (E.type == "mousedown" || E.type == "mousemove"))) {
                D = true
            } else {
                if (E.type == "mouseup" || E.type == "mouseleave" || (E.type == "keyup" && E.keyCode == 32)) {
                    D = false
                }
            }
            var C = 5;
            var B = 5;
            if (D != A.buttonDown) {
                A.buttonDown = D;
                if (typeof (A.oldMarginRight) == undefined || A.oldMarginRight == null) {
                    A.oldMarginRight = parseInt(actuate.util.Element.getComputedStyle(A, "marginRight")) || 0;
                    A.oldMarginTop = parseInt(actuate.util.Element.getComputedStyle(A, "marginTop")) || 0
                }
                if (D) {
                    A.style.marginRight = (A.oldMarginRight - 1) + "px";
                    A.style.marginTop = (A.oldMarginTop + 1) + "px"
                } else {
                    A.style.marginRight = A.oldMarginRight + "px";
                    A.style.marginTop = A.oldMarginTop + "px"
                }
            }
        }
    },
    parseJson: function (A) {
        if (A.childNodes) {
            if (A.childNodes.length > 0) {
                var C = "";
                for (var B = 0; B < A.childNodes.length; B++) {
                    C += A.childNodes[B].data
                }
                A = C
            } else {
                A = A.firstChild.data
            }
        }
        return actuate.util.Json.parse(A)
    },
    execJS: function (B) {
        if (!!!B) {
            return
        }
        if (!actuate.util.browser.isFirefox || actuate.util.browser.isFirefox4 || actuate.util.browser.isFirefox5 || actuate.util.browser.isFirefox6 || actuate.util.browser.isFirefoxHigherVersion) {
            var A = B.getElementsByTagName("script");
            for (var E = 0; E < A.length; E++) {
                if (A[E].src) {
                    var D = document.getElementsByTagName("head")[0];
                    if (D) {
                        var C = document.createElement("script");
                        C.setAttribute("type", "text/javascript");
                        C.setAttribute("src", A[E].src);
                        D.appendChild(C)
                    }
                } else {
                    if (A[E].innerHTML) {
                        try {
                            try {
                                if (window.execScript) {
                                    window.execScript(A[E].innerHTML)
                                } else {
                                    this._executeScriptTag(A[E].innerHTML)
                                }
                            } catch (G) {
                            }
                        } catch (G) {
                        }
                    }
                }
            }
        }
        if (actuate.util.browser.isSafari) {
            var F = B.getElementsByTagName("style");
            for (var E = 0; E < F.length; E++) {
                if (A[E].src) {
                    var D = document.getElementsByTagName("head")[0];
                    if (D) {
                        D.appendChild(F[E])
                    }
                } else {
                    if (A[E].innerHTML) {
                        this._executeScriptTag(A[E].innerHTML)
                    }
                }
            }
        }
    },
    _executeScriptTag: function (A, D) {
        this._headElement = document.getElementsByTagName("head")[0];
        var C = document.createElement("script");
        C.setAttribute("nonce", actuate.getNonce());
        C.language = D || "text/javascript";
        var B = document.createTextNode(A);
        C.appendChild(B);
        this._headElement.appendChild(C)
    },
    isTransient: function (A) {
        return A != null && A.indexOf("$$$Transient") >= 0
    },
    getLocalizedString: function () {
        if (!actuate.resourcesBundle) {
            return ""
        }
        var E = arguments[0];
        var D = actuate.resourcesBundle.localizedStrings[E];
        if (!D) {
            return ""
        }
        for (var B = 1; B < arguments.length; B++) {
            var A = B - 1;
            var C = new RegExp("\\{" + A + "\\}", "g");
            D = D.replace(C, arguments[B])
        }
        return D
    },
    getLocalizedName: function (F, C, E, B, D) {
        var A;
        if (D === undefined || F[D] === undefined) {
            A = F.name
        } else {
            A = F[D]
        }
        if (B) {
            return this.getLocalizedString(F[C])
        } else {
            return F[C] && F[C][E] ? F[C][E] : A
        }
    },
    addDialogHelpButton: function (B, J, E, D, F, M) {
        var A = document.createElement("div");
        J.appendChild(A);
        A.className = E;
        var L = B.getTabInfo().getHelpDocBase();
        var H = "/wwhelp.htm";
        var G = B.getHelpLinkContext();
        var N = B.getHelpLinkTopic();
        var K = L + H + "?single=true" + (G ? ("&context=" + G) : "") + (N ? ("&topic=" + N) : "");
        var C = {
            cls: D, iconCls: F, tooltip: M, scope: B, handler: function () {
                window.open(K)
            }
        };
        var I = new actuate.uiadapter.Button(C);
        I.render(A)
    },
    getLocalizedStrings: function (E, F) {
        if (!actuate.resourcesBundle) {
            return {}
        }
        if (E) {
            E += "."
        }
        var A = actuate.resourcesBundle.localizedStrings;
        var B = {};
        for (var D = 0; D < F.length; D++) {
            var C = F[D];
            B[C] = A[E + C]
        }
        return B
    },
    getLocaleStore: function () {
        if (!actuate.dialog.localeStore) {
            var C = [];
            for (var B in actuate.dialog.locales) {
                C.push([B, actuate.dialog.locales[B].displayName])
            }
            var A = actuate.util.browser && actuate.util.browser.useMobile();
            if (A == true) {
                return C
            } else {
                actuate.dialog.localeStore = new actuate.widget.data.SimpleStore({
                    id: 0,
                    fields: ["value", "text"],
                    data: C
                })
            }
        }
        return actuate.dialog.localeStore
    },
    formatDate: function (b, Y) {
        Y = Y + "";
        var I = "";
        var R = 0;
        var a = "";
        var D = "";
        var G = b.getYear() + "";
        var E = b.getMonth() + 1;
        var Z = b.getDate();
        var J = b.getHours();
        var T = b.getMinutes();
        var N = b.getSeconds();
        var P, Q, B, O, e, C, X, W, U, L, g, J, f, F, A, V;
        if (G.length < 4) {
            G = G - 0 + 1900
        }
        G = "" + G;
        P = G;
        Q = G.substring(2, 4);
        if (E < 10) {
            O = "0" + E
        } else {
            O = E
        }
        B = this.getLocalizedString("calendarDialog.localizedMonthNames" + E - 1);
        if (Z < 10) {
            e = "0" + Z
        } else {
            e = Z
        }
        X = J;
        F = J;
        V = J + 1;
        if (X > 12) {
            X -= 12
        }
        if (X == 0) {
            X = 12
        }
        if (X < 10) {
            C = "0" + X
        } else {
            C = X
        }
        if (J < 10) {
            g = "0" + F
        } else {
            g = J
        }
        if (F > 11) {
            F -= 12
        }
        if (F < 10) {
            f = "0" + F
        } else {
            f = F
        }
        if (V < 10) {
            A = "0" + V
        } else {
            A = V
        }
        if (J > 11) {
            L = this.getLocalizedString("calendarDialog.LOCALIZED_PM")
        } else {
            L = this.getLocalizedString("calendarDialog.LOCALIZED_AM")
        }
        if (T < 10) {
            W = "0" + T
        } else {
            W = T
        }
        if (N < 10) {
            U = "0" + N
        } else {
            U = N
        }
        var S = new Object();
        S.yyyy = P;
        S.yy = Q;
        S.y = G;
        S.MMM = B;
        S.MM = O;
        S.M = E;
        S.dd = e;
        S.d = Z;
        S.hh = C;
        S.h = X;
        S.HH = g;
        S.H = J;
        S.KK = f;
        S.K = F;
        S.kk = A;
        S.k = V;
        S.mm = W;
        S.m = T;
        S.ss = U;
        S.s = N;
        S.a = L;
        bQuote = false;
        while (R < Y.length) {
            a = Y.charAt(R);
            D = "";
            bQuote = (a == "'" || a == '"');
            if (bQuote) {
                R++
            }
            while ((Y.charAt(R) == a || bQuote) && (R < Y.length)) {
                if (Y.charAt(R) == "'" || Y.charAt(R) == '"') {
                    bQuote = false;
                    R++;
                    break
                }
                D += Y.charAt(R);
                R++
            }
            if (S[D] != null) {
                I = I + S[D]
            } else {
                if (D.length > 0) {
                    cStart = D[0];
                    cEnd = D[D.length - 1];
                    if ((cStart == '"' && cEnd == '"') || (cStart == "'" && cEnd == "'")) {
                        D = D.substring(1, D.length - 1)
                    }
                }
                I = I + D
            }
        }
        return I
    },
    toDate: function (A) {
        return this.getLocalizedString("calendarDialog.CAL_LOCALIZED_DATE_INSTANCE")
    },
    toDateTime: function (A) {
        return this.getLocalizedString("calendarDialog.CAL_LOCALIZED_DATETIME_INSTANCE")
    },
    toTime: function (A) {
        return this.getLocalizedString("calendarDialog.CAL_LOCALIZED_TIME_INSTANCE")
    },
    constrain: function (C, B, A) {
        if (C < B) {
            return B
        } else {
            if (C > A) {
                return A
            }
        }
        return C
    },
    getDesignId: function (D) {
        var A = D.lastIndexOf("/");
        if (A >= 0) {
            D = D.substr(A + 1);
            var C = D.indexOf("(");
            if (C >= 0) {
                D = D.substr(0, C)
            }
            var B = D.indexOf(".");
            if (B >= 0) {
                return "/" + D.substr(B + 1)
            } else {
                return "/" + D
            }
        }
    },
    isUserDefinedBookmark: function (A) {
        return A && A.length > 0 && A.indexOf("_AUTOGENBOOKMARK_") == -1
    },
    closest: function (D, C, A, E) {
        var B = D;
        if (C) {
            while ((B = B.parentNode) && !this.containsClass(B, C)) {
            }
        } else {
            if (A) {
                while ((B = B.parentNode) && B.tagName !== A) {
                }
            } else {
                if (E) {
                    while ((B = B.parentNode) && B.getAttribute && B.getAttribute("element_type") !== E.element_type) {
                    }
                    if (B == document) {
                        return null
                    }
                }
            }
        }
        return B
    },
    getClientChart: function (D) {
        if (D) {
            var A;
            if (D.getAttribute && D.hasAttribute("data-highcharts-chart")) {
                A = parseInt(D.getAttribute("data-highcharts-chart")) || null
            } else {
                var C = D.querySelectorAll("div");
                for (var B = 0; B < C.length; B++) {
                    if (C[B].getAttribute && C[B].hasAttribute("data-highcharts-chart")) {
                        A = parseInt(C[B].getAttribute("data-highcharts-chart")) || null;
                        break
                    }
                }
            }
            if (A) {
                return Highcharts.charts[A]
            }
        }
    },
    containsClass: function (A, B) {
        if (A.classList) {
            return A.classList.contains(B)
        }
        return (" " + A.className + " ").indexOf(" " + B + " ") > -1
    },
    addClass: function (A, B) {
        if (A.classList) {
            A.classList.add(B)
        } else {
            if (!this.containsClass(A, B)) {
                A.className = A.className + " " + B
            }
        }
    },
    removeClass: function (A, B) {
        if (A.classList) {
            A.classList.remove(B)
        } else {
            if (this.containsClass(A, B)) {
                A.className = A.className.replace(B, " ")
            }
        }
    },
    isGraph: function (A) {
        var B = actuate.util.Event.element(A);
        while (B && B.tagName) {
            if ((B.tagName.toUpperCase() == "DIV" && B.className == "html5charts-container") || B.tagName.toUpperCase() == "SVG") {
                return true
            }
            B = B.parentNode
        }
        return false
    },
    isArray: function (A) {
        if (!A || !A.constructor) {
            return false
        }
        return (A.constructor == Array)
    },
    isValidHttpUrl: function (B) {
        var A = /(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})/gi;
        return A.test(B)
    },
    isTime: function (A) {
        return A == actuate.Constant.DataType.TIME
    },
    isDateDataType: function (A) {
        return (A == actuate.Constant.DataType.TIME || A == actuate.Constant.DataType.DATE || A == actuate.Constant.DataType.DATETIME)
    },
    isDateTime: function (A) {
        return A == actuate.Constant.DataType.DATETIME || A == actuate.Constant.DataType.DATE || A == actuate.Constant.DataType.TIME
    },
    isNumber: function (A) {
        return (A == actuate.Constant.DataType.DECIMAL || A == actuate.Constant.DataType.FLOAT || A == actuate.Constant.DataType.INTEGER)
    },
    isNumericalType: function (A) {
        return A == actuate.Constant.DataType.INTEGER || A == actuate.Constant.DataType.DOUBLE || A == actuate.Constant.DataType.DECIMAL || A == actuate.Constant.DataType.FLOAT || A == actuate.Constant.DataType.OTHER
    },
    isDate: function (A) {
        return A && typeof A.getFullYear == "function"
    },
    encodeColor: function (C) {
        var A = "";
        if (C) {
            A = C;
            var B = /[0-9A-F]{4,}/i;
            if (A.toLowerCase().indexOf("rgb") < 0 && A.indexOf("#") < 0 && B.test(A)) {
                while (A.length < 6) {
                    A = "0" + A
                }
                A = "#" + A
            }
        }
        return A
    },
    convertCharacterToHalfWidth: function (A) {
        var B = A.charCodeAt(0);
        if (B >= 65281 && B <= 65373) {
            return String.fromCharCode(B - 65248)
        } else {
            if (B == 12288) {
                return String.fromCharCode(32)
            } else {
                return A
            }
        }
    },
    isLetter: function (A) {
        return this._isBaseChar(A) || this._isIdeographic(A)
    },
    _isBaseChar: function (A) {
        return ("\u0041" <= A && A <= "\u005a") || ("\u0061" <= A && A <= "\u007a") || ("\u00c0" <= A && A <= "\u00d6") || ("\u00d8" <= A && A <= "\u00f6") || ("\u00f8" <= A && A <= "\u00ff") || ("\u0100" <= A && A <= "\u0131") || ("\u0134" <= A && A <= "\u013e") || ("\u0141" <= A && A <= "\u0148") || ("\u014a" <= A && A <= "\u017e") || ("\u0180" <= A && A <= "\u01c3") || ("\u01cd" <= A && A <= "\u01f0") || ("\u01f4" <= A && A <= "\u01f5") || ("\u01fa" <= A && A <= "\u0217") || ("\u0250" <= A && A <= "\u02a8") || ("\u02bb" <= A && A <= "\u02c1") || (A == "\u0386") || ("\u0388" <= A && A <= "\u038a") || (A == "\u038c") || ("\u038e" <= A && A <= "\u03a1") || ("\u03a3" <= A && A <= "\u03ce") || ("\u03d0" <= A && A <= "\u03d6") || (A == "\u03da") || (A == "\u03dc") || (A == "\u03de") || (A == "\u03e0") || ("\u03e2" <= A && A <= "\u03f3") || ("\u0401" <= A && A <= "\u040c") || ("\u040e" <= A && A <= "\u044f") || ("\u0451" <= A && A <= "\u045c") || ("\u045e" <= A && A <= "\u0481") || ("\u0490" <= A && A <= "\u04c4") || ("\u04c7" <= A && A <= "\u04c8") || ("\u04cb" <= A && A <= "\u04cc") || ("\u04d0" <= A && A <= "\u04eb") || ("\u04ee" <= A && A <= "\u04f5") || ("\u04f8" <= A && A <= "\u04f9") || ("\u0531" <= A && A <= "\u0556") || (A == "\u0559") || ("\u0561" <= A && A <= "\u0586") || ("\u05d0" <= A && A <= "\u05ea") || ("\u05f0" <= A && A <= "\u05f2") || ("\u0621" <= A && A <= "\u063a") || ("\u0641" <= A && A <= "\u064a") || ("\u0671" <= A && A <= "\u06b7") || ("\u06ba" <= A && A <= "\u06be") || ("\u06c0" <= A && A <= "\u06ce") || ("\u06d0" <= A && A <= "\u06d3") || (A == "\u06d5") || ("\u06e5" <= A && A <= "\u06e6") || ("\u0905" <= A && A <= "\u0939") || (A == "\u093d") || ("\u0958" <= A && A <= "\u0961") || ("\u0985" <= A && A <= "\u098c") || ("\u098f" <= A && A <= "\u0990") || ("\u0993" <= A && A <= "\u09a8") || ("\u09aa" <= A && A <= "\u09b0") || (A == "\u09b2") || ("\u09b6" <= A && A <= "\u09b9") || ("\u09dc" <= A && A <= "\u09dd") || ("\u09df" <= A && A <= "\u09e1") || ("\u09f0" <= A && A <= "\u09f1") || ("\u0a05" <= A && A <= "\u0a0a") || ("\u0a0f" <= A && A <= "\u0a10") || ("\u0a13" <= A && A <= "\u0a28") || ("\u0a2a" <= A && A <= "\u0a30") || ("\u0a32" <= A && A <= "\u0a33") || ("\u0a35" <= A && A <= "\u0a36") || ("\u0a38" <= A && A <= "\u0a39") || ("\u0a59" <= A && A <= "\u0a5c") || (A == "\u0a5e") || ("\u0a72" <= A && A <= "\u0a74") || ("\u0a85" <= A && A <= "\u0a8b") || (A == "\u0a8d") || ("\u0a8f" <= A && A <= "\u0a91") || ("\u0a93" <= A && A <= "\u0aa8") || ("\u0aaa" <= A && A <= "\u0ab0") || ("\u0ab2" <= A && A <= "\u0ab3") || ("\u0ab5" <= A && A <= "\u0ab9") || (A == "\u0abd") || (A == "\u0ae0") || ("\u0b05" <= A && A <= "\u0b0c") || ("\u0b0f" <= A && A <= "\u0b10") || ("\u0b13" <= A && A <= "\u0b28") || ("\u0b2a" <= A && A <= "\u0b30") || ("\u0b32" <= A && A <= "\u0b33") || ("\u0b36" <= A && A <= "\u0b39") || (A == "\u0b3d") || ("\u0b5c" <= A && A <= "\u0b5d") || ("\u0b5f" <= A && A <= "\u0b61") || ("\u0b85" <= A && A <= "\u0b8a") || ("\u0b8e" <= A && A <= "\u0b90") || ("\u0b92" <= A && A <= "\u0b95") || ("\u0b99" <= A && A <= "\u0b9a") || (A == "\u0b9c") || ("\u0b9e" <= A && A <= "\u0b9f") || ("\u0ba3" <= A && A <= "\u0ba4") || ("\u0ba8" <= A && A <= "\u0baa") || ("\u0bae" <= A && A <= "\u0bb5") || ("\u0bb7" <= A && A <= "\u0bb9") || ("\u0c05" <= A && A <= "\u0c0c") || ("\u0c0e" <= A && A <= "\u0c10") || ("\u0c12" <= A && A <= "\u0c28") || ("\u0c2a" <= A && A <= "\u0c33") || ("\u0c35" <= A && A <= "\u0c39") || ("\u0c60" <= A && A <= "\u0c61") || ("\u0c85" <= A && A <= "\u0c8c") || ("\u0c8e" <= A && A <= "\u0c90") || ("\u0c92" <= A && A <= "\u0ca8") || ("\u0caa" <= A && A <= "\u0cb3") || ("\u0cb5" <= A && A <= "\u0cb9") || (A == "\u0cde") || ("\u0ce0" <= A && A <= "\u0ce1") || ("\u0d05" <= A && A <= "\u0d0c") || ("\u0d0e" <= A && A <= "\u0d10") || ("\u0d12" <= A && A <= "\u0d28") || ("\u0d2a" <= A && A <= "\u0d39") || ("\u0d60" <= A && A <= "\u0d61") || ("\u0e01" <= A && A <= "\u0e2e") || (A == "\u0e30") || ("\u0e32" <= A && A <= "\u0e33") || ("\u0e40" <= A && A <= "\u0e45") || ("\u0e81" <= A && A <= "\u0e82") || (A == "\u0e84") || ("\u0e87" <= A && A <= "\u0e88") || (A == "\u0e8a") || (A == "\u0e8d") || ("\u0e94" <= A && A <= "\u0e97") || ("\u0e99" <= A && A <= "\u0e9f") || ("\u0ea1" <= A && A <= "\u0ea3") || (A == "\u0ea5") || (A == "\u0ea7") || ("\u0eaa" <= A && A <= "\u0eab") || ("\u0ead" <= A && A <= "\u0eae") || (A == "\u0eb0") || ("\u0eb2" <= A && A <= "\u0eb3") || (A == "\u0ebd") || ("\u0ec0" <= A && A <= "\u0ec4") || ("\u0f40" <= A && A <= "\u0f47") || ("\u0f49" <= A && A <= "\u0f69") || ("\u10a0" <= A && A <= "\u10c5") || ("\u10d0" <= A && A <= "\u10f6") || (A == "\u1100") || ("\u1102" <= A && A <= "\u1103") || ("\u1105" <= A && A <= "\u1107") || (A == "\u1109") || ("\u110b" <= A && A <= "\u110c") || ("\u110e" <= A && A <= "\u1112") || (A == "\u113c") || (A == "\u113e") || (A == "\u1140") || (A == "\u114c") || (A == "\u114e") || (A == "\u1150") || ("\u1154" <= A && A <= "\u1155") || (A == "\u1159") || ("\u115f" <= A && A <= "\u1161") || (A == "\u1163") || (A == "\u1165") || (A == "\u1167") || (A == "\u1169") || ("\u116d" <= A && A <= "\u116e") || ("\u1172" <= A && A <= "\u1173") || (A == "\u1175") || (A == "\u119e") || (A == "\u11a8") || (A == "\u11ab") || ("\u11ae" <= A && A <= "\u11af") || ("\u11b7" <= A && A <= "\u11b8") || (A == "\u11ba") || ("\u11bc" <= A && A <= "\u11c2") || (A == "\u11eb") || (A == "\u11f0") || (A == "\u11f9") || ("\u1e00" <= A && A <= "\u1e9b") || ("\u1ea0" <= A && A <= "\u1ef9") || ("\u1f00" <= A && A <= "\u1f15") || ("\u1f18" <= A && A <= "\u1f1d") || ("\u1f20" <= A && A <= "\u1f45") || ("\u1f48" <= A && A <= "\u1f4d") || ("\u1f50" <= A && A <= "\u1f57") || (A == "\u1f59") || (A == "\u1f5b") || (A == "\u1f5d") || ("\u1f5f" <= A && A <= "\u1f7d") || ("\u1f80" <= A && A <= "\u1fb4") || ("\u1fb6" <= A && A <= "\u1fbc") || (A == "\u1fbe") || ("\u1fc2" <= A && A <= "\u1fc4") || ("\u1fc6" <= A && A <= "\u1fcc") || ("\u1fd0" <= A && A <= "\u1fd3") || ("\u1fd6" <= A && A <= "\u1fdb") || ("\u1fe0" <= A && A <= "\u1fec") || ("\u1ff2" <= A && A <= "\u1ff4") || ("\u1ff6" <= A && A <= "\u1ffc") || (A == "\u2126") || ("\u212a" <= A && A <= "\u212b") || (A == "\u212e") || ("\u2180" <= A && A <= "\u2182") || ("\u3041" <= A && A <= "\u3094") || ("\u30a1" <= A && A <= "\u30fa") || ("\u3105" <= A && A <= "\u312c") || ("\uac00" <= A && A <= "\ud7a3") || ("\uff61" <= A && A <= "\uff9f") || ("\u0e00" <= A && A <= "\u0e7f") || ("\u30a1" <= A && A <= "\u30fe")
    },
    _isIdeographic: function (A) {
        return (("\u4e00" <= A && A <= "\u9fa5") || (A == "\u3007") || ("\u3021" <= A && A <= "\u3029"))
    },
    isDigit: function (A) {
        return (("\u0030" <= A && A <= "\u0039") || ("\u0660" <= A && A <= "\u0669") || ("\u06f0" <= A && A <= "\u06f9") || ("\u0966" <= A && A <= "\u096f") || ("\u09e6" <= A && A <= "\u09ef") || ("\u0a66" <= A && A <= "\u0a6f") || ("\u0ae6" <= A && A <= "\u0aef") || ("\u0b66" <= A && A <= "\u0b6f") || ("\u0be7" <= A && A <= "\u0bef") || ("\u0c66" <= A && A <= "\u0c6f") || ("\u0ce6" <= A && A <= "\u0cef") || ("\u0d66" <= A && A <= "\u0d6f") || ("\u0e50" <= A && A <= "\u0e59") || ("\u0ed0" <= A && A <= "\u0ed9") || ("\u0f20" <= A && A <= "\u0f29"))
    },
    getTimeElapsed: function (A) {
        return Math.abs(A ? (A - new Date().getTime()) : 0)
    },
    getNumberFormatter: function () {
        if (!this._numberFormat) {
            this._numberFormat = new actuate.util.NumberFormatter(this.getLocalizedString("numberFormat.decimalSeparator"), this.getLocalizedString("numberFormat.thousandSeparator"), null)
        }
        return this._numberFormat
    },
    type: function (B) {
        if (B === undefined || B === null) {
            return false
        }
        if (B.htmlElement) {
            return "element"
        }
        var A = typeof B;
        if (A == "object" && B.nodeName) {
            switch (B.nodeType) {
                case 1:
                    return "element";
                case 3:
                    return (/\S/).test(B.nodeValue) ? "textnode" : "whitespace"
            }
        }
        if (A == "object" || A == "function") {
            switch (B.constructor) {
                case Array:
                    return "array";
                case RegExp:
                    return "regexp";
                case Date:
                    return "date";
                case actuate.util.Date:
                    return "date"
            }
            if (typeof B.length == "number" && typeof B.item == "function") {
                return "nodelist"
            }
        }
        return A
    },
    convertToModelControlType: function (A) {
        switch (A) {
            case"AutoSuggest":
                return "auto-suggest";
            case"ControlRadioButton":
                return "radio-button";
            case"ControlCheckBox":
                return "check-box";
            case"ControlList":
            case"ControlListAllowNew":
                return "list-box";
            default:
                return "text-box"
        }
    },
    convertToModelDataType: function (A) {
        switch (A) {
            case"DateOnly":
                return "Date";
            case"Date":
                return "DateTime";
            case"Double":
                return "Decimal";
            default:
                return A
        }
    },
    removeSubString: function (B, A) {
        if (A != null && B.indexOf(A) != -1) {
            B = B.split(A).join("")
        }
        return B
    },
    emptyFn: function () {
    },
    arrayEquals: function (C, B) {
        if (C.length != B.length) {
            return false
        }
        var A;
        for (A in C) {
            if (actuate.util.Utility.arrayIndexOf(B, C[A]) < 0) {
                return false
            }
        }
        return true
    },
    stringToggle: function (C, B, A) {
        return C == B ? A : B
    },
    createContextualFragment: function (B, A) {
        var C;
        if (B != null) {
            if (A && A.createContextualFragment) {
                C = A.createContextualFragment(B)
            } else {
                C = document.createDocumentFragment(), div = document.createElement("DIV");
                C.appendChild(div);
                div.outerHTML = B
            }
        }
        return C
    },
    convertToPoint: function (C, B) {
        var A = 0;
        if (C && C > 0) {
            switch (B) {
                case actuate.Constant.DesignChoice.UNITS_IN:
                    A = C * this.POINTS_PER_INCH;
                    break;
                case actuate.Constant.DesignChoice.UNITS_CM:
                    A = C * this.POINTS_PER_CM;
                    break;
                case actuate.Constant.DesignChoice.UNITS_MM:
                    A = 10 * C * this.POINTS_PER_CM;
                    break;
                case actuate.Constant.DesignChoice.UNITS_PC:
                    A = C * this.POINTS_PER_PICA;
                    break;
                case actuate.Constant.DesignChoice.UNITS_PT:
                default:
                    A = C;
                    break
            }
        }
        return A
    },
    removeSelection: function () {
        if (document.selection && document.selection.empty) {
            try {
                document.selection.empty()
            } catch (B) {
            }
        } else {
            if (window.getSelection) {
                var A = window.getSelection();
                if (A) {
                    try {
                        A.removeAllRanges()
                    } catch (B) {
                    }
                }
            }
        }
    },
    ping: function (C, D, E, A, B, G, F) {
        if (ftypePing) {
            ftypePing(C, D, E, A, B, G, F)
        }
    },
    setYSeriesScroll: function (B, A, E) {
        var D = document.getElementById(B);
        if (D != null && D != undefined) {
            var C = D.getElementsByClassName("actuate-widget-panel-bwrap")[0];
            if (C != null && C != undefined) {
                C.style.height = A;
                if (E == "delete-scroll") {
                    C.style.overflowY = "scroll"
                } else {
                    C.style.overflowY = E;
                    C.scrollTop = C.scrollHeight
                }
            }
        }
    },
    setWidthToYseries: function (E) {
        var C = document.getElementById(E);
        if (C != null && C != undefined) {
            var A = C.getElementsByClassName("actuate-form-field-wrap");
            if (A != null && A != undefined && A.length != null) {
                for (var B = 0; B < A.length; B++) {
                    A[B].style.width = "138px"
                }
            }
            var D = C.getElementsByClassName("actuate-form-text");
            if (D != null && D != undefined && D.length != null) {
                for (var B = 0; B < D.length; B++) {
                    if (!D[B].classList.contains("actuate-textfield-custom-width")) {
                        D[B].style.width = "115px"
                    }
                }
            }
        }
    },
    formatGlobalFilterSelectedDateTimeValue: function (D, F) {
        var C = actuate.report.HTML5Chart.ClientChart.getUnformattedName(F, true, D.hasAxes, D.isCategoryDatetime, true);
        var G = null;
        if (C !== undefined && C !== null && C !== "null") {
            var B = new Date(C);
            if (D.CategoryGroupType) {
                switch (D.CategoryGroupType) {
                    case"Year":
                        G = B.getUTCFullYear();
                        break;
                    case"Quarter":
                        G = actuate.report.HTML5Chart.Highcharts.dateFormat("%q", C);
                        break;
                    case"Month":
                        G = B.getUTCMonth() + 1;
                        break;
                    case"WeekOfMonth":
                        G = actuate.report.HTML5Chart.Highcharts.dateFormat("%W", C);
                        break;
                    case"DayOfMonth":
                        G = B.getUTCDate();
                        break;
                    case"Hour":
                        G = B.getUTCHours();
                        break;
                    case"Minute":
                        G = B.getUTCMinutes();
                        break;
                    case"Second":
                        G = B.getUTCSeconds();
                        break
                }
            } else {
                if (D.CategoryDataType) {
                    var A = B.getUTCMonth() + 1;
                    if (A < 10) {
                        A = "0" + A
                    }
                    var E = B.getUTCDate();
                    if (E < 10) {
                        E = "0" + E
                    }
                    switch (D.CategoryDataType) {
                        case"date-time":
                            G = B.getUTCFullYear() + "-" + A + "-" + E + " " + this._format(B.getUTCHours()) + ":" + this._format(B.getUTCMinutes()) + ":" + this._format(B.getUTCSeconds()) + "." + this._format3(B.getUTCMilliseconds());
                            break;
                        case"date":
                            G = B.getUTCFullYear() + "-" + A + "-" + E;
                            break;
                        case"time":
                            G = this._format(B.getUTCHours()) + ":" + this._format(B.getUTCMinutes()) + ":" + this._format(B.getUTCSeconds());
                            break
                    }
                }
            }
        }
        return G
    },
    getGlobalFilterSelectedActualValue: function (A, B, D) {
        var C = null;
        if (A) {
            C = actuate.report.HTML5Chart.ClientChart.getUnformattedName.call(B, B, true, A.hasAxes, A.isCategoryDatetime);
            if (D === "apply" && A.isCategoryDatetime) {
                C = actuate.util.Utility.formatGlobalFilterSelectedDateTimeValue(A, B)
            }
        } else {
            if (B.category !== undefined) {
                C = B.category
            } else {
                if (B.unFormattedName !== undefined) {
                    C = B.unFormattedName
                } else {
                    C = B.name
                }
            }
        }
        if (!C && B.isHeatmap) {
            C = B.series.chart.axes[0].categories[B.options.x]
        }
        return C
    },
    getQuerySpec: function (D, E) {
        var G = E || {};
        var B;
        var A = false;
        do {
            A = false;
            B = G[D];
            if (typeof (B) == "string") {
                D = B;
                A = true
            }
        } while (A);
        var F = {};
        for (var C in B) {
            F[C] = B[C]
        }
        return F
    },
    replaceMod: function (A) {
        if (!A) {
            return ""
        }
        if (actuate.util.Utility.isMac) {
            A = A.replace("mod", "Command")
        } else {
            if (actuate.util.Utility.isWindows) {
                A = A.replace("mod", "Ctrl")
            }
        }
        return A
    },
    getObjectFromJSONArray: function (D, B, C) {
        for (var A = 0; A < D.length; A++) {
            if (D[A] && D[A][B] === C) {
                return D[A]
            }
        }
    },
    isAllowedURL: function (A, C) {
        var B = {retry: "../newjobs/retry.jsp", properties: "../newjobs/properties.jsp", iportal: "/iportal"};
        if (!A) {
            return false
        }
        return A.startsWith(B[C])
    },
    convertStrToBoolean: function (A) {
        return typeof A === "boolean" ? A : A === "true"
    },
    appendToCSS: function (B, F, E) {
        if (!E) {
            E = "dynamic-style-element"
        }
        var C;
        var A;
        var D = actuate.getNonce();
        if (!document.querySelector("#" + E)) {
            C = document.createDocumentFragment();
            A = document.createElement("style");
            C.appendChild(A);
            A.setAttribute("id", E);
            if (D) {
                A.setAttribute("nonce", D)
            }
            document.head.appendChild(C);
            this.dynamicStyleSheet = A.sheet
        } else {
            A = document.getElementById(E);
            this.dynamicStyleSheet = A.sheet;
            this.dynamicStyleSheet.insertRule(".d-none { display: none; }", this.dynamicStyleSheet.cssRules.length);
            this.dynamicStyleSheet.insertRule(".d-block { display: block; }", this.dynamicStyleSheet.cssRules.length)
        }
        B = B.split(/\s+/).join(" ");
        F = F.replace(/[{}]/g, "").trim();
        if (F.substr((F.length - 1), 1) !== ";") {
            F += ";"
        }
        F = "{ " + F.split(/\s+/).join(" ") + " }";
        var G = B + " " + F;
        this.dynamicStyleSheet.insertRule(G, this.dynamicStyleSheet.cssRules.length)
    },
    getCSSDeclarations: function (A, B) {
        var E = "";
        var C = A.split("=")[1];
        var F = C.slice(1, C.length - 1);
        if (F) {
            var D = F.split(";");
            D = D.filter(function (G) {
                return G != ""
            });
            if (B) {
                E = D.join(" !important; ");
                E += " !important;"
            } else {
                E = D.join("; ")
            }
        }
        return E
    },
    decodeBase64: function (B) {
        var E = atob(B);
        var D = E.length;
        var A = new Uint8Array(D);
        for (var C = 0; C < D; C++) {
            A[C] = E.charCodeAt(C)
        }
        var F = new TextDecoder();
        return F.decode(A)
    },
    removeInlineStyles: function (D, A) {
        var K = /style["\s']*=["\s']*["']?([*+a-zA-Z0-9 :\-#()._%;!',\s\n\r&]*);?["']/gi;
        var C = D.match(K);
        if (C && C.length > 0) {
            if (D.includes("gadgets-gadget-chrome") && C.length === 1) {
                return D.replace(C[0], "")
            }
            for (var J = 0; J < C.length; J++) {
                var E = C[J];
                var H = Math.ceil(actuate.util.Utility.randomFloat() * Math.pow(10, 2));
                var I = Math.ceil(actuate.util.Utility.randomFloat() * Math.pow(10, 2));
                H = "" + H + new Date().getTime() + I;
                var F = "class_" + H;
                if (E.length > 0) {
                    D = D.replace(E, 'class="' + F + '"');
                    var L = this.getCSSDeclarations(E, A);
                    this.appendToCSS("." + F, L)
                } else {
                    D = D.replace(E, "")
                }
            }
        }
        var G = /<[^>]*\sclass="([^"]*)"[^>]*\sclass="([^"]*)"/g;
        var B = D.replace(G, function (O, N, M) {
            return O.replace('class="' + N + '"', 'class="' + N + " " + M + '"').replace(' class="' + M + '"', "")
        });
        return B
    },
    addNonceAttribute: function (B) {
        var C = actuate.getNonce();
        var A = B;
        if (B.indexOf('style type="text/css"') != -1) {
            A = B.replace('style type="text/css"', 'style type="text/css" nonce="' + C + '"')
        }
        if (B.indexOf('script type="text/javascript"') != -1) {
            A = A.replace('script type="text/javascript"', 'script type="text/javascript" nonce="' + C + '"')
        }
        return A
    },
    replaceFusionChartStyles: function (C, D) {
        var B = Math.ceil(actuate.util.Utility.randomFloat() * Math.pow(10, 4));
        B += new Date().getTime();
        var A = "class_" + B;
        this.appendToCSS("." + A, D);
        C.classList.add(A)
    }
};
actuate.util.Utility._CallbackChain = actuate.Class.create();
actuate.util.Utility._CallbackChain.prototype = {
    _functions: null, _onException: null, initialize: function (B, A) {
        this._functions = B;
        this._nextClosure = actuate.Method.bind(this._next, this);
        this._onException = A
    }, start: function () {
        this._next()
    }, _next: function () {
        var C = this._functions;
        try {
            if (!C) {
                return
            }
            if (C.length > 0) {
                var D = C.shift();
                if (!D) {
                    throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Null function found in the array passed to chainCallbacks")
                }
                var A = [];
                A.push(this._nextClosure);
                for (var B = 0; B < arguments.length; B++) {
                    A.push(arguments[B])
                }
                if (D.apply(null, A)) {
                    this._next()
                }
            }
        } catch (E) {
            if (this._onException) {
                this._onException(E)
            } else {
                throw E
            }
        }
    }
};
actuate.util.Utility.initialize();
actuate.Method.apply = actuate.util.Utility.apply;
actuate.util.Package.define("actuate.resourcesBundle.localizedStrings");
actuate.util.Package.define("actuate.util");
actuate.util.String = {
    trim: function (B) {
        var A = B.replace(/^\s*(.*)/, "$1");
        A = A.replace(/(.*?)\s*$/, "$1");
        return A
    }, format: function (B) {
        if (B) {
            var A = Array.prototype.slice.call(arguments, 1);
            return B.replace(/\{(\d+)\}/g, function (C, D) {
                return A[D]
            })
        }
        return B
    }, escape: function (A) {
        return A.replace(/('|\\)/g, "\\$1")
    }, escapeRe: function (A) {
        return A.replace(/([.*+?^${}()|[\]\/\\])/g, "\\$1")
    }, leftPad: function (D, B, C) {
        var A = new String(D);
        if (!C) {
            C = " "
        }
        while (A.length < B) {
            A = C + A
        }
        return A.toString()
    }, startWith: function (B, A) {
        if (B != null && A != null) {
            return (new RegExp("^" + A)).test(B)
        }
    }, endWith: function (B, A) {
        if (B != null && A != null) {
            return (new RegExp(A + "$")).test(B)
        }
    }
};
(function () {
    var A = ["getDate", "getDay", "getFullYear", "getHours", "getMilliseconds", "getMinutes", "getMonth", "getSeconds", "getTime", "getTimezoneOffset", "getUTCDate", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", "getUTCMonth", "getUTCSeconds", "getYear", "setDate", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setSeconds", "setTime", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setYear", "toGMTString", "toLocaleString", "toString"];
    actuate.util.Date = function (H, I, E, D, G, K, F) {
        var J = null;
        if (arguments.length == 0) {
            J = new Date()
        } else {
            if (arguments.length == 1) {
                J = new Date(H)
            } else {
                if (arguments.length == 3) {
                    J = new Date(H, I, E)
                } else {
                    if (arguments.length == 6) {
                        J = new Date(H, I, E, D, G, K)
                    } else {
                        J = new Date(H, I, E, D, G, K, F)
                    }
                }
            }
        }
        this._ = J
    };
    actuate.Class.createProxySymbols(actuate.util.Date.prototype, Date.prototype, A);
    actuate.util.Date.parse = Date.parse;
    actuate.util.Date.UTC = Date.UTC;

    function C(E) {
        var D = Array.prototype.slice.call(arguments, 1);
        return E.replace(/\{(\d+)\}/g, function (F, G) {
            return D[G]
        })
    }

    actuate.util.Date.formatCodeToRegex = function (E, D) {
        var F = actuate.util.Date.parseCodes[E];
        if (F) {
            F = actuate.util.Utility.type(F) == "function" ? F() : F;
            actuate.util.Date.parseCodes[E] = F
        }
        return F ? actuate.util.Utility.applyIf({c: F.c ? C(F.c, D || "{0}") : F.c}, F) : {
            g: 0,
            c: null,
            s: actuate.util.String.escapeRe(E)
        }
    };
    var B = actuate.util.Date.formatCodeToRegex;
    actuate.Class.extend(actuate.util.Date, {
        parseFunctions: {count: 0},
        parseRegexes: [],
        formatFunctions: {count: 0},
        daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        y2kYear: 50,
        AM: "AM",
        PM: "PM",
        am: "am",
        pm: "pm",
        MILLI: "ms",
        SECOND: "s",
        MINUTE: "mi",
        HOUR: "h",
        DAY: "d",
        MONTH: "mo",
        YEAR: "y",
        dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthNumbers: {
            Jan: 0,
            Feb: 1,
            Mar: 2,
            Apr: 3,
            May: 4,
            Jun: 5,
            Jul: 6,
            Aug: 7,
            Sep: 8,
            Oct: 9,
            Nov: 10,
            Dec: 11
        },
        getShortMonthName: function (D) {
            return actuate.util.Date.monthNames[D].substring(0, 3)
        },
        getShortDayName: function (D) {
            return actuate.util.Date.dayNames[D].substring(0, 3)
        },
        getMonthNumber: function (D) {
            return actuate.util.Date.monthNumbers[D.substring(0, 1).toUpperCase() + D.substring(1, 3).toLowerCase()]
        },
        formatCodes: {
            d: "actuate.util.String.leftPad(this.getDate(), 2, '0')",
            D: "actuate.util.Date.getShortDayName(this.getDay())",
            j: "this.getDate()",
            l: "actuate.util.Date.dayNames[this.getDay()]",
            N: "(this.getDay() ? this.getDay() : 7)",
            S: "this.getSuffix()",
            w: "this.getDay()",
            z: "this.getDayOfYear()",
            W: "actuate.util.String.leftPad(this.getWeekOfYear(), 2, '0')",
            F: "actuate.util.Date.monthNames[this.getMonth()]",
            m: "actuate.util.String.leftPad(this.getMonth() + 1, 2, '0')",
            M: "actuate.util.Date.getShortMonthName(this.getMonth())",
            n: "(this.getMonth() + 1)",
            t: "this.getDaysInMonth()",
            L: "(this.isLeapYear() ? 1 : 0)",
            o: "(this.getFullYear() + (this.getWeekOfYear() == 1 && this.getMonth() > 0 ? +1 : (this.getWeekOfYear() >= 52 && this.getMonth() < 11 ? -1 : 0)))",
            Y: "this.getFullYear()",
            y: "('' + this.getFullYear()).substring(2, 4)",
            a: "actuate.util.Date[(this.getHours() < 12 ? 'am' : 'pm')]",
            A: "actuate.util.Date[(this.getHours() < 12 ? 'AM' : 'PM')]",
            g: "((this.getHours() % 12) ? this.getHours() % 12 : 12)",
            G: "this.getHours()",
            h: "actuate.util.String.leftPad((this.getHours() % 12) ? this.getHours() % 12 : 12, 2, '0')",
            H: "actuate.util.String.leftPad(this.getHours(), 2, '0')",
            i: "actuate.util.String.leftPad(this.getMinutes(), 2, '0')",
            s: "actuate.util.String.leftPad(this.getSeconds(), 2, '0')",
            u: "actuate.util.String.leftPad(this.getMilliseconds(), 3, '0')",
            O: "this.getGMTOffset()",
            P: "this.getGMTOffset(true)",
            T: "this.getTimezone()",
            Z: "(this.getTimezoneOffset() * -60)",
            c: function () {
                for (var H = "Y-m-dTH:i:sP", F = [], E = 0, D = H.length; E < D; ++E) {
                    var G = H.charAt(E);
                    F.push(G == "T" ? "'T'" : actuate.util.Date.getFormatCode(G))
                }
                return F.join(" + ")
            },
            U: "Math.round(this.getTime() / 1000)"
        },
        parseDate: function (D, G) {
            var F = actuate.util.Date.parseFunctions;
            if (F[G] == null) {
                actuate.util.Date.createParser(G)
            }
            var E = F[G];
            return actuate.util.Date[E](D)
        },
        getFormatCode: function (E) {
            var D = actuate.util.Date.formatCodes[E];
            if (D) {
                D = actuate.util.Utility.type(D) == "function" ? D() : D;
                actuate.util.Date.formatCodes[E] = D
            }
            return D || ("'" + actuate.util.String.escape(E) + "'")
        },
        createNewFormat: function (J) {
            var I = "format" + actuate.util.Date.formatFunctions.count++, E = false, G = "";
            actuate.util.Date.formatFunctions[J] = I;
            var D = "function newFunctionBody(){return ";
            for (var F = 0; F < J.length; ++F) {
                G = J.charAt(F);
                if (!E && G == "\\") {
                    E = true
                } else {
                    if (E) {
                        E = false;
                        D += "'" + actuate.util.String.escape(G) + "' + "
                    } else {
                        D += actuate.util.Date.getFormatCode(G) + " + "
                    }
                }
            }
            D = D.substring(0, D.length - 3) + ";}";
            var H = actuate.util.Utility.getFunctionFromString(D, "newFunctionBody");
            actuate.util.Date.prototype[I] = H
        },
        createParser: function () {
            var D = ["actuate.util.Date.{0} = function(input){", "var y, m, d, h = 0, i = 0, s = 0, ms = 0, o, z, u, v;", "input = String(input);", "d = new actuate.util.Date();", "y = d.getFullYear();", "m = d.getMonth();", "d = d.getDate();", "var results = input.match(actuate.util.Date.parseRegexes[{1}]);", "if(results && results.length > 0){", "{2}", "if(u){", "v = new actuate.util.Date(u * 1000);", "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0 && ms >= 0){", "v = new actuate.util.Date(y, m, d, h, i, s, ms);", "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0 && s >= 0){", "v = new actuate.util.Date(y, m, d, h, i, s);", "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0 && i >= 0){", "v = new actuate.util.Date(y, m, d, h, i);", "}else if (y >= 0 && m >= 0 && d > 0 && h >= 0){", "v = new actuate.util.Date(y, m, d, h);", "}else if (y >= 0 && m >= 0 && d > 0){", "v = new actuate.util.Date(y, m, d);", "}else if (y >= 0 && m >= 0){", "v = new actuate.util.Date(y, m);", "}else if (y >= 0){", "v = new actuate.util.Date(y);", "}", "}", "return (v && (z != null || o != null))? (actuate.util.Utility.type(z) == 'number' ? v.add(actuate.util.Date.SECOND, -v.getTimezoneOffset() * 60 - z) : v.add(actuate.util.Date.MINUTE, -v.getTimezoneOffset() + (sn == '+'? -1 : 1) * (hr * 60 + mn))) : v;", "}"].join("\n");
            return function (N) {
                var L = "parse" + actuate.util.Date.parseFunctions.count++, G = actuate.util.Date.parseRegexes.length,
                    O = 1, H = "", M = "", K = false, E = "";
                actuate.util.Date.parseFunctions[N] = L;
                for (var J = 0; J < N.length; ++J) {
                    E = N.charAt(J);
                    if (!K && E == "\\") {
                        K = true
                    } else {
                        if (K) {
                            K = false;
                            M += actuate.util.String.escape(E)
                        } else {
                            var I = B(E, O);
                            O += I.g;
                            M += I.s;
                            if (I.g && I.c) {
                                H += I.c
                            }
                        }
                    }
                }
                actuate.util.Date.parseRegexes[G] = new RegExp("^" + M + "$", "i");
                var F = C(D, L, G, H);
                actuate.util.Utility.appendFunctiontoHead(F)
            }
        }(),
        parseCodes: {
            d: {g: 1, c: "d = parseInt(results[{0}], 10);\n", s: "(\\d{2})"},
            j: {g: 1, c: "d = parseInt(results[{0}], 10);\n", s: "(\\d{1,2})"},
            D: function () {
                for (var D = [], E = 0; E < 7; D.push(actuate.util.Date.getShortDayName(E)), ++E) {
                }
                return {g: 0, c: null, s: "(?:" + D.join("|") + ")"}
            },
            l: function () {
                return {g: 0, c: null, s: "(?:" + actuate.util.Date.dayNames.join("|") + ")"}
            },
            N: {g: 0, c: null, s: "[1-7]"},
            S: {g: 0, c: null, s: "(?:st|nd|rd|th)"},
            w: {g: 0, c: null, s: "[0-6]"},
            z: {g: 0, c: null, s: "(?:\\d{1,3})"},
            W: {g: 0, c: null, s: "(?:\\d{2})"},
            F: function () {
                return {
                    g: 1,
                    c: "m = parseInt(actuate.util.Date.getMonthNumber(results[{0}]), 10);\n",
                    s: "(" + actuate.util.Date.monthNames.join("|") + ")"
                }
            },
            M: function () {
                for (var D = [], E = 0; E < 12; D.push(actuate.util.Date.getShortMonthName(E)), ++E) {
                }
                return actuate.util.Utility.applyIf({s: "(" + D.join("|") + ")"}, B("F"))
            },
            m: {g: 1, c: "m = parseInt(results[{0}], 10) - 1;\n", s: "(\\d{2})"},
            n: {g: 1, c: "m = parseInt(results[{0}], 10) - 1;\n", s: "(\\d{1,2})"},
            t: {g: 0, c: null, s: "(?:\\d{2})"},
            L: {g: 0, c: null, s: "(?:1|0)"},
            o: function () {
                return B("Y")
            },
            Y: {g: 1, c: "y = parseInt(results[{0}], 10);\n", s: "(\\d{4})"},
            y: {
                g: 1,
                c: "var ty = parseInt(results[{0}], 10);\ny = ty > actuate.util.Date.y2kYear ? 1900 + ty : 2000 + ty;\n",
                s: "(\\d{1,2})"
            },
            a: {
                g: 1,
                c: "if (results[{0}] == 'am') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}",
                s: "(am|pm)"
            },
            A: {
                g: 1,
                c: "if (results[{0}] == 'AM') {\nif (h == 12) { h = 0; }\n} else { if (h < 12) { h += 12; }}",
                s: "(AM|PM)"
            },
            g: function () {
                return B("G")
            },
            G: {g: 1, c: "h = parseInt(results[{0}], 10);\n", s: "(\\d{1,2})"},
            h: function () {
                return B("H")
            },
            H: {g: 1, c: "h = parseInt(results[{0}], 10);\n", s: "(\\d{2})"},
            i: {g: 1, c: "i = parseInt(results[{0}], 10);\n", s: "(\\d{2})"},
            s: {g: 1, c: "s = parseInt(results[{0}], 10);\n", s: "(\\d{2})"},
            u: {g: 1, c: "ms = results[{0}]; ms = parseInt(ms, 10)/Math.pow(10, ms.length - 3);\n", s: "(\\d+)"},
            O: {
                g: 1,
                c: ["o = results[{0}];", "var sn = o.substring(0,1);", "var hr = o.substring(1,3)*1 + Math.floor(o.substring(3,5) / 60);", "var mn = o.substring(3,5) % 60;", "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? (sn + actuate.util.String.leftPad(hr, 2, '0') + actuate.util.String.leftPad(mn, 2, '0')) : null;\n"].join("\n"),
                s: "([+-]\\d{4})"
            },
            P: {
                g: 1,
                c: ["o = results[{0}];", "var sn = o.substring(0,1);", "var hr = o.substring(1,3)*1 + Math.floor(o.substring(4,6) / 60);", "var mn = o.substring(4,6) % 60;", "o = ((-12 <= (hr*60 + mn)/60) && ((hr*60 + mn)/60 <= 14))? (sn + actuate.util.String.leftPad(hr, 2, '0') + actuate.util.String.leftPad(mn, 2, '0')) : null;\n"].join("\n"),
                s: "([+-]\\d{2}:\\d{2})"
            },
            T: {g: 0, c: null, s: "[A-Z]{1,4}"},
            Z: {g: 1, c: "z = results[{0}] * 1;\nz = (-43200 <= z && z <= 50400)? z : null;\n", s: "([+-]?\\d{1,5})"},
            c: function () {
                var F = [],
                    D = [B("Y", 1), B("m", 2), B("d", 3), B("h", 4), B("i", 5), B("s", 6), {c: "ms = (results[7] || '.0').substring(1); ms = parseInt(ms, 10)/Math.pow(10, ms.length - 3);\n"}, {c: ["if(results[9] == 'Z'){", "z = 0;", "}else{", B("P", 9).c, "}"].join("\n")}];
                for (var G = 0, E = D.length; G < E; ++G) {
                    F.push(D[G].c)
                }
                return {
                    g: 1,
                    c: F.join(""),
                    s: D[0].s + "-" + D[1].s + "-" + D[2].s + "T" + D[3].s + ":" + D[4].s + ":" + D[5].s + "((.|,)\\d+)?(Z|([+-]\\d{2}:\\d{2}))"
                }
            },
            U: {g: 1, c: "u = parseInt(results[{0}], 10);\n", s: "(-?\\d+)"}
        }
    });
    actuate.Class.extend(actuate.util.Date.prototype, {
        dateFormat: function (E) {
            if (actuate.util.Date.formatFunctions[E] == null) {
                actuate.util.Date.createNewFormat(E)
            }
            var D = actuate.util.Date.formatFunctions[E];
            return this[D]()
        }, getTimezone: function () {
            return this.toString().replace(/^.* (?:\((.*)\)|([A-Z]{1,4})(?:[\-+][0-9]{4})?(?: -?\d+)?)$/, "$1$2").replace(/[^A-Z]/g, "")
        }, getGMTOffset: function (D) {
            return (this.getTimezoneOffset() > 0 ? "-" : "+") + actuate.util.String.leftPad(Math.floor(Math.abs(this.getTimezoneOffset()) / 60), 2, "0") + (D ? ":" : "") + actuate.util.String.leftPad(Math.abs(this.getTimezoneOffset() % 60), 2, "0")
        }, getDayOfYear: function () {
            var D = 0;
            actuate.util.Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
            for (var E = 0; E < this.getMonth(); ++E) {
                D += actuate.util.Date.daysInMonth[E]
            }
            return D + this.getDate() - 1
        }, getWeekOfYear: function () {
            var D = 86400000, E = 7 * D;
            return function () {
                var G = actuate.util.Date.UTC(this.getFullYear(), this.getMonth(), this.getDate() + 3) / D,
                    F = Math.floor(G / 7), H = new actuate.util.Date(F * E).getUTCFullYear();
                return F - Math.floor(actuate.util.Date.UTC(H, 0, 7) / E) + 1
            }
        }(), isLeapYear: function () {
            var D = this.getFullYear();
            return !!((D & 3) == 0 && (D % 100 || (D % 400 == 0 && D)))
        }, getFirstDayOfMonth: function () {
            var D = (this.getDay() - (this.getDate() - 1)) % 7;
            return (D < 0) ? (D + 7) : D
        }, getLastDayOfMonth: function () {
            var D = (this.getDay() + (actuate.util.Date.daysInMonth[this.getMonth()] - this.getDate())) % 7;
            return (D < 0) ? (D + 7) : D
        }, getFirstDateOfMonth: function () {
            return new actuate.util.Date(this.getFullYear(), this.getMonth(), 1)
        }, getLastDateOfMonth: function () {
            return new actuate.util.Date(this.getFullYear(), this.getMonth(), this.getDaysInMonth())
        }, getDaysInMonth: function () {
            actuate.util.Date.daysInMonth[1] = this.isLeapYear() ? 29 : 28;
            return actuate.util.Date.daysInMonth[this.getMonth()]
        }, getSuffix: function () {
            switch (this.getDate()) {
                case 1:
                case 21:
                case 31:
                    return "st";
                case 2:
                case 22:
                    return "nd";
                case 3:
                case 23:
                    return "rd";
                default:
                    return "th"
            }
        }, clone: function () {
            return new actuate.util.Date(this.getTime())
        }, clearTime: function (D) {
            if (D) {
                return this.clone().clearTime()
            }
            this.setHours(0);
            this.setMinutes(0);
            this.setSeconds(0);
            this.setMilliseconds(0);
            return this
        }, add: function (E, F) {
            var G = this.clone();
            if (!E || F === 0) {
                return G
            }
            switch (E.toLowerCase()) {
                case actuate.util.Date.MILLI:
                    G.setMilliseconds(this.getMilliseconds() + F);
                    break;
                case actuate.util.Date.SECOND:
                    G.setSeconds(this.getSeconds() + F);
                    break;
                case actuate.util.Date.MINUTE:
                    G.setMinutes(this.getMinutes() + F);
                    break;
                case actuate.util.Date.HOUR:
                    G.setHours(this.getHours() + F);
                    break;
                case actuate.util.Date.DAY:
                    G.setDate(this.getDate() + F);
                    break;
                case actuate.util.Date.MONTH:
                    var D = this.getDate();
                    if (D > 28) {
                        D = Math.min(D, this.getFirstDateOfMonth().add("mo", F).getLastDateOfMonth().getDate())
                    }
                    G.setDate(D);
                    G.setMonth(this.getMonth() + F);
                    break;
                case actuate.util.Date.YEAR:
                    G.setFullYear(this.getFullYear() + F);
                    break
            }
            return G
        }, between: function (F, D) {
            var E = this.getTime();
            return F.getTime() <= E && E <= D.getTime()
        }
    });
    actuate.util.Date.prototype.format = actuate.util.Date.prototype.dateFormat;
    if (actuate.util.Utility.isSafari) {
        actuate.util.Date.brokenSetMonth = actuate.util.Date.prototype.setMonth;
        actuate.util.Date.prototype.setMonth = function (D) {
            if (D <= -1) {
                var G = Math.ceil(-D);
                var F = Math.ceil(G / 12);
                var E = (G % 12) ? 12 - G % 12 : 0;
                this.setFullYear(this.getFullYear() - F);
                return actuate.util.Date.brokenSetMonth.call(this, E)
            } else {
                return actuate.util.Date.brokenSetMonth.apply(this, arguments)
            }
        }
    }
}());
actuate.util.Package.define("actuate.util");
actuate.util.Constants = {
    LOCALE_NEUTRAL_DATE_FORMAT: "Y-m-d",
    LOCALE_NEUTRAL_TIME_FORMAT: "H:i:s.u",
    LOCALE_NEUTRAL_DATETIME_FORMAT: "Y-m-d H:i:s.u",
    MODULE_NAME_HTML5CHARTS: "actuate.html5charts",
    MODULE_NAME_VIEWER: "actuate.viewer",
    MODULE_NAME_DIALOG: "actuate.dialog",
    MODULE_NAME_WIDGET: "actuate.widget",
    MODULE_NAME_UIADAPTER: "actuate.uiadapter",
    MODULE_NAME_MOBILELANDING: "actuate.mobilelanding",
    MODULE_NAME_MOBILE: "actuate.mobile",
    AJAXPROXY_SERVLET_NAME: "ajaxproxy",
    HTML_RESOURCES_BASE_PATH: "iportal/",
    IPORTAL_SESSION_ID_KEY: "iPortalID",
    SERVLET_IV: "iv",
    STANDALONE: "standalone",
    NAVIGATIONBAR: "navigationbar",
    SHARED_RESOURCE: "sharedresource",
    LOC_IMG_PROGRESS_ANIMATION: "iportal/common/images/progress_animation.gif",
    LOC_IMG_PROGRESS_ANIMATION_MOBILE: "iportal/common/images/progress_animation_mobile.gif",
    LOC_IMG_INFO_ICON: "iportal/jsapi/actuate/widget/images/window/icon-info.gif",
    LOC_IMG_ERROR_ICON: "iportal/jsapi/actuate/widget/images/window/icon-error.gif",
    LOC_IMG_WARNING_ICON: "iportal/jsapi/actuate/widget/images/window/icon-warning.gif",
    NON_SHARED_RESOURCE: "nonsharedresource",
    GADGET_CHROME_: "gadgetChrome",
    CALENDAR_MODE_SINGLE: "single",
    CALENDAR_MODE_RANGE: "range",
};
actuate.Class.extend(actuate.util.Constants, {
    soap: {
        NAMESPACE_ENVELOPE: "http://schemas.xmlsoap.org/soap/envelope/",
        NAMESPACE_ACTUATE10: "http://schemas.actuate.com/actuate11"
    }
});
actuate.util.Package.define("actuate.util");
actuate.util.HashMap = actuate.Class.create();
actuate.util.HashMap.prototype = {
    _size: 0, _entry: null, initialize: function (A) {
        this._entry = new Object();
        if (A) {
            if (typeof (A) == "string") {
                this._fromURI(A)
            } else {
                if (typeof (A) == "object") {
                    this.putAll(A)
                }
            }
        }
    }, put: function (A, B) {
        if (!A) {
            return
        }
        if (!this.containsKey(A)) {
            this._size++
        }
        this._entry[A] = B
    }, get: function (A) {
        return this.containsKey(A) ? this._entry[A] : null
    }, remove: function (A) {
        if (this.containsKey(A)) {
            delete this._entry[A];
            this._size--
        }
    }, containsKey: function (A) {
        return (A in this._entry)
    }, containsValue: function (B) {
        for (var A in this._entry) {
            if (this._entry[A] == B) {
                return true
            }
        }
        return false
    }, each: function (C, B) {
        for (var A in this._entry) {
            var D = this._entry[A];
            var E = [A, D];
            E.key = A;
            E.value = D;
            C.call(B, E)
        }
    }, keys: function () {
        var B = new Array();
        for (var A in this._entry) {
            B.push(A)
        }
        return B
    }, values: function () {
        var A = new Array();
        for (var B in this._entry) {
            A.push(this._entry[B])
        }
        return A
    }, size: function () {
        return this._size
    }, clear: function () {
        this._size = 0;
        this._entry = new Object()
    }, isEmpty: function () {
        return this._size > 0 ? false : true
    }, toObject: function () {
        return this._entry
    }, toURI: function () {
        var B = "";
        var D = true;
        for (var A in this._entry) {
            var C = this._entry[A];
            if (C !== null && C !== undefined) {
                if (!D) {
                    B += "&"
                } else {
                    D = false
                }
                B += encodeURIComponent(A);
                B += "=" + encodeURIComponent(C)
            }
        }
        return B
    }, putAll: function (D) {
        if (!D) {
            return
        }
        if (D.putAll && typeof (D._entry) != "undefined") {
            var C = D.keys();
            for (var B = 0; B < C.length; B++) {
                var A = C[B];
                this.put(A, D.get(A))
            }
        } else {
            for (var A in D) {
                this.put(A, D[A])
            }
        }
    }, _fromURI: function (B) {
        var D = B.split("&");
        for (var A = 0; A < D.length; A++) {
            if (D[A] != "") {
                var E = D[A].split("=");
                var C;
                if (E.length == 1) {
                    C = null
                } else {
                    C = decodeURIComponent(E[1])
                }
                this.put(decodeURIComponent(E[0]), C)
            }
        }
    }, _escapeJSON: function (A) {
        if (typeof A == "string") {
            return A.replace(/\"/, '\\"')
        } else {
            return A
        }
    }, toJSON: function () {
        var D = true;
        var B = "{";
        for (var A in this._entry) {
            if (D) {
                D = false
            } else {
                B += ","
            }
            var C = this._entry[A];
            if (C == null || C == undefined) {
                C = "null"
            } else {
                if (typeof (C.toJSON) == "function") {
                    C = C.toJSON()
                } else {
                    C = this._escapeJSON(C)
                }
            }
            B += '"' + this._escapeJSON(A) + '":"' + C + '"'
        }
        return B + "}"
    }
};
actuate.util.Package.define("actuate.util");
actuate.util.Mask = actuate.Class.create();
actuate.util.Mask.prototype = {
    _zIndexStack: [],
    _zIndexBase: 300,
    _zIndexCurrent: null,
    _containterID: null,
    _opacity: 0,
    _height: 0,
    _width: 0,
    _top: 0,
    _left: 0,
    _isMaskShown: false,
    _imgURL: null,
    initialize: function (B, A) {
        this._imgURL = A;
        this._containerID = B;
        this._createMaskElement();
        actuate.util.Event.observe(window, "resize", actuate.Method.bindAsEventListener(this.__eh_resize, this), false)
    },
    getMaskID: function () {
        return this.__maskAnimation.id
    },
    _createMaskElement: function () {
        this._zIndexCurrent = this._zIndexBase;
        this.__maskAnimation = document.createElement("div");
        this.__maskAnimation.id = "ac" + this._containerID + "maskAnimation";
        this.__mask = document.createElement("div");
        this.__mask.id = "ac" + this._containerID + "mask";
        this.__mask.className = "progress_animation";
        this.__mask.style.userSelect = "none";
        this.__animationImg = document.createElement("img");
        this.__animationImg.src = this._imgURL;
        this.__animationImg.style.textAlign = "center";
        this.__animationImg.style.userSelect = "none";
        this.__animation = document.createElement("div");
        this.__animation.id = "ac" + this._containerID + "maskimg";
        this.__animation.style.userSelect = "none";
        this.__animation.appendChild(this.__animationImg);
        this.__maskAnimation.appendChild(this.__animation);
        this.__maskAnimation.appendChild(this.__mask);
        this.__maskAnimation.style.userSelect = "none";
        document.body.appendChild(this.__maskAnimation);
        this._initMaskProperties()
    },
    _getElementPosition: function (C) {
        var E = C;
        var B = 0;
        var A = 0;
        var D;
        while (C != null) {
            if (!D) {
                D = actuate.uiadapter.Element.fly(E).getStyle("z-index")
            }
            B += C.offsetLeft;
            A += C.offsetTop;
            C = C.offsetParent
        }
        return {left: B, top: A, width: E.offsetWidth, height: E.offsetHeight, zIndex: D}
    },
    _initMaskLoc: function () {
        var B = document.getElementById(this._containerID);
        if (B == null) {
            B = document.body
        }
        var A = this._getElementPosition(B);
        this._top = A.top;
        this._left = A.left;
        this._width = A.width;
        this._height = A.height;
        if (A.zIndex && A.zIndex > 0) {
            this._zIndexCurrent = A.zIndex
        }
        return A
    },
    _initMaskProperties: function () {
        this._initMaskLoc();
        this.__maskAnimation.style.display = "none";
        this.__maskAnimation.style.cursor = "move";
        this.__mask.style.position = "absolute";
        this.__mask.style.top = this._top + "px";
        this.__mask.style.left = this._left + "px";
        this.__mask.style.width = this._width + "px";
        this.__mask.style.height = this._height + "px";
        this.__mask.style.zIndex = this._zIndexCurrent;
        this.__mask.style.backgroundColor = "#808080";
        this.__mask.scrolling = "no";
        this.__mask.marginHeight = this._height + "px";
        this.__mask.marginWidth = this._width + "px";
        var A = 1;
        if (this._opacity > 0) {
            A = this._opacity * 100
        }
        this.__mask.style.filter = "alpha( opacity=" + (A) + ")";
        this.__mask.style.opacity = this._opacity;
        this.__mask.style.MozOpacity = this._opacity;
        this.__animation.style.position = "absolute";
        this.__animation.style.top = this._top + "px";
        this.__animation.style.left = this._left + "px";
        this.__animation.style.width = this._width + "px";
        this.__animation.style.height = this._height + "px";
        this.__animation.style.zIndex = this._zIndexCurrent + 1;
        this.__animation.scrolling = "no";
        this.__animation.marginHeight = this._height + "px";
        this.__animation.marginWidth = this._width + "px"
    },
    __eh_resize: function () {
        this._initMaskLoc();
        this.__mask.style.top = this._top + "px";
        this.__mask.style.left = this._left + "px";
        this.__mask.style.width = this._width + "px";
        this.__mask.style.height = this._height + "px";
        this.__animation.style.top = this._top + "px";
        this.__animation.style.left = this._left + "px";
        this.__animation.style.width = this._width + "px";
        this.__animation.style.height = this._height + "px";
        var A = 16;
        var B = 16;
        this.__animationImg.style.marginTop = (((this._height) / 2) - B) + "px";
        this.__animationImg.style.marginLeft = (((this._width) / 2) - A) + "px"
    },
    __isMaskShown: function () {
        return this._isMaskShown
    },
    __showMask: function () {
        if (actuate.util.Utility.isTouchDevice()) {
            this.__maskAnimation = actuate.util.Utility.showProgressIndicatorInTouchDevice(null, null, document.documentElement.clientWidth, document.documentElement.clientHeight)
        } else {
            this.__eh_resize();
            this.__mask.style.cursor = "wait";
            this.__animation.style.cursor = "wait";
            this.__maskAnimation.style.cursor = "wait";
            actuate.util.Element.show(this.__maskAnimation);
            this._isMaskShown = true;
            return (this._zIndexCurrent)
        }
    },
    __hideMask: function () {
        if (actuate.util.Utility.isTouchDevice()) {
            actuate.util.Utility.hideProgressIndicatorInTouchDevice(this.__maskAnimation)
        } else {
            this.__mask.style.cursor = "move";
            this.__animation.style.cursor = "move";
            this.__maskAnimation.style.cursor = "move";
            actuate.util.Element.hide(this.__maskAnimation);
            this._isMaskShown = false
        }
    }
};
actuate.util.Package.define("actuate.util");
actuate.util.Shadow = actuate.Class.create();
actuate.util.Shadow.prototype = {
    offset: 6, defaultMode: "drop", initialize: function (C) {
        actuate.Class.extend(this, C);
        if (typeof this.mode != "string") {
            this.mode = this.defaultMode
        }
        if (C.offset) {
            this.offset = C.offset
        }
        var D = this.offset, B = {h: 0};
        var A = Math.floor(this.offset / 2);
        switch (this.mode.toLowerCase()) {
            case"drop":
                B.w = 0;
                B.l = B.t = D;
                B.t -= 1;
                break;
            case"sides":
                B.w = (D * 2);
                B.l = -D;
                B.t = D - 1;
                break;
            case"frame":
                B.w = B.h = (D * 2);
                B.l = B.t = -D;
                B.t += 1;
                B.h -= 2;
                break
        }
        this.adjusts = B
    }, getDom: function () {
        return this._ele.dom
    }, show: function (A) {
        A = actuate.uiadapter.Element.get(A);
        if (!this._ele) {
            this._ele = actuate.util.Shadow.Pool.pull(this.absoluteBorder);
            if (this._ele.dom.nextSibling != A.dom) {
                this._ele.insertBefore(A)
            }
        }
        this._ele.dom.style.display = "block";
        this._ele.setStyle("z-index", this.zIndex || (parseInt(A.getStyle("z-index"), 10) || 1) - 1);
        this.realign(A.getLeft(true), A.getTop(true), A.getWidth(), A.getHeight())
    }, isVisible: function () {
        return this._ele ? true : false
    }, realign: function (A, O, M, D) {
        if (!this._ele) {
            return
        }
        var J = this.adjusts, G = this._ele.dom, P = G.style;
        var E = 0;
        var H = this.offset * 2;
        var N = this.offset;
        P.left = (A + J.l) + "px";
        P.top = (O + J.t) + "px";
        if (this.absoluteBorder) {
            var L = (M + J.w), C = (D + J.h), F = L + "px", K = C + "px";
            P.width = null;
            P.height = null;
            P.overflow = "visible";
            var I = G.childNodes;
            var B = Math.max(0, (L - H)) + "px";
            I[0].style.position = "absolute";
            I[0].style.width = F;
            I[1].style.height = Math.max(0, (C - H)) + "px";
            if (actuate.util.Utility.isIE7 || actuate.util.Utility.isIE8Compat) {
                I[1].style.width = F
            }
            I[1].childNodes[0].style.position = "absolute";
            I[1].childNodes[0].style.top = N + "px";
            I[1].childNodes[1].style.display = "none";
            I[1].childNodes[2].style.position = "absolute";
            I[1].childNodes[2].style.left = (L - N) + "px";
            I[1].childNodes[2].style.top = N + "px";
            I[2].style.width = F;
            I[2].style.position = "absolute";
            I[2].style.top = (C - N) + "px";
            I[0].childNodes[1].style.width = B;
            I[2].childNodes[1].style.width = B
        } else {
            P.overflow = "hidden";
            var L = (M + J.w), C = (D + J.h), F = L + "px", K = C + "px";
            if (P.width != F || P.height != K) {
                P.width = (L > 0) ? F : 0;
                P.height = (C > 0) ? K : 0;
                var I = G.childNodes;
                var B = Math.max(0, (L - H)) + "px";
                I[0].childNodes[1].style.width = B;
                I[1].childNodes[1].style.width = B;
                I[2].childNodes[1].style.width = B;
                I[1].style.height = Math.max(0, (C - H)) + "px"
            }
        }
    }, hide: function () {
        if (this._ele) {
            this._ele.dom.style.display = "none";
            actuate.util.Shadow.Pool.push(this._ele, this.absoluteBorder);
            delete this._ele
        }
    }, setZIndex: function (A) {
        this.zIndex = A;
        if (this._ele) {
            this._ele.setStyle("z-index", A)
        }
    }
};
actuate.util.Shadow.Pool = function () {
    var C = [];
    var B = [];
    var A = '<div class="actuate-shadow"><div class="xst"><div class="xstl"></div><div class="xstc"></div><div class="xstr"></div></div><div class="xsc"><div class="xsml"></div><div class="xsmc"></div><div class="xsmr"></div></div><div class="xsb"><div class="xsbl"></div><div class="xsbc"></div><div class="xsbr"></div></div></div>';
    return {
        pull: function (E) {
            var F = E ? B.shift() : C.shift();
            if (!F) {
                var D = new actuate.uiadapter.DomHelper();
                F = actuate.uiadapter.Element.get(D.insertHtml("beforeBegin", document.body.firstChild, A));
                F.autoBoxAdjust = false
            }
            return F
        }, push: function (E, D) {
            if (D) {
                B.push(E)
            } else {
                C.push(E)
            }
        }
    }
}();
actuate.util.Package.define("actuate.util");
actuate.util.Script = {
    _headElement: null, _executeScript: null, _getScriptExecutor: function () {
        var A = actuate.util.Utility;
        if (window.execScript) {
            this._executeScript = this._executeScriptIE
        } else {
            if (A.isSafari) {
                this._executeScript = this._executeScriptTag
            } else {
                this._executeScript = this._executeScriptTag
            }
        }
    }, executeInlineScripts: function (C) {
        if (!this._executeScript) {
            this._getScriptExecutor()
        }
        if (!C) {
            C = document
        }
        var A = C.getElementsByTagName("script");
        for (var D = 0; D < A.length; D++) {
            var B = A[D].innerHTML;
            if (B) {
                var E = A[D].language;
                if (!E && A[D].type) {
                    E = A[D].type.split("/");
                    if (E.length > 1) {
                        E = E[1]
                    } else {
                        E = ""
                    }
                }
                this._executeScript(B, E)
            }
        }
    }, _executeScriptTimeOut: function (A) {
        window.setTimeout(A, 0)
    }, _executeScriptIE: function (A, B) {
        window.execScript(A, B)
    }, _executeScriptTag: function (A, D) {
        this._headElement = document.getElementsByTagName("head")[0];
        var C = document.createElement("script");
        C.setAttribute("nonce", actuate.getNonce());
        C.language = D || "text/javascript";
        var B = document.createTextNode(A);
        C.appendChild(B);
        this._headElement.appendChild(C)
    }
};
actuate.util.Package.define("actuate.util");
actuate.util.Style = {
    _headElement: null, addStyleSheet: function (B, D) {
        var A = document.createElement("style");
        var C = actuate.getNonce();
        if (C) {
            A.setAttribute("nonce", C)
        }
        A.type = "text/css";
        if (D) {
            A.title = D
        }
        if (B) {
            if (A.styleSheet) {
                A.styleSheet.cssText = B
            } else {
                A.appendChild(document.createTextNode(B))
            }
        }
        if (!this._headElement) {
            this._headElement = document.getElementsByTagName("head")[0]
        }
        this._headElement.appendChild(A);
        return A
    }, addExternalStyleSheet: function (A) {
        A = actuate.util.Utility.makeAbsoluteUrl(A);
        A += "?" + actuate.module.Version.getVersionParam();
        var B = "@import url(' " + A + "  ');";
        var C = document.createElement("link");
        C.rel = "stylesheet";
        C.type = "text/css";
        C.href = A;
        if (!this._headElement) {
            this._headElement = document.getElementsByTagName("head")[0]
        }
        this._headElement.appendChild(C)
    }, findCSSRule: function (F, C, E) {
        if (!F) {
            return
        }
        var B = false;
        var D;
        if (F.cssRules) {
            D = F.cssRules
        } else {
            D = F.rules
        }
        for (var A = 0; A < D.length; A++) {
            B = D[A];
            if (B) {
                if (B.selectorText == C) {
                    if (E) {
                        if (F.deleteRule) {
                            F.deleteRule(A)
                        } else {
                            F.removeRule(A)
                        }
                        return true
                    } else {
                        return B
                    }
                }
            }
        }
    }, getStyleSheet: function (A) {
        if (document.styleSheets) {
            return document.styleSheets[A]
        }
    }, findStyleSheet: function (C) {
        if (document.styleSheets) {
            for (var B = 0; B < document.styleSheets.length; B++) {
                var A = document.styleSheets[B];
                if (A.title == C) {
                    return A
                }
            }
        }
        return null
    }, findFreeStyleSheet: function () {
        if (document.styleSheets) {
            for (var B = 0; B < document.styleSheets.length; B++) {
                var A = document.styleSheets[B];
                if ((!A.ownerNode || A.ownerNode.tagName.toLowerCase() == "style")) {
                    return A
                }
            }
        }
        return null
    }, deleteCSSRule: function (A, B) {
        return this.getCSSRule(A, B, true)
    }, addCSSRule: function (B, C, A) {
        if (document.styleSheets) {
            if (!B) {
                B = this.findFreeStyleSheet();
                if (!B) {
                    return
                }
            }
            if (B.addRule) {
                B.addRule(C, A ? A : null, 0)
            } else {
                B.insertRule(C + " {" + (A ? A : "") + "}", 0)
            }
        }
    }, removeStyleSheet: function (B) {
        var A = document.getElementById(B);
        if (A) {
            A.parentNode.removeChild(A)
        }
    }, swapStyleSheet: function (C, A) {
        this.removeStyleSheet(C);
        var B = document.createElement("link");
        B.setAttribute("rel", "stylesheet");
        B.setAttribute("type", "text/css");
        B.setAttribute("id", C);
        B.setAttribute("href", A);
        document.getElementsByTagName("head")[0].appendChild(B)
    }, setTheme: function (B, C) {
        if (C == "default") {
            this.removeStyleSheet("theme")
        } else {
            var A = "iportal/jsapi/actuate/widget/themes/_THEME_/styles/xtheme-_THEME_.css";
            A = (B) ? B + A : "/iportal/" + A;
            this.swapStyleSheet("theme", A.replace(/_THEME_/g, C))
        }
    }
};
if (typeof JSON !== "object") {
    JSON = {}
}
(function () {
    function f(n) {
        return n < 10 ? "0" + n : n
    }

    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap, indent, meta = {"\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\"},
        rep;

    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }

    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
            case"string":
                return quote(value);
            case"number":
                return isFinite(value) ? String(value) : "null";
            case"boolean":
            case"null":
                return String(value);
            case"object":
                if (!value) {
                    return "null"
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || "null"
                    }
                    v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                    gap = mind;
                    return v
                }
                if (rep && typeof rep === "object") {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === "string") {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                }
                v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                gap = mind;
                return v
        }
    }

    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {"": value})
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({"": j}, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
actuate.util.Package.define("actuate.util");
actuate.util.Json = {
    makeString: function (A) {
        if (A || A == "") {
            return '"' + A.replace(/\"/g, '\\"') + '"'
        }
        return "null"
    }, makeArray: function (C) {
        if (!C) {
            return "null"
        }
        var B = "[";
        for (var A = 0; A < C.length; A++) {
            if (A > 0) {
                B += ","
            }
            B += this.makeObject(C[A])
        }
        return B + "]"
    }, makeMap: function (B) {
        if (!B) {
            return "null"
        }
        var C = true;
        var A = "{";
        for (key in B) {
            if (C) {
                C = false
            } else {
                A += ","
            }
            A += this.makeString(key) + ":" + this.makeObject(B[key])
        }
        return A + "}"
    }, makeObject: function (A) {
        var B = typeof (A);
        if (B == "undefined" || A === null) {
            return "null"
        } else {
            if (B == "string") {
                return this.makeString(A)
            } else {
                if (actuate.util.Utility.isArray(A)) {
                    return this.makeArray(A)
                } else {
                    if (B == "object") {
                        return this.makeMap(A)
                    } else {
                        if (B == "function") {
                            return "null"
                        } else {
                            if (B == "boolean" || B == "number") {
                                return String(A)
                            }
                        }
                    }
                }
            }
        }
        return A
    }, parse: function (A) {
        return JSON.parse(A)
    }
};
actuate.util.Package.define("actuate.util");
actuate.util.XmlDom = {
    _supportsXmlNamespace: null, isSupportsXmlNamespace: function (A) {
        if (!A) {
            return false
        }
        if ((actuate.util.browser.isSafari && actuate.util.browser.useMobile()) || actuate.util.Utility.isKonqueror) {
            this._supportsXmlNamespace = false
        } else {
            this._supportsXmlNamespace = (typeof (A.createElementNS) != "undefined")
        }
        return this._supportsXmlNamespace
    }, createXMLDom: function (A, D) {
        if ((window.ActiveXObject !== undefined)) {
            var B = new ActiveXObject("Microsoft.XMLDOM");
            var C = B.createElement(D);
            B.appendChild(C);
            return B
        } else {
            if (document.implementation && document.implementation.createDocument) {
                var E = document.implementation.createDocument(A, D, null);
                if (!E.documentElement) {
                    E.appendChild(E.createElement(D))
                }
                return E
            }
        }
        throw "Unable to create new Document."
    }, createElement: function (B, D, A) {
        if (this.isSupportsXmlNamespace(B)) {
            if (A) {
                return B.createElementNS(A, D)
            } else {
                return B.createElementNS(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, D)
            }
        } else {
            var C = B.createElement(D);
            if (D.match(/Get(\w*)UpdatedObjects/)) {
                C.setAttribute("xmlns", actuate.util.Constants.soap.NAMESPACE_ACTUATE10)
            }
            return C
        }
    }, createElementTextNode: function (B, A, E) {
        var C, D;
        if (E == undefined || E == null) {
            E = ""
        }
        C = actuate.util.XmlDom.createElement(B, A);
        D = B.createTextNode(E);
        C.appendChild(D);
        return C
    }, copyNodes: function (E, D) {
        if (!E || !D) {
            return
        }
        if (!actuate.util.browser.isSafari) {
            E.appendChild(D.documentElement || D);
            return
        }
        var B = (E.nodeType == Node.DOCUMENT_NODE) ? E : E.ownerDocument;
        var A = D.childNodes;
        if (B.importNode) {
            for (var C = 0; C < A.length; C++) {
                E.appendChild(B.importNode(A[C], true))
            }
        } else {
            for (var C = 0; C < A.length; C++) {
                E.appendChild(A[C].cloneNode(true))
            }
        }
    }, duplicateNodes: function (E, D) {
        if (!E || !D) {
            return
        }
        if (!actuate.util.browser.isSafari && !actuate.util.browser.isIPad) {
            E.appendChild(D.documentElement || D);
            return
        }
        var B = (E.nodeType == Node.DOCUMENT_NODE) ? E : E.ownerDocument;
        var A = D.childNodes;
        if (B.importNode) {
            if (D.documentElement) {
                for (var C = 0; C < A.length; C++) {
                    E.appendChild(B.importNode(A[C], true))
                }
            } else {
                E.appendChild(B.importNode(D, true))
            }
        } else {
            if (D.documentElement) {
                for (var C = 0; C < A.length; C++) {
                    E.appendChild(A[C].cloneNode(true))
                }
            } else {
                E.appendChild(D.cloneNode(true))
            }
        }
    }, setTextContent: function (B, A) {
        if (B.textContent != undefined) {
            B.textContent = A
        } else {
            if (B.innerText != undefined) {
                B.innerText = A
            }
        }
    }, getNodeTextData: function (A) {
        if (A && A.firstChild && A.firstChild.data) {
            return A.firstChild.data
        }
        return null
    }, createOperation: function (L, A, B, F) {
        var H = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ACTUATE10, actuate.Constant.tag.operation);
        var E = H.documentElement;
        var I = actuate.util.XmlDom.createElement(H, actuate.Constant.tag.Target);
        E.appendChild(I);
        var K = actuate.util.XmlDom.createElement(H, actuate.Constant.tag.Id);
        I.appendChild(K);
        var M = H.createTextNode(L);
        K.appendChild(M);
        var G = actuate.util.XmlDom.createElement(H, actuate.Constant.tag.Type);
        I.appendChild(G);
        var D = H.createTextNode(A);
        G.appendChild(D);
        var J = actuate.util.XmlDom.createElement(H, actuate.Constant.tag.Operator);
        var C = H.createTextNode(B);
        J.appendChild(C);
        E.appendChild(J);
        if (F) {
            if (actuate.util.browser.isSafari) {
                actuate.util.XmlDom.copyNodes(E, F)
            } else {
                E.appendChild(F.documentElement || F)
            }
        }
        return H
    }, serialize: function (B) {
        var A = "";
        if (B.xml) {
            A = B.xml
        } else {
            if (Document && B instanceof Document) {
                A = (new XMLSerializer()).serializeToString(B)
            }
        }
        return A
    }, serializeDomNode: function (D, B) {
        var C = actuate.util.XmlDom.createXMLDom(B || actuate.util.Constants.soap.NAMESPACE_ACTUATE10, "DummyRoot");
        actuate.util.XmlDom.copyNodes(C.documentElement, D);
        var A = actuate.util.XmlDom.serialize(C);
        return A.substring(A.indexOf(">") + 1, A.lastIndexOf("</DummyRoot"))
    }, serializeDomChildren: function (F, C) {
        if (!F || F.childNodes.length < 1) {
            return null
        }
        var E = actuate.util.XmlDom.createXMLDom(C || actuate.util.Constants.soap.NAMESPACE_ACTUATE10, "DummyRoot");
        var D = actuate.util.XmlDom;
        var A = F.childNodes;
        if (!actuate.util.Utility.isSafari && !actuate.util.Utility.isChrome) {
            while (A.length > 0) {
                E.documentElement.appendChild(A[0])
            }
        } else {
            D.copyNodes(E.documentElement, F)
        }
        var B = actuate.util.XmlDom.serialize(E);
        return B.substring(B.indexOf(">") + 1, B.lastIndexOf("</DummyRoot"))
    }, removeChildren: function (A) {
        while (A.childNodes.length > 0) {
            if (A.firstChild.childNodes.length > 0) {
                this.removeChildren(A.firstChild)
            }
            A.removeChild(A.firstChild)
        }
    }
};
actuate.util.Package.define("actuate.util");
actuate.util.Browser = actuate.Class.create();
actuate.util.Browser.prototype = {
    isIE6Flag: false,
    isIE7Flag: false,
    isIE8Flag: false,
    isIE9Flag: false,
    isIE10Flag: false,
    isIE10Higher: false,
    isIEFlag: false,
    isIEEdge: false,
    isChrome: false,
    isSafari: false,
    isKHTML: false,
    isFirefox: false,
    isFirefox2: false,
    isFirefox3: false,
    isFirefox36: false,
    isFirefoxHigherVersion: false,
    isOpera: false,
    isStrict: false,
    isAndroid: false,
    isAndroid4: false,
    isAndroid2: false,
    isIPad: false,
    isIPhone: false,
    isIPod: false,
    isAndroidPhone: false,
    initialize: function () {
        this.isIEFlag = this.__isIE();
        this.isStrict = this._isStrict();
        if (!this.isIEFlag) {
            this.isFirefox = this.__isFirefox();
            if (this.isFirefox) {
                var B = this._getComponentVersion("Firefox");
                if (B && B.length > 0) {
                    if (B[0] == 2) {
                        this.isFirefox2 = true
                    } else {
                        if (B[0] == 3) {
                            var A = navigator.userAgent.toLowerCase();
                            this.isFirefox3 = true;
                            this.isFirefox36 = A.indexOf("firefox/3.6") > -1
                        } else {
                            if (B[0] == 6) {
                                this.isFirefox6 = true
                            } else {
                                this.isFirefoxHigherVersion = true
                            }
                        }
                    }
                    if (B[0] == 8) {
                        this.isFirefox8 = true
                    }
                }
            } else {
                this.isKHTML = this.__isKHTML();
                this.isSafari = this.__isSafari();
                this.isOpera = this.__isOpera();
                this.isChrome = this.__isChrome()
            }
        }
        this.isAndroid = this.__isAndroid();
        this.isAndroidPhone = this._isAndroidPhone();
        this.isIPad = this.__isIPad();
        this.isIPhone = this.__isIPhone();
        this.isIPod = this.__isIPod();
        this.isMobile = this.__isMobile()
    },
    _getComponentVersion: function (A) {
        var B = new RegExp(A + "/([^s]*)", "i");
        var C = B.exec(navigator.userAgent);
        if (C && C[1]) {
            return C[1].split(".")
        } else {
            return null
        }
    },
    __isIE: function () {
        var C = navigator.userAgent.toLowerCase();
        var B;
        if (C.indexOf("msie") > -1) {
            if (C.indexOf("msie 9") > -1) {
                this.isIE9Flag = true
            } else {
                if (C.indexOf("msie 10") > -1) {
                    this.isIE10Flag = true
                } else {
                    if (C.indexOf("msie 6") > -1) {
                        this.isIE6Flag = true
                    } else {
                        if (C.indexOf("msie 7") > -1) {
                            var D = document.getElementsByTagName("meta");
                            for (var A = 0; A < D.length; A++) {
                                if (D[A].httpEquiv == "X-UA-Compatible") {
                                    if (D[A].content == "IE=EmulateIE8") {
                                        this.isIE8Flag = true;
                                        break
                                    }
                                }
                            }
                            if (!this.isIE8Flag) {
                                this.isIE7Flag = true
                            }
                        } else {
                            if (C.indexOf("8.") > -1) {
                                this.isIE8Flag = true
                            }
                        }
                    }
                }
            }
            return true
        } else {
            if (C.indexOf("windows nt") > -1 && C.indexOf("trident/7.0") > -1) {
                this.isIE10Higher = true;
                return true
            } else {
                if (C.indexOf("windows nt") > -1 && C.indexOf("edge") > -1) {
                    this.isIEEdge = true;
                    return false
                } else {
                    return false
                }
            }
        }
    },
    _isStrict: function () {
        return document.compatMode == "CSS1Compat"
    },
    useIFrame: function () {
        return this.isIEFlag
    },
    isIE: function () {
        return this.isIEFlag
    },
    isIE6: function () {
        return this.isIE6Flag
    },
    isIE7: function () {
        return this.isIE7Flag
    },
    isIE8: function () {
        return this.isIE8Flag
    },
    isIE9: function () {
        return this.isIE9Flag
    },
    isIE10: function () {
        return this.isIE10Flag
    },
    isIE9orLower: function () {
        return (actuate.util.browser.isIE6() || actuate.util.browser.isIE7() || actuate.util.browser.isIE8() || actuate.util.browser.isIE9())
    },
    useMobile: function () {
        return actuate.USER_ENV == "tablet" || actuate.USER_ENV == "tabletapp"
    },
    isNativeApp: function () {
        return actuate.USER_ENV == "tabletapp"
    },
    __isChrome: function () {
        var A = navigator.userAgent.toLowerCase();
        return this.isIEEdge ? false : (A.indexOf("chrome") > -1)
    },
    __isAndroid: function () {
        var B = navigator.userAgent.toLowerCase();
        var A = /Android\s+([\d\.]+)/i.exec(B);
        if (A && A[1]) {
            if (A[1].indexOf("2") == 0) {
                this.isAndroid2 = true;
                this.isAndroid4 = false
            } else {
                if (A[1].indexOf("4") == 0) {
                    this.isAndroid4 = true;
                    this.isAndroid2 = false
                }
            }
        }
        return (B.indexOf("xoom") > -1) || (B.indexOf("android") > -1)
    },
    _isAndroidPhone: function () {
        var A = navigator.userAgent.toLowerCase();
        if (this.__isAndroid()) {
            return (A.search("mobile") > -1)
        }
        return false
    },
    __isIPad: function () {
        var A = navigator.userAgent.toLowerCase();
        return (A.indexOf("ipad") > -1)
    },
    __isIPhone: function () {
        var A = navigator.userAgent.toLowerCase();
        return (A.indexOf("iphone") > -1)
    },
    __isIPod: function () {
        var A = navigator.userAgent.toLowerCase();
        return (A.indexOf("ipod") > -1)
    },
    __isFirefox: function () {
        var A = navigator.userAgent.toLowerCase();
        return (A.indexOf("firefox") > -1)
    },
    __isSafari: function () {
        return navigator.appVersion.match(/Safari/) != null
    },
    __isKHTML: function () {
        return navigator.appVersion.match(/KHTML/) != null
    },
    __isMobile: function () {
        return navigator.appVersion.match(/Mobile/) != null
    },
    __isOpera: function () {
        return navigator.userAgent.match(/opera/i)
    }
};
actuate.util.browser = new actuate.util.Browser();
actuate.util.Package.define("actuate.util");
actuate.util.SecurityManager = {
    _CACHE_COOKIE_NAME: "actuate_SecurityManager_cache",
    ACTION_LOGIN: "loginservlet",
    ACTION_LOGOUT: "logout.do",
    ATTR_IPORTAL_ID: "iportalid",
    VOLUME_PROFILE: "__vp",
    _authMap: null,
    _pendingAuth: null,
    _onFinishedCallbacks: null,
    _onErrorCallbacks: null,
    _loginDialog: null,
    _disableProgressIndicator: false,
    _initialize: function () {
        this._authMap = new actuate.util.HashMap();
        this._pendingAuth = new actuate.util.HashMap();
        this._onFinishedCallbacks = new actuate.util.HashMap();
        this._onErrorCallbacks = new actuate.util.HashMap()
    },
    _loadCache: function () {
        var A = actuate.util.Utility.readCookie(this._CACHE_COOKIE_NAME);
        return new actuate.util.HashMap(A)
    },
    _saveCache: function (A) {
        actuate.util.Utility.writeCookie(this._CACHE_COOKIE_NAME, A.toURI())
    },
    authenticate: function (F, C, G, H, B, I, E, A) {
        this._disableProgressIndicator = A;
        if (!F) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument iportalUrl")
        }
        if (B && typeof (B) != "string") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "credentials" must be a string')
        }
        F = this._addUrlSlash(actuate.util.Utility.makeAbsoluteUrl(F));
        if (C && !(C instanceof actuate.RequestOptions)) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'Invalid request options, it must be an instance of "actuate.RequestOptions".')
        }
        if (I && (typeof (I) != "function")) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "callback" contains an invalid callback function : "' + I + '".')
        }
        if (E && (typeof (E) != "function")) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "errorCallback" contains an invalid callback function : "' + E + '".')
        }
        if (!G || G == "") {
            G = null;
            H = null
        }
        var D = this._makeServerHashKey(F, C);
        if (this._isPending(D)) {
            if (!G) {
                this._registerCallback(F, C, I, E);
                return
            } else {
                throw new actuate.Exception(actuate.Exception.ERR_CLIENT, "There is already a pending authentication for the given iportal/requestOptions")
            }
        }
        this._removeSessionId(D);
        this._addPendingAuth(D);
        if (I || E) {
            this._registerCallback(F, C, I, E)
        }
        this._doAuthenticate(F, C, G, H, B)
    },
    _registerCallback: function (C, A, E, B) {
        if (E || B) {
            var D = this._makeServerHashKey(C, A);
            this._addOnFinishedCallback(D, this._createResponseCallback(C, A, E));
            if (B) {
                this._addOnErrorCallback(D, B)
            }
        }
    },
    _createResponseCallback: function (B, A, E) {
        var D = null;
        var C = null;
        if (A) {
            D = A.getIServerUrl();
            C = A.getVolume()
        }
        return function (H, G, F) {
            E(B, G, D, C, F)
        }
    },
    logout: function (F, C, I, E) {
        if (!F) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument iportalURL")
        }
        F = this._addUrlSlash(actuate.util.Utility.makeAbsoluteUrl(F));
        if (C && !(C instanceof actuate.RequestOptions)) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Invalid request options, it must be an instance of "actuate.RequestOptions".')
        }
        if (I && (typeof (I) != "function")) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "callback" contains an invalid callback function : "' + I + '".')
        }
        if (E && (typeof (E) != "function")) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "errorCallback" contains an invalid callback function : "' + E + '".')
        }
        var D = this._makeServerHashKey(F, C);
        var A = this._createRequestURL(this.ACTION_LOGOUT, F, C);
        var J = actuate.util.Utility.getProxyUrl(F);
        var B = new actuate.ajax.Connection("get", A);
        var H = this;
        var G = function (M) {
            var L = "" + M.getStatus();
            var K = L.charAt(0);
            if (K != "2" && K != "3") {
                H._invalidResponseHandler(M);
                return
            }
            H._removeSessionId(D);
            H._removePendingAuth(D);
            H._onFinishedCallbacks.remove(D);
            H._onErrorCallbacks.remove(D);
            if (I) {
                var O = null;
                var N = null;
                if (C) {
                    O = C.getIServerUrl();
                    N = C.getVolume()
                }
                I(F, O, N)
            }
        };
        B.setProxyUrl(J);
        B.setOnSuccess(G);
        B.setOnFailure(G);
        B.setOnException(function (K) {
            K = actuate.util.Utility.createException(K);
            if (E) {
                E(K)
            } else {
                throw K
            }
        });
        B.send()
    },
    _addUrlSlash: function (A) {
        if (A && A.charAt(A.length - 1) != "/") {
            A += "/"
        }
        return A
    },
    isConnected: function (B, A) {
        if (!B) {
            B = actuate.getDefaultIportalUrl();
            A = actuate.getDefaultRequestOptions()
        }
        B = this._addUrlSlash(actuate.util.Utility.makeAbsoluteUrl(B));
        if (B.charAt(B.length - 1) != "/") {
            B += "/"
        }
        var C = this._makeServerHashKey(B, A);
        return (this.__getSessionId(C) != null)
    },
    _doAuthenticate: function (H, E, I, K, D) {
        if (typeof (H) != "string") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing required iportal url argument")
        }
        var A = this._createRequestURL(this.ACTION_LOGIN, H, E, D);
        var L = actuate.util.Utility.getProxyUrl(H);
        var C = new actuate.ajax.Connection("post", A);
        var J = this;
        var F = this._makeServerHashKey(H, E);
        var B = "";
        if (I) {
            B = "userid=" + encodeURIComponent(I);
            if (K) {
                B += "&password=" + encodeURIComponent(K)
            }
        }
        if (E) {
            var G = E.getRESTAuthToken();
            if (G) {
                if (B !== "") {
                    B += "&"
                }
                B += "__authToken=" + encodeURIComponent(G)
            }
        }
        if (B != "") {
            C.setPostData(B);
            C.setRequestHeader("Content-Type", "application/x-www-form-urlencoded")
        }
        C.setProxyUrl(L);
        C.setOnSuccess(function (M) {
            try {
                J._authenticationResponseHandler(M, H, E, I)
            } catch (N) {
                J._fireOnError(F, N)
            }
        });
        C.setOnFailure(actuate.Method.bind(this._invalidResponseHandler, this));
        C.setOnException(function (M) {
            J._fireOnError(F, M)
        });
        this._showProgressIndicator(H);
        C.send()
    },
    _showProgressIndicator: function (B) {
        if (!this._disableProgressIndicator) {
            var C = document.documentElement.clientWidth;
            var A = document.documentElement.clientHeight;
            if (actuate.util.Utility.isTouchDevice()) {
                this._progressIndicator = actuate.util.Utility.showProgressIndicatorInTouchDevice(null, B, document.documentElement.clientWidth, document.documentElement.clientHeight)
            } else {
                this._progressIndicator = actuate.util.Utility.showProgressIndicator(this._progressIndicator, null, B, document.documentElement.clientWidth, document.documentElement.clientHeight)
            }
        }
    },
    _hideProgressIndicator: function () {
        if (this._progressIndicator) {
            if (actuate.util.Utility.isTouchDevice()) {
                actuate.util.Utility.hideProgressIndicatorInTouchDevice(this._progressIndicator)
            } else {
                actuate.util.Utility.hideProgressIndicator(this._progressIndicator)
            }
        }
    },
    _authenticationResponseHandler: function (F, L, G, N) {
        this._hideProgressIndicator();
        var J = this._makeServerHashKey(L, G);
        if (!this._isPending(J)) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, "Received unexpected authentication response")
        }
        this._removePendingAuth(J);
        var B = F.getUrl();
        if (F.getStatus() == 200) {
            var I = null;
            var C = null;
            var Q = null;
            var M = null;
            var K = null;
            var P = F.getResponseXml();
            if (P) {
                var E = P.getElementsByTagName("Param");
                if (E) {
                    for (var H = 0; H < E.length; H++) {
                        var O = E[H].getAttribute("id").toLowerCase();
                        if (O == this.ATTR_IPORTAL_ID) {
                            I = E[H].firstChild.nodeValue
                        }
                        if (O == this.VOLUME_PROFILE) {
                            C = E[H].firstChild.nodeValue
                        }
                        if (O == "httpsessionid") {
                            Q = E[H].firstChild.nodeValue
                        }
                        if (O == "resttoken") {
                            M = E[H].firstChild.nodeValue
                        }
                        if (O == "repositorytype") {
                            K = E[H].firstChild.nodeValue
                        }
                        if (O == "isocp") {
                            actuate.setOCP(E[H].firstChild.nodeValue == "true" ? true : false)
                        }
                        if (O == "nonce") {
                            actuate.setNonce(E[H].firstChild.nodeValue)
                        }
                    }
                }
            }
            var D = this._getResponseHeaderCaseInsensitive(F, actuate.util.Utility.CSRF_TOKEN_NAME);
            if (D) {
                actuate.util.Utility.setToken(D)
            }
            if (Q) {
                actuate._ajaxHttpSessionId = Q
            }
            if (I) {
                this._addSessionId(J, I);
                if (G && C && C != "null") {
                    G.setVolumeProfile(C);
                    G.setRepositoryType(K);
                    if (M) {
                        if (!((actuate.externalToken) && (actuate.externalToken.length > 3))) {
                            G.setRESTAuthToken(M)
                        }
                    }
                }
                this._fireOnFinished(J, N, I, G)
            } else {
                var A = this._fireOnError(J, new actuate.AuthenticationException(L, G, N, actuate.Exception.ERR_CLIENT, "Authentication failed"));
                if (!A) {
                    if (actuate.util.browser && actuate.util.browser.isNativeApp()) {
                        window.location = "error://message=Authentication failed&action=setting"
                    } else {
                        this._showLoginDialog(L, G, N)
                    }
                }
            }
        } else {
            throw new actuate.ConnectionException(B, actuate.Exception.ERR_CLIENT, 'Invalid response from "' + B + '".', F.getStatusText(), F.getStatus())
        }
    },
    _getResponseHeaderCaseInsensitive: function (B, E) {
        const D = B.getAllResponseHeaders();
        const A = D.trim().split(/[\r\n]+/);
        const C = {};
        A.forEach(function (F) {
            const H = F.split(": ");
            const I = H.shift();
            const G = H.join(": ");
            if (I) {
                C[I.toLowerCase()] = G
            }
        });
        if (E) {
            return C[E.toLowerCase()]
        }
        return null
    },
    _invalidResponseHandler: function (A) {
        throw new actuate.ConnectionException(A.getUrl(), actuate.Exception.ERR_CLIENT, 'Invalid response from "' + A.getUrl() + '".', A.getStatusText(), A.getStatus())
    },
    _showLoginDialog: function (C, A, D, B) {
        if (!actuate.dialog || !actuate.dialog.impl || !actuate.dialog.impl.LoginDialog) {
            if (B) {
                alert("Error: couldn't load the dialog module to show the login dialog !");
                return
            }
            var E = this;
            var F = [];
            if (!(actuate.util.browser && actuate.util.browser.useMobile())) {
                F = [actuate.util.Constants.MODULE_NAME_UIADAPTER, actuate.util.Constants.MODULE_NAME_DIALOG, actuate.util.Constants.MODULE_NAME_WIDGET]
            } else {
                F = [actuate.util.Constants.MODULE_NAME_MOBILE, actuate.util.Constants.MODULE_NAME_UIADAPTER, actuate.util.Constants.MODULE_NAME_DIALOG]
            }
            if (actuate.util.browser && actuate.util.browser.useMobile()) {
                actuate.resource.module.require(F, function () {
                    if (Ext && Ext.setup) {
                        Ext.setup({
                            onReady: function () {
                                actuate.resource.module.feature.require([{
                                    module: actuate.util.Constants.MODULE_NAME_DIALOG,
                                    feature: "LOGIN_DIALOG"
                                }], function () {
                                    E._showLoginDialog(C, A, D, true)
                                }, null, C, A)
                            }
                        })
                    }
                }, null, C, A);
                return
            } else {
                actuate.resource.module.require(F, function () {
                    actuate.resource.module.feature.require([{
                        module: actuate.util.Constants.MODULE_NAME_DIALOG,
                        feature: "LOGIN_DIALOG"
                    }], function () {
                        E._showLoginDialog(C, A, D, true)
                    }, null, C, A)
                }, null, C, A);
                actuate.util.Style.swapStyleSheet("theme", actuate.common.CacheManager.prototype.themecss)
            }
        }
        C = actuate.util.Utility.makeAbsoluteUrl(C);
        if (!this._loginDialog) {
            this._loginDialog = actuate.common.ClassLoader.getInstance().forName("actuate.dialog.impl.LoginDialog");
            this._dummyConsumer = new actuate.common.DialogConsumer()
        }
        this._loginDialog.setConsumer(this._dummyConsumer);
        if (actuate.util.browser && actuate.util.browser.isNativeApp()) {
            window.location = "setting://setting;"
        } else {
            this._loginDialog.show({
                iportalUrl: C,
                requestOptions: A,
                userId: D,
                password: "",
                onOK: actuate.Method.bind(this._cb_loginDialogValidation, this),
                onCancel: actuate.Method.bind(this._cb_loginDialogClosed, this)
            })
        }
    },
    _cb_loginDialogValidation: function (E) {
        var C = E.getIportalUrl();
        var A = E.getRequestOptions();
        var D = E.getUserId();
        var B = E.getPassword();
        this.authenticate(C, A, D, B)
    },
    _cb_loginDialogClosed: function (C) {
        var B = C.getIportalUrl();
        var A = C.getRequestOptions();
        this._onFinishedCallbacks.remove(this._makeServerHashKey(B, A));
        this._onErrorCallbacks.remove(this._makeServerHashKey(B, A))
    },
    _createRequestURL: function (F, C, A, D) {
        var G = new actuate.util.HashMap();
        if (D) {
            G.put("__credentials", D)
        }
        if (A) {
            G.putAll(A.__toMap())
        }
        var E = G.toURI();
        var B = C + F;
        if (A && A.__getJsessionId()) {
            B += ";jsessionid=" + A.__getJsessionId()
        }
        if (E && E != "") {
            B += "?" + E
        }
        return B
    },
    _addSessionId: function (A, B) {
        this._authMap.put(A, B)
    },
    _removeSessionId: function (A) {
        this._authMap.remove(A)
    },
    __getSessionId: function (A) {
        if (arguments.length > 1) {
            A = this._makeServerHashKey(arguments[0], arguments[1])
        }
        if (this._authMap) {
            return this._authMap.get(A)
        } else {
            return null
        }
    },
    __asyncGetSessionId: function (C, A, F, B) {
        if (!C && !typeof (C) == "string") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Invalid value for iportalUrl argument")
        }
        C = this._addUrlSlash(actuate.util.Utility.makeAbsoluteUrl(C));
        if (!F || typeof (F) != "function") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "callback" contains an invalid callback function')
        }
        if (B && typeof (B) != "function") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "errorCallback" contains an invalid callback function')
        }
        var D = this._makeServerHashKey(C, A);
        var E = this.__getSessionId(D);
        if (E) {
            F(E)
        } else {
            if (this._isPending(D)) {
                this._addOnFinishedCallback(D, F);
                if (B) {
                    this._addOnErrorCallback(D, B)
                }
            } else {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, "There is neither a pending nor finished authentication for the given service URL. The authenticate() method must be called first.")
            }
        }
    },
    getSessionId: function (C, A) {
        var B = this._makeServerHashKey(C, A);
        var D = this.__getSessionId(B);
        return D
    },
    _makeHashKey: function () {
        var C = "";
        for (var B = 0; B < arguments.length; B++) {
            var A = arguments[B];
            if (A && A != null) {
                C += encodeURIComponent(A) + "/"
            }
        }
        return C
    },
    _makeServerHashKey: function (B, A) {
        if (A) {
            return this._makeHashKey(B, A.getIServerUrl(), A.getVolume())
        } else {
            return this._makeHashKey(B)
        }
    },
    reset: function () {
        this._authMap = new actuate.util.HashMap();
        this._pendingAuth = new actuate.util.HashMap();
        this._onFinishedCallbacks = new actuate.util.HashMap();
        this._onErrorCallbacks = new actuate.util.HashMap()
    },
    _isPending: function (B) {
        var A = this._pendingAuth.get(B);
        return (A == true)
    },
    _addPendingAuth: function (A) {
        this._pendingAuth.put(A, true)
    },
    _removePendingAuth: function (A) {
        this._pendingAuth.remove(A)
    },
    _fireOnFinished: function (D, C, G, A) {
        var F = this._onFinishedCallbacks.get(D);
        this._onFinishedCallbacks.remove(D);
        var E = false;
        if (F && F.length > 0) {
            for (var B = 0; B < F.length; B++) {
                F[B](G, C, A)
            }
            E = true
        }
        this._onErrorCallbacks.remove(D);
        return E
    },
    _fireOnError: function (C, B) {
        this._hideProgressIndicator();
        B = actuate.util.Utility.createException(B);
        var D = this._onErrorCallbacks.get(C);
        if (D && D.length > 0) {
            this._onFinishedCallbacks.remove(C);
            this._onErrorCallbacks.remove(C);
            for (var A = 0; A < D.length; A++) {
                D[A](B)
            }
            return true
        }
        return false
    },
    _addOnFinishedCallback: function (A, C) {
        var B = this._onFinishedCallbacks.get(A);
        if (!B) {
            B = new Array();
            this._onFinishedCallbacks.put(A, B)
        }
        B.push(C)
    },
    _addOnErrorCallback: function (A, C) {
        var B = this._onErrorCallbacks.get(A);
        if (!B) {
            B = new Array();
            this._onErrorCallbacks.put(A, B)
        }
        B.push(C)
    },
    _fireException: function (A) {
        A = actuate.util.Utility.createException(A);
        if (this._onException) {
            this._onException(A)
        } else {
            throw A
        }
    }
};
actuate.util.SecurityManager._initialize();
actuate.util.Package.define("actuate.util");
actuate.util.NumberFormatter = actuate.Class.createClass({
    initialize: function (A, C, B) {
        this.decimalPoint = new String(A || ".");
        this.thousandSep = new String(C || ",");
        this.fracDigits = B
    }, isNumber: function (C) {
        var B = new String(C);
        var A = "-+0123456789" + this.decimalPoint + this.thousandSep;
        var E;
        for (var D = 0; D < B.length; D++) {
            E = B.charAt(D);
            if (A.indexOf(E) == -1) {
                return false
            }
        }
        return true
    }, roundFloat: function (B, A) {
        var C = Math.pow(10, A);
        return Math.round(B * C) / C
    }, toString: function (A) {
        if (A == null || A == undefined) {
            return ""
        }
        var C = new String(A);
        var B = C.split(".");
        return B.join(this.decimalPoint)
    }, format: function (B, A) {
        if (B == null || B == undefined) {
            return ""
        }
        if (typeof (A) == "undefined") {
            A = this.fracDigits
        }
        var C = null;
        if (A != null && A > 0) {
            C = new String(this.roundFloat(B, A));
            if (C.indexOf(".") < 0) {
                C = C + "."
            }
            while (C.length < 1 + C.indexOf(".") + A) {
                C = C + "0"
            }
        }
        return this.toString(new String(B))
    }, parse: function (D) {
        var B = new String(D);
        var C = B.split(this.thousandSep);
        B = C.join("");
        C = B.split(this.decimalPoint);
        var A = C.join(".");
        if (Number(A) != null) {
            return parseFloat(A)
        }
    }, getNumberPrecision: function (A) {
        if (A != null) {
            if (typeof (A) == "number") {
                A = "" + A
            }
            var B = A.indexOf(this.decimalPoint);
            if (B > 0) {
                return A.length - B - 1
            }
        }
        return 0
    }
});
actuate.util.Package.define("actuate.common");
actuate.common.IportalRequest = actuate.Class.create();
actuate.common.IportalRequest.prototype = {
    _iportalUrl: null, _requestOptions: null, _sessionId: null, _exceptionHandler: null, initialize: function (A, B) {
        if (actuate && actuate.getDefaultIportalUrl) {
            this.setService(actuate.getDefaultIportalUrl(), actuate.getDefaultRequestOptions())
        } else {
            this.setService(null)
        }
        if (A && A.createRequestURL) {
            this.setService(A._iportalUrl);
            this._sessionId = A._sessionId
        }
        if (B) {
            this._sessionId = B
        }
    }, createRequestURL: function (A) {
        this._validate();
        var B = actuate.util.Utility.makeAbsoluteUrl(this._iportalUrl + A);
        if (this._requestOptions && this._requestOptions.__getJsessionId()) {
            B += ";jsessionid=" + this._requestOptions.__getJsessionId()
        }
        if (B.indexOf("?") > 0) {
            B += "&"
        } else {
            B += "?"
        }
        if (actuate.util.Utility.getToken()) {
            B += actuate.util.Utility.getTokenName() + "=" + actuate.util.Utility.getToken() + "&"
        }
        B += this._getRequestAttributes().toURI();
        return B
    }, getProxyURL: function () {
        return actuate.util.Utility.getProxyUrl(this._iportalUrl)
    }, _getRequestAttributes: function () {
        var A = new actuate.util.HashMap();
        if (this._requestOptions) {
            A.putAll(this._requestOptions.__toMap())
        }
        A.put("closex", "true");
        return A
    }, _validate: function () {
        if (!this._iportalUrl) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Argument iportalUrl is required")
        }
        if (!this._sessionId) {
            throw new actuate.Exception(actuate.Exception.ERR_CLIENT, 'No authentication for URL "' + this._iportalUrl + '"')
        }
    }, validate: function () {
        this._validate()
    }, getProxyUrl: function () {
        return actuate.util.Utility.getProxyUrl(this._iportalUrl)
    }, setService: function (B, A) {
        if (B && B.charAt(B.length - 1) != "/") {
            B += "/"
        }
        this._iportalUrl = B;
        if (A) {
            this._requestOptions = new actuate.RequestOptions(A)
        } else {
            this._requestOptions = null
        }
    }, getIportalUrl: function () {
        return this._iportalUrl
    }, getRequestOptions: function () {
        if (this._requestOptions) {
            return new actuate.RequestOptions(this._requestOptions)
        } else {
            return null
        }
    }, makeAjaxConnection: function (A, H, G, C, J, E, D) {
        if (!A) {
            A = "get"
        }
        var B = new actuate.ajax.Connection(A, null);
        B.setProxyUrl(this.getProxyUrl());
        B.setPostData(C);
        if (G) {
            B.setRequestHeaders(G)
        }
        if (actuate.util.browser && actuate.util.browser.useMobile()) {
            if (actuate.util.browser.isNativeApp()) {
                B.setRequestHeader("__userenv", "TABLETAPP")
            } else {
                B.setRequestHeader("__userenv", "TABLET")
            }
        }
        B.setOnSuccess(J);
        B.setOnFailure(E);
        B.setOnException(this._exceptionHandler);
        var F = this;
        var I = function () {
            B.setUrl(F.createRequestURL(H));
            B.setSynchronous(D);
            B.send();
            if (D) {
                J(B)
            }
        };
        this.authenticate(I);
        return B
    }, setExceptionHandler: function (A) {
        this._exceptionHandler = A
    }, authenticate: function (C) {
        var B = this;
        actuate.util.SecurityManager.__asyncGetSessionId(this._iportalUrl, this._requestOptions, function A(D) {
            B._sessionId = D;
            C()
        })
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.AbstractService = actuate.Class.create();
actuate.common.AbstractService._viewersCount = 0;
actuate.common.AbstractService.prototype = {
    _REPORT_TYPE_DESIGN: "rptdesign",
    _REPORT_TYPE_BIZDESIGN: "bizdesign",
    _REPORT_TYPE_DOCUMENT: "rptdocument",
    _REPORT_TYPE_BIZDOCUMENT: "bizdocument",
    _REPORT_TYPE_DATA: "data",
    _REPORT_TYPE_DATADESIGN: "datadesign",
    _REPORT_TYPE_CUBEVIEW: "cubeview",
    _REPORT_TYPE_DASHBOARD: "dashboard",
    _REPORT_TYPE_DASHBOARDDOCUMENT: "dashboarddocument",
    _REPORT_TYPE_UNKNOWN: "unknown",
    _id: null,
    _initialized: false,
    _iportalUrl: null,
    requestOptions: null,
    _exceptionHandlerClosure: null,
    sessionId: null,
    getId: function () {
        return this._id
    },
    _getReportType: function (B) {
        if (!B) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument reportFileName")
        }
        var A = B.lastIndexOf(";");
        if (A > 0) {
            B = B.substr(0, A)
        }
        var D = B.lastIndexOf(".");
        var C = B.substr(D + 1).toLowerCase();
        if (C == "rptdesign" || C == "rpttemplate") {
            return this._REPORT_TYPE_DESIGN
        } else {
            if (C == "bizdesign") {
                return this._REPORT_TYPE_BIZDESIGN
            } else {
                if (C == "rptdocument") {
                    return this._REPORT_TYPE_DOCUMENT
                } else {
                    if (C == "bizdocument") {
                        return this._REPORT_TYPE_BIZDOCUMENT
                    } else {
                        if (C == "data") {
                            return this._REPORT_TYPE_DATA
                        } else {
                            if (C == "datadesign") {
                                return this._REPORT_TYPE_DATADESIGN
                            } else {
                                if (C == "cubeview") {
                                    return this._REPORT_TYPE_CUBEVIEW
                                } else {
                                    if (C == "dashboard") {
                                        return this._REPORT_TYPE_DASHBOARD
                                    } else {
                                        if (C == "dashboarddocument") {
                                            return this._REPORT_TYPE_DASHBOARDDOCUMENT
                                        } else {
                                            return this._REPORT_TYPE_UNKNOWN
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    initialize: function (A) {
        if (A) {
            this._id = A
        } else {
            actuate.common.AbstractService._viewersCount++;
            this._id = "js" + actuate.common.AbstractService._viewersCount
        }
        if (actuate && actuate.getDefaultIportalUrl) {
            this.setService(actuate.getDefaultIportalUrl(), actuate.getDefaultRequestOptions())
        } else {
            this.setService(null)
        }
        this._exceptionHandlerClosure = actuate.Method.bind(this._exceptionHandler, this);
        this._init()
    },
    _init: function () {
    },
    _exceptionHandler: function (A) {
    },
    setService: function (B, A) {
        if (B && B.charAt(B.length - 1) != "/") {
            B += "/"
        }
        this._iportalUrl = B;
        if (A) {
            this.requestOptions = new actuate.RequestOptions(A)
        } else {
            this.requestOptions = null
        }
    },
    getIportalUrl: function () {
        return this._iportalUrl
    },
    getRequestOptions: function () {
        if (this.requestOptions) {
            return new actuate.RequestOptions(this.requestOptions)
        } else {
            return null
        }
    },
    _validate: function () {
        if (this._iportalUrl) {
            return true
        } else {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument service URL")
        }
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.CacheManager = actuate.Class.create();
actuate.Class.extend(actuate.common.CacheManager, {
    ELEMENT_TYPE_MAPPING: {
        TABLE: actuate.Constant.tag.Table,
        SUMMARYTABLE: actuate.Constant.tag.SummaryTable,
        CROSSTAB: actuate.Constant.tag.Crosstab,
        CHART: actuate.Constant.tag.Chart,
        FLASHCHART: actuate.Constant.tag.FlashChart,
        FLASHGADGET: actuate.Constant.tag.FlashGadget,
        FLASHOBJECT: actuate.Constant.tag.FlashObject,
        LABEL: actuate.Constant.tag.Label,
        DATAITEM: actuate.Constant.tag.DataItem,
        TEXTITEM: actuate.Constant.tag.TextItem,
        DOCUMENT: actuate.Constant.tag.Document,
        SELECTOR: actuate.Constant.tag.Selector,
        HTMLCONTROL: actuate.Constant.tag.CustomViz
    }, COMMAND_STACK_LENGTH: 0, CURRENT_STACK_RECORD: 0
});
actuate.common.CacheManager.prototype = {
    _service: null, initialize: function (A) {
        this._service = A
    }, getMetadata: function (B, C, A) {
        var E = this._service.documentModel;
        var D = E.getElementByIId(B, C);
        if (D) {
            return D.getMetadata(A)
        }
        return null
    }, invalidateMetadata: function (D, B) {
        if (!D) {
            return false
        }
        if (!actuate.util.Utility.isArray(B)) {
            B = [B]
        }
        for (var C = 0; C < B.length; C++) {
            var A = B[C];
            D.invalidateMetadata(A);
            if (A == actuate.model.Constant.MetadataType.ALL) {
                this._service.documentModel.removeItem(D)
            }
        }
        return true
    }, queryMetadata: function (H, D, F, A, I, J) {
        if (!D) {
            return false
        }
        if (!actuate.util.Utility.isArray(A)) {
            A = [A]
        }
        var C = [];
        for (var E = 0; E < A.length; E++) {
            var K = A[E];
            if (!D.hasMetadata(K) || J) {
                C.push(K)
            }
        }
        if (C.length > 0 || I) {
            var B = "";
            for (var E = 0; E < C.length; E++) {
                if (B.length > 0) {
                    B += ","
                }
                B += C[E]
            }
            var G = null;
            if (I && this._service.documentModel) {
                G = this._service.documentModel.getKnownDesignIds();
                G = G.join(",")
            }
            this._createOperation(H, F, D, B, G);
            return true
        }
        return false
    }, _createOperation: function (F, E, D, B, G) {
        var C = null;
        E = E && this._service.getOperatorByEvent(E);
        if (E) {
            C = F.getOperation(E)
        }
        if (!C) {
            var L = D.iid;
            if (D.dom != null && D.dom.iid != null && D.dom.iid.lastIndexOf("/") > 0) {
                if (D.type != null && (D.type.toLowerCase() == "chart" || D.type.toLowerCase() == "flashchart" || D.type.toLowerCase() == "flashgadget")) {
                    L = D.dom.iid
                }
            }
            C = F.addOperation(L, actuate.common.CacheManager.ELEMENT_TYPE_MAPPING[D.type] || D.type, "GetMetadata", null)
        }
        F.addOperand(C, {name: actuate.Constant.oprand.DPI, value: actuate.util.Utility.getDPI()});
        if (this._service && this._service.apiInstance && this._service.apiInstance._gadgetId) {
            F.addOperand(C, {name: actuate.Constant.oprand.GadgetId, value: this._service.apiInstance._gadgetId})
        }
        if (G != null) {
            F.addOperand(C, {name: "requestBaseMetadata", value: G})
        }
        if (B && B.length > 0) {
            var I = F.getXmlDocument();
            var K = actuate.util.XmlDom.createElement(I, "Metadata");
            var J = I.createTextNode(B);
            K.appendChild(J);
            var A = C.getElementsByTagName("Data");
            var H = A.length > 0 && A[0];
            if (!H) {
                H = actuate.util.XmlDom.createElement(I, actuate.Constant.tag.Data);
                C.appendChild(H)
            }
            H.appendChild(K)
        }
    }, _processMetadataTag: function (I) {
        var G = this._service.documentModel;
        var A = actuate.util.Utility.parseJson(I);
        for (var H in A) {
            var B = A[H];
            var C;
            if (H == "Document") {
                C = G
            } else {
                C = G.getElementByIId(H);
                if (H.lastIndexOf("/") > 0) {
                    var E = G.getElementBySId(H, "FLASHCHART");
                    if (E != null && E.type != null && (E.type.toUpperCase() == "FLASHCHART" || E.type.toUpperCase() == "FLASHGADGET" || E.type.toUpperCase() == "CHART")) {
                        C = E
                    }
                }
                if (!C && B[actuate.model.Constant.MetadataType.FEATURES]) {
                    var D = B[actuate.model.Constant.MetadataType.TYPE];
                    if (D) {
                        delete B[actuate.model.Constant.MetadataType.TYPE];
                        C = G.createElement(H, D)
                    }
                }
            }
            if (C) {
                for (var F in B) {
                    if (C.setMetadata) {
                        C.setMetadata(F, B[F])
                    }
                }
            }
        }
    }, processBind: function (A, D) {
        if (!D || !D.childNodes) {
            return
        }
        var C = D.getElementsByTagName("Metadata");
        for (var B = 0; B < C.length; B++) {
            this._processMetadataTag(C[B])
        }
    }, processJson: function (F) {
        if (!F) {
            return
        }
        var C = this._service.documentModel;
        for (var E in F) {
            var B = F[E];
            var D;
            if (E == "Document") {
                D = C
            } else {
                D = C.getElementByIId(E);
                if (!D) {
                    D = C.createElement(E, B[actuate.model.Constant.MetadataType.TYPE])
                }
            }
            if (D) {
                for (var A in B) {
                    if (D.setMetadata) {
                        D.setMetadata(A, B[A])
                    }
                }
            }
        }
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.Observable = actuate.Class.create();
actuate.common.Observable.prototype = actuate.Class.extend(new actuate.common.AbstractService, {
    _eventDispatcher: null, _eventHandlers: null, _reportEventHandlers: null, initialize: function () {
        this._eventHandlers = {};
        this._reportEventHandlers = {}
    }, _init: function () {
        this._eventHandlers = {}
    }, registerEventHandler: function (B, A) {
        if (!this._isValidEvent(B)) {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, 'Invalid event type "' + B + '"')
        }
        if (!A || typeof (A) != "function") {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, "Event handler is required and must be a function")
        }
        this._getEventHandlers(B).push(A)
    }, removeEventHandler: function (D, C) {
        if (!this._isValidEvent(D)) {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, 'Invalid event type "' + D + '"')
        }
        if (!C || typeof (C) != "function") {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, "Event handler is required and must be a function")
        }
        var A = this._getEventHandlers(D);
        for (var B = 0; B < A.length;) {
            if (A[B] == C) {
                A.splice(B, 1)
            } else {
                B++
            }
        }
    }, registerReportEventHandler: function (B, A) {
        if (!this._isValidEvent(B)) {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, 'Invalid event type "' + B + '"')
        }
        if (!A || typeof (A) != "function") {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, "Event handler is required and must be a function")
        }
        this._getReportEventHandlers(B).push(A)
    }, removeReportEventHandler: function (D, C) {
        if (!this._isValidEvent(D)) {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, 'Invalid event type "' + D + '"')
        }
        if (!C || typeof (C) != "function") {
            throw new actuate.viewer.ViewerException(actuate.Exception.ERR_USAGE, "Event handler is required and must be a function")
        }
        var A = this._getReportEventHandlers(D);
        for (var B = 0; B < A.length;) {
            if (A[B] == C) {
                A.splice(B, 1)
            } else {
                B++
            }
        }
    }, removeReportEventHandlers: function (A) {
        if (this._reportEventHandlers[A]) {
            delete this._reportEventHandlers[A]
        }
    }, _makeEventHandlerClosure: function (B, A, C) {
        return function () {
            B(A, C)
        }
    }, fireEvent: function (F, E) {
        var D = actuate.Class.getFacadeInstance(this);
        var A = this._getEventHandlers(F);
        for (var B = 0; B < A.length; B++) {
            var C = A[B];
            if (actuate.viewer.EventConstants && F == actuate.viewer.EventConstants.ON_CONTENT_CHANGED) {
                C(D, E)
            } else {
                window.setTimeout(this._makeEventHandlerClosure(C, D, E))
            }
        }
        A = this._getReportEventHandlers(F);
        for (var B = 0; B < A.length; B++) {
            var C = A[B];
            if (actuate.viewer.EventConstants && F == actuate.viewer.EventConstants.ON_CONTENT_CHANGED) {
                C(D, E)
            } else {
                window.setTimeout(this._makeEventHandlerClosure(C, D, E))
            }
        }
    }, _isValidEvent: function (A) {
        if (!A || typeof (A) != "string") {
            return false
        }
        var C = this._validEvents;
        for (var B = 0; B < C.length; B++) {
            if (A == C[B]) {
                return true
            }
        }
        return false
    }, clearEventHandlers: function () {
        this._eventHandlers = null;
        this._eventHandlers = {}
    }, _getEventHandlers: function (B) {
        var A = this._eventHandlers[B];
        if (!A) {
            A = new Array();
            this._eventHandlers[B] = A
        }
        return A
    }, _getReportEventHandlers: function (B) {
        var A = this._reportEventHandlers[B];
        if (!A) {
            A = new Array();
            this._reportEventHandlers[B] = A
        }
        return A
    }
});
actuate.util.Package.define("actuate.common");
actuate.common.DialogConsumer = actuate.Class.create();
actuate.common.DialogConsumer.prototype = actuate.Class.extend(new actuate.common.Observable, {
    _widgetStack: [],
    initialize: function () {
    },
    needAdjustPosition: function () {
        return false
    },
    getOffset: function () {
    },
    getWidth: function () {
    },
    getHeight: function () {
    },
    pushActiveStack: function (A) {
        if (A) {
            this._widgetStack.push(A)
        }
    },
    popActiveStack: function (B) {
        if (this._widgetStack.length > 0) {
            var C = this._widgetStack.pop();
            if (B == C) {
                var A = this.peekActiveStack();
                if (A && A._window && A._window.focus) {
                    A._window.focus()
                }
            } else {
                this._widgetStack.push(C)
            }
        }
    },
    peekActiveStack: function () {
        var A = null;
        if (this._widgetStack != null && this._widgetStack.length > 0) {
            A = this._widgetStack[this._widgetStack.length - 1]
        }
        return A
    },
    prepareDnd: function () {
    },
    startDnd: function (A, B, C) {
    },
    finishDnd: function () {
    },
    getDndManager: function () {
    }
});
actuate.util.Package.define("actuate.common");
actuate.common.EventDispatcher = actuate.Class.create();
actuate.common.EventDispatcher.prototype = {
    _service: null, focusId: null, focusElementType: null, _event_map: null, initialize: function (A) {
        this._service = A;
        this._event_map = {}
    }, deRegisterAllEventHandlers: function () {
        for (var A in this._event_map) {
            if (this._event_map[A]) {
                for (var B in this._event_map[A]) {
                    delete this._event_map[A][B]
                }
                delete this._event_map[A]
            }
        }
        this._event_map = null;
        this._event_map = {}
    }, registerEventHandler: function (A, C, B) {
        if (!this._event_map[A]) {
            this._event_map[A] = {}
        }
        this._event_map[A][C] = B
    }, unregisterEventHandler: function (A, B) {
        if (this._event_map[A] && this._event_map[A][B]) {
            delete this._event_map[A][B]
        }
    }, unregisterEventHandlerById: function (B) {
        for (var A in this._event_map) {
            if (this._event_map[A][B]) {
                delete this._event_map[A][B]
            }
        }
    }, fireEvent: function (B, C, D) {
        var A = new Object();
        A.data = C;
        A.callback = D;
        A.errorcallback = null;
        this.sendEvent(B, A, false)
    }, broadcastEvent: function (B, C, D) {
        var A = new Object();
        A.data = C;
        A.callback = D;
        A.errorcallback = null;
        this.sendEvent(B, A, true)
    }, _createRequest: function () {
    }, _onSuccessfulSendEvent: function () {
        var A = Array.prototype.slice.call(arguments);
        var B = A[0];
        var C = A[1];
        if (B && B.cleanup) {
            B.cleanup()
        }
        A.splice(0, 2);
        if (C) {
            C.apply(null, A)
        }
    }, sendEvent: function (B, O, D) {
        var I = false;
        var G = (O != null) ? O.data : null;
        var L = (O != null) ? O.callback : null;
        var J = (O != null) ? O.errorcallback : null;
        var K = (O != null) ? O.rootsoaptag : null;
        var H = null;
        if (!G || !G.cache) {
            var F = B.replace("__E_", "__OP_");
            var N = this.focusId ? this.focusId : this._service.id;
            H = new actuate.common.SoapRequest(this._service, K);
            for (var A in this._event_map[B]) {
                if (!D && N != A && this.focusElementType != A) {
                    if (B !== "__E_SAVE_FILE") {
                        continue
                    }
                }
                var M = this._event_map[B][A];
                if (M(N, H, G, F)) {
                    I = true
                }
            }
        }
        var E = this._createRequest();
        var C = actuate.Method.bind2(this._onSuccessfulSendEvent, this, E, L);
        E.processEvent(B, this.focusElementType, G, H, C, J)
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.GenericRequest = actuate.Class.create();
actuate.common.GenericRequest.prototype = {
    _service: null,
    _busy: false,
    _progressOn: false,
    _ajaxRequestFinished: null,
    _finishCallback: null,
    _errorCallback: null,
    _ajaxResponse: null,
    initialize: function (A) {
        this._service = A;
        this._busy = false
    },
    _connect: function (B) {
        if (!this._service.__allocateChannel()) {
            return
        }
        this._ajaxRequestFinished = false;
        var C = B.xml_document;
        if (C) {
            if (actuate.util.Utility.isSafari || actuate.util.Utility.isKonqueror) {
                C = (new XMLSerializer()).serializeToString(C)
            }
        }
        var A = this._service.__createSoapConnection();
        A.setPostData(C);
        A.setOnSuccess(actuate.Method.bind(this._ajaxRequestCallback, this));
        A.setOnFailure(actuate.Method.bind(this._ajaxRequestErrorCallback, this));
        A.send();
        B.reset()
    },
    _setBusy: function (A) {
        this._busy = A
    },
    _ajaxRequestCallback: function (A) {
        this._service.__releaseChannel();
        this._ajaxResponse = A;
        this._ajaxRequestFinished = true;
        this._processResponses()
    },
    _ajaxRequestErrorCallback: function (A) {
        this._service.__releaseChannel();
        this._ajaxResponse = A;
        this._ajaxRequestFinished = true;
        this._processResponses()
    },
    _processAjaxResponse: function () {
        var A = this._ajaxResponse.getResponseXml();
        if (A && A.documentElement) {
            return this._getSoapResponse().process(A.documentElement, this._finishCallback, this._errorCallback)
        }
    },
    _getQuerySpec: function (A) {
        return actuate.util.Utility.getQuerySpec(A, this._getMetadataQuerySpecs())
    },
    processEvent: function (C, B, E, D, F, A) {
    },
    _processResponses: function () {
    },
    _getSoapResponse: function () {
    },
    _getSelectedElement: function (A) {
    },
    _getMetadataQuerySpecs: function () {
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.GenericResponse = actuate.Class.create();
actuate.common.GenericResponse.prototype = {
    _service: null, initialize: function (A) {
        this._service = A
    }, process: function (C, E, A) {
        var D = C.getElementsByTagName("soapenv:Body")[0];
        if (!D) {
            D = C.getElementsByTagName("Body")[0]
        }
        if (!D) {
            return
        }
        for (var B = 0; B < D.childNodes.length; B++) {
            if (D.childNodes[B].nodeType != 1) {
                continue
            }
            if (D.childNodes[B].tagName == "soapenv:Fault") {
                return this._getSoapFaultHandler().process(D.childNodes[B], A)
            } else {
                return this._getResponseHandler().process(D.childNodes[B], E)
            }
            break
        }
    }, _getResponseHandler: function () {
    }, _getSoapFaultHandler: function () {
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.SoapResponseHandler = actuate.Class.create();
actuate.common.SoapResponseHandler.prototype = {
    _service: null, initialize: function (A) {
        this._service = A
    }, process: function (A, B) {
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.SoapRequest = actuate.Class.create();
actuate.common.SoapRequest.prototype = {
    _TAG_ENVELOPE: "Envelope",
    _TAG_BODY: "Body",
    _TAG_GETIVUPDATEDOBJECTS: "GetIVUpdatedObjects",
    _TAG_GETDAUPDATEDOBJECTS: "GetDAUpdatedObjects",
    _TAG_OPERATION: "Operation",
    _TAG_TARGET: "Target",
    _TAG_ID: "Id",
    _TAG_TYPE: "Type",
    _TAG_OPERATOR: "Operator",
    _TAG_IVSESSIONID: "IVSessionID",
    _TAG_OPRAND: "Oprand",
    _TAG_NAME: "Name",
    _TAG_OBJECT: "Object",
    _TAG_PARENT_OBJECT: "ParentObject",
    _TAG_VALUE: "Value",
    _service: null,
    _url: null,
    xml_document: null,
    _envelope: null,
    _operation_content: null,
    _operationCount: 0,
    _rootSoapTag: null,
    initialize: function (A, B) {
        this._service = A;
        if (B != undefined && B != null) {
            this._rootSoapTag = B
        } else {
            this._rootSoapTag = this._TAG_GETIVUPDATEDOBJECTS
        }
        this.reset()
    },
    reset: function () {
        this._operationCount = 0;
        this.xml_document = actuate.util.XmlDom.createXMLDom(actuate.util.Constants.soap.NAMESPACE_ENVELOPE, this._TAG_ENVELOPE);
        this._envelope = this.xml_document.documentElement;
        if (!(actuate.util.browser.isIE10Higher || actuate.util.browser.isIE10Flag) || this.xml_document instanceof ActiveXObject) {
            this._envelope.setAttribute("xmlns", actuate.util.Constants.soap.NAMESPACE_ENVELOPE)
        }
        var E = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_BODY, actuate.util.Constants.soap.NAMESPACE_ENVELOPE);
        this._envelope.appendChild(E);
        var B = actuate.util.XmlDom.createElement(this.xml_document, this._rootSoapTag);
        E.appendChild(B);
        this._operation_content = B;
        var F = actuate.util.XmlDom.createElement(this.xml_document, "ViewerId");
        this._operation_content.appendChild(F);
        var C = this.xml_document.createTextNode(this._service.getId());
        F.appendChild(C);
        if (this._service._helper && this._service._helper.transientDocumentName && this._service._reportDocument && !actuate.util.Utility.isTransient(this._service._reportDocument)) {
            var A = actuate.util.XmlDom.createElement(this.xml_document, "PersistentDocumentName");
            this._operation_content.appendChild(A);
            var D = this.xml_document.createTextNode(this._service._reportDocument);
            A.appendChild(D)
        }
    },
    isEmpty: function () {
        return !this._operationCount
    },
    getOperation: function (C) {
        var A = this.xml_document.getElementsByTagName(this._TAG_OPERATOR);
        for (var D = 0; D < A.length; D++) {
            var B = A[D];
            if (B.firstChild && B.firstChild.data == C) {
                return B.parentNode
            }
        }
        return null
    },
    getXmlDocument: function () {
        return this.xml_document
    },
    addOperation: function (N, B, F, S) {
        if (!F) {
            return
        }
        this._operationCount++;
        var J = null;
        var D = null;
        if (S) {
            J = S[0];
            D = S[1]
        }
        if (this._service && (this._service._dashboardDesign || this._service._reportDesign || (this._service.tabInfo && this._service.tabInfo.dashboardDesign))) {
            var C = this._service._dashboardDesign || this._service._reportDesign || this._service.tabInfo.dashboardDesign;
            var I = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_PARENT_OBJECT);
            var E = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_NAME);
            var O = this.xml_document.createTextNode(C);
            E.appendChild(O);
            I.appendChild(E);
            if (this._operation_content.getElementsByTagName(this._TAG_PARENT_OBJECT).length == 0) {
                this._operation_content.appendChild(I)
            }
        }
        var H = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_OPERATION);
        var R = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_TARGET);
        H.appendChild(R);
        var K = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_ID);
        R.appendChild(K);
        var Q = this.xml_document.createTextNode(N);
        K.appendChild(Q);
        var T = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_TYPE);
        R.appendChild(T);
        var M = this.xml_document.createTextNode(B);
        T.appendChild(M);
        var L = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_OPERATOR);
        var A = this.xml_document.createTextNode(F);
        L.appendChild(A);
        H.appendChild(L);
        if (D) {
            for (var P = 0; P < D.length; P++) {
                var G = this._createOperand(D[P]);
                if (G) {
                    H.appendChild(G)
                }
            }
        }
        if (J) {
            this._appendForeignChild(H, J)
        }
        this._operation_content.appendChild(H);
        this._insertIVSessionID(this._service.sessionId);
        return H
    },
    _appendForeignChild: function (B, A) {
        if (actuate.util.browser.isSafari || actuate.util.browser.isIPad) {
            actuate.util.XmlDom.duplicateNodes(B, A)
        } else {
            B.appendChild(A.documentElement || A)
        }
    },
    _insertIVSessionID: function (D) {
        if (D) {
            var B = this._operation_content.getElementsByTagName(this._TAG_IVSESSIONID);
            if (B.length < 1) {
                var C = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_IVSESSIONID);
                var A = this.xml_document.createTextNode(D);
                C.appendChild(A);
                this._operation_content.insertBefore(C, this._operation_content.firstChild)
            }
        }
    },
    addOperand: function (B, D) {
        var A = this._createOperand(D);
        if (A) {
            var C = B.getElementsByTagName("Oprand");
            if (C && C.length > 0) {
                B.insertBefore(A, C[0])
            } else {
                B.appendChild(A)
            }
        }
    },
    copyOperation: function (A, D) {
        this._operationCount++;
        var A;
        if (A.xml != undefined) {
            var B = A.xml.replace(/xmlns=\"http\:\/\/schemas\.actuate\.com\/actuate11\"/, "");
            var E = actuate.util.XmlDom.createXMLDom(null, this._TAG_ENVELOPE);
            E.loadXML(B);
            A = E.firstChild
        } else {
            A = A.cloneNode(true)
        }
        var C = this._createOperand(D);
        if (C) {
            A.insertBefore(C, A.lastChild)
        }
        this._operation_content.appendChild(A);
        this._insertIVSessionID(this._service.sessionId)
    },
    _createOperand: function (D) {
        if (D == null || D.name == null || D.value == null) {
            return null
        }
        var A = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_OPRAND);
        var B = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_NAME);
        var C = actuate.util.XmlDom.createElement(this.xml_document, this._TAG_VALUE);
        B.appendChild(this.xml_document.createTextNode(D.name));
        C.appendChild(this.xml_document.createTextNode(D.value + ""));
        A.appendChild(B);
        A.appendChild(C);
        return A
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.Service = actuate.Class.create();
actuate.common.Service.prototype = {
    eventDispatcher: null,
    id: null,
    _requestUrl: null,
    _proxyUrl: null,
    standalone: false,
    apiInstance: null,
    maxChannel: 0,
    channelCount: 0,
    cacheManager: null,
    documentModel: null,
    hasTimedOut: null,
    initialize: function (B, A) {
        if (B == null) {
            return
        }
        this.id = B;
        if (A) {
            this.apiInstance = A;
            this.eventDispatcher = A._eventDispatcher
        }
        this.cacheManager = new actuate.common.CacheManager(this);
        this.documentModel = new actuate.model.DocumentModel()
    },
    cleanup: function () {
        this.cacheManager = null;
        if (this.documentModel) {
            this.documentModel.clear();
            this.documentModel = null
        }
    },
    __allocateChannel: function () {
        if (!this.assertNotTimedOut()) {
            return false
        }
        if (this.channelCount < this.maxChannel) {
            this.channelCount++;
            return true
        }
        return false
    },
    __releaseChannel: function () {
        this.channelCount--
    },
    __isChannelAvailable: function () {
        return this.channelCount < this.maxChannel
    },
    __createSoapConnection: function () {
        if (!this._proxyUrl) {
            this._proxyUrl = actuate.util.Utility.getProxyUrl(this.getBaseUrl())
        }
        var A = new actuate.ajax.Connection("post", this._requestUrl);
        A.setProxyUrl(this._proxyUrl);
        A.setRequestHeader("Content-type", "text/xml; charset=utf-8");
        A.setRequestHeader("SOAPAction", '""');
        A.setRequestHeader("request-type", "SOAP");
        A.setRequestHeader("Cache-Control", "no-cache");
        if (actuate.util.browser && actuate.util.browser.useMobile()) {
            if (actuate.util.browser.isNativeApp()) {
                A.setRequestHeader("__userenv", "TABLETAPP")
            } else {
                A.setRequestHeader("__userenv", "TABLET")
            }
        }
        if (this.standalone) {
            A.setRequestHeader("standalone", this.standalone + "")
        }
        return A
    },
    getRequestUrl: function () {
        return this._requestUrl
    },
    setRequestUrl: function (A) {
        this._requestUrl = A
    },
    getBaseUrl: function () {
        if (!this._baseUrl) {
            this._baseUrl = this.apiInstance.getIportalUrl()
        }
        return this._baseUrl
    },
    setBaseUrl: function (A) {
        this._baseUrl = A;
        this._proxyUrl = null
    },
    getId: function () {
        return this.id
    },
    getOperatorByEvent: function (A) {
    },
    triggerSessionTimeout: function () {
        this.hasTimedOut = "session"
    },
    assertNotTimedOut: function () {
        if (this.hasTimedOut) {
            this.apiInstance.sessionTimeout();
            return false
        }
        return true
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.Gadget = actuate.Class.extendClass(actuate.common.DialogConsumer, {
    _width: null,
    _height: null,
    initialize: function () {
        actuate.common.Gadget.superclass.initialize.call(this)
    },
    setSize: function (B, A) {
        this._width = B;
        this._height = A
    },
    notifyEvent: function (A, B) {
    }
});
actuate.util.Package.define("actuate.common");
actuate.common.ReportRequest = actuate.Class.extendClass(actuate.common.IportalRequest, {
    _reportDocument: null,
    _reportDesign: null,
    initialize: function (A, B) {
        actuate.common.ReportRequest.superclass.initialize.call(this, A, B);
        if (A && A.getReportDocument) {
            this._reportDocument = A._reportDocument;
            this._reportDesign = A._reportDesign
        }
    },
    _getRequestAttributes: function () {
        var A = actuate.common.ReportRequest.superclass._getRequestAttributes.call(this);
        if (this._reportDocument) {
            A.put("__report", this._reportDocument)
        }
        if (this._reportDesign) {
            A.put("__design", this._reportDesign)
        }
        return A
    },
    setReportDocument: function (A) {
        this._reportDocument = A
    },
    setReportDesign: function (A) {
        this._reportDesign = A
    },
    getReportDocument: function () {
        return this._reportDocument
    },
    getReportDesign: function () {
        return this._reportDesign
    },
    validate: function () {
        actuate.common.ReportRequest.superclass.validate.call(this)
    }
});
actuate.util.Package.define("actuate.common");
actuate.common.ReportContext = actuate.Class.create();
actuate.common.ReportContext._viewersCount = 0;
actuate.common.ReportContext.prototype = {
    _REPORT_TYPE_DESIGN: "rptdesign",
    _REPORT_TYPE_BIZDESIGN: "bizdesign",
    _REPORT_TYPE_DOCUMENT: "rptdocument",
    _REPORT_TYPE_BIZDOCUMENT: "bizdocument",
    _REPORT_TYPE_CUBEVIEW: "cubeview",
    _REPORT_TYPE_DASHBOARD: "dashboard",
    _REPORT_TYPE_DASHBOARDDOCUMENT: "dashboarddocument",
    _REPORT_TYPE_UNKNOWN: "unknown",
    _id: null,
    _initialized: false,
    _iportalUrl: null,
    _requestOptions: null,
    _isTransientDocument: false,
    _exceptionHandlerClosure: null,
    sessionId: null,
    _reportDesign: null,
    _reportDocument: null,
    _transientDocName: null,
    _connectionHandle: null,
    _sessionId: null,
    getId: function () {
        return this._id
    },
    _getReportType: function (B) {
        if (!B) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument reportFileName")
        }
        var A = B.lastIndexOf(";");
        if (A > 0) {
            B = B.substr(0, A)
        }
        var D = B.lastIndexOf(".");
        var C = B.substr(D + 1).toLowerCase();
        if (C == "rptdesign" || C == "rpttemplate") {
            return this._REPORT_TYPE_DESIGN
        } else {
            if (C == "bizdesign") {
                return this._REPORT_TYPE_BIZDESIGN
            } else {
                if (C == "rptdocument") {
                    return this._REPORT_TYPE_DOCUMENT
                } else {
                    if (C == "bizdocument") {
                        return this._REPORT_TYPE_BIZDOCUMENT
                    } else {
                        if (C == "cubeview") {
                            return this._REPORT_TYPE_CUBEVIEW
                        } else {
                            if (C == "dashboard") {
                                return this._REPORT_TYPE_DASHBOARD
                            } else {
                                if (C == "dashboarddocument") {
                                    return this._REPORT_TYPE_DASHBOARDDOCUMENT
                                } else {
                                    return this._REPORT_TYPE_UNKNOWN
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    initialize: function (B, A) {
        if (B) {
            this._id = B
        } else {
            actuate.common.ReportContext._viewersCount++;
            this._id = "js" + actuate.common.AbstractService._viewersCount
        }
        if (actuate && actuate.getDefaultIportalUrl) {
            this.setService(actuate.getDefaultIportalUrl(), actuate.getDefaultRequestOptions())
        } else {
            this.setService(null)
        }
        this._exceptionHandlerClosure = actuate.Method.bind(this._exceptionHandler, this);
        if (A) {
            this._sessionId = A
        }
    },
    _exceptionHandler: function (A) {
    },
    setService: function (B, A) {
        if (B && B.charAt(B.length - 1) != "/") {
            B += "/"
        }
        this._iportalUrl = actuate.util.Utility.makeAbsoluteUrl(B);
        if (A) {
            this._requestOptions = new actuate.RequestOptions(A)
        } else {
            this._requestOptions = null
        }
    },
    setReportName: function (B) {
        var A = this._getReportType(B);
        if (A == this._REPORT_TYPE_DESIGN || A == this._REPORT_TYPE_BIZDESIGN || A == this._REPORT_TYPE_DASHBOARD) {
            this.setReportDesign(B)
        } else {
            if (A == this._REPORT_TYPE_DOCUMENT || A == this._REPORT_TYPE_BIZDOCUMENT || A == this._REPORT_TYPE_CUBEVIEW || A == this._REPORT_TYPE_DASHBOARDDOCUMENT) {
                this.setReportDocument(B)
            } else {
                throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'ReportContext: unknown report type for report "' + B + '"')
            }
        }
    },
    setReportDesign: function (B) {
        var A = this._getReportType(B);
        if (A != this._REPORT_TYPE_DESIGN && A != this._REPORT_TYPE_BIZDESIGN && A != this._REPORT_TYPE_DASHBOARD) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'ReportContext: unknown report type for report design "' + B + '"')
        } else {
            if (this._reportDesign != B) {
                this._resetConnectionHandle()
            }
            this._reportDesign = B;
            this._reportDocument = null
        }
    },
    setReportDocument: function (C, D) {
        var A = this._getReportType(C);
        if (A != this._REPORT_TYPE_DOCUMENT && A != this._REPORT_TYPE_BIZDOCUMENT && A != this._REPORT_TYPE_CUBEVIEW && A != this._REPORT_TYPE_DASHBOARDDOCUMENT) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'ReportContext: unknown report type for report document "' + C + '"')
        } else {
            if (!D) {
                if (this._reportDocument != C) {
                    this._needsSoftRestart = true;
                    this._resetConnectionHandle()
                }
                this._reportDesign = null;
                this._reportDocument = C;
                this._isTransientDocument = false
            } else {
                this._isTransientDocument = true;
                this._reportDocument = C;
                if (this._requestOptions) {
                    this._requestOptions.__getCustomParameters()["connectionHandle"] = D
                } else {
                    this._requestOptions = new actuate.RequestOptions();
                    var B = {connectionHandle: D};
                    this._requestOptions.setCustomParameters(B)
                }
            }
        }
    },
    getConnectionHandle: function () {
        if (this._requestOptions) {
            return this._requestOptions.__getCustomParameters()["connectionHandle"]
        }
    },
    getReportName: function () {
        return this._reportDesign || this._reportDocument || null
    },
    getReportDesign: function () {
        return this._reportDesign
    },
    getReportDocument: function () {
        return this._reportDocument
    },
    getIportalUrl: function () {
        return this._iportalUrl
    },
    getRequestOptions: function () {
        if (this._requestOptions) {
            return new actuate.RequestOptions(this._requestOptions)
        } else {
            return null
        }
    },
    createSoapUrl: function (A) {
        if (!this._reportRequest) {
            if (!this._sessionId) {
                this._sessionId = actuate.util.SecurityManager.getSessionId(this._iportalUrl, this._requestOptions)
            }
            this._reportRequest = new actuate.common.ReportRequest(null, this._sessionId)
        }
        this._reportRequest.setReportDocument(this._transientDocName || this._reportDocument);
        this._reportRequest.setReportDesign(this._reportDesign);
        this._reportRequest.setService(this._iportalUrl, this._requestOptions);
        return this._reportRequest.createRequestURL(A)
    },
    _validate: function () {
        if (this._iportalUrl) {
            return true
        } else {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, "Missing argument service URL")
        }
    },
    _resetConnectionHandle: function () {
        if (this._requestOptions) {
            if (this._requestOptions.__getCustomParameters()["connectionHandle"]) {
                this._requestOptions.__getCustomParameters()["connectionHandle"] = null
            }
        }
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.ClassLoader = actuate.Class.create();
actuate.Class.extend(actuate.common.ClassLoader, {
    _instance: null, getInstance: function () {
        var A = actuate.common.ClassLoader;
        if (!A._instance) {
            A._instance = new actuate.common.ClassLoader()
        }
        return A._instance
    }
});
actuate.common.ClassLoader.prototype = {
    forName: function (A) {
        var B = actuate.util.Package.getNamespaceObjectReference2(A);
        if (!B) {
            return null
        }
        return this._getInstance(A, actuate.util.Package.getInstanceName(A))
    }, _getInstance: function (D, G) {
        var H = D.split(".");
        var F = G.split(".");
        var E = null;
        if (F.length > 0) {
            E = F[F.length - 1]
        }
        if ((H.length > 0) && (window[H[0]] || global[H[0]]) && E) {
            var I = window[H[0]] || global[H[0]];
            try {
                for (var B = 1; B < H.length - 1; B++) {
                    I = I[H[B]]
                }
                if (I[E]) {
                    return I[E]
                } else {
                    var A = I[H[H.length - 1]];
                    if (typeof A === "function") {
                        I[E] = new A()
                    }
                    return I[E]
                }
            } catch (C) {
                console.log("Constructor not found: " + D)
            }
        }
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.TableSaw = actuate.Class.create();
actuate.common.TableSaw.prototype = {
    _curIndx: -1,
    _totalCol: 0,
    _cols: null,
    _originalHiddenColumnCount: 0,
    _frozenIndx: -1,
    _freezeColor: "gray",
    _freezePaneDivider: "2px Solid #999999",
    _BORDER_RIGHT: "borderRight",
    _tablesawId: null,
    _config: null,
    initialize: function (C, B) {
        var A = actuate.util.Utility.randomFloat();
        this._tablesawId = (A).toString(16).substr(2);
        this._tableEle = C;
        this._config = B;
        this._initTableColumns(C)
    },
    setConfig: function (A) {
        this._config = A
    },
    onUnload: function () {
        this._curIndx = -1;
        this._totalCol = 0;
        this._cols = null;
        this._originalHiddenColumnCount = 0;
        this._frozenIndx = -1;
        this._tableEle = null;
        this._tablesawId = null
    },
    hideNColumns: function (C) {
        if (!this._isValidColumnCount(C)) {
            return
        }
        var B = this.getHiddenColumnCount();
        var D = (C != B);
        var A = true;
        while (D) {
            if (C < B) {
                A = this.previous()
            } else {
                A = this.next()
            }
            if (C > this._totalCol || C < 0) {
                return
            }
            B = this.getHiddenColumnCount();
            D = (C != B && A)
        }
    },
    getTotalColumnCount: function () {
        return this._totalCol
    },
    getHiddenColumnCount: function () {
        if (this._curIndx <= 0) {
            return 0
        }
        var C = 0;
        if (this.areThereHiddenColumns()) {
            var A = this._frozenIndx + 1;
            for (var B = A; B < this._curIndx; B++) {
                if (!this._isColumnOriginallyHidden(B)) {
                    C += 1
                }
            }
            return C
        }
        return 0
    },
    _getNextVisibleColumn: function (A) {
        for (var B = A; B < this._totalCol; B++) {
            if (!this._isColumnOriginallyHidden(B)) {
                return B
            }
        }
        return B
    },
    next: function () {
        var A = this._curIndx;
        if (A <= this._frozenIndx) {
            A = this._frozenIndx + 1
        }
        if (this.isLastColumn(A)) {
            return false
        }
        this._showHideColumn(A, false);
        this._curIndx = this._getNextVisibleColumn(A + 1);
        return true
    },
    _getPreviousVisibleColumn: function (A) {
        for (var B = A; B > 0; B--) {
            if (!this._isColumnOriginallyHidden(B)) {
                return B
            }
        }
        return B
    },
    previous: function () {
        var A = this._getPreviousVisibleColumn(this._curIndx - 1);
        if (A < this._frozenIndx) {
            return false
        }
        this._showHideColumn(A, true);
        this._curIndx = A;
        return true
    },
    showAllHiddenColumns: function () {
        if (!this._config) {
            return
        }
        var A = this._frozenIndx + (this._curIndx - 1);
        while (A > 0) {
            A = this._getPreviousVisibleColumn(A);
            this._showHideColumn(A, true);
            A--
        }
        this._curIndx = -1
    },
    _isValidColumnCount: function (A) {
        if (A == undefined || A == null) {
            return false
        }
        return (typeof A === "number") && (A % 1 === 0)
    },
    getFrozenColumnCount: function () {
        var A = 0;
        for (var B = 0; B <= this._frozenIndx; B++) {
            if (!this._isColumnOriginallyHidden(B)) {
                A += 1
            }
        }
        return A
    },
    freezeNColumn: function (C) {
        if (!this._isValidColumnCount(C)) {
            return
        }
        if (!this.areThereFrozenColumns() && C == 0) {
            return
        }
        var B = this.getFrozenColumnCount();
        if (C == B) {
            return
        }
        this.showAllHiddenColumns();
        var A = true;
        while (A && B != C) {
            if (C < B) {
                A = this.unFreeze()
            } else {
                A = this.freeze()
            }
            B = this.getFrozenColumnCount()
        }
        if (B > 0) {
            this._updateFrozenUIGesture(this._frozenIndx, true)
        }
    },
    freeze: function () {
        var A = false;
        if (!this.isLastColumn(this._frozenIndx)) {
            if (this._frozenIndx == -1) {
                this._needsConvertion = true
            }
            this._frozenIndx++;
            if (this._frozenIndx >= this._curIndx) {
                this._curIndx = this._frozenIndx + 1
            }
            this._showHideColumn(this._frozenIndx, true);
            A = true
        }
        this._changeTableView();
        return A
    },
    unFreeze: function () {
        var A = false;
        if (this._frozenIndx >= 0) {
            this._updateFrozenUIGesture(this._frozenIndx, false);
            if (this._frozenIndx < this._curIndx) {
                var C = this._frozenIndx + 1;
                for (var B = C; B < this._curIndx; B++) {
                    this._showHideColumn(B, true)
                }
                this._curIndx = this._frozenIndx
            }
            this._frozenIndx--;
            if (this._frozenIndx == -1) {
                this._needsConvertion = true
            }
            A = true
        }
        this._changeTableView();
        return A
    },
    unFreezeAll: function () {
        var B = this._frozenIndx;
        for (var A = 0; A <= B; A++) {
            this.unFreeze()
        }
    },
    isLastColumn: function (A) {
        if (A >= (this._totalCol - 1)) {
            return true
        }
        return false
    },
    getCurrentIndex: function () {
        return this._curIndx
    },
    areThereHiddenColumns: function () {
        if ((this._curIndx - 1) > this._frozenIndx) {
            return true
        }
        return false
    },
    areThereFrozenColumns: function () {
        if (this._frozenIndx >= 0) {
            var A = this.getFrozenColumnCount();
            if (A > 0) {
                return true
            }
        }
        return false
    },
    _changeTableView: function () {
        if (!this._needsConvertion) {
            return
        }
        var A = this._tableEle.className;
        A = A.replace(" tablesaw_fixwidth", "");
        A = A.replace(" tablesaw_defaultwidth", "");
        if (this._frozenIndx < 0) {
            this._tableEle.className = A + " tablesaw_defaultwidth"
        } else {
            this._tableEle.className = A + " tablesaw_fixwidth"
        }
    },
    getTableInstance: function () {
        return this._tableEle
    },
    _updateFrozenUIGesture: function (E, G) {
        for (var F = 0; F < E; F++) {
            var D = this.getTableColumn(F);
            D.style.borderRight = ""
        }
        var C = (G) ? true : false;
        var A = this._getTableVisibleColumn(E, C);
        if (!A.col) {
            return
        }
        var D = A.col;
        this._frozenIndx = A.index;
        if (G) {
            D.style.borderRight = this._freezePaneDivider
        } else {
            var B = this._getTableColumnDefaultStyleAttr(E, this._BORDER_RIGHT);
            if (B == undefined) {
                B = ""
            }
            D.style.borderRight = B
        }
    },
    _getTableVisibleColumn: function (D, C) {
        var A = {col: null, index: null};
        if (D < 0) {
            return A
        }
        var B = null;
        if (C) {
            for (var E = D; E < this._totalCol; E++) {
                B = this.getTableColumn(E);
                if (this._isTableColumnShown(B)) {
                    A.col = B;
                    A.index = E;
                    return A
                }
            }
        } else {
            for (var E = D; E >= 0; E--) {
                B = this.getTableColumn(E);
                if (this._isTableColumnShown(B)) {
                    A.col = B;
                    A.index = E;
                    return A
                }
            }
        }
        return A
    },
    _isTableColumnShown: function (A) {
        if (!A) {
            return false
        }
        var B = A.style.display;
        if (B) {
            if (B.indexOf("none") != -1) {
                return false
            }
        }
        return true
    },
    _okToAdjustColSpan: function (C) {
        if (!this._isRowHeader(C)) {
            return false
        }
        var B = C.cells[0];
        var A = C.cells[1];
        if (A && A.colSpan > 1) {
            return true
        } else {
            if (B && B.colSpan > 1) {
                return true
            }
        }
        return false
    },
    _isRowGroupHeaderType: function (B) {
        if (!B) {
            return false
        }
        var A = B.getAttribute("row-type");
        if (A === "group-header") {
            return true
        }
        return false
    },
    _isRowHeaderType: function (B) {
        if (!B) {
            return false
        }
        var A = B.getAttribute("row-type");
        if (A === "header") {
            return true
        }
        return false
    },
    _isRowHeader: function (A) {
        if (this._isRowHeaderType(A) || this._isRowGroupHeaderType(A)) {
            return true
        }
        return false
    },
    _okToHideRow: function (B, C) {
        var A = B[C];
        if (this._okToAdjustColSpan(A)) {
            return false
        }
        return true
    },
    _getGoodVisibleColumnCandidate: function (D, C, A) {
        for (var B = C; B < D.length; B++) {
            var F = D[B];
            if (this._isRowHeader(F)) {
                continue
            }
            var E = F.cells[A];
            return E
        }
        return D[C].cells[A]
    },
    _updateColSpan: function (M, K, H) {
        if (this._okToAdjustColSpan(M)) {
            var J = M.cells[0];
            var G = M.cells[1];
            var A = J.tagName;
            var L = 0;
            var C = this._totalCol;
            var I = (G) ? G.colSpan : J.colSpan;
            if (this._totalCol == I && !G) {
                G = J;
                var E = M.insertCell(0);
                E.outerHTML = "<" + A + " data-name='tablesaw' style='overflow:hidden;display:none'></" + A + ">";
                J = E;
                L = 1;
                C = C - 1
            } else {
                var B = this._totalCol - this._originalHiddenColumnCount;
                if (H) {
                    L = J.colSpan - 1;
                    C = G.colSpan + 1;
                    if (K <= 0) {
                        L = this._originalHiddenColumnCount;
                        C = B
                    }
                } else {
                    C = G.colSpan - 1;
                    L = this._totalCol - C
                }
            }
            G.colSpan = C;
            if (L == 0) {
                var D = J.getAttribute("data-name");
                if (D == "tablesaw") {
                    M.deleteCell(J);
                    J = null
                }
            }
            try {
                if (J) {
                    J.colSpan = L
                }
            } catch (F) {
            }
            return true
        }
        return false
    },
    _showHideColumn: function (H, G) {
        var C = !this._isColumnOriginallyHidden(H);
        if (C) {
            this._showHideColumnGroupColumn(H, G)
        }
        var J = this._getTableRows();
        for (var E = 0; E < J.length; E++) {
            var I = J[E];
            if (I) {
                var D = this._getGoodVisibleColumnCandidate(J, E, H);
                var F = this._isTableColumnShown(D);
                if (F == G) {
                    return
                }
                var A = this._okToHideRow(J, E);
                this._updateColSpan(I, H, G);
                var B = I.cells[H];
                if (B == undefined) {
                    continue
                }
                if (C && A) {
                    B.style.display = (G === true) ? "" : "none"
                }
            }
        }
    },
    _showHideColumnGroupColumn: function (B, A) {
        var C = this._tableEle.getElementsByTagName("col");
        if (C[B]) {
            C[B].style.display = (A === true) ? "" : "none"
        }
    },
    _getTableRows: function () {
        return this._tableEle.rows
    },
    getTableColumn: function (A) {
        var B = this._cols[A];
        if (B) {
            return B.col
        }
        return null
    },
    _getTableColumnDefaultStyleAttr: function (C, A) {
        var B = this._cols[C];
        if (B) {
            return B.attr.style[A]
        }
        return ""
    },
    _getTableColumnDefaultDisplay: function (B) {
        var A = this._cols[B];
        if (A) {
            return A.attr.style.display
        }
        return ""
    },
    _isColumnOriginallyHidden: function (A) {
        var B = this._getTableColumnDefaultDisplay(A);
        if (B) {
            if (B.indexOf("none") != -1) {
                return true
            }
        }
        return false
    },
    getInvisibleColumnCountAtRightMost: function (F) {
        var E = this._getTableRows();
        var G = E[0];
        for (var B = 0; B < E.length; B++) {
            if (!this._isRowHeader(E[B])) {
                G = E[B];
                break
            }
        }
        var A = G.cells;
        for (var C = 0; C < A.length; C++) {
            var D = A[C];
            F -= D.clientWidth;
            if (F < 0) {
                return A.length - C
            }
        }
        return 0
    },
    _initTableColumns: function (B) {
        var C = B.childNodes;
        if (C) {
            for (var A = 0; A < C.length; A++) {
                if (C[A] == undefined || C[A].tagName == undefined) {
                    continue
                }
                if (C[A].tagName.toUpperCase() == "COLGROUP") {
                    C = C[A].childNodes;
                    break
                }
            }
            this._totalCol = 0;
            this._cols = [];
            this._originalHiddenColumnCount = 0;
            this._curIndx = -1;
            for (var A = 0; A < C.length; A++) {
                if (C[A] == undefined || C[A].tagName == undefined) {
                    continue
                }
                var D = C[A].tagName;
                if (D) {
                    if (D.toUpperCase() == "COL") {
                        this._cols[this._totalCol] = {
                            col: C[A],
                            attr: {
                                style: {
                                    backgroundColor: C[A].style.backgroundColor,
                                    display: C[A].style.display,
                                    borderRight: C[A].style.borderRight
                                }
                            }
                        };
                        if (C[A].style.display.indexOf("none") != -1) {
                            this._originalHiddenColumnCount++
                        }
                        this._totalCol++
                    }
                }
            }
        }
    }
};
actuate.util.Package.define("actuate.common");
actuate.common.TrackingDetails = actuate.Class.create();
actuate.common.TrackingDetails.prototype = {
    _pingUrl: null,
    _aCode: null,
    _productName: null,
    _productVersion: null,
    _enablePing: null,
    initialize: function () {
    },
    setPingUrl: function (A) {
        this._pingUrl = A
    },
    getPingUrl: function () {
        return this._pingUrl
    },
    setACode: function (A) {
        this._aCode = A
    },
    getACode: function () {
        return this._aCode
    },
    setProductName: function (A) {
        this._productName = A
    },
    getProductName: function () {
        return this._productName
    },
    setProductVersion: function (A) {
        this._productVersion = A
    },
    getProductVersion: function () {
        return this._productVersion
    },
    setEnablePing: function (A) {
        this._enablePing = A
    },
    getEnablePing: function () {
        return this._enablePing
    }
};
actuate.util.Package.define("actuate");
actuate.RequestOptions = actuate.Class.create();
actuate.RequestOptions.REPOSITORY_STANDALONE = "Workgroup";
actuate.RequestOptions.REPOSITORY_ENCYCLOPEDIA = "Enterprise";
actuate.RequestOptions.DASHBOARD_PARAMETERS_PREFIX = "_dashboardParams_";
actuate.RequestOptions.prototype = {
    _volumeProfile: null,
    _iServerUrl: null,
    _volume: null,
    _repositoryType: null,
    _customParameters: null,
    _locale: null,
    _restAuthToken: null,
    _credentials: null,
    _externalToken: null,
    initialize: function (A) {
        if (A && A.__getCustomParameters) {
            if (actuate.Class.getFacadedInstance) {
                A = actuate.Class.getFacadedInstance(A)
            }
            this._iServerUrl = A._iServerUrl;
            this._volume = A._volume;
            this._repositoryType = A._repositoryType;
            this._locale = A._locale;
            this._volumeProfile = A._volumeProfile;
            this._restAuthToken = A._restAuthToken;
            this._externalToken = A._externalToken;
            this._credentials = A._credentials;
            this._customParameters = new Object();
            for (var B in A._customParameters) {
                this._customParameters[B] = A._customParameters[B]
            }
        } else {
            this._iServerUrl = null;
            this._volume = null;
            this._repositoryType = null;
            this._customParameters = new Object();
            this._locale = null;
            this._volumeProfile = null;
            this._restAuthToken = null;
            this._externalToken = null
        }
    },
    setIServerUrl: function (A) {
        this._assertString(A, "iServerUrl");
        this._iServerUrl = A
    },
    getIServerUrl: function () {
        return this._iServerUrl
    },
    setVolume: function (A) {
        this._assertString(A, "volume");
        this._volume = A
    },
    getVolume: function () {
        return this._volume
    },
    setRepositoryType: function (A) {
        this._assertString(A, "repositoryType");
        if (typeof (A) == "undefined") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "repositoryType" must be either null or a string.')
        }
        if (A && A.toLowerCase() != actuate.RequestOptions.REPOSITORY_ENCYCLOPEDIA.toLowerCase() && A.toLowerCase() != actuate.RequestOptions.REPOSITORY_STANDALONE.toLowerCase()) {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Invalid value for argument "repositoryType".')
        }
        this._repositoryType = A
    },
    getRepositoryType: function () {
        return this._repositoryType
    },
    setCustomParameters: function (A) {
        this._customParameters = A
    },
    setDashboardParameters: function (C) {
        var B = actuate.RequestOptions.DASHBOARD_PARAMETERS_PREFIX;
        if (C && typeof C === "object") {
            for (var A in C) {
                this._customParameters[B + A] = C[A]
            }
        }
    },
    getLocale: function () {
        return this._locale
    },
    setLocale: function (A) {
        this._assertString(A, "locale");
        this._locale = A
    },
    setRESTAuthToken: function (A) {
        this._restAuthToken = A
    },
    setExternalToken: function (A) {
        this._externalToken = A;
        if (A) {
            actuate.externalToken = A
        }
    },
    getRESTAuthToken: function () {
        return this._restAuthToken
    },
    getExternalToken: function () {
        return this._externalToken
    },
    setCredentials: function (A) {
        this._credentials = A
    },
    getCredentials: function () {
        return this._credentials
    },
    getVolumeProfile: function () {
        return this._volumeProfile
    },
    setVolumeProfile: function (A) {
        this._volumeProfile = A
    },
    __getCustomParameters: function () {
        return this._customParameters
    },
    __getJsessionId: function () {
        var A = null;
        if (actuate.jsessionId && actuate.jsessionId != "null") {
            A = actuate.jsessionId
        }
        return A
    },
    __toMap: function () {
        var B = new Object();
        for (var A in this._customParameters) {
            if (A != "jsessionid") {
                B[A] = this._customParameters[A]
            }
        }
        if (this._volumeProfile != null && this._volumeProfile != "") {
            B.__vp = this._volumeProfile;
            if (this._volume != null) {
                B.volume = this._volume
            }
        } else {
            if (this._iServerUrl != null) {
                B.serverurl = this._iServerUrl
            }
            if (this._volume != null) {
                B.volume = this._volume
            }
            if (this._repositoryType != null) {
                B.repositoryType = this._repositoryType
            }
        }
        if (this._locale != null) {
            B.locale = this._locale
        }
        return B
    },
    _assertString: function (A, B) {
        if (A && typeof (A) != "string") {
            throw new actuate.Exception(actuate.Exception.ERR_USAGE, 'Argument "' + B + '" must be a string.')
        }
    },
    toString: function () {
        var A = "RequestOptions: ";
        if (this.getIServerUrl()) {
            A += "\nIServerUrl: " + this.getIServerUrl()
        }
        if (this.getVolume()) {
            A += "\nVolume: " + this.getVolume()
        }
        if (this.getRepositoryType()) {
            A += "\nRepository type: " + this.getRepositoryType()
        }
        return A
    }
};
actuate.util.Package.define("actuate");
actuate.Exception = actuate.Class.create();
actuate.Class.extend(actuate.Exception, {ERR_SERVER: "err_server", ERR_CLIENT: "err_client", ERR_USAGE: "err_usage"});
actuate.Exception.prototype = {
    _type: null, _code: null, _msg: null, _detail: null, initialize: function (A, D, C, B) {
        if (arguments.length == 1) {
            this.initJSException(A);
            return
        }
        this._type = A;
        this._msg = D;
        this._detail = C;
        this._code = B
    }, initJSException: function (B) {
        var C = "";
        if (B) {
            var A = "\n\t";
            if (B.fileName) {
                C += A + "fileName: " + B.fileName
            }
            if (B.lineNumber) {
                C += A + "lineNumber: " + B.lineNumber
            }
            if (B.message) {
                C += A + "message: " + B.message;
                this._msg = B.message
            }
            if (B.name) {
                C += A + "name: " + B.name
            }
        }
        this._type = actuate.Exception.ERR_CLIENT;
        this._detail = C
    }, getType: function () {
        return this._type
    }, getMessage: function () {
        return this._msg
    }, getDescription: function () {
        return this._detail
    }, getErrCode: function () {
        return this._code
    }, isExceptionType: function (A) {
        if (typeof (A) == "string") {
            return A == this._type
        }
        return this instanceof A
    }, _getName: function () {
        return "actuate.Exception"
    }, toString: function () {
        var A = this._getName() + ": ";
        if (this.getType()) {
            A += "\nType: " + this.getType()
        }
        A += "\nMessage: " + this.getMessage();
        if (this.getDescription()) {
            A += "\nDescription: " + this.getDescription()
        }
        if (this.getErrCode()) {
            A += "\nError code: " + this.getErrCode()
        }
        return A
    }
};
actuate.util.Package.define("actuate");
actuate.ConnectionException = actuate.Class.create();
actuate.ConnectionException.prototype = actuate.Class.extend(new actuate.Exception(), {
    _url: null,
    initialize: function (C, A, E, D, B) {
        actuate.Exception.prototype.initialize.call(this, A, E, D, B);
        this._url = C
    },
    getUrl: function () {
        return this._url
    },
    _getName: function () {
        return "actuate.ConnectionException"
    },
    toString: function () {
        var A = actuate.Exception.prototype.toString.call(this);
        if (this.getUrl()) {
            A += "\nURL: " + this.getUrl()
        }
        return A
    }
});
actuate.util.Package.define("actuate");
actuate.AuthenticationException = actuate.Class.create();
actuate.AuthenticationException.prototype = actuate.Class.extend(new actuate.Exception(), {
    _iportalUrl: null,
    _requestOptions: null,
    _userId: null,
    initialize: function (D, A, F, B, G, E, C) {
        actuate.Exception.prototype.initialize.call(this, B, G, E, C);
        this._iportalUrl = D;
        if (A) {
            this._requestOptions = new actuate.RequestOptions(A)
        } else {
            this._requestOptions = null
        }
        this._userId = F
    },
    getIportalUrl: function () {
        return this._iportalUrl
    },
    getRequestOptions: function () {
        return this._requestOptions
    },
    getUserId: function () {
        return this._userId
    },
    _getName: function () {
        return "actuate.AuthenticationException"
    },
    toString: function () {
        var A = actuate.Exception.prototype.toString.call(this);
        A += "\nIportal URL: " + this.getIportalUrl();
        A += "\nRequest options: " + this.getRequestOptions();
        A += "\nUser ID: " + this.getUserId();
        return A
    }
});
(function () {
    function A(G, F, I) {
        var C = A.resolve(G);
        if (null == C) {
            H();
            return
        }
        var E = A.modules[C];
        if (!E._resolving && !E.exports) {
            var D = {};
            D.exports = {};
            D.client = D.component = true;
            E._resolving = true;
            E.call(this, D.exports, A.relative(C), D);
            delete E._resolving;
            E.exports = D.exports
        }

        function H() {
            I = I || G;
            F = F || "root";
            var J = new Error('Failed to importjs "' + I + '" from "' + F + '"');
            J.path = I;
            J.parent = F;
            J.importjs = true;
            throw J
        }

        return E.exports
    }

    A.modules = {};
    A.aliases = {};
    A.exts = ["", ".js", ".json", "/index.js", "/index.json"];
    A.resolve = function (E) {
        if (E.charAt(0) === "/") {
            E = E.slice(1)
        }
        for (var D = 0; D < 5; D++) {
            var C = E + A.exts[D];
            if (A.modules.hasOwnProperty(C)) {
                return C
            }
            if (A.aliases.hasOwnProperty(C)) {
                return A.aliases[C]
            }
        }
    };
    A.normalize = function (F, E) {
        var C = [];
        if ("." != E.charAt(0)) {
            return E
        }
        F = F.split("/");
        E = E.split("/");
        for (var D = 0; D < E.length; ++D) {
            if (".." === E[D]) {
                F.pop()
            } else {
                if ("." != E[D] && "" != E[D]) {
                    C.push(E[D])
                }
            }
        }
        return F.concat(C).join("/")
    };
    A.register = function (D, C) {
        A.modules[D] = C
    };
    A.alias = function (E, D) {
        if (!A.modules.hasOwnProperty(E)) {
            C();
            return
        }
        A.aliases[D] = E;

        function C() {
            throw new Error('Failed to alias "' + E + '", it does not exist')
        }
    };
    A.relative = function (C) {
        var E = A.normalize(C, "..");

        function D(G) {
            var F = D.resolve(G);
            return A(F, C, G)
        }

        D.resolve = function (H) {
            var I = H.charAt(0);
            if ("/" === I) {
                return H.slice(1)
            }
            if ("." === I) {
                return A.normalize(E, H)
            }
            var F = C.split("/");
            var G = F.length;
            while (G--) {
                if (F[G] === "deps") {
                    break
                }
            }
            H = F.slice(0, G + 2).join("/") + "/deps/" + H;
            return H
        };
        D.exists = function (F) {
            return A.modules.hasOwnProperty(D.resolve(F))
        };
        return D
    };
    A.register("spa/src/main.js", function (C, E, D) {
        D.exports.Shell = E("./shell"), D.exports.WidgetBase = E("./WidgetBase"), D.exports.widget = E("./widget"), D.exports.data = E("./data"), D.exports.utl = E("./utl")
    });
    A.register("spa/src/shell.js", function (C, F, E) {
        var H = F("./data"), G = F("./utl");

        function I() {
            this.moduleMap = G.hash();
            this.widgetMap = G.hash();
            this.instanceMap = G.hash()
        }

        var D = I.prototype;
        D.initModule = function (J) {
            this.widgetMap = J.widgetMap
        };
        D.loadModules = function (N) {
            var M, J = [], L, K = this;
            for (M in this.widgetMap) {
                J.push(this.widgetMap[M].type)
            }
            require(J, function () {
                for (var O = 0; O < arguments.length; O++) {
                    K.moduleMap[J[O]] = {constructor: arguments[O]}
                }
                N()
            })
        };
        D.render = function () {
            var M, L, J, K = this;
            for (M in this.widgetMap) {
                L = this.widgetMap[M];
                H.requestData(L.data, function (N) {
                    J = new K.moduleMap[L.type].constructor(L, N);
                    J.render(M)
                })
            }
        };
        D.getModule = function (J) {
            return this.moduleMap[J]
        };
        D.registerInstance = function (K, J) {
            this.instanceMap[K] = J
        };
        D.getInstance = function (J) {
            return this.instanceMap[J]
        };
        E.exports = I
    });
    A.register("spa/src/data.js", function (H, M, D) {
        var G = M("./utl"), F = null, I = {
            requestData: function (Q, P, R) {
                if (G.isUndefined(Q) || L(Q)) {
                    P(Q);
                    return
                }
                if (G.isString(Q) && Q.substr(Q.length - 4) === "json") {
                    require(["d3"], function (S) {
                        S.json(Q, P)
                    })
                } else {
                    if (G.isObject(Q)) {
                        E(Q, P, R)
                    } else {
                        console.log("invalid data format" + Q)
                    }
                }
            }
        };

        function L(P) {
            if (P.columns && P.rows) {
                if (G.isArray(P.columns) && G.isArray(P.rows)) {
                    return true
                }
            }
            return false
        }

        function E(Q, P, R) {
            K(Q, function () {
                var S = Q.resultSet.indexOf("/"), V = Q.resultSet.lastIndexOf("#"), T = Q.resultSet.substring(V + 1),
                    U = Q.resultSet.substring(S, V - 1);
                O(R, U, T, P)
            })
        }

        function O(W, T, R, P) {
            var S, V, U, Q = arguments;
            if (T === "") {
                U = F.getViewer(W);
                if (!U) {
                    setTimeout(function () {
                        O.apply(this, Q)
                    }, 200);
                    return
                } else {
                    T = U.getReportDocument()
                }
            } else {
            }
            S = new F.data.Request(R), V = new F.DataService();
            V.downloadResultSet(T, S, function (X) {
                P(N(X))
            }, function (X) {
                console.log(X)
            })
        }

        function K(Q, P) {
            if (!F && G.isUndefined(window.actuate)) {
                throw "BIRT JSAPI not loaded."
            } else {
                F = window.actuate
            }
            if (!F.isInitialized()) {
                C(Q, P)
            } else {
                P(F)
            }
        }

        function C(Q, P) {
            F.load("viewer");
            F.initialize(Q.iportalurl, new F.RequestOptions(), Q.username, Q.password, P)
        }

        function N(S) {
            var P = {}, T = [], R = S.getColumnNames();
            while (S.next()) {
                var U = [];
                for (var Q = 0; Q < R.length; Q++) {
                    U.push(S.getValue(R[Q]))
                }
                T.push(U)
            }
            P.rows = T;
            P.columns = R;
            return P
        }

        var J = function (P) {
            console.log("ERROR: " + P)
        };
        D.exports = I
    });
    A.register("spa/src/widget.js", function (I, M, D) {
        var G = M("./utl"), K = M("./data"), H = M("./WidgetBase"), F = G.hash(), S = function () {
        }, O, E, J;
        if (typeof ($) === "undefined") {
            window.$ = actuate.common.web.jQuery;
            window.jQuery = actuate.common.web.jQuery
        }
        var L = {
            create: function (V, W, T) {
                var U = V.type;
                T = T || S;
                W = W || S;
                if (!U || U == "htmlctrl") {
                    C(W, S, V, T);
                    return
                }
                if (G.isUndefined(F[U])) {
                    require([U], function (X) {
                        F[U] = X;
                        C(W, X, V, T)
                    })
                } else {
                    C(W, F[U], V, T)
                }
            }, destory: function (T) {
                Q(T.opts.id);
                T.setViewer(null);
                T.setDelegate(null)
            }, setResourceURL: function (T) {
                O = T
            }, setResourceFolder: function (T) {
                E = T
            }, getResourceURL: function () {
                return O
            }, getResourceFolder: function () {
                return E
            }, setReportName: function (T) {
                J = T
            }, getReportName: function () {
                return J
            }
        };
        var C = function (W, U, V, T) {
            if (G.isUndefined(V.data) || G.isArray(V.data)) {
                N(W, U, V, V.data, T)
            } else {
                K.requestData(V.data, function (X) {
                    N(W, U, V, X, T)
                }, V.id)
            }
        };
        var N = function (Z, V, X, a, U) {
            var T = new H(X, a);
            try {
                var Y = window.actuate && actuate.getViewer && actuate.getViewer(X.id);
                if (Y) {
                    T.setViewer(Y);
                    Y.addCustomViz(T.getBookmark(), T)
                }
            } catch (W) {
                console.log(W)
            }
            try {
                if (X.cssText) {
                    R(X.id, X.cssText)
                }
                Z.apply(T);
                V.apply(T);
                T.render(X.id);
                U.apply(T)
            } catch (W) {
                console.log(W)
            }
        };
        var P = function (T) {
            return $("style[birt-widget='" + T + "']")
        };
        var Q = function (U) {
            var T = P(U);
            if (T && T.length > 0) {
                T.remove()
            }
        };
        var R = function (V, T) {
            var U = P(V);
            if (U && U.length > 0) {
                return
            }
            $("head").append("<style type='text/css' birt-widget= '" + V + "'>" + T + "</style>")
        };
        D.exports = L
    });
    A.register("spa/src/WidgetBase.js", function (D, F, E) {
        var G = function (H, I) {
            this.opts = H || null;
            this.setData(I || null);
            this.viewer = null;
            this.delegate = null;
            this.type = "CustomViz";
            this.bookmark = this.getBookmark()
        };
        var C = G.prototype;
        C.getType = function () {
            return this.type
        };
        C.render = function (H) {
        };
        C.redraw = function () {
        };
        C.setSize = function (I, H) {
        };
        C.setData = function (H) {
            this.data = H
        };
        C.getData = function () {
            return this.data
        };
        C.getDataCursor = function () {
            var H = new function (J) {
                var K = 0;
                var I = J.rows && J.rows.length || 0;
                this.hasNext = function () {
                    return K < I
                };
                this.next = function () {
                    var N = J.rows[K++];
                    var M = {};
                    for (var L in N) {
                        M[J.columns[L]] = N[L]
                    }
                    return M
                }
            }(this.data);
            return H
        };
        C.setPrintReady = function () {
            var H = document.getElementById(this.opts.id);
            if (H != null) {
                H.setAttribute("birt-print-ready", "true")
            }
        };
        C.getBirtOpts = function () {
            if (this.opts.birtOpts) {
                return this.opts.birtOpts
            }
            return {}
        };
        C.getBookmark = function () {
            var H = this.getBirtOpts();
            if (H && H.bookmark) {
                return H.bookmark
            }
            return this.opts.id
        };
        C.getId = function () {
            return this.opts.id
        };
        C.getOpts = function () {
            return this.opts.opts
        };
        C.getDelegate = function (I) {
            if (!I) {
                return this.delegate
            }
            if (this.delegate) {
                try {
                    I(this.delegate)
                } catch (H) {
                    console.log(H)
                }
                return this.delegate
            }
            this.callbacks = [];
            this.callbacks.push(I);
            return null
        };
        C.setDelegate = function (J) {
            this.delegate = J;
            if (this.callbacks) {
                for (var H = 0; H < this.callbacks.length; H++) {
                    try {
                        this.callbacks[H](this.delegate)
                    } catch (I) {
                        console.log(I)
                    }
                }
            }
        };
        C.getViewer = function () {
            return this.viewer
        };
        C.setViewer = function (H) {
            this.viewer = H
        };
        C.getVariable = function (H) {
            if (this.opts && this.opts.birtOpts && this.opts.birtOpts.variables) {
                return this.opts.birtOpts.variables[H]
            }
            return null
        };
        C.getBirtResourceURL = function (K) {
            var I = actuate.spa.widget.getResourceURL();
            if (!I && actuate) {
                I = actuate.getDefaultIportalUrl()
            }
            var J = actuate.spa.widget.getResourceFolder();
            if (J) {
                K += "?__resourceFolder=" + encodeURIComponent(J)
            }
            if (I) {
                if (I.substring(I.length - 1) == "/") {
                    I += "appresource"
                } else {
                    I += "/appresource"
                }
                if (K[0] == "/") {
                    return I + K
                }
                var H = this.getAppName();
                if (H) {
                    I += H
                } else {
                    I += "/"
                }
                return I + K
            }
            return null
        };
        C.getAppName = function () {
            var H = actuate.spa.widget.getReportName();
            if (!H && this.viewer) {
                H = this.viewer.getReportName() || this.viewer.getReportDesign() || this.viewer.getReportDocument()
            }
            if (H && H.indexOf("/Applications/") == 0) {
                var J = H.substring("/Applications/".length);
                if (J) {
                    var I = J.split("/");
                    if (I.length > 0) {
                        return "/Applications/" + I[0] + "/"
                    }
                }
            }
            return null
        };
        C.setPrintTimeOut = function (H) {
            var I = document.getElementById(this.opts.id);
            if (I != null) {
                I.setAttribute("birt-print-timeout", H)
            }
        };
        C.isPrinting = function () {
            var H = document.getElementById(this.opts.id);
            if (H != null) {
                return H.getAttribute("birt-print")
            }
            return false
        };
        E.exports = G
    });
    A.register("spa/src/utl.js", function (U, R, F) {
        var I = Array.prototype, S = Object.prototype, T = Function.prototype, N = I.slice, D = Array.isArray,
            O = S.toString;
        var G = function (V) {
            return V === void 0
        }, M = function (V) {
            return V === null
        }, C = (typeof (/./) !== "function" ? function (V) {
            return typeof V === "function"
        } : function (V) {
            return O.call(V) == "[object Function]"
        }), K = D || function (V) {
            return O.call(V) == "[object Array]"
        }, L = function (V) {
            return O.call(V) == "[object String]"
        }, J = function (V) {
            return V === Object(V)
        }, E = function () {
            return {}
        }, P = function () {
            var W = 0, X = null;
            if (arguments.length < 2) {
                return
            }
            X = arguments[0];
            for (W = 1; W < arguments.length; W++) {
                V(X, arguments[W])
            }

            function V(Z, b) {
                var Y = null, a = null;
                if (!J(b)) {
                    return
                }
                for (Y in b) {
                    a = b[Y];
                    if (J(a) && !K(a)) {
                        V(Z[Y], a)
                    } else {
                        Z[Y] = a
                    }
                }
            }
        }, H = function (W, X) {
            var V;
            for (V in X) {
                if (X.hasOwnProperty(V)) {
                    W.prototype[V] = X[V]
                }
            }
        };
        var Q = {
            isUndefined: G,
            isNull: M,
            isFunction: C,
            isArray: K,
            isString: L,
            isObject: J,
            hash: E,
            deepMerge: P,
            mixInto: H
        };
        F.exports = Q
    });
    A.alias("spa/src/main.js", "actuate.spa.js");
    var B = (window.actuate || (window.actuate = {spa: null}));
    if (!B.spa) {
        B.spa = A("actuate.spa")
    }
})();
var requirejs, require, define;
(function (global, setTimeout) {
    var req, s, head, baseElement, dataMain, src, interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = "2.3.7", commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g, jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//, op = Object.prototype, ostring = op.toString, hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== "undefined" && typeof navigator !== "undefined" && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== "undefined",
        readyRegExp = isBrowser && navigator.platform === "PLAYSTATION 3" ? /^complete$/ : /^(complete|loaded)$/,
        defContextName = "_", isOpera = typeof opera !== "undefined" && opera.toString() === "[object Opera]",
        contexts = {}, cfg = {}, globalDefQueue = [], useInteractive = false,
        disallowedProps = ["__proto__", "constructor"];

    function commentReplace(match, singlePrefix) {
        return singlePrefix || ""
    }

    function isFunction(it) {
        return ostring.call(it) === "[object Function]"
    }

    function isArray(it) {
        return ostring.call(it) === "[object Array]"
    }

    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break
                }
            }
        }
    }

    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop)
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop]
    }

    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop) && disallowedProps.indexOf(prop) == -1) {
                if (func(obj[prop], prop)) {
                    break
                }
            }
        }
    }

    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === "object" && value && !isArray(value) && !isFunction(value) && !(value instanceof RegExp)) {
                        if (!target[prop]) {
                            target[prop] = {}
                        }
                        mixin(target[prop], value, force, deepStringMixin)
                    } else {
                        target[prop] = value
                    }
                }
            })
        }
        return target
    }

    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments)
        }
    }

    function scripts() {
        return document.getElementsByTagName("script")
    }

    function defaultOnError(err) {
        throw err
    }

    function getGlobal(value) {
        if (!value) {
            return value
        }
        var g = global;
        each(value.split("."), function (part) {
            g = g[part]
        });
        return g
    }

    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + "\nhttps://requirejs.org/docs/errors.html#" + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err
        }
        return e
    }

    if (typeof define !== "undefined") {
        return
    }
    if (typeof requirejs !== "undefined") {
        if (isFunction(requirejs)) {
            return
        }
        cfg = requirejs;
        requirejs = undefined
    }
    if (typeof require !== "undefined" && !isFunction(require)) {
        cfg = require;
        require = undefined
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers, checkLoadedTimeoutId,
            config = {waitSeconds: 7, baseUrl: "./", paths: {}, bundles: {}, pkgs: {}, shim: {}, config: {}},
            registry = {}, enabledRegistry = {}, undefEvents = {}, defQueue = [], defined = {}, urlFetched = {},
            bundlesMap = {}, requireCounter = 1, unnormalizedCounter = 1;

        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === ".") {
                    ary.splice(i, 1);
                    i -= 1
                } else {
                    if (part === "..") {
                        if (i === 0 || (i === 1 && ary[2] === "..") || ary[i - 1] === "..") {
                            continue
                        } else {
                            if (i > 0) {
                                ary.splice(i - 1, 2);
                                i -= 2
                            }
                        }
                    }
                }
            }
        }

        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex, foundMap, foundI, foundStarMap, starI,
                normalizedBaseParts, baseParts = (baseName && baseName.split("/")), map = config.map,
                starMap = map && map["*"];
            if (name) {
                name = name.split("/");
                lastIndex = name.length - 1;
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, "")
                }
                if (name[0].charAt(0) === "." && baseParts) {
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name)
                }
                trimDots(name);
                name = name.join("/")
            }
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split("/");
                outerLoop:for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join("/");
                    if (baseParts) {
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join("/"));
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop
                                }
                            }
                        }
                    }
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i
                    }
                }
                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI
                }
                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join("/")
                }
            }
            pkgMain = getOwn(config.pkgs, name);
            return pkgMain ? pkgMain : name
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute("data-requiremodule") === name && scriptNode.getAttribute("data-requirecontext") === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true
                    }
                })
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                pathConfig.shift();
                context.require.undef(id);
                context.makeRequire(null, {skipMap: true})([id]);
                return true
            }
        }

        function splitPrefix(name) {
            var prefix, index = name ? name.indexOf("!") : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length)
            }
            return [prefix, name]
        }

        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts, prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null, originalName = name, isDefine = true,
                normalizedName = "";
            if (!name) {
                isDefine = false;
                name = "_@r" + (requireCounter += 1)
            }
            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];
            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix)
            }
            if (name) {
                if (prefix) {
                    if (isNormalized) {
                        normalizedName = name
                    } else {
                        if (pluginModule && pluginModule.normalize) {
                            normalizedName = pluginModule.normalize(name, function (name) {
                                return normalize(name, parentName, applyMap)
                            })
                        } else {
                            normalizedName = name.indexOf("!") === -1 ? normalize(name, parentName, applyMap) : name
                        }
                    }
                } else {
                    normalizedName = normalize(name, parentName, applyMap);
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;
                    url = context.nameToUrl(normalizedName)
                }
            }
            suffix = prefix && !pluginModule && !isNormalized ? "_unnormalized" + (unnormalizedCounter += 1) : "";
            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ? prefix + "!" + normalizedName : normalizedName) + suffix
            }
        }

        function getModule(depMap) {
            var id = depMap.id, mod = getOwn(registry, id);
            if (!mod) {
                mod = registry[id] = new context.Module(depMap)
            }
            return mod
        }

        function on(depMap, name, fn) {
            var id = depMap.id, mod = getOwn(registry, id);
            if (hasProp(defined, id) && (!mod || mod.defineEmitComplete)) {
                if (name === "defined") {
                    fn(defined[id])
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === "error") {
                    fn(mod.error)
                } else {
                    mod.on(name, fn)
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules, notified = false;
            if (errback) {
                errback(err)
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit("error", err)
                        }
                    }
                });
                if (!notified) {
                    req.onError(err)
                }
            }
        }

        function takeGlobalQueue() {
            if (globalDefQueue.length) {
                each(globalDefQueue, function (queueItem) {
                    var id = queueItem[0];
                    if (typeof id === "string") {
                        context.defQueueMap[id] = true
                    }
                    defQueue.push(queueItem)
                });
                globalDefQueue = []
            }
        }

        handlers = {
            require: function (mod) {
                if (mod.require) {
                    return mod.require
                } else {
                    return (mod.require = context.makeRequire(mod.map))
                }
            }, exports: function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports)
                    } else {
                        return (mod.exports = defined[mod.map.id] = {})
                    }
                }
            }, module: function (mod) {
                if (mod.module) {
                    return mod.module
                } else {
                    return (mod.module = {
                        id: mod.map.id, uri: mod.map.url, config: function () {
                            return getOwn(config.config, mod.map.id) || {}
                        }, exports: mod.exports || (mod.exports = {})
                    })
                }
            }
        };

        function cleanRegistry(id) {
            delete registry[id];
            delete enabledRegistry[id]
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;
            if (mod.error) {
                mod.emit("error", mod.error)
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id, dep = getOwn(registry, depId);
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check()
                        } else {
                            breakCycle(dep, traced, processed)
                        }
                    }
                });
                processed[id] = true
            }
        }

        function checkLoaded() {
            var err, usingPathFallback, waitInterval = config.waitSeconds * 1000,
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(), noLoads = [],
                reqCalls = [], stillLoading = false, needCycleCheck = true;
            if (inCheckLoaded) {
                return
            }
            inCheckLoaded = true;
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map, modId = map.id;
                if (!mod.enabled) {
                    return
                }
                if (!map.isDefine) {
                    reqCalls.push(mod)
                }
                if (!mod.error) {
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true
                        } else {
                            noLoads.push(modId);
                            removeScript(modId)
                        }
                    } else {
                        if (!mod.inited && mod.fetched && map.isDefine) {
                            stillLoading = true;
                            if (!map.prefix) {
                                return (needCycleCheck = false)
                            }
                        }
                    }
                }
            });
            if (expired && noLoads.length) {
                err = makeError("timeout", "Load timeout for modules: " + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err)
            }
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {})
                })
            }
            if ((!expired || usingPathFallback) && stillLoading) {
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded()
                    }, 50)
                }
            }
            inCheckLoaded = false
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0
        };
        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};
                if (this.inited) {
                    return
                }
                this.factory = factory;
                if (errback) {
                    this.on("error", errback)
                } else {
                    if (this.events.error) {
                        errback = bind(this, function (err) {
                            this.emit("error", err)
                        })
                    }
                }
                this.depMaps = depMaps && depMaps.slice(0);
                this.errback = errback;
                this.inited = true;
                this.ignore = options.ignore;
                if (options.enabled || this.enabled) {
                    this.enable()
                } else {
                    this.check()
                }
            }, defineDep: function (i, depExports) {
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports
                }
            }, fetch: function () {
                if (this.fetched) {
                    return
                }
                this.fetched = true;
                context.startTime = (new Date()).getTime();
                var map = this.map;
                if (this.shim) {
                    context.makeRequire(this.map, {enableBuildCallback: true})(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load()
                    }))
                } else {
                    return map.prefix ? this.callPlugin() : this.load()
                }
            }, load: function () {
                var url = this.map.url;
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url)
                }
            }, check: function () {
                if (!this.enabled || this.enabling) {
                    return
                }
                var err, cjsModule, id = this.map.id, depExports = this.depExports, exports = this.exports,
                    factory = this.factory;
                if (!this.inited) {
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch()
                    }
                } else {
                    if (this.error) {
                        this.emit("error", this.error)
                    } else {
                        if (!this.defining) {
                            this.defining = true;
                            if (this.depCount < 1 && !this.defined) {
                                if (isFunction(factory)) {
                                    if ((this.events.error && this.map.isDefine) || req.onError !== defaultOnError) {
                                        try {
                                            exports = context.execCb(id, factory, depExports, exports)
                                        } catch (e) {
                                            err = e
                                        }
                                    } else {
                                        exports = context.execCb(id, factory, depExports, exports)
                                    }
                                    if (this.map.isDefine && exports === undefined) {
                                        cjsModule = this.module;
                                        if (cjsModule) {
                                            exports = cjsModule.exports
                                        } else {
                                            if (this.usingExports) {
                                                exports = this.exports
                                            }
                                        }
                                    }
                                    if (err) {
                                        err.requireMap = this.map;
                                        err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                        err.requireType = this.map.isDefine ? "define" : "require";
                                        return onError((this.error = err))
                                    }
                                } else {
                                    exports = factory
                                }
                                this.exports = exports;
                                if (this.map.isDefine && !this.ignore) {
                                    defined[id] = exports;
                                    if (req.onResourceLoad) {
                                        var resLoadMaps = [];
                                        each(this.depMaps, function (depMap) {
                                            resLoadMaps.push(depMap.normalizedMap || depMap)
                                        });
                                        req.onResourceLoad(context, this.map, resLoadMaps)
                                    }
                                }
                                cleanRegistry(id);
                                this.defined = true
                            }
                            this.defining = false;
                            if (this.defined && !this.defineEmitted) {
                                this.defineEmitted = true;
                                this.emit("defined", this.exports);
                                this.defineEmitComplete = true
                            }
                        }
                    }
                }
            }, callPlugin: function () {
                var map = this.map, id = map.id, pluginMap = makeModuleMap(map.prefix);
                this.depMaps.push(pluginMap);
                on(pluginMap, "defined", bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod, bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name, parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {enableBuildCallback: true});
                    if (this.map.unnormalized) {
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true)
                            }) || ""
                        }
                        normalizedMap = makeModuleMap(map.prefix + "!" + name, this.map.parentMap, true);
                        on(normalizedMap, "defined", bind(this, function (value) {
                            this.map.normalizedMap = normalizedMap;
                            this.init([], function () {
                                return value
                            }, null, {enabled: true, ignore: true})
                        }));
                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            this.depMaps.push(normalizedMap);
                            if (this.events.error) {
                                normalizedMod.on("error", bind(this, function (err) {
                                    this.emit("error", err)
                                }))
                            }
                            normalizedMod.enable()
                        }
                        return
                    }
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return
                    }
                    load = bind(this, function (value) {
                        this.init([], function () {
                            return value
                        }, null, {enabled: true})
                    });
                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + "_unnormalized") === 0) {
                                cleanRegistry(mod.map.id)
                            }
                        });
                        onError(err)
                    });
                    load.fromText = bind(this, function (text, textAlt) {
                        var moduleName = map.name, moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;
                        if (textAlt) {
                            text = textAlt
                        }
                        if (hasInteractive) {
                            useInteractive = false
                        }
                        getModule(moduleMap);
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id]
                        }
                        try {
                            req.exec(text)
                        } catch (e) {
                            return onError(makeError("fromtexteval", "fromText eval for " + id + " failed: " + e, e, [id]))
                        }
                        if (hasInteractive) {
                            useInteractive = true
                        }
                        this.depMaps.push(moduleMap);
                        context.completeLoad(moduleName);
                        localRequire([moduleName], load)
                    });
                    plugin.load(map.name, localRequire, load, config)
                }));
                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap
            }, enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;
                this.enabling = true;
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;
                    if (typeof depMap === "string") {
                        depMap = makeModuleMap(depMap, (this.map.isDefine ? this.map : this.map.parentMap), false, !this.skipMap);
                        this.depMaps[i] = depMap;
                        handler = getOwn(handlers, depMap.id);
                        if (handler) {
                            this.depExports[i] = handler(this);
                            return
                        }
                        this.depCount += 1;
                        on(depMap, "defined", bind(this, function (depExports) {
                            if (this.undefed) {
                                return
                            }
                            this.defineDep(i, depExports);
                            this.check()
                        }));
                        if (this.errback) {
                            on(depMap, "error", bind(this, this.errback))
                        } else {
                            if (this.events.error) {
                                on(depMap, "error", bind(this, function (err) {
                                    this.emit("error", err)
                                }))
                            }
                        }
                    }
                    id = depMap.id;
                    mod = registry[id];
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this)
                    }
                }));
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this)
                    }
                }));
                this.enabling = false;
                this.check()
            }, on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = []
                }
                cbs.push(cb)
            }, emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt)
                });
                if (name === "error") {
                    delete this.events[name]
                }
            }
        };

        function callGetModule(args) {
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2])
            }
        }

        function removeListener(node, func, name, ieName) {
            if (node.detachEvent && !isOpera) {
                if (ieName) {
                    node.detachEvent(ieName, func)
                }
            } else {
                node.removeEventListener(name, func, false)
            }
        }

        function getScriptData(evt) {
            var node = evt.currentTarget || evt.srcElement;
            removeListener(node, context.onScriptLoad, "load", "onreadystatechange");
            removeListener(node, context.onScriptError, "error");
            return {node: node, id: node && node.getAttribute("data-requiremodule")}
        }

        function intakeDefines() {
            var args;
            takeGlobalQueue();
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError("mismatch", "Mismatched anonymous define() module: " + args[args.length - 1]))
                } else {
                    callGetModule(args)
                }
            }
            context.defQueueMap = {}
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,
            configure: function (cfg) {
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== "/") {
                        cfg.baseUrl += "/"
                    }
                }
                if (typeof cfg.urlArgs === "string") {
                    var urlArgs = cfg.urlArgs;
                    cfg.urlArgs = function (id, url) {
                        return (url.indexOf("?") === -1 ? "?" : "&") + urlArgs
                    }
                }
                var shim = config.shim, objs = {paths: true, bundles: true, config: true, map: true};
                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {}
                        }
                        mixin(config[prop], value, true, true)
                    } else {
                        config[prop] = value
                    }
                });
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop
                            }
                        })
                    })
                }
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        if (isArray(value)) {
                            value = {deps: value}
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value)
                        }
                        shim[id] = value
                    });
                    config.shim = shim
                }
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;
                        pkgObj = typeof pkgObj === "string" ? {name: pkgObj} : pkgObj;
                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location
                        }
                        config.pkgs[name] = pkgObj.name + "/" + (pkgObj.main || "main").replace(currDirRegExp, "").replace(jsSuffixRegExp, "")
                    })
                }
                eachProp(registry, function (mod, id) {
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true)
                    }
                });
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback)
                }
            },
            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments)
                    }
                    return ret || (value.exports && getGlobal(value.exports))
                }

                return fn
            },
            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;
                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true
                    }
                    if (typeof deps === "string") {
                        if (isFunction(callback)) {
                            return onError(makeError("requireargs", "Invalid require call"), errback)
                        }
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id])
                        }
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire)
                        }
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;
                        if (!hasProp(defined, id)) {
                            return onError(makeError("notloaded", 'Module name "' + id + '" has not been loaded yet for context: ' + contextName + (relMap ? "" : ". Use require([])")))
                        }
                        return defined[id]
                    }
                    intakeDefines();
                    context.nextTick(function () {
                        intakeDefines();
                        requireMod = getModule(makeModuleMap(null, relMap));
                        requireMod.skipMap = options.skipMap;
                        requireMod.init(deps, callback, errback, {enabled: true});
                        checkLoaded()
                    });
                    return localRequire
                }

                mixin(localRequire, {
                    isBrowser: isBrowser, toUrl: function (moduleNamePlusExt) {
                        var ext, index = moduleNamePlusExt.lastIndexOf("."), segment = moduleNamePlusExt.split("/")[0],
                            isRelative = segment === "." || segment === "..";
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index)
                        }
                        return context.nameToUrl(normalize(moduleNamePlusExt, relMap && relMap.id, true), ext, true)
                    }, defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id)
                    }, specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id)
                    }
                });
                if (!relMap) {
                    localRequire.undef = function (id) {
                        takeGlobalQueue();
                        var map = makeModuleMap(id, relMap, true), mod = getOwn(registry, id);
                        mod.undefed = true;
                        removeScript(id);
                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];
                        eachReverse(defQueue, function (args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1)
                            }
                        });
                        delete context.defQueueMap[id];
                        if (mod) {
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events
                            }
                            cleanRegistry(id)
                        }
                    }
                }
                return localRequire
            },
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable()
                }
            },
            completeLoad: function (moduleName) {
                var found, args, mod, shim = getOwn(config.shim, moduleName) || {}, shExports = shim.exports;
                takeGlobalQueue();
                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        if (found) {
                            break
                        }
                        found = true
                    } else {
                        if (args[0] === moduleName) {
                            found = true
                        }
                    }
                    callGetModule(args)
                }
                context.defQueueMap = {};
                mod = getOwn(registry, moduleName);
                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return
                        } else {
                            return onError(makeError("nodefine", "No define call for " + moduleName, null, [moduleName]))
                        }
                    } else {
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn])
                    }
                }
                checkLoaded()
            },
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url, parentPath, bundleId, pkgMain = getOwn(config.pkgs, moduleName);
                if (pkgMain) {
                    moduleName = pkgMain
                }
                bundleId = getOwn(bundlesMap, moduleName);
                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt)
                }
                if (req.jsExtRegExp.test(moduleName)) {
                    url = moduleName + (ext || "")
                } else {
                    paths = config.paths;
                    syms = moduleName.split("/");
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join("/");
                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0]
                            }
                            syms.splice(0, i, parentPath);
                            break
                        }
                    }
                    url = syms.join("/");
                    url += (ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? "" : ".js"));
                    url = (url.charAt(0) === "/" || url.match(/^[\w\+\.\-]+:/) ? "" : config.baseUrl) + url
                }
                return config.urlArgs && !/^blob\:/.test(url) ? url + config.urlArgs(moduleName, url) : url
            },
            load: function (id, url) {
                req.load(context, id, url)
            },
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args)
            },
            onScriptLoad: function (evt) {
                if (evt.type === "load" || (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    interactiveScript = null;
                    var data = getScriptData(evt);
                    context.completeLoad(data.id)
                }
            },
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function (value, key) {
                        if (key.indexOf("_@r") !== 0) {
                            each(value.depMaps, function (depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                    return true
                                }
                            })
                        }
                    });
                    return onError(makeError("scripterror", 'Script error for "' + data.id + (parents.length ? '", needed by: ' + parents.join(", ") : '"'), evt, [data.id]))
                }
            }
        };
        context.require = context.makeRequire();
        return context
    }

    req = requirejs = function (deps, callback, errback, optional) {
        var context, config, contextName = defContextName;
        if (!isArray(deps) && typeof deps !== "string") {
            config = deps;
            if (isArray(callback)) {
                deps = callback;
                callback = errback;
                errback = optional
            } else {
                deps = []
            }
        }
        if (config && config.context) {
            contextName = config.context
        }
        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName)
        }
        if (config) {
            context.configure(config)
        }
        return context.require(deps, callback, errback)
    };
    req.config = function (config) {
        return req(config)
    };
    req.nextTick = typeof setTimeout !== "undefined" ? function (fn) {
        setTimeout(fn, 4)
    } : function (fn) {
        fn()
    };
    if (!require) {
        require = req
    }
    req.version = version;
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {contexts: contexts, newContext: newContext};
    req({});
    each(["toUrl", "undef", "defined", "specified"], function (prop) {
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments)
        }
    });
    if (isBrowser) {
        head = s.head = document.getElementsByTagName("head")[0];
        baseElement = document.getElementsByTagName("base")[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode
        }
    }
    req.onError = defaultOnError;
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "html:script") : document.createElement("script");
        node.type = config.scriptType || "text/javascript";
        node.charset = "utf-8";
        node.async = true;
        return node
    };
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {}, node;
        if (isBrowser) {
            node = req.createNode(config, moduleName, url);
            node.setAttribute("data-requirecontext", context.contextName);
            node.setAttribute("data-requiremodule", moduleName);
            if (node.attachEvent && !(node.attachEvent.toString && node.attachEvent.toString().indexOf("[native code") < 0) && !isOpera) {
                useInteractive = true;
                node.attachEvent("onreadystatechange", context.onScriptLoad)
            } else {
                node.addEventListener("load", context.onScriptLoad, false);
                node.addEventListener("error", context.onScriptError, false)
            }
            node.src = url;
            if (actuate && actuate.getNonce()) {
                node.nonce = actuate.getNonce()
            }
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url)
            }
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement)
            } else {
                head.appendChild(node)
            }
            currentlyAddingScript = null;
            return node
        } else {
            if (isWebWorker) {
                try {
                    setTimeout(function () {
                    }, 0);
                    importScripts(url);
                    context.completeLoad(moduleName)
                } catch (e) {
                    context.onError(makeError("importscripts", "importScripts failed for " + moduleName + " at " + url, e, [moduleName]))
                }
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === "interactive") {
            return interactiveScript
        }
        eachReverse(scripts(), function (script) {
            if (script.readyState === "interactive") {
                return (interactiveScript = script)
            }
        });
        return interactiveScript
    }

    if (isBrowser && !cfg.skipDataMain) {
        eachReverse(scripts(), function (script) {
            if (!head) {
                head = script.parentNode
            }
            dataMain = script.getAttribute("data-main");
            if (dataMain) {
                mainScript = dataMain;
                if (!cfg.baseUrl && mainScript.indexOf("!") === -1) {
                    src = mainScript.split("/");
                    mainScript = src.pop();
                    subPath = src.length ? src.join("/") + "/" : "./";
                    cfg.baseUrl = subPath
                }
                mainScript = mainScript.replace(jsSuffixRegExp, "");
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain
                }
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];
                return true
            }
        })
    }
    define = function (name, deps, callback) {
        var node, context;
        if (typeof name !== "string") {
            callback = deps;
            deps = name;
            name = null
        }
        if (!isArray(deps)) {
            callback = deps;
            deps = null
        }
        if (!deps && isFunction(callback)) {
            deps = [];
            if (callback.length) {
                callback.toString().replace(commentRegExp, commentReplace).replace(cjsRequireRegExp, function (match, dep) {
                    deps.push(dep)
                });
                deps = (callback.length === 1 ? ["require"] : ["require", "exports", "module"]).concat(deps)
            }
        }
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute("data-requiremodule")
                }
                context = contexts[node.getAttribute("data-requirecontext")]
            }
        }
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true
        } else {
            globalDefQueue.push([name, deps, callback])
        }
    };
    define.amd = {jQuery: true};
    req.exec = function (text) {
        return eval(text)
    };
    req(cfg)
}(this, (typeof setTimeout === "undefined" ? undefined : setTimeout)));
actuate.resource.module.define("actuate.dataprovision", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/dataprovision",
    _jsFiles: new Array("dataprovision.js"),
    _publicClasses: {
        "actuate.Excel": "actuate.dataprovision.excel.Excel",
        "actuate.Text": "actuate.dataprovision.text.Text",
        "actuate.Jdbc": "actuate.dataprovision.jdbc.Jdbc",
        "actuate.DBProfile": "actuate.dataprovision.dbprofile.DBProfile",
        "actuate.JdbcUI": "actuate.dataprovision.jdbc.JdbcUI",
        "actuate.Mdd": "actuate.dataprovision.mdd.Mdd",
        "actuate.Datamart": "actuate.dataprovision.datamart.Datamart",
        "actuate.DataSet": "actuate.dataprovision.DataSet",
        "actuate.LinkedDataSet": "actuate.dataprovision.LinkedDataSet",
        "actuate.DataModel": "actuate.dataprovision.DataModel",
        "actuate.provision.Service": "actuate.dataprovision.Service",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.dataprovisionui", {
    _jsPath: "iv/dataprovisionui",
    _jsFiles: new Array("dataprovisionui.js"),
    _localizedString: true,
    _publicClasses: {noClass: null},
    _localizedStringServlet: "dpresource",
    _cssPath: "common/jslib/themes/default/",
    _cssFiles: new Array("dataprovisionui.css"),
    _noComma: null
});
actuate.resource.module.define("actuate.dataprovisionLib", {
    _jsPath: "iv/dataprovisionLib",
    _jsFiles: new Array("dataprovisionLib.js"),
    _localizedString: false,
    _publicClasses: {
        "actuate.dataprovision.Viewer": "actuate.dataprovision.impl.DPViewer",
        "actuate.dataprovision.viewer.UIConfig": "actuate.dataprovision.impl.UIConfig",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.dataprovisionuiLib", {
    _jsPath: "iv/dataprovisionuiLib",
    _jsFiles: new Array("dataprovisionuiLib.js"),
    _localizedString: false,
    _publicClasses: {noClass: null},
    _noComma: null
});
actuate.resource.module.define("actuate.parameter", {
    _jsPath: "iv/parameter",
    _jsFiles: new Array("parameter.js"),
    _localizedStringServlet: "wsservlet",
    _localizedString: true,
    _cssPath: "css/",
    _cssFiles: new Array("parameter.css"),
    _publicClasses: {
        "actuate.Parameter": "actuate.parameter.Parameter",
        "actuate.parameter.ParameterDefinition": "actuate.parameter.ParameterDefinition",
        "actuate.parameter.ParameterValue": "actuate.parameter.ParameterValue",
        "actuate.parameter.NameValuePair": "actuate.parameter.NameValuePair",
        "actuate.parameter.Exception": "actuate.parameter.Exception",
        "actuate.parameter.ParameterData": "actuate.parameter.ParameterData",
        "actuate.parameter.UIControl.Radio": "actuate.parameter.impl.UIControl.Radio",
        "actuate.parameter.UIControl.Checkbox": "actuate.parameter.impl.UIControl.Checkbox",
        "actuate.parameter.UIControl.Combobox": "actuate.parameter.impl.UIControl.Combobox",
        "actuate.parameter.UIControl.Text": "actuate.parameter.impl.UIControl.Text",
        "actuate.parameter.UIControl.Date": "actuate.parameter.impl.UIControl.Date",
        "actuate.parameter.UIControl.List": "actuate.parameter.impl.UIControl.List",
        "actuate.parameter.UIControl.Slider": "actuate.parameter.impl.UIControl.Slider",
        "actuate.parameter.UIControl.Factory": "actuate.parameter.impl.UIControl.Factory",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.visualization", {
    _jsPath: "dashboard/main/visualization",
    _jsFiles: new Array("visualization.js"),
    _publicClasses: {noClass: null},
    _localizedStringServlet: "dashboardresource",
    _localizedString: true,
    _noComma: null
});
actuate.util.Package.define("actuate.dashboard");
actuate.resource.module.feature.define("actuate.dashboard", {
    _localizedStringServlet: "dashboardresource",
    javaScriptAlias: {
        GadgetExplorer: "/feature3098588299482307069.js",
        FolderExplorer: "/feature14850356819155480771.js",
        NewGadgetBuilderDialog: "/feature4251773869861521962.js",
        NewSelectorBuilderDialog: "/feature3860070410867348679.js",
        NewReportLibraryBuilderDialog: "/feature9106527871858798205.js",
        NewDataManagerDialog: "/feature10109993836930867343.js"
    },
    AVAILABLE_FEATURES: {
        GADGET_EXPLORER: {_javaScript: ["GadgetExplorer"], _localizedString: ["gadgetExplorer"]},
        FOLDER_EXPLORER: {_javaScript: ["FolderExplorer"], _localizedString: ["folderExplorer"]},
        BUILDER_DIALOG: {_javaScript: ["NewGadgetBuilderDialog", "NewSelectorBuilderDialog", "NewReportLibraryBuilderDialog", "NewDataManagerDialog"]}
    }
});
actuate.resource.module.define("actuate.dashboard", {
    _jsPath: "dashboard/main/dashboard",
    _jsFiles: new Array("dashboard.js"),
    _cssPath: "dashboard/css/",
    _cssFiles: new Array("dashboard.css"),
    _publicClasses: {
        "actuate.Dashboard": "actuate.dashboard.Dashboard",
        "actuate.Databot": "actuate.databot.Databot",
        noClass: null
    },
    _localizedStringServlet: "dashboardresource",
    _localizedString: true,
    _noComma: null
});
actuate.resource.module.define("actuate.dashboard.embedded", {
    _moduleDependencies: new Array(),
    _jsPath: "",
    _jsFiles: new Array("dashboard/embedded/util.js", "dashboard/embedded/gadgets.js", "dashboard/embedded/DashboardEmbeddedLayoutManager.js"),
    _publicClasses: {},
    _noComma: null
});
actuate.resource.module.define("actuate.dashboard.widget", {
    _jsPath: "dashboard/main/dashboard.widget",
    _jsFiles: new Array("dashboard.widget.js"),
    _publicClasses: {},
    _noComma: null
});
actuate.resource.module.define("actuate.reportexplorer", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/reportexplorer",
    _jsFiles: new Array("reportexplorer.js"),
    _publicClasses: {
        "actuate.ReportExplorer": "actuate.reportexplorer.ReportExplorer",
        "actuate.reportexplorer.FileSearch": "actuate.reportexplorer.FileSearch",
        "actuate.reportexplorer.FolderItems": "actuate.reportexplorer.FolderItems",
        "actuate.reportexplorer.FolderItemsParser": "actuate.reportexplorer.FolderItemsParser",
        "actuate.reportexplorer.FileCondition": "actuate.reportexplorer.FileCondition",
        "actuate.reportexplorer.File": "actuate.reportexplorer.File",
        "actuate.reportexplorer.PrivilegeFilter": "actuate.reportexplorer.PrivilegeFilter",
        "actuate.reportexplorer.Exception": "actuate.reportexplorer.Exception",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.xtabanalyzer", {
    _jsPath: "da/xtabanalyzer", _jsFiles: new Array("xtabanalyzer.js"), _publicClasses: {
        "actuate.XTabAnalyzer": "actuate.xtabanalyzer.impl.XTabAnalyzer",
        "actuate.xtabanalyzer.Exception": "actuate.xtabanalyzer.impl.Exception",
        "actuate.xtabanalyzer.OptionKeys": "actuate.xtabanalyzer.impl.OptionKeys",
        "actuate.xtabanalyzer.EventConstants": "actuate.xtabanalyzer.impl.EventConstants",
        "actuate.xtabanalyzer.UIOptions": "actuate.xtabanalyzer.impl.UIOptions",
        "actuate.xtabanalyzer.PageContent": "actuate.xtabanalyzer.impl.PageContent",
        "actuate.xtabanalyzer.Crosstab": "actuate.xtabanalyzer.impl.Crosstab",
        "actuate.xtabanalyzer.Dimension": "actuate.xtabanalyzer.impl.Dimension",
        "actuate.xtabanalyzer.Measure": "actuate.xtabanalyzer.impl.Measure",
        "actuate.xtabanalyzer.Level": "actuate.xtabanalyzer.impl.Level",
        "actuate.xtabanalyzer.LevelAttribute": "actuate.xtabanalyzer.impl.LevelAttribute",
        "actuate.xtabanalyzer.Sorter": "actuate.xtabanalyzer.impl.Sorter",
        "actuate.xtabanalyzer.MemberValue": "actuate.xtabanalyzer.impl.MemberValue",
        "actuate.xtabanalyzer.Filter": "actuate.xtabanalyzer.impl.Filter",
        "actuate.xtabanalyzer.SubTotal": "actuate.xtabanalyzer.impl.SubTotal",
        "actuate.xtabanalyzer.GrandTotal": "actuate.xtabanalyzer.impl.GrandTotal",
        "actuate.xtabanalyzer.Total": "actuate.xtabanalyzer.impl.Total",
        "actuate.xtabanalyzer.Driller": "actuate.xtabanalyzer.impl.Driller",
        "actuate.xtabanalyzer.Options": "actuate.xtabanalyzer.impl.Options",
        "actuate.xtabanalyzer.ParameterValue": "actuate.xtabanalyzer.impl.ParameterValue",
        "actuate.xtabanalyzer.Comparison": "actuate.xtabanalyzer.impl.Comparison",
        "actuate.xtabanalyzer.ComparisonCondition": "actuate.xtabanalyzer.impl.ComparisonCondition",
        "actuate.xtabanalyzer.ComparisonValue": "actuate.xtabanalyzer.impl.ComparisonValue",
        noClass: null
    }, _noComma: null
});
actuate.resource.module.define("actuate.da", {
    _moduleDependencies: new Array(),
    _jsPath: "da/da",
    _jsFiles: new Array("da.js"),
    _cssPath: "da/styles/",
    _cssFiles: new Array("da.css"),
    _htmlResourcesUri: "daresource",
    _onLoad: function () {
        actuate.xtabanalyzer.impl.bridge.bridge = new actuate.xtabanalyzer.impl.bridge.Bridge(actuate.da.core.daEvent);
        actuate.xtabanalyzer.impl.bridge.bridgeEventDispatcher = new actuate.xtabanalyzer.impl.bridge.BridgeEventDispatcher()
    },
    _onAfterHtmlResourcesLoaded: function () {
        actuate.da.ui.app.daMask = new actuate.da.ui.app.DAMask();
        actuate.da.utility.daAggregationUtility = new actuate.da.utility.DAAggregationUtility();
        actuate.da.data.daData = new actuate.da.data.DAData();
        actuate.Class.extend(actuate.widget.form.VTypes, {
            positiveInteger: function (C, B) {
                return /^[1-9]\d*$/.test(C)
            }
        });
        var A = document.getElementById(actuate.resource.module.getResourcesContainerId(this._moduleName));
        A.style.display = "inline"
    },
    _noComma: null
});
actuate.resource.module.define("actuate.calendar.modern", {
    _jsPath: "iv/calendar.modern",
    _jsFiles: new Array("calendar.modern.js"),
    _localizedString: false,
    _cssPath: "css/",
    _cssFiles: new Array("calendar.modern.css"),
    _publicClasses: {noClass: null},
    _noComma: null
});
actuate.resource.module.define("actuate.custom.elements", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/custom.elements",
    _jsFiles: new Array("custom.elements.js"),
    _publicClasses: {noClass: null},
    _noComma: null
});
actuate.resource.module.define("actuate.jquery", {
    _jsPath: "iv/jquery",
    _jsFiles: new Array("jquery.js"),
    _noComma: null
});
actuate.util.Package.define("actuate.dialog");
actuate.resource.module.feature.define("actuate.html5charts", {
    javaScriptAlias: {
        alias_js_world: "/feature4403909212217929671.js",
        alias_js_world8: "/feature10622272322191298556.js",
        alias_js_world8withantarctica: "/feature9845322667881558143.js",
        alias_js_worldwithantarctica: "/feature12642436943879611201.js",
        alias_js_worldwithcountries: "/feature17767374287397027647.js",
        alias_js_europe: "/feature3832084520623377794.js",
        alias_js_northamerica: "/feature4118585692276835712.js",
        alias_js_centralamerica: "/feature17349108208567013761.js",
        alias_js_southamerica: "/feature12396330791469002644.js",
        alias_js_asia: "/feature15972094307954776998.js",
        alias_js_africa: "/feature687510785310161743.js",
        alias_js_middleeast: "/feature6187733154769901252.js",
        alias_js_oceania: "/feature5122534143987305875.js",
        alias_js_asia3: "/feature1866843330716666205.js",
        alias_js_northamericawocentral: "/feature13161748182015763829.js",
        alias_js_alabama: "/feature2899277979281340916.js",
        alias_js_alaska: "/feature9639853889415588348.js",
        alias_js_arizona: "/feature8305157048984892248.js",
        alias_js_arkansas: "/feature10033746126997581875.js",
        alias_js_california: "/feature6708611320876836599.js",
        alias_js_colorado: "/feature8946306558229103964.js",
        alias_js_connecticut: "/feature7236838410483172884.js",
        alias_js_delaware: "/feature13162138215523245110.js",
        alias_js_districtofcolumbia: "/feature2298475263477647051.js",
        alias_js_florida: "/feature13910035949021696473.js",
        alias_js_georgia: "/feature10890282482024214961.js",
        alias_js_hawaii: "/feature3834658161303165782.js",
        alias_js_idaho: "/feature11363621301463602418.js",
        alias_js_illinois: "/feature4009224583944920493.js",
        alias_js_indiana: "/feature12991693988931052147.js",
        alias_js_iowa: "/feature9472485790979163571.js",
        alias_js_kansas: "/feature7567202421797406863.js",
        alias_js_kentucky: "/feature9592131478287925888.js",
        alias_js_louisiana: "/feature9082738114274233530.js",
        alias_js_maine: "/feature10860462217812995030.js",
        alias_js_maryland: "/feature13649264219247331237.js",
        alias_js_massachusetts: "/feature17303523927938240152.js",
        alias_js_michigan: "/feature13841172385434976083.js",
        alias_js_minnesota: "/feature12643816117319902749.js",
        alias_js_mississippi: "/feature4790934735830780843.js",
        alias_js_missouri: "/feature5185287888912885209.js",
        alias_js_montana: "/feature10690752381203215397.js",
        alias_js_nebraska: "/feature12828772702160336061.js",
        alias_js_nevada: "/feature14074738533780731925.js",
        alias_js_newhampshire: "/feature3704279164528637720.js",
        alias_js_newjersey: "/feature9866369505507066107.js",
        alias_js_newmexico: "/feature5910764576614452971.js",
        alias_js_newyork: "/feature13355360422364899085.js",
        alias_js_northcarolina: "/feature9338313183937243215.js",
        alias_js_northdakota: "/feature7387174969585612390.js",
        alias_js_ohio: "/feature14889091535837707246.js",
        alias_js_oklahoma: "/feature12838611009333216258.js",
        alias_js_oregon: "/feature15085958680358297194.js",
        alias_js_pennsylvania: "/feature11891448489505921212.js",
        alias_js_rhodeisland: "/feature16554958808917031779.js",
        alias_js_southcarolina: "/feature16099137581392352071.js",
        alias_js_southdakota: "/feature10309086738364616195.js",
        alias_js_tennessee: "/feature8702537794553717960.js",
        alias_js_texas: "/feature8425628788726490563.js",
        alias_js_usa: "/feature13893100991521219062.js",
        alias_js_utah: "/feature2798677814894673634.js",
        alias_js_vermont: "/feature3580682523064887184.js",
        alias_js_virginia: "/feature5856316056799238910.js",
        alias_js_washington: "/feature11211422254919948747.js",
        alias_js_westvirginia: "/feature11930339749499138668.js",
        alias_js_wisconsin: "/feature8542597067208290360.js",
        alias_js_wyoming: "/feature5409797733610419833.js",
        alias_js_usacentralregion: "/feature10753260041063074336.js",
        alias_js_usanortheastregion: "/feature1053855227756765526.js",
        alias_js_usanorthwestregion: "/feature12046241280820875373.js",
        alias_js_usaregion: "/feature13844748108042409151.js",
        alias_js_usasoutheastregion: "/feature15236239742172794995.js",
        alias_js_usasouthwestregion: "/feature13229431874008065595.js",
        alias_js_albania: "/feature716683857001240570.js",
        alias_js_andorra: "/feature8095080182667919265.js",
        alias_js_austria: "/feature10094699346653426182.js",
        alias_js_belarus: "/feature12830921178748881444.js",
        alias_js_belgium: "/feature16271905840201377606.js",
        alias_js_bosniaherzegovina: "/feature3462461410883664824.js",
        alias_js_bulgaria: "/feature13821184421262907474.js",
        alias_js_croatia: "/feature459107336226928053.js",
        alias_js_cyprus: "/feature13412162743930571443.js",
        alias_js_cyprus2: "/feature3996739630255472588.js",
        alias_js_czechrepublic: "/feature6665114141969738338.js",
        alias_js_denmark: "/feature18347360538454774611.js",
        alias_js_denmarkregion: "/feature12003785642208248672.js",
        alias_js_england: "/feature17940760215724870039.js",
        alias_js_estonia: "/feature13738977686831803480.js",
        alias_js_europe2: "/feature15749090428657582157.js",
        alias_js_europewithcountries: "/feature1857330349425051042.js",
        alias_js_finland: "/feature16764397391242526404.js",
        alias_js_france: "/feature15243211442773239041.js",
        alias_js_francedepartment: "/feature16951246188258242879.js",
        alias_js_germany: "/feature1926978930091548608.js",
        alias_js_greece: "/feature11605198096570602641.js",
        alias_js_hungary: "/feature14028640496661941942.js",
        alias_js_hungaryregions: "/feature12178675050544018328.js",
        alias_js_iceland: "/feature3746242053365667455.js",
        alias_js_ireland: "/feature16487384079419581170.js",
        alias_js_italy: "/feature7535655613320111680.js",
        alias_js_latvia: "/feature7907091693500849392.js",
        alias_js_liechtenstein: "/feature9876581988857975467.js",
        alias_js_lithuania: "/feature5317932738904997258.js",
        alias_js_luxembourg: "/feature16618599968219389899.js",
        alias_js_macedonia: "/feature4435252464733148274.js",
        alias_js_malta: "/feature14372053707537468201.js",
        alias_js_moldova: "/feature11132750990899785241.js",
        alias_js_monaco: "/feature12521749506081821342.js",
        alias_js_montenegro: "/feature12715480641615469026.js",
        alias_js_netherlands: "/feature7381730787614084008.js",
        alias_js_norway: "/feature7745993523613176273.js",
        alias_js_norwayregion: "/feature9279847423776027862.js",
        alias_js_poland: "/feature9086116989677145484.js",
        alias_js_polandcounties: "/feature3496668312212467970.js",
        alias_js_portugal: "/feature6676249402210626281.js",
        alias_js_romania: "/feature15631914431031799220.js",
        alias_js_sanmarino: "/feature15072223929054936923.js",
        alias_js_scotland: "/feature6867654471776347160.js",
        alias_js_serbia: "/feature109976704181286857.js",
        alias_js_slovakia: "/feature16621600836686568919.js",
        alias_js_slovenia: "/feature14402820897630515250.js",
        alias_js_spain: "/feature2014410115160546198.js",
        alias_js_spainprovinces: "/feature15065664091893940444.js",
        alias_js_sweden: "/feature16150255017127523485.js",
        alias_js_switzerland: "/feature16455814450931625176.js",
        alias_js_turkey: "/feature9599954275374236662.js",
        alias_js_uk: "/feature548698286526697899.js",
        alias_js_ukraine: "/feature17610052823555034826.js",
        alias_js_vaticancity: "/feature14875774114394424655.js",
        alias_js_centraleuropeanregion: "/feature12163684647111773466.js",
        alias_js_easteuropeanregion: "/feature13644469839348603778.js",
        alias_js_europeregion: "/feature6076203057919508555.js",
        alias_js_northeuropeanregion: "/feature8201585844706147976.js",
        alias_js_southeuropeanregion: "/feature14070269671060041093.js",
        alias_js_westeuropeanregion: "/feature261412309217253422.js",
        alias_js_englandregion: "/feature6124421071550018179.js",
        alias_js_northernireland: "/feature4479037985746063934.js",
        alias_js_scotlandregion: "/feature695412248878684836.js",
        alias_js_uk7: "/feature16868017329816695826.js",
        alias_js_wales: "/feature16811294558554361532.js",
        alias_js_antigua: "/feature16890312952007247679.js",
        alias_js_bahamas: "/feature3152307147022501616.js",
        alias_js_barbados: "/feature15809456316220206376.js",
        alias_js_canada: "/feature4068284192280349412.js",
        alias_js_caymanislands: "/feature17416792286464619096.js",
        alias_js_cuba: "/feature16263662336468661788.js",
        alias_js_dominica: "/feature18242056377336892748.js",
        alias_js_dominicanrepublic: "/feature1023990507885259067.js",
        alias_js_greenland: "/feature15450983879474286547.js",
        alias_js_grenada: "/feature12402733623146411327.js",
        alias_js_haiti: "/feature16957111890215847943.js",
        alias_js_jamaica: "/feature9336888178587766254.js",
        alias_js_mexico: "/feature8793354772230069338.js",
        alias_js_puertorico: "/feature10434259117916222932.js",
        alias_js_saintkittsandnevis: "/feature5039990360300057399.js",
        alias_js_saintlucia: "/feature5883285646907241169.js",
        alias_js_saintvincentandthegrenadines: "/feature12385785026726832886.js",
        alias_js_trinidadandtobago: "/feature5489197412137898401.js",
        alias_js_argentina: "/feature11522995741193229985.js",
        alias_js_bolivia: "/feature11496484662889438737.js",
        alias_js_brazil: "/feature2966534802011347895.js",
        alias_js_brazilregion: "/feature15919400466315106327.js",
        alias_js_chile: "/feature7718544610973232483.js",
        alias_js_colombia: "/feature16480631097488352229.js",
        alias_js_ecuador: "/feature10421949551313159720.js",
        alias_js_falklandisland: "/feature1392626700822371887.js",
        alias_js_frenchguiana: "/feature6181789176780571019.js",
        alias_js_guyana: "/feature5749804850719396802.js",
        alias_js_paraguay: "/feature6712155321386010741.js",
        alias_js_peru: "/feature15996837553307340574.js",
        alias_js_suriname: "/feature9776462392071337615.js",
        alias_js_uruguay: "/feature11024049750732673238.js",
        alias_js_venezuela: "/feature28180229391954247.js",
        alias_js_belize: "/feature3362611155432294789.js",
        alias_js_centralamerica2: "/feature9269862215213172220.js",
        alias_js_centralamericawithcaribbean: "/feature5143663260368194093.js",
        alias_js_costarica: "/feature6190125414756936814.js",
        alias_js_elsalvador: "/feature9147855077436167895.js",
        alias_js_guatemala: "/feature12015030310111217080.js",
        alias_js_honduras: "/feature11254518256360186260.js",
        alias_js_nicaragua: "/feature3594181397332643505.js",
        alias_js_panama: "/feature13883778486168766766.js",
        alias_js_alberta: "/feature8155805041060602659.js",
        alias_js_britishcolumbia: "/feature4713756022150752203.js",
        alias_js_manitoba: "/feature7686287061264424445.js",
        alias_js_newbrunswick: "/feature11430532611345270617.js",
        alias_js_newfoundlandandlabrador: "/feature17275909771048190135.js",
        alias_js_northwestterritories: "/feature482344177969103902.js",
        alias_js_novascotia: "/feature537239695778390853.js",
        alias_js_nunavut: "/feature10354298815995636343.js",
        alias_js_ontario: "/feature17195000589985151010.js",
        alias_js_princeedwardisland: "/feature15915745720853277075.js",
        alias_js_quebec: "/feature14681350131446033243.js",
        alias_js_saskatchewan: "/feature2327300269448446600.js",
        alias_js_yukonterritory: "/feature11794153188303007482.js",
        alias_js_armenia: "/feature9694366917363834311.js",
        alias_js_asiageorgia: "/feature15236701619318097699.js",
        alias_js_azerbaijan: "/feature5392858229782288147.js",
        alias_js_bangladesh: "/feature10829222769798348724.js",
        alias_js_bhutan: "/feature4215637049622858886.js",
        alias_js_brunei: "/feature7823367211295048223.js",
        alias_js_burma: "/feature3955740636391813032.js",
        alias_js_cambodia: "/feature5859050676694015406.js",
        alias_js_china2: "/feature7578117621272601066.js",
        alias_js_easttimor: "/feature13122813762035510987.js",
        alias_js_hongkong: "/feature2663489165265118562.js",
        alias_js_india: "/feature7591686574644540834.js",
        alias_js_indonesia: "/feature640842143631434831.js",
        alias_js_japan: "/feature14496247825991944218.js",
        alias_js_kazakhstan: "/feature13516968068624277857.js",
        alias_js_laos: "/feature1291958967660187346.js",
        alias_js_macau: "/feature14447117440811059044.js",
        alias_js_malaysia: "/feature6032499536838653493.js",
        alias_js_mongolia: "/feature8264539944924531869.js",
        alias_js_nepal: "/feature9997080290287506580.js",
        alias_js_northkorea: "/feature13943078569260906020.js",
        alias_js_philippines: "/feature10867621651067479105.js",
        alias_js_russia: "/feature15115483825066635269.js",
        alias_js_singapore: "/feature947572600315248100.js",
        alias_js_southkorea: "/feature11166586300505252552.js",
        alias_js_srilanka: "/feature16100751492729058457.js",
        alias_js_taiwan: "/feature12382237035290351558.js",
        alias_js_thailand: "/feature15011711052095146146.js",
        alias_js_tibet: "/feature12499057007719830282.js",
        alias_js_vietnam: "/feature6558539626229608243.js",
        alias_js_afghanistan: "/feature14869068949568641882.js",
        alias_js_bahrain: "/feature17995609911886689749.js",
        alias_js_iran: "/feature3632403155090795803.js",
        alias_js_iraq: "/feature11838031524321845411.js",
        alias_js_israel: "/feature16115094592671963853.js",
        alias_js_jordan: "/feature12809897319450310582.js",
        alias_js_kuwait: "/feature11173989966694265191.js",
        alias_js_kyrgyzstan: "/feature8035176939847000677.js",
        alias_js_lebanon: "/feature1284354832068456798.js",
        alias_js_oman: "/feature511260567146398430.js",
        alias_js_pakistan: "/feature6369554879075032644.js",
        alias_js_qatar: "/feature5019591944019102997.js",
        alias_js_saudiarabia: "/feature12892102681494426753.js",
        alias_js_syria: "/feature8612853882586031969.js",
        alias_js_tajikistan: "/feature8121306793073457318.js",
        alias_js_turkmenistan: "/feature10483292414601968191.js",
        alias_js_uae: "/feature7538325398025254761.js",
        alias_js_uzbekistan: "/feature17579276514014629843.js",
        alias_js_yemen: "/feature17257501925141781871.js",
        alias_js_australia: "/feature17579425123015504559.js",
        alias_js_australia2: "/feature3630111324067397431.js",
        alias_js_fiji: "/feature10135172267890435571.js",
        alias_js_kiribati: "/feature1396527790853282277.js",
        alias_js_marshallisland: "/feature13579285708306151803.js",
        alias_js_micronesia: "/feature10507348758339753554.js",
        alias_js_nauru: "/feature11780886489191740037.js",
        alias_js_newcaledonia: "/feature15559124151517505464.js",
        alias_js_newzealand: "/feature10113146997532488994.js",
        alias_js_palau: "/feature16274819433539332560.js",
        alias_js_papuanewguinea: "/feature3085235180085831082.js",
        alias_js_samoa: "/feature16067696601856780857.js",
        alias_js_solomonisland: "/feature10153465329174978094.js",
        alias_js_tonga: "/feature12302353828974801016.js",
        alias_js_tuvalu: "/feature15580037057822409289.js",
        alias_js_vanuatu: "/feature12656758617162017052.js",
        alias_js_algeria: "/feature8244714682987762363.js",
        alias_js_angola: "/feature17334289491850283203.js",
        alias_js_benin: "/feature9833289127412186840.js",
        alias_js_botswana: "/feature6288906749203337335.js",
        alias_js_burkinafaso: "/feature5442012944715148681.js",
        alias_js_burundi: "/feature8655302903487654591.js",
        alias_js_cameroon: "/feature13369657770223324157.js",
        alias_js_capeverde: "/feature18066488643902593493.js",
        alias_js_centralafricanrepublic: "/feature14894861837584814381.js",
        alias_js_chad: "/feature13886549230656174620.js",
        alias_js_comoros: "/feature11291931926811967380.js",
        alias_js_congo: "/feature14914536047536274696.js",
        alias_js_cotedivoire: "/feature4861163442991629649.js",
        alias_js_democraticrepublicofcongo: "/feature18204691923218436252.js",
        alias_js_djibouti: "/feature7523571917893907999.js",
        alias_js_egypt: "/feature11151149729577801407.js",
        alias_js_equatorialguinea: "/feature14146047483576756705.js",
        alias_js_eritrea: "/feature3139328601754375602.js",
        alias_js_ethiopia: "/feature13969000576638674807.js",
        alias_js_gabon: "/feature2643172089004735734.js",
        alias_js_gambia: "/feature460263375808842700.js",
        alias_js_ghana: "/feature2740098509602761003.js",
        alias_js_guinea: "/feature9375571309638321431.js",
        alias_js_guineabissau: "/feature5950670067711810170.js",
        alias_js_kenya: "/feature6438377558416034465.js",
        alias_js_lesotho: "/feature2600796206976215932.js",
        alias_js_liberia: "/feature10035290532688068613.js",
        alias_js_libya: "/feature12028526956501242777.js",
        alias_js_madagascar: "/feature12379851542177765142.js",
        alias_js_madagascarregions: "/feature8657750519996604203.js",
        alias_js_malawi: "/feature938778972754939562.js",
        alias_js_mali: "/feature1022357294200484877.js",
        alias_js_mauritania: "/feature6829462233745253035.js",
        alias_js_mauritius: "/feature11524060979689217380.js",
        alias_js_morocco: "/feature9940505011905969750.js",
        alias_js_mozambique: "/feature15655330687034444575.js",
        alias_js_namibia: "/feature10794382075756258801.js",
        alias_js_niger: "/feature18004897300952463420.js",
        alias_js_nigeria: "/feature4660108030982562985.js",
        alias_js_rwanda: "/feature17780822341923124330.js",
        alias_js_saotomeandprincipe: "/feature2412146526440543121.js",
        alias_js_senegal: "/feature10376406821249700041.js",
        alias_js_seychelles: "/feature1000425361726417401.js",
        alias_js_sierraleone: "/feature9633079929880011570.js",
        alias_js_somalia: "/feature7585867033541903559.js",
        alias_js_southafrica: "/feature4851059884661626243.js",
        alias_js_sudan: "/feature3313863785056299405.js",
        alias_js_swaziland: "/feature2504043821873461458.js",
        alias_js_tanzania: "/feature8180885868456450235.js",
        alias_js_togo: "/feature8891326780457502734.js",
        alias_js_tunisia: "/feature5386561547399836621.js",
        alias_js_uganda: "/feature6547493274669913412.js",
        alias_js_westernsahara: "/feature11246293988115899169.js",
        alias_js_zambia: "/feature7419242267664580215.js",
        alias_js_zimbabwe: "/feature3982752181535968679.js"
    }, AVAILABLE_FEATURES: {
        WORLD: {_javaScript: ["alias_js_world"]},
        WORLD8: {_javaScript: ["alias_js_world8"]},
        WORLD8WITHANTARCTICA: {_javaScript: ["alias_js_world8withantarctica"]},
        WORLDWITHANTARCTICA: {_javaScript: ["alias_js_worldwithantarctica"]},
        WORLDWITHCOUNTRIES: {_javaScript: ["alias_js_worldwithcountries"]},
        EUROPE: {_javaScript: ["alias_js_europe"]},
        NORTHAMERICA: {_javaScript: ["alias_js_northamerica"]},
        CENTRALAMERICA: {_javaScript: ["alias_js_centralamerica"]},
        SOUTHAMERICA: {_javaScript: ["alias_js_southamerica"]},
        ASIA: {_javaScript: ["alias_js_asia"]},
        AFRICA: {_javaScript: ["alias_js_africa"]},
        MIDDLEEAST: {_javaScript: ["alias_js_middleeast"]},
        OCEANIA: {_javaScript: ["alias_js_oceania"]},
        ASIA3: {_javaScript: ["alias_js_asia3"]},
        NORTHAMERICAWOCENTRAL: {_javaScript: ["alias_js_northamericawocentral"]},
        ALABAMA: {_javaScript: ["alias_js_alabama"]},
        ALASKA: {_javaScript: ["alias_js_alaska"]},
        ARIZONA: {_javaScript: ["alias_js_arizona"]},
        ARKANSAS: {_javaScript: ["alias_js_arkansas"]},
        CALIFORNIA: {_javaScript: ["alias_js_california"]},
        COLORADO: {_javaScript: ["alias_js_colorado"]},
        CONNECTICUT: {_javaScript: ["alias_js_connecticut"]},
        DELAWARE: {_javaScript: ["alias_js_delaware"]},
        DISTRICTOFCOLUMBIA: {_javaScript: ["alias_js_districtofcolumbia"]},
        FLORIDA: {_javaScript: ["alias_js_florida"]},
        GEORGIA: {_javaScript: ["alias_js_georgia"]},
        HAWAII: {_javaScript: ["alias_js_hawaii"]},
        IDAHO: {_javaScript: ["alias_js_idaho"]},
        ILLINOIS: {_javaScript: ["alias_js_illinois"]},
        INDIANA: {_javaScript: ["alias_js_indiana"]},
        IOWA: {_javaScript: ["alias_js_iowa"]},
        KANSAS: {_javaScript: ["alias_js_kansas"]},
        KENTUCKY: {_javaScript: ["alias_js_kentucky"]},
        LOUISIANA: {_javaScript: ["alias_js_louisiana"]},
        MAINE: {_javaScript: ["alias_js_maine"]},
        MARYLAND: {_javaScript: ["alias_js_maryland"]},
        MASSACHUSETTS: {_javaScript: ["alias_js_massachusetts"]},
        MICHIGAN: {_javaScript: ["alias_js_michigan"]},
        MINNESOTA: {_javaScript: ["alias_js_minnesota"]},
        MISSISSIPPI: {_javaScript: ["alias_js_mississippi"]},
        MISSOURI: {_javaScript: ["alias_js_missouri"]},
        MONTANA: {_javaScript: ["alias_js_montana"]},
        NEBRASKA: {_javaScript: ["alias_js_nebraska"]},
        NEVADA: {_javaScript: ["alias_js_nevada"]},
        NEWHAMPSHIRE: {_javaScript: ["alias_js_newhampshire"]},
        NEWJERSEY: {_javaScript: ["alias_js_newjersey"]},
        NEWMEXICO: {_javaScript: ["alias_js_newmexico"]},
        NEWYORK: {_javaScript: ["alias_js_newyork"]},
        NORTHCAROLINA: {_javaScript: ["alias_js_northcarolina"]},
        NORTHDAKOTA: {_javaScript: ["alias_js_northdakota"]},
        OHIO: {_javaScript: ["alias_js_ohio"]},
        OKLAHOMA: {_javaScript: ["alias_js_oklahoma"]},
        OREGON: {_javaScript: ["alias_js_oregon"]},
        PENNSYLVANIA: {_javaScript: ["alias_js_pennsylvania"]},
        RHODEISLAND: {_javaScript: ["alias_js_rhodeisland"]},
        SOUTHCAROLINA: {_javaScript: ["alias_js_southcarolina"]},
        SOUTHDAKOTA: {_javaScript: ["alias_js_southdakota"]},
        TENNESSEE: {_javaScript: ["alias_js_tennessee"]},
        TEXAS: {_javaScript: ["alias_js_texas"]},
        USA: {_javaScript: ["alias_js_usa"]},
        UTAH: {_javaScript: ["alias_js_utah"]},
        VERMONT: {_javaScript: ["alias_js_vermont"]},
        VIRGINIA: {_javaScript: ["alias_js_virginia"]},
        WASHINGTON: {_javaScript: ["alias_js_washington"]},
        WESTVIRGINIA: {_javaScript: ["alias_js_westvirginia"]},
        WISCONSIN: {_javaScript: ["alias_js_wisconsin"]},
        WYOMING: {_javaScript: ["alias_js_wyoming"]},
        USACENTRALREGION: {_javaScript: ["alias_js_usacentralregion"]},
        USANORTHEASTREGION: {_javaScript: ["alias_js_usanortheastregion"]},
        USANORTHWESTREGION: {_javaScript: ["alias_js_usanorthwestregion"]},
        USAREGION: {_javaScript: ["alias_js_usaregion"]},
        USASOUTHEASTREGION: {_javaScript: ["alias_js_usasoutheastregion"]},
        USASOUTHWESTREGION: {_javaScript: ["alias_js_usasouthwestregion"]},
        ALBANIA: {_javaScript: ["alias_js_albania"]},
        ANDORRA: {_javaScript: ["alias_js_andorra"]},
        AUSTRIA: {_javaScript: ["alias_js_austria"]},
        BELARUS: {_javaScript: ["alias_js_belarus"]},
        BELGIUM: {_javaScript: ["alias_js_belgium"]},
        BOSNIAHERZEGOVINA: {_javaScript: ["alias_js_bosniaherzegovina"]},
        BULGARIA: {_javaScript: ["alias_js_bulgaria"]},
        CROATIA: {_javaScript: ["alias_js_croatia"]},
        CYPRUS: {_javaScript: ["alias_js_cyprus"]},
        CYPRUS2: {_javaScript: ["alias_js_cyprus2"]},
        CZECHREPUBLIC: {_javaScript: ["alias_js_czechrepublic"]},
        DENMARK: {_javaScript: ["alias_js_denmark"]},
        DENMARKREGION: {_javaScript: ["alias_js_denmarkregion"]},
        ENGLAND: {_javaScript: ["alias_js_england"]},
        ESTONIA: {_javaScript: ["alias_js_estonia"]},
        EUROPE2: {_javaScript: ["alias_js_europe2"]},
        EUROPEWITHCOUNTRIES: {_javaScript: ["alias_js_europewithcountries"]},
        FINLAND: {_javaScript: ["alias_js_finland"]},
        FRANCE: {_javaScript: ["alias_js_france"]},
        FRANCEDEPARTMENT: {_javaScript: ["alias_js_francedepartment"]},
        GERMANY: {_javaScript: ["alias_js_germany"]},
        GREECE: {_javaScript: ["alias_js_greece"]},
        HUNGARY: {_javaScript: ["alias_js_hungary"]},
        HUNGARYREGIONS: {_javaScript: ["alias_js_hungaryregions"]},
        ICELAND: {_javaScript: ["alias_js_iceland"]},
        IRELAND: {_javaScript: ["alias_js_ireland"]},
        ITALY: {_javaScript: ["alias_js_italy"]},
        LATVIA: {_javaScript: ["alias_js_latvia"]},
        LIECHTENSTEIN: {_javaScript: ["alias_js_liechtenstein"]},
        LITHUANIA: {_javaScript: ["alias_js_lithuania"]},
        LUXEMBOURG: {_javaScript: ["alias_js_luxembourg"]},
        MACEDONIA: {_javaScript: ["alias_js_macedonia"]},
        MALTA: {_javaScript: ["alias_js_malta"]},
        MOLDOVA: {_javaScript: ["alias_js_moldova"]},
        MONACO: {_javaScript: ["alias_js_monaco"]},
        MONTENEGRO: {_javaScript: ["alias_js_montenegro"]},
        NETHERLANDS: {_javaScript: ["alias_js_netherlands"]},
        NORWAY: {_javaScript: ["alias_js_norway"]},
        NORWAYREGION: {_javaScript: ["alias_js_norwayregion"]},
        POLAND: {_javaScript: ["alias_js_poland"]},
        POLANDCOUNTIES: {_javaScript: ["alias_js_polandcounties"]},
        PORTUGAL: {_javaScript: ["alias_js_portugal"]},
        ROMANIA: {_javaScript: ["alias_js_romania"]},
        SANMARINO: {_javaScript: ["alias_js_sanmarino"]},
        SCOTLAND: {_javaScript: ["alias_js_scotland"]},
        SERBIA: {_javaScript: ["alias_js_serbia"]},
        SLOVAKIA: {_javaScript: ["alias_js_slovakia"]},
        SLOVENIA: {_javaScript: ["alias_js_slovenia"]},
        SPAIN: {_javaScript: ["alias_js_spain"]},
        SPAINPROVINCES: {_javaScript: ["alias_js_spainprovinces"]},
        SWEDEN: {_javaScript: ["alias_js_sweden"]},
        SWITZERLAND: {_javaScript: ["alias_js_switzerland"]},
        TURKEY: {_javaScript: ["alias_js_turkey"]},
        UK: {_javaScript: ["alias_js_uk"]},
        UKRAINE: {_javaScript: ["alias_js_ukraine"]},
        VATICANCITY: {_javaScript: ["alias_js_vaticancity"]},
        CENTRALEUROPEANREGION: {_javaScript: ["alias_js_centraleuropeanregion"]},
        EASTEUROPEANREGION: {_javaScript: ["alias_js_easteuropeanregion"]},
        EUROPEREGION: {_javaScript: ["alias_js_europeregion"]},
        NORTHEUROPEANREGION: {_javaScript: ["alias_js_northeuropeanregion"]},
        SOUTHEUROPEANREGION: {_javaScript: ["alias_js_southeuropeanregion"]},
        WESTEUROPEANREGION: {_javaScript: ["alias_js_westeuropeanregion"]},
        ENGLANDREGION: {_javaScript: ["alias_js_englandregion"]},
        NORTHERNIRELAND: {_javaScript: ["alias_js_northernireland"]},
        SCOTLANDREGION: {_javaScript: ["alias_js_scotlandregion"]},
        UK7: {_javaScript: ["alias_js_uk7"]},
        WALES: {_javaScript: ["alias_js_wales"]},
        ANTIGUA: {_javaScript: ["alias_js_antigua"]},
        BAHAMAS: {_javaScript: ["alias_js_bahamas"]},
        BARBADOS: {_javaScript: ["alias_js_barbados"]},
        CANADA: {_javaScript: ["alias_js_canada"]},
        CAYMANISLANDS: {_javaScript: ["alias_js_caymanislands"]},
        CUBA: {_javaScript: ["alias_js_cuba"]},
        DOMINICA: {_javaScript: ["alias_js_dominica"]},
        DOMINICANREPUBLIC: {_javaScript: ["alias_js_dominicanrepublic"]},
        GREENLAND: {_javaScript: ["alias_js_greenland"]},
        GRENADA: {_javaScript: ["alias_js_grenada"]},
        HAITI: {_javaScript: ["alias_js_haiti"]},
        JAMAICA: {_javaScript: ["alias_js_jamaica"]},
        MEXICO: {_javaScript: ["alias_js_mexico"]},
        PUERTORICO: {_javaScript: ["alias_js_puertorico"]},
        SAINTKITTSANDNEVIS: {_javaScript: ["alias_js_saintkittsandnevis"]},
        SAINTLUCIA: {_javaScript: ["alias_js_saintlucia"]},
        SAINTVINCENTANDTHEGRENADINES: {_javaScript: ["alias_js_saintvincentandthegrenadines"]},
        TRINIDADANDTOBAGO: {_javaScript: ["alias_js_trinidadandtobago"]},
        ARGENTINA: {_javaScript: ["alias_js_argentina"]},
        BOLIVIA: {_javaScript: ["alias_js_bolivia"]},
        BRAZIL: {_javaScript: ["alias_js_brazil"]},
        BRAZILREGION: {_javaScript: ["alias_js_brazilregion"]},
        CHILE: {_javaScript: ["alias_js_chile"]},
        COLOMBIA: {_javaScript: ["alias_js_colombia"]},
        ECUADOR: {_javaScript: ["alias_js_ecuador"]},
        FALKLANDISLAND: {_javaScript: ["alias_js_falklandisland"]},
        FRENCHGUIANA: {_javaScript: ["alias_js_frenchguiana"]},
        GUYANA: {_javaScript: ["alias_js_guyana"]},
        PARAGUAY: {_javaScript: ["alias_js_paraguay"]},
        PERU: {_javaScript: ["alias_js_peru"]},
        SURINAME: {_javaScript: ["alias_js_suriname"]},
        URUGUAY: {_javaScript: ["alias_js_uruguay"]},
        VENEZUELA: {_javaScript: ["alias_js_venezuela"]},
        BELIZE: {_javaScript: ["alias_js_belize"]},
        CENTRALAMERICA2: {_javaScript: ["alias_js_centralamerica2"]},
        CENTRALAMERICAWITHCARIBBEAN: {_javaScript: ["alias_js_centralamericawithcaribbean"]},
        COSTARICA: {_javaScript: ["alias_js_costarica"]},
        ELSALVADOR: {_javaScript: ["alias_js_elsalvador"]},
        GUATEMALA: {_javaScript: ["alias_js_guatemala"]},
        HONDURAS: {_javaScript: ["alias_js_honduras"]},
        NICARAGUA: {_javaScript: ["alias_js_nicaragua"]},
        PANAMA: {_javaScript: ["alias_js_panama"]},
        ALBERTA: {_javaScript: ["alias_js_alberta"]},
        BRITISHCOLUMBIA: {_javaScript: ["alias_js_britishcolumbia"]},
        MANITOBA: {_javaScript: ["alias_js_manitoba"]},
        NEWBRUNSWICK: {_javaScript: ["alias_js_newbrunswick"]},
        NEWFOUNDLANDANDLABRADOR: {_javaScript: ["alias_js_newfoundlandandlabrador"]},
        NORTHWESTTERRITORIES: {_javaScript: ["alias_js_northwestterritories"]},
        NOVASCOTIA: {_javaScript: ["alias_js_novascotia"]},
        NUNAVUT: {_javaScript: ["alias_js_nunavut"]},
        ONTARIO: {_javaScript: ["alias_js_ontario"]},
        PRINCEEDWARDISLAND: {_javaScript: ["alias_js_princeedwardisland"]},
        QUEBEC: {_javaScript: ["alias_js_quebec"]},
        SASKATCHEWAN: {_javaScript: ["alias_js_saskatchewan"]},
        YUKONTERRITORY: {_javaScript: ["alias_js_yukonterritory"]},
        ARMENIA: {_javaScript: ["alias_js_armenia"]},
        ASIAGEORGIA: {_javaScript: ["alias_js_asiageorgia"]},
        AZERBAIJAN: {_javaScript: ["alias_js_azerbaijan"]},
        BANGLADESH: {_javaScript: ["alias_js_bangladesh"]},
        BHUTAN: {_javaScript: ["alias_js_bhutan"]},
        BRUNEI: {_javaScript: ["alias_js_brunei"]},
        BURMA: {_javaScript: ["alias_js_burma"]},
        CAMBODIA: {_javaScript: ["alias_js_cambodia"]},
        CHINA2: {_javaScript: ["alias_js_china2"]},
        EASTTIMOR: {_javaScript: ["alias_js_easttimor"]},
        HONGKONG: {_javaScript: ["alias_js_hongkong"]},
        INDIA: {_javaScript: ["alias_js_india"]},
        INDONESIA: {_javaScript: ["alias_js_indonesia"]},
        JAPAN: {_javaScript: ["alias_js_japan"]},
        KAZAKHSTAN: {_javaScript: ["alias_js_kazakhstan"]},
        LAOS: {_javaScript: ["alias_js_laos"]},
        MACAU: {_javaScript: ["alias_js_macau"]},
        MALAYSIA: {_javaScript: ["alias_js_malaysia"]},
        MONGOLIA: {_javaScript: ["alias_js_mongolia"]},
        NEPAL: {_javaScript: ["alias_js_nepal"]},
        NORTHKOREA: {_javaScript: ["alias_js_northkorea"]},
        PHILIPPINES: {_javaScript: ["alias_js_philippines"]},
        RUSSIA: {_javaScript: ["alias_js_russia"]},
        SINGAPORE: {_javaScript: ["alias_js_singapore"]},
        SOUTHKOREA: {_javaScript: ["alias_js_southkorea"]},
        SRILANKA: {_javaScript: ["alias_js_srilanka"]},
        TAIWAN: {_javaScript: ["alias_js_taiwan"]},
        THAILAND: {_javaScript: ["alias_js_thailand"]},
        TIBET: {_javaScript: ["alias_js_tibet"]},
        VIETNAM: {_javaScript: ["alias_js_vietnam"]},
        AFGHANISTAN: {_javaScript: ["alias_js_afghanistan"]},
        BAHRAIN: {_javaScript: ["alias_js_bahrain"]},
        IRAN: {_javaScript: ["alias_js_iran"]},
        IRAQ: {_javaScript: ["alias_js_iraq"]},
        ISRAEL: {_javaScript: ["alias_js_israel"]},
        JORDAN: {_javaScript: ["alias_js_jordan"]},
        KUWAIT: {_javaScript: ["alias_js_kuwait"]},
        KYRGYZSTAN: {_javaScript: ["alias_js_kyrgyzstan"]},
        LEBANON: {_javaScript: ["alias_js_lebanon"]},
        OMAN: {_javaScript: ["alias_js_oman"]},
        PAKISTAN: {_javaScript: ["alias_js_pakistan"]},
        QATAR: {_javaScript: ["alias_js_qatar"]},
        SAUDIARABIA: {_javaScript: ["alias_js_saudiarabia"]},
        SYRIA: {_javaScript: ["alias_js_syria"]},
        TAJIKISTAN: {_javaScript: ["alias_js_tajikistan"]},
        TURKMENISTAN: {_javaScript: ["alias_js_turkmenistan"]},
        UAE: {_javaScript: ["alias_js_uae"]},
        UZBEKISTAN: {_javaScript: ["alias_js_uzbekistan"]},
        YEMEN: {_javaScript: ["alias_js_yemen"]},
        AUSTRALIA: {_javaScript: ["alias_js_australia"]},
        AUSTRALIA2: {_javaScript: ["alias_js_australia2"]},
        FIJI: {_javaScript: ["alias_js_fiji"]},
        KIRIBATI: {_javaScript: ["alias_js_kiribati"]},
        MARSHALLISLAND: {_javaScript: ["alias_js_marshallisland"]},
        MICRONESIA: {_javaScript: ["alias_js_micronesia"]},
        NAURU: {_javaScript: ["alias_js_nauru"]},
        NEWCALEDONIA: {_javaScript: ["alias_js_newcaledonia"]},
        NEWZEALAND: {_javaScript: ["alias_js_newzealand"]},
        PALAU: {_javaScript: ["alias_js_palau"]},
        PAPUANEWGUINEA: {_javaScript: ["alias_js_papuanewguinea"]},
        SAMOA: {_javaScript: ["alias_js_samoa"]},
        SOLOMONISLAND: {_javaScript: ["alias_js_solomonisland"]},
        TONGA: {_javaScript: ["alias_js_tonga"]},
        TUVALU: {_javaScript: ["alias_js_tuvalu"]},
        VANUATU: {_javaScript: ["alias_js_vanuatu"]},
        ALGERIA: {_javaScript: ["alias_js_algeria"]},
        ANGOLA: {_javaScript: ["alias_js_angola"]},
        BENIN: {_javaScript: ["alias_js_benin"]},
        BOTSWANA: {_javaScript: ["alias_js_botswana"]},
        BURKINAFASO: {_javaScript: ["alias_js_burkinafaso"]},
        BURUNDI: {_javaScript: ["alias_js_burundi"]},
        CAMEROON: {_javaScript: ["alias_js_cameroon"]},
        CAPEVERDE: {_javaScript: ["alias_js_capeverde"]},
        CENTRALAFRICANREPUBLIC: {_javaScript: ["alias_js_centralafricanrepublic"]},
        CHAD: {_javaScript: ["alias_js_chad"]},
        COMOROS: {_javaScript: ["alias_js_comoros"]},
        CONGO: {_javaScript: ["alias_js_congo"]},
        COTEDIVOIRE: {_javaScript: ["alias_js_cotedivoire"]},
        DEMOCRATICREPUBLICOFCONGO: {_javaScript: ["alias_js_democraticrepublicofcongo"]},
        DJIBOUTI: {_javaScript: ["alias_js_djibouti"]},
        EGYPT: {_javaScript: ["alias_js_egypt"]},
        EQUATORIALGUINEA: {_javaScript: ["alias_js_equatorialguinea"]},
        ERITREA: {_javaScript: ["alias_js_eritrea"]},
        ETHIOPIA: {_javaScript: ["alias_js_ethiopia"]},
        GABON: {_javaScript: ["alias_js_gabon"]},
        GAMBIA: {_javaScript: ["alias_js_gambia"]},
        GHANA: {_javaScript: ["alias_js_ghana"]},
        GUINEA: {_javaScript: ["alias_js_guinea"]},
        GUINEABISSAU: {_javaScript: ["alias_js_guineabissau"]},
        KENYA: {_javaScript: ["alias_js_kenya"]},
        LESOTHO: {_javaScript: ["alias_js_lesotho"]},
        LIBERIA: {_javaScript: ["alias_js_liberia"]},
        LIBYA: {_javaScript: ["alias_js_libya"]},
        MADAGASCAR: {_javaScript: ["alias_js_madagascar"]},
        MADAGASCARREGIONS: {_javaScript: ["alias_js_madagascarregions"]},
        MALAWI: {_javaScript: ["alias_js_malawi"]},
        MALI: {_javaScript: ["alias_js_mali"]},
        MAURITANIA: {_javaScript: ["alias_js_mauritania"]},
        MAURITIUS: {_javaScript: ["alias_js_mauritius"]},
        MOROCCO: {_javaScript: ["alias_js_morocco"]},
        MOZAMBIQUE: {_javaScript: ["alias_js_mozambique"]},
        NAMIBIA: {_javaScript: ["alias_js_namibia"]},
        NIGER: {_javaScript: ["alias_js_niger"]},
        NIGERIA: {_javaScript: ["alias_js_nigeria"]},
        RWANDA: {_javaScript: ["alias_js_rwanda"]},
        SAOTOMEANDPRINCIPE: {_javaScript: ["alias_js_saotomeandprincipe"]},
        SENEGAL: {_javaScript: ["alias_js_senegal"]},
        SEYCHELLES: {_javaScript: ["alias_js_seychelles"]},
        SIERRALEONE: {_javaScript: ["alias_js_sierraleone"]},
        SOMALIA: {_javaScript: ["alias_js_somalia"]},
        SOUTHAFRICA: {_javaScript: ["alias_js_southafrica"]},
        SUDAN: {_javaScript: ["alias_js_sudan"]},
        SWAZILAND: {_javaScript: ["alias_js_swaziland"]},
        TANZANIA: {_javaScript: ["alias_js_tanzania"]},
        TOGO: {_javaScript: ["alias_js_togo"]},
        TUNISIA: {_javaScript: ["alias_js_tunisia"]},
        UGANDA: {_javaScript: ["alias_js_uganda"]},
        WESTERNSAHARA: {_javaScript: ["alias_js_westernsahara"]},
        ZAMBIA: {_javaScript: ["alias_js_zambia"]},
        ZIMBABWE: {_javaScript: ["alias_js_zimbabwe"]}
    }
});
actuate.resource.module.define("actuate.html5charts", {
    _jsPath: "iv/html5charts",
    _jsFiles: new Array("html5charts.js"),
    _noComma: null
});
actuate.resource.module.define("actuate.mousetrap", {
    _jsPath: "iv/mousetrap",
    _jsFiles: new Array("mousetrap.js"),
    _noComma: null
});
actuate.util.Package.define("actuate.iv");
actuate.resource.module.feature.define(actuate.util.Constants.MODULE_NAME_VIEWER, {
    javaScriptAlias: {
        PageBreakDialog: "/feature854610309296499457.js",
        HideShowItemDialog: "/feature9688551020492081651.js",
        AggregationBlock: "/feature1090900298153767952.js",
        ColumnAggregationDialog: "/feature13074693296976268557.js",
        AggregationAccordionDialog: "/feature10414182636417244976.js",
        ShowColumnDialog: "/feature13478686349039318723.js",
        ArrangeColumnDialog: "/feature12420437739657202528.js",
        SimpleExportDataDialog: "/feature8011435349281462234.js",
        ExportReportDialog: "/feature15185026586289225525.js",
        SelectionRenderOption: "/feature11072004384940681856.js",
        CheckboxRenderOption: "/feature9864993158067235319.js",
        TextboxRenderOption: "/feature2846270831600999839.js",
        RadiobuttonRenderOption: "/feature12086086590150459914.js",
        ComboboxRenderOption: "/feature8038076758586521586.js",
        ListRenderOption: "/feature929451067480149477.js",
        RenderOptionGroup: "/feature11367803638583425037.js",
        File: "/feature7656880908568867010.js",
        FileBrowsingDialogBase: "/feature9909885315129283012.js",
        FileBrowsingDialogModel: "/feature11625077840879946708.js",
        SaveFileDialogModel: "/feature13805183870557649371.js",
        SaveFileDialog: "/feature2565414085346272804.js",
        SaveDocumentDialog: "/feature12625378126859557079.js",
        MoveToGroupDialog: "/feature16173378701949686456.js",
        AdvancedSortDialog: "/feature14594361708943777614.js",
        GroupDetailDialog: "/feature15577620988531766387.js",
        ValueDialog: "/feature13254110258277438798.js",
        ConditionalFormattingDialog: "/feature2627162112466376973.js",
        LinkToThisPageDialog: "/feature16912610451720059164.js",
        KeyboardShortcutsDialog: "/feature5082510136760536944.js",
        PrintDialog: "/feature17293950000652961380.js",
        ChartSubTypeDialog: "/feature1393024897836718854.js",
        FlashGadgetTypeDialog: "/feature3748919517874032571.js",
        ColumnDataTypeDialog: "/feature7874398544750685054.js",
        AvailableDataItemDialog: "/feature11116326779428320954.js",
        ChartFormatDialog: "/feature6296378162936668652.js",
        CustomVizFormatDialog: "/feature12259158527249174742.js",
        WarningDialog: "/feature13299212539631327185.js",
        ExceptionDialog: "/feature17160581220841079181.js",
        StylePreviewView: "/feature57039825651002892.js",
        StyleModel: "/feature2908757811855617818.js",
        StyleMenus: "/feature1371818434989802734.js",
        ConditionModel: "/feature2997207570668244770.js",
        ConditionSelectionView: "/feature10373179985285747008.js",
        ConditionalFormattingOperator: "/feature8430857970959510969.js",
        FormattingRule: "/feature9428988142836154326.js",
        Toc: "/feature13233122953630207426.js",
        Parameter: "/feature10616822876695673411.js",
        DataAnalyzerDialog: "/feature8830999120032429381.js",
        FacebookCommentPanel: "/feature3269592357616495587.js"
    }, AVAILABLE_FEATURES: {
        PAGE_BREAK_DIALOG: {
            _javaScript: ["PageBreakDialog"],
            _html: ["PageBreakDialog"],
            _localizedString: ["pageBreakDialog"],
            _cssFiles: new Array("pageBreakDialog.css"),
            _mobileCssFiles: new Array("pageBreakDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.IVPageBreakDialog"]
        },
        HIDESHOW_ITEM_DIALOG: {
            _javaScript: ["HideShowItemDialog"],
            _html: ["HideShowItemDialog"],
            _cssFiles: new Array("hideShowItemDialog.css"),
            _mobileCssFiles: new Array("hideShowItemDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.group.IVHideShowItemDialog"]
        },
        AGGREGATION_DIALOG: {
            _javaScript: ["AggregationBlock", "AggregationAccordionDialog", "ColumnAggregationDialog", "StyleModel"],
            _html: ["ColumnAggregationDialog", "AggregationAccordionDialog"],
            _localizedString: ["columnAggregationDialog"],
            _cssFiles: new Array("columnAggregationDialog.css"),
            _mobileCssFiles: new Array("columnAggregationDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.aggregation.IVColumnAggregationDialog", "actuate.iv.ui.dialog.aggregation.IVAggregationAccordionDialog"]
        },
        SHOW_COLUMN_DIALOG: {
            _javaScript: ["ShowColumnDialog"],
            _html: ["ShowColumnDialog"],
            _cssFiles: new Array("showColumnDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.column.IVShowColumnDialog"]
        },
        MANAGETABLECOLUMN_DIALOG: {
            _javaScript: ["ArrangeColumnDialog"],
            _html: ["ArrangeColumnDialog"],
            _cssFiles: new Array("arrangeColumnDialog.css"),
            _mobileCssFiles: new Array("arrangeColumnDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.column.IVArrangeColumnDialog"]
        },
        EXPORT_DIALOG: {
            _javaScript: ["SimpleExportDataDialog"],
            _html: ["SimpleExportDataDialog"],
            _localizedString: ["SimpleExportDataDialog"],
            _cssFiles: new Array("simpleExportDataDialog.css"),
            _mobileCssFiles: new Array("simpleExportDataDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.IVSimpleExportDataDialog"]
        },
        EXPORTREPORT_DIALOG: {
            _javaScript: ["ExportReportDialog", "SelectionRenderOption", "CheckboxRenderOption", "TextboxRenderOption", "RadiobuttonRenderOption", "ComboboxRenderOption", "ListRenderOption", "RenderOptionGroup"],
            _html: ["ExportReportDialog"],
            _localizedString: ["exportReportDialog"],
            _cssFiles: new Array("exportReportDialog.css"),
            _mobileCssFiles: new Array("exportReportDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.exportReport.IVExportReportDialog"]
        },
        SAVE__DIALOG: {
            _javaScript: ["File", "FileBrowsingDialogBase", "FileBrowsingDialogModel", "SaveFileDialogModel", "SaveFileDialog", "SaveDocumentDialog"],
            _html: ["SaveDialog"],
            _localizedString: ["saveViewDialog", "saveDocumentDialog"],
            _cssFiles: new Array("saveFileDialog.css"),
            _mobileCssFiles: new Array("saveFileDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.file.IVFileBrowsingDialogBase", "actuate.iv.ui.dialog.file.IVSaveFileDialog", "actuate.iv.ui.dialog.file.IVSaveDocumentDialog"]
        },
        GROUP_DIALOG: {
            _javaScript: ["MoveToGroupDialog"],
            _html: ["MoveToGroupDialog"],
            _cssFiles: new Array("moveToGroupDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.column.IVMoveToGroupDialog"]
        },
        ADVANCED_SORT_DIALOG: {
            _javaScript: ["AdvancedSortDialog"],
            _html: ["AdvancedSortDialog"],
            _localizedString: ["advancedSortDialog"],
            _cssFiles: new Array("advancedSortDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.IVAdvancedSortDialog"]
        },
        GROUP_DETAIL_DIALOG: {
            _javaScript: ["GroupDetailDialog"],
            _html: ["GroupDetailDialog"],
            _localizedString: ["groupDetailDialog"],
            _cssFiles: new Array("groupDetailDialog.css"),
            _mobileCssFiles: new Array("groupDetailDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.group.IVGroupDetailDialog"]
        },
        VALUE_DIALOG: {
            _javaScript: ["ValueDialog"],
            _html: ["ValueDialog"],
            _localizedString: ["valueDialog"],
            _cssFiles: new Array("valueDialog.css"),
            _mobileCssFiles: new Array("valueDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.style.IVValueDialog"]
        },
        CONDITIONALFORMATTING_DIALOG: {
            _javaScript: ["ConditionModel", "ConditionalFormattingOperator", "ConditionSelectionView", "StyleMenus", "StyleModel", "StylePreviewView", "FormattingRule", "ConditionalFormattingDialog"],
            _html: ["ConditionalFormattingDialog"],
            _localizedString: ["conditionFormatDialog"],
            _cssFiles: new Array("conditionFormatDialog.css"),
            _mobileCssFiles: new Array("conditionFormatDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.style.IVConditionalFormattingDialog"]
        },
        LINKTOTHISPAGE_DIALOG: {
            _javaScript: ["LinkToThisPageDialog"],
            _html: ["LinkToThisPageDialog"],
            _localizedString: ["linkToThisPageDialog"],
            _cssFiles: new Array("linkToThisPageDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.IVLinkToThisPageDialog"]
        },
        KEYBOARDSHORTCUTS_DIALOG: {
            _javaScript: ["KeyboardShortcutsDialog"],
            _html: ["KeyboardShortcutsDialog"],
            _localizedString: ["KeyboardShortcutsDialog"],
            _classInstance: ["actuate.iv.ui.dialog.IVKeyboardShortcutsDialog"]
        },
        PRINT_DIALOG: {
            _javaScript: ["PrintDialog"],
            _html: ["PrintDialog"],
            _localizedString: ["printDialog"],
            _cssFiles: new Array("printDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.IVPrintDialog"]
        },
        FACEBOOK_COMMENTS_PANEL: {
            _javaScript: ["FacebookCommentPanel"],
            _html: ["FacebookCommentPanel"],
            _localizedString: ["facebookCommentPanel"],
            _classInstance: ["actuate.iv.ui.view.IVFacebookComments"]
        },
        CHART_TYPE_DIALOG: {
            _javaScript: ["ChartSubTypeDialog", "FlashGadgetTypeDialog"],
            _html: ["ChartTypeDialog"],
            _localizedString: ["chartSettingsDialog", "flashGadgetTypeDialog"],
            _cssFiles: new Array("chartSubTypeDialog.css", "flashGadgetTypeDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.chart.IVChartSubTypeDialog", "actuate.iv.ui.dialog.chart.IVFlashGadgetTypeDialog"]
        },
        CHART_CATEGORIES_DIALOG: {
            _javaScript: ["ChartCategoriesDialog"],
            _html: ["ChartCategoriesDialog"],
            _localizedString: ["chartCategoriesDialog"],
            _classInstance: ["actuate.dialog.impl.helper.ChartCategoriesDialog"]
        },
        CHART_SERIES_DIALOG: {
            _javaScript: ["ChartSeriesDialog"],
            _html: ["ChartSeriesDialog"],
            _localizedString: ["chartSeriesDialog"],
            _classInstance: ["actuate.dialog.impl.helper.ChartSeriesDialog"]
        },
        CHART_FORMAT_DIALOG: {
            _javaScript: ["StyleMenus", "StyleModel", "ChartFormatDialog"],
            _html: ["ChartFormatDialog"],
            _localizedString: ["chartFormatDialog"],
            _cssFiles: new Array("chartFormatDialog.css"),
            _mobileCssFiles: new Array("chartFormatDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.chart.IVChartFormatDialog"]
        },
        CUSTOMVIZ_FORMAT_DIALOG: {
            _javaScript: ["StyleMenus", "StyleModel", "CustomVizFormatDialog"],
            _html: ["CustomVizFormatDialog"],
            _localizedString: ["chartFormatDialog"],
            _cssFiles: new Array("chartFormatDialog.css"),
            _mobileCssFiles: new Array("chartFormatDialog_mobile.css"),
            _classInstance: ["actuate.iv.ui.dialog.chart.IVCustomVizFormatDialog"]
        },
        WARN_DIALOG: {
            _javaScript: ["WarningDialog"],
            _html: ["WarningDialog"],
            _localizedString: ["warningDialog"],
            _classInstance: ["actuate.iv.ui.dialog.IVWarningDialog"]
        },
        EXCEPTION_DIALOG: {
            _javaScript: ["ExceptionDialog"],
            _html: ["ExceptionDialog"],
            _cssFiles: new Array("exceptionDialog.css"),
            _classInstance: ["actuate.iv.ui.dialog.IVExceptionDialog"]
        },
        TOC: {_javaScript: ["Toc"], _localizedString: ["toc"]},
        PARAMETER: {_javaScript: ["Parameter"], _localizedString: ["parameter"]},
        COLUMN_DATATYPE_DIALOG: {
            _javaScript: ["ColumnDataTypeDialog"],
            _html: ["ColumnDataTypeDialog"],
            _cssFiles: new Array("columnDataTypeDialog.css"),
            _localizedString: ["columnDataTypeDialog"]
        },
        AVAILABLE_DATAITEM_DIALOG: {
            _javaScript: ["AvailableDataItemDialog"],
            _cssFiles: new Array("availableDataItemDialog.css"),
            _html: ["AvailableDataItemDialog"]
        },
        DATA_ANALYZER_DIALOG: {_javaScript: ["DataAnalyzerDialog"]}
    }
});
actuate.resource.module.define("actuate.viewer", {
    _jsPath: "iv/viewer",
    _jsFiles: new Array("viewer.js"),
    _cssPath: "iv/styles/",
    _cssFiles: new Array("viewer.css"),
    _desktopCssFiles: new Array("viewer_desktop.css"),
    _mobileCssPath: "iv/styles/",
    _mobileCssFiles: new Array("viewer_mobile.css"),
    _localizedStringServlet: "ivresource",
    _localizedString: true,
    _htmlResourcesUri: "ivresource",
    _onAfterHtmlResourcesLoaded: function () {
        actuate.iv.utility.ivZIndex = new actuate.iv.utility.IVZIndex();
        actuate.iv.ui.app.ivMask = new actuate.iv.ui.app.IVMask();
        actuate.iv.ui.app.ivProgressMask = new actuate.iv.ui.app.IVProgressMask();
        var A = document.getElementById(actuate.resource.module.getResourcesContainerId(this._moduleName));
        if (A != null) {
            A.style.display = "inline"
        }
    },
    _publicClasses: {
        "actuate.Viewer": "actuate.viewer.impl.Viewer",
        "actuate.viewer.EventConstants": "actuate.viewer.impl.EventConstants",
        "actuate.viewer.PageContent": "actuate.viewer.impl.PageContent",
        "actuate.viewer.SelectedContent": "actuate.viewer.impl.SelectedContent",
        "actuate.viewer.ViewerException": "actuate.viewer.impl.ViewerException",
        "actuate.viewer.UIOptions": "actuate.viewer.impl.UIOptions",
        "actuate.viewer.ScrollPanel": "actuate.viewer.impl.ScrollPanel",
        "actuate.viewer.BrowserPanel": "actuate.viewer.impl.BrowserPanel",
        "actuate.viewer.UIConfig": "actuate.viewer.impl.UIConfig",
        "actuate.viewer.RenderOptions": "actuate.viewer.impl.RenderOptions",
        "actuate.viewer.HTMLControl": "actuate.viewer.impl.HTMLControl",
        "actuate.viewer.ParameterValue": "actuate.viewer.impl.ParameterValue",
        "actuate.DataService": "actuate.data.impl.DataService",
        "actuate.data.Filter": "actuate.data.impl.Filter",
        "actuate.data.Request": "actuate.data.impl.Request",
        "actuate.data.ResultSet": "actuate.data.impl.ResultSet",
        "actuate.data.Sorter": "actuate.data.impl.Sorter",
        "actuate.data.ReportContent": "actuate.data.impl.ReportContent",
        "actuate.report.Chart": "actuate.report.impl.Chart",
        "actuate.report.Crosstab": "actuate.report.impl.Crosstab",
        "actuate.report.DataItem": "actuate.report.impl.DataItem",
        "actuate.report.FlashObject": "actuate.report.impl.FlashObject",
        "actuate.report.Gadget": "actuate.report.impl.Gadget",
        "actuate.report.Label": "actuate.report.impl.Label",
        "actuate.report.Table": "actuate.report.impl.Table",
        "actuate.report.TextItem": "actuate.report.impl.TextItem",
        "actuate.viewer.Chart": "actuate.report.impl.Chart",
        "actuate.viewer.DataItem": "actuate.report.impl.DataItem",
        "actuate.viewer.FlashObject": "actuate.report.impl.FlashObject",
        "actuate.viewer.Gadget": "actuate.report.impl.Gadget",
        "actuate.viewer.Label": "actuate.report.impl.Label",
        "actuate.viewer.Table": "actuate.report.impl.Table",
        "actuate.viewer.TextItem": "actuate.report.impl.TextItem",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.selector", {
    _jsPath: "iv/selector", _jsFiles: new Array("selector.js"), _publicClasses: {
        "actuate.selector.GlobalFilterList": "actuate.selector.impl.GlobalFilterList",
        "actuate.selector.List": "actuate.selector.impl.List",
        "actuate.selector.ComboBox": "actuate.selector.impl.ComboBox",
        "actuate.selector.CheckBoxes": "actuate.selector.impl.CheckBoxes",
        "actuate.selector.RadioBoxes": "actuate.selector.impl.RadioBoxes",
        "actuate.selector.ComboSelectorGroup": "actuate.selector.impl.ComboSelectorGroup",
        "actuate.selector.ListSelectorGroup": "actuate.selector.impl.ListSelectorGroup",
        "actuate.selector.Slider": "actuate.selector.impl.Slider",
        "actuate.selector.StringSlider": "actuate.selector.impl.StringSlider",
        "actuate.selector.EventConstants": "actuate.selector.impl.EventConstants",
        "actuate.selector.DatePicker": "actuate.selector.impl.DatePicker",
        "actuate.selector.TreeSelector": "actuate.selector.impl.TreeSelector",
        "actuate.selector.dashboard.RadioBoxes": "actuate.selector.dashboard.impl.RadioBoxes",
        "actuate.selector.dashboard.CheckBoxes": "actuate.selector.dashboard.impl.CheckBoxes",
        "actuate.selector.dashboard.ComboBox": "actuate.selector.dashboard.impl.ComboBox",
        "actuate.selector.dashboard.ComboSelectorGroup": "actuate.selector.dashboard.impl.ComboSelectorGroup",
        "actuate.selector.dashboard.List": "actuate.selector.dashboard.impl.List",
        "actuate.selector.dashboard.ListSelectorGroup": "actuate.selector.dashboard.impl.ListSelectorGroup",
        "actuate.selector.dashboard.Slider": "actuate.selector.dashboard.impl.Slider",
        noClass: null
    }, _cssPath: "iportal/jsapi/actuate/selector/styles/", _cssFiles: new Array("selector.css"), _noComma: null
});
actuate.resource.module.define("actuate.applybutton", {
    _jsPath: "iv/applybutton",
    _jsFiles: new Array("applybutton.js"),
    _publicClasses: {"actuate.applybutton.EventConstants": "actuate.applybutton.impl.EventConstants", noClass: null},
    _noComma: null
});
actuate.util.Package.define("actuate.dialog");
actuate.resource.module.feature.define("actuate.dialog", {
    javaScriptAlias: {
        LoginDialog: "/feature9782603784471568718.js",
        alias_js_loginDialog: "/feature16042759183027986915.js",
        CalendarDialog: "/feature1491882501851141997.js",
        alias_js_calendarDialog: "/feature17706374112196437817.js",
        AdvancedFilterDialog: "/feature13166462632482932443.js",
        GadgetBuilderFilterTab: "/feature15997966572015948133.js",
        FilterManager: "/feature15404501253866422084.js",
        SelectedFilterDialog: "/feature11545962463165810628.js",
        TopBottomNDialog: "/feature7544678221569339900.js",
        ChartFilterDialog: "/feature887906798793741875.js",
        CalculationDialog: "/feature14926501537624038361.js",
        FilePickerDialog: "/feature2726213268696855444.js",
        ChartCategoriesDialog: "/feature14066308768813624024.js",
        ChartSeriesDialog: "/feature2460541441328864305.js",
        alias_StylePreviewView: "/feature15735738961626494811.js",
        alias_StyleModel: "/feature9818738120606204446.js",
        alias_StyleMenus: "/feature16858290124469672569.js",
        StyleSelectionView: "/feature12155341488689240732.js",
        FontDialog: "/feature15834623981457200446.js",
        alias_js_fontDialog: "/feature1318807887331340334.js",
        FontDialogEx: "/feature10209587530069273565.js",
        alias_js_fontDialogEx: "/feature15753661361293668617.js",
        alias_js_advancedFilterDialog: "/feature17168869615518588313.js",
        alias_js_gadgetBuilderFilterDialog: "/feature12097574075637975377.js",
        alias_js_selectedFilterDialog: "/feature10483671320622011836.js",
        alias_js_topBottomNDialog: "/feature18046743920609691502.js",
        alias_js_chartFilterDialog: "/feature16514266126476058764.js",
        alias_js_chartCategoriesDialog: "/feature9123067717189960257.js",
        alias_js_calculationDialog: "/feature10682886200099890069.js",
        alias_js_filePickerDialog: "/feature15271450388958917266.js",
        alias_js_chartSeriesDialog: "/feature3128413711033028345.js",
        alias_stringFormattingDialog: "/feature2643981178825821147.js",
        alias_js_stringFormattingDialog: "/feature1716242926830622259.js",
        alias_numberFormattingDialog: "/feature13565196427080585254.js",
        alias_js_numberFormattingDialog: "/feature16459539439537748300.js",
        alias_dateFormattingDialog: "/feature9395742459608587660.js",
        alias_js_dateFormattingDialog: "/feature15118330016047477389.js",
        alias_dateTimeFormattingDialog: "/feature17266830642525515259.js",
        alias_js_dateTimeFormattingDialog: "/feature11504875955926611568.js",
        alias_timeFormattingDialog: "/feature564612055580417691.js",
        alias_js_timeFormattingDialog: "/feature289967274018043647.js",
        alias_booleanFormattingDialog: "/feature15193623126375161647.js",
        alias_js_booleanFormattingDialog: "/feature3965732316191471968.js",
        ChartBuilderDialog: "/feature1349454276829311983.js",
        alias_js_chartBuilderDialog: "/feature10410490081928748134.js",
        MeterFormatTab: "/feature16727947210934617707.js",
        alias_js_meterFormatDialog: "/feature6413609059399956153.js",
        MeterResponsiveFormatTab: "/feature12047869841798614844.js",
        alias_js_meterResponsiveFormatDialog: "/feature9915029110147075314.js",
        MeterDataTab: "/feature13346576204568884394.js",
        alias_js_meterDataDialog: "/feature10158908903097287963.js",
        BulletDataTab: "/feature16175918131914768871.js",
        SparkLineDataTab: "/feature7331638438282422289.js",
        alias_js_bulletDataDialog: "/feature523147393137464233.js",
        alias_js_sparkLineDataDialog: "/feature4070005617523202488.js",
        LinearGaugeFormatTab: "/feature16638120982987211755.js",
        LinearGaugeResponsiveFormatTab: "/feature7995908427460825984.js",
        alias_js_linearGaugeFormatDialog: "/feature17142334282621409189.js",
        alias_js_linearGaugeResponsiveFormatDialog: "/feature6958711998393785293.js",
        SparkLineFormatTab: "/feature4275043456439692404.js",
        alias_js_sparkLineFormatDialog: "/feature409117689395328064.js",
        SparkLineResponsiveFormatTab: "/feature13621856382080192733.js",
        alias_js_sparkLineResponsiveFormatDialog: "/feature13698998436506337088.js",
        BulletFormatTab: "/feature17259881735089274303.js",
        BulletResponsiveFormatTab: "/feature5622058871923356138.js",
        alias_js_bulletFormatDialog: "/feature1586791665877087165.js",
        alias_js_bulletResponsiveFormatDialog: "/feature18091275572602066198.js",
        CylinderFormatTab: "/feature609970396854118042.js",
        alias_js_cylinderFormatDialog: "/feature6092015269541002983.js",
        CylinderResponsiveFormatTab: "/feature4100204596797964617.js",
        alias_js_cylinderResponsiveFormatDialog: "/feature2194949387968629410.js",
        ThermometerFormatTab: "/feature3625586118884738369.js",
        alias_js_thermometerFormatDialog: "/feature10946476574947200045.js",
        ThermometerResponsiveFormatTab: "/feature18320026358592499886.js",
        alias_js_thermometerResponsiveFormatDialog: "/feature16036785354766912132.js",
        FlashGadgetTypeTab: "/feature14888569951779329802.js",
        alias_js_flashGadgetTypeDialog: "/feature7046923204203098968.js",
        FlashGadgetBuilder: "/feature4151591273192810768.js",
        alias_js_flashGadgetBuilderDialog: "/feature10839184616169718038.js",
        ChartTypeTab: "/feature16238526581346441404.js",
        alias_js_chartTypeDialog: "/feature2633965105692224310.js",
        ChartWithAxisDataTab: "/feature2132727442603823624.js",
        alias_js_chartWithAxisDataTab: "/feature3115854959254492304.js",
        ChartWoAxisDataTab: "/feature1904090475071821097.js",
        alias_js_chartWoAxisDataTab: "/feature13760422985745287129.js",
        ParentChartWithAxisDataTab: "/feature17720670864023506960.js",
        BubbleChartWithAxisDataTab: "/feature911528430746176669.js",
        alias_js_bubbleChartWithAxisDataTab: "/feature2817961054654995115.js",
        DifferenceChartWithAxisDataTab: "/feature8214086701427283517.js",
        alias_js_differenceChartWithAxisDataTab: "/feature12337439833814592358.js",
        GanttChartWithAxisDataTab: "/feature16903863730005285358.js",
        alias_js_ganttChartWithAxisDataTab: "/feature4674118406038427520.js",
        StockChartWithAxisDataTab: "/feature17576055926663421252.js",
        alias_js_stockChartWithAxisDataTab: "/feature2129325284751818671.js",
        RadarChartWoAxisDataTab: "/feature9495104906862070843.js",
        alias_js_radarChartWoAxisDataTab: "/feature10551319344351527286.js",
        HistogramChartWithAxisDataTab: "/feature16372779158984115219.js",
        alias_js_histogramChartWithAxisDataTab: "/feature1574216896907827758.js",
        TreemapChartWoAxisDataTab: "/feature9592402270421602216.js",
        alias_js_treemapChartWoAxisDataTab: "/feature9481880196906028333.js",
        HeatmapChartWithAxisDataTab: "/feature16023702281162863232.js",
        alias_js_heatmapChartWithAxisDataTab: "/feature5380674914522180235.js",
        ColumnChartFormatTab: "/feature5913337935274786146.js",
        alias_js_columnChartFormatDialog: "/feature7402450487321520401.js",
        ScatterChartFormatTab: "/feature14714185563469090286.js",
        alias_js_scatterChartFormatDialog: "/feature2762811140854340104.js",
        AreaChartFormatTab: "/feature1422596978960555217.js",
        alias_js_areaChartFormatDialog: "/feature3345211780951663237.js",
        BubbleChartFormatTab: "/feature13962134432927321806.js",
        alias_js_bubbleChartFormatDialog: "/feature15831513439704995056.js",
        ApplyButtonBuilder: "/feature15513781320734546791.js",
        alias_js_applyButtonDialog: "/feature16931025744272650418.js",
        ApplyButtonFormatTab: "/feature1102670329822557938.js",
        alias_js_applyButtonFormatDialog: "/feature575812543000371377.js",
        DifferenceChartFormatTab: "/feature13194736074148634200.js",
        alias_js_differenceChartFormatDialog: "/feature3015059599605035079.js",
        GanttChartFormatTab: "/feature3723156312950475304.js",
        alias_js_ganttChartFormatDialog: "/feature11751803676575320336.js",
        StockChartFormatTab: "/feature971951594156568070.js",
        alias_js_stockChartFormatDialog: "/feature16827898332199571754.js",
        PyramidChartFormatTab: "/feature11103706741307161234.js",
        alias_js_pyramidChartFormatDialog: "/feature1567882953078749261.js",
        RadarChartFormatTab: "/feature16427049266581417736.js",
        alias_js_radarChartFormatDialog: "/feature6219064320990925080.js",
        MeterChartFormatTab: "/feature9957046846222743809.js",
        alias_js_meterChartFormatDialog: "/feature9648216911761858842.js",
        HistogramChartFormatTab: "/feature9916855887234136418.js",
        alias_js_histogramChartFormatDialog: "/feature11260302668592881871.js",
        HeatmapChartFormatTab: "/feature8963905780848724113.js",
        alias_js_heatmapChartFormatDialog: "/feature7455943801515472495.js",
        TreemapChartFormatTab: "/feature12905644444508029291.js",
        alias_js_treemapChartFormatDialog: "/feature18384487473234929577.js",
        SelectorBuilder: "/feature9754420030443067166.js",
        ReportLibraryBuilder: "/feature17992927188882528287.js",
        alias_js_selectorDialog: "/feature10414854773929530216.js",
        alias_js_reportLibraryDialog: "/feature15098339682466306049.js",
        SelectorDataTab: "/feature13360202330310337084.js",
        alias_js_selectorDataDialog: "/feature814501841945985714.js",
        MultiSelectorDataTab: "/feature15551515642878440228.js",
        alias_js_multiSelectorDataDialog: "/feature3850686059793858776.js",
        SelectorDataVersionTab: "/feature1618640789435147243.js",
        alias_js_selectorDataVersionDialog: "/feature14265514744947476693.js",
        ReportLibraryDataTab: "/feature16639025288175639478.js",
        alias_js_reportLibraryDataDialog: "/feature3132964229380969478.js",
        SelectorTypeTab: "/feature6406551858044836658.js",
        MultiSelectorTypeTab: "/feature7469924441975950659.js",
        alias_js_selectorTypeDialog: "/feature5813020692299611059.js",
        alias_js_multiSelectorTypeDialog: "/feature1655264680287440359.js",
        SelectorSliderFormatTab: "/feature3926599987683025606.js",
        alias_js_selectorSliderFormatDialog: "/feature2403679713128779800.js",
        MultiSelectorFormatTab: "/feature18074989661085745051.js",
        alias_js_multiSelectorFormatDialog: "/feature8777604927529592554.js",
        SelectorListFormatTab: "/feature4422060747130130432.js",
        alias_js_selectorListFormatDialog: "/feature17451539899619748299.js",
        SelectorDropdownFormatTab: "/feature15469445067649090175.js",
        alias_js_selectorDropdownFormatDialog: "/feature5429949902250666100.js",
        SelectorCheckboxFormatTab: "/feature4149851798008093100.js",
        alias_js_selectorCheckboxFormatDialog: "/feature9841434083300965342.js",
        SelectorRadioFormatTab: "/feature5404022544601648112.js",
        alias_js_selectorRadioFormatDialog: "/feature1364362166160370922.js",
        SelectorCalendarFormatTab: "/feature6249216495678785561.js",
        alias_js_selectorCalendarFormatDialog: "/feature13698037311102954820.js",
        PieChartFormatTab: "/feature11230873769030649534.js",
        alias_js_pieChartFormatDialog: "/feature12672253136433308014.js",
        LineChartFormatTab: "/feature8791822665971129006.js",
        alias_js_lineChartFormatDialog: "/feature13781858730136212900.js",
        BarChartFormatTab: "/feature7530996153932678995.js",
        alias_js_barChartFormatDialog: "/feature18191180444258479732.js",
        DoughnutChartFormatTab: "/feature14790491841422895482.js",
        alias_js_doughnutChartFormatDialog: "/feature3444708137040251483.js",
        SummaryTableDataTab: "/feature18142778170730746126.js",
        SummaryTableFormatTab: "/feature2701038671719173588.js",
        alias_js_summaryTableDataDialog: "/feature16034305110036293822.js",
        alias_js_summaryTableFormatDialog: "/feature725727821776886017.js",
        SummaryTableBuilder: "/feature13344792585145632016.js",
        alias_js_summaryTableBuilderDialog: "/feature11197182895220486188.js",
        CrosstabDataTab: "/feature1779198469874901021.js",
        alias_js_crosstabDataDialog: "/feature358460388320274382.js",
        CrosstabFormatTab: "/feature14041726040447684684.js",
        alias_js_crosstabFormatDialog: "/feature13463319461034019578.js",
        CrosstabBuilder: "/feature9311660313583211300.js",
        alias_js_crosstabBuilderDialog: "/feature1884909391670344188.js",
        CrosstabDateGroupingDialog: "/feature17060621674126350705.js",
        ManageDataDialog: "/feature9552521947913219085.js",
        alias_js_ManageDataDialog: "/feature13211953640296091188.js",
        DetailsDialog: "/feature11196649559887226733.js",
        ColumnListDialog: "/feature5702587624669069184.js",
        alias_js_columnListDialog: "/feature6445302685772823197.js",
        FlashGadgetFormatDialog: "/feature7155409374521993967.js",
        alias_js_flashGadgetFormatDialog: "/feature13196920790482632860.js",
        GenericPropsTab: "/feature15714094802909113286.js",
        alias_js_genericPropsDialog: "/feature9875253968683846318.js",
        FlexComponentBuilder: "/feature8063231318287215289.js",
        alias_js_flexcomponentBuilderDialog: "/feature2949546902385998753.js",
        FlexTableFormatTab: "/feature14683732102149576019.js",
        alias_js_flexTableFormatDialog: "/feature14018386348251130761.js",
        FlexComponentDataTab: "/feature11876961936374977170.js",
        alias_js_flexcomponentDataDialog: "/feature14272449665431480540.js",
        FlexCrosstabFormatTab: "/feature13868366086610591228.js",
        alias_js_flexCrosstabFormatDialog: "/feature5445961340670360661.js",
        FlexCrosstabDataTab: "/feature959285350551788611.js",
        alias_js_flexCrosstabDataDialog: "/feature772193322123456337.js",
        HyperlinkBuilderDialog: "/feature7931601983190215033.js",
        alias_js_hyperlinkBuilderDialog: "/feature4773435657145401317.js",
        SingleMetricDataTab: "/feature13007081675420217486.js",
        SingleMetricFormatTab: "/feature18263981367409298420.js",
        SingleMetricBuilder: "/feature11102508297625070781.js",
        alias_js_singleMetricDataDialog: "/feature6062132323894638897.js",
        alias_js_singleMetricFormatDialog: "/feature49972834020633256.js",
        alias_js_singleMetricBuilderDialog: "/feature1872425283537175274.js",
        MapFormatTab: "/feature4702724594002688875.js",
        MapCollectionTab: "/feature16772538054466647638.js",
        MapDataTab: "/feature13707182996167858293.js",
        alias_js_mapFormatDialog: "/feature8095322391037807986.js",
        alias_js_mapCollectionDialog: "/feature13887061750222412858.js",
        alias_js_mapDataDialog: "/feature275826893636126634.js",
        CustomVizDataTab: "/feature2226810998167117712.js",
        CustomVizFormatTab: "/feature11082803063842950875.js",
        CustomVizBuilder: "/feature14260503616441350437.js",
        alias_js_customVizDataDialog: "/feature6176452805309715424.js",
        alias_js_customVizFormatDialog: "/feature10939410657461915701.js",
        alias_js_customVizBuilderDialog: "/feature6123893427181241826.js"
    }, AVAILABLE_FEATURES: {
        LOGIN_DIALOG: {
            _javaScript: ["LoginDialog", "alias_js_loginDialog"],
            _localizedString: ["loginDialog", "baseDialog"],
            _classInstance: ["actuate.dialog.impl.helper.LoginDialog", "actuate.dialog.LoginDialog"],
            _publicClasses: {"actuate.dialog.LoginDialog": "actuate.dialog.impl.LoginDialog", noClass: null}
        },
        FONT_DIALOG: {
            _javaScript: ["alias_StyleMenus", "alias_StyleModel", "alias_StylePreviewView", "StyleSelectionView", "FontDialog", "alias_js_fontDialog"],
            _localizedString: ["conditionFormatDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.font.FontDialog", "actuate.dialog.FontDialog"],
            _staticFunctions: ["getInstance"],
            _cssFiles: new Array("fontDialog.css"),
            _mobileCssFiles: new Array("fontDialog_mobile.css"),
            _publicClasses: {"actuate.dialog.FontDialog": "actuate.dialog.impl.FontDialog", noClass: null}
        },
        COLUMNLIST_DIALOG: {
            _javaScript: ["ColumnListDialog", "alias_js_columnListDialog"],
            _localizedString: ["columnListDialog"],
            _classInstance: ["actuate.dialog.impl.helper.ColumnListDialog", "actuate.dialog.ColumnListDialog"],
            _entryPoint: "actuate.dialog.ColumnListDialog",
            _mobileCssFiles: new Array("columnListDialog_mobile.css"),
            _publicClasses: {"actuate.dialog.ColumnListDialog": "actuate.dialog.impl.ColumnListDialog", noClass: null}
        },
        FLASHGADGET_FORMAT_DIALOG: {
            _javaScript: ["FlashGadgetFormatDialog", "alias_js_flashGadgetFormatDialog"],
            _localizedString: ["FlashGadgetFormatDialog"],
            _classInstance: ["actuate.dialog.impl.helper.flashgadget.FlashGadgetFormatDialog", "actuate.dialog.FlashGadgetFormatDialog"],
            _entryPoint: "actuate.dialog.FlashGadgetFormatDialog",
            _publicClasses: {
                "actuate.dialog.FlashGadgetFormatDialog": "actuate.dialog.impl.flashgadget.FlashGadgetFormatDialog",
                noClass: null
            }
        },
        FONT_DIALOG_EX: {
            _javaScript: ["alias_StyleMenus", "alias_StyleModel", "alias_StylePreviewView", "StyleSelectionView", "FontDialogEx", "alias_js_fontDialogEx"],
            _html: ["FontDialogEx"],
            _localizedString: ["conditionFormatDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.font.FontDialogEx", "actuate.dialog.font.FontDialogEx"],
            _entryPoint: "actuate.dialog.font.FontDialogEx",
            _cssFiles: new Array("fontDialogEx.css"),
            _publicClasses: {"actuate.dialog.font.FontDialogEx": "actuate.dialog.impl.font.FontDialogEx", noClass: null}
        },
        CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ChartWithAxisDataTab", "alias_js_chartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.ChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.ChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.ChartWithAxisDataDialog",
                noClass: null
            }
        },
        HISTOGRAM_CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ParentChartWithAxisDataTab", "HistogramChartWithAxisDataTab", "alias_js_histogramChartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.HistogramChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.HistogramChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.HistogramChartWithAxisDataDialog",
                noClass: null
            },
            _hasDependency: true
        },
        HEATMAP_CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ParentChartWithAxisDataTab", "alias_js_heatmapChartWithAxisDataTab", "HeatmapChartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.HeatmapChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.HeatMapChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.HeatMapChartWithAxisDataDialog",
                noClass: null
            }
        },
        BUBBLE_CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ParentChartWithAxisDataTab", "BubbleChartWithAxisDataTab", "alias_js_bubbleChartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.BubbleChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.BubbleChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.BubbleChartWithAxisDataDialog",
                noClass: null
            },
            _hasDependency: true
        },
        DIFFERENCE_CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ParentChartWithAxisDataTab", "DifferenceChartWithAxisDataTab", "alias_js_differenceChartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.DifferenceChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.DifferenceChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.DifferenceChartWithAxisDataDialog",
                noClass: null
            },
            _hasDependency: true
        },
        GANTT_CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ParentChartWithAxisDataTab", "GanttChartWithAxisDataTab", "alias_js_ganttChartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.GanttChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.GanttChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.GanttChartWithAxisDataDialog",
                noClass: null
            },
            _hasDependency: true
        },
        STOCK_CHART_DATA_TAB_WITHAXIS_DIALOG: {
            _javaScript: ["ParentChartWithAxisDataTab", "StockChartWithAxisDataTab", "alias_js_stockChartWithAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.StockChartWithAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.StockChartWithAxisDataDialog": "actuate.dialog.impl.chartbuilder.StockChartWithAxisDataDialog",
                noClass: null
            },
            _hasDependency: true
        },
        CHART_DATA_TAB_WOAXIS_DIALOG: {
            _javaScript: ["ChartWoAxisDataTab", "alias_js_chartWoAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.ChartWoAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.ChartWoAxisDataDialog": "actuate.dialog.impl.chartbuilder.ChartWoAxisDataDialog",
                noClass: null
            }
        },
        RADAR_CHART_DATA_TAB_WOAXIS_DIALOG: {
            _javaScript: ["RadarChartWoAxisDataTab", "alias_js_radarChartWoAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.RadarChartWoAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.RadarChartWoAxisDataDialog": "actuate.dialog.impl.chartbuilder.RadarChartWoAxisDataDialog",
                noClass: null
            }
        },
        TREEMAP_CHART_DATA_TAB_WOAXIS_DIALOG: {
            _javaScript: ["TreemapChartWoAxisDataTab", "alias_js_treemapChartWoAxisDataTab"],
            _localizedString: ["chartBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.TreemapChartWoAxisDataTab"],
            _publicClasses: {
                "actuate.dialog.TreemapChartWoAxisDataDialog": "actuate.dialog.impl.chartbuilder.TreemapChartWoAxisDataDialog",
                noClass: null
            },
            _hasDependency: true
        },
        GENERIC_PROPS_TAB_DIALOG: {
            _javaScript: ["GenericPropsTab", "alias_js_genericPropsDialog"],
            _classInstance: ["actuate.dialog.impl.helper.GenericPropsTab"],
            _publicClasses: {
                "actuate.dialog.GenericPropsDialog": "actuate.dialog.impl.GenericPropsDialog",
                noClass: null
            }
        },
        CHART_TYPE_TAB_DIALOG: {
            _javaScript: ["alias_js_chartTypeDialog", "ChartTypeTab"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.ChartTypeTab"],
            _publicClasses: {
                "actuate.dialog.ChartTypeDialog": "actuate.dialog.impl.chartbuilder.ChartTypeDialog",
                noClass: null
            }
        },
        COLUMN_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_columnChartFormatDialog", "ColumnChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.ColumnChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.ColumnChartFormatDialog": "actuate.dialog.impl.chartbuilder.ColumnChartFormatDialog",
                noClass: null
            }
        },
        PIE_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_pieChartFormatDialog", "PieChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.PieChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.PieChartFormatDialog": "actuate.dialog.impl.chartbuilder.PieChartFormatDialog",
                noClass: null
            }
        },
        LINE_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_lineChartFormatDialog", "LineChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.LineChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.LineChartFormatDialog": "actuate.dialog.impl.chartbuilder.LineChartFormatDialog",
                noClass: null
            }
        },
        BAR_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_barChartFormatDialog", "BarChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.BarChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.BarChartFormatDialog": "actuate.dialog.impl.chartbuilder.BarChartFormatDialog",
                noClass: null
            }
        },
        DOUGHNUT_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_doughnutChartFormatDialog", "DoughnutChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.DoughnutChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.DoughnutChartFormatDialog": "actuate.dialog.impl.chartbuilder.DoughnutChartFormatDialog",
                noClass: null
            }
        },
        SCATTER_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_scatterChartFormatDialog", "ScatterChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.ScatterChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.ScatterChartFormatDialog": "actuate.dialog.impl.chartbuilder.ScatterChartFormatDialog",
                noClass: null
            }
        },
        AREA_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_areaChartFormatDialog", "AreaChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.AreaChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.AreaChartFormatDialog": "actuate.dialog.impl.chartbuilder.AreaChartFormatDialog",
                noClass: null
            }
        },
        BUBBLE_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_bubbleChartFormatDialog", "BubbleChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.BubbleChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.BubbleChartFormatDialog": "actuate.dialog.impl.chartbuilder.BubbleChartFormatDialog",
                noClass: null
            }
        },
        DIFFERENCE_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_differenceChartFormatDialog", "DifferenceChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.DifferenceChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.DifferenceChartFormatDialog": "actuate.dialog.impl.chartbuilder.DifferenceChartFormatDialog",
                noClass: null
            }
        },
        GANTT_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_ganttChartFormatDialog", "GanttChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.GanttChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.GanttChartFormatDialog": "actuate.dialog.impl.chartbuilder.GanttChartFormatDialog",
                noClass: null
            }
        },
        STOCK_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_stockChartFormatDialog", "StockChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.StockChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.StockChartFormatDialog": "actuate.dialog.impl.chartbuilder.StockChartFormatDialog",
                noClass: null
            }
        },
        HISTOGRAM_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_histogramChartFormatDialog", "HistogramChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.HistogramChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.HistogramChartFormatDialog": "actuate.dialog.impl.chartbuilder.HistogramChartFormatDialog",
                noClass: null
            }
        },
        HEATMAP_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_heatmapChartFormatDialog", "HeatmapChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.HeatmapChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.HeatmapChartFormatDialog": "actuate.dialog.impl.chartbuilder.HeatmapChartFormatDialog",
                noClass: null
            }
        },
        TREEMAP_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_treemapChartFormatDialog", "TreemapChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.TreemapChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.TreeMapChartFormatDialog": "actuate.dialog.impl.chartbuilder.TreeMapChartFormatDialog",
                noClass: null
            }
        },
        PYRAMID_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_pyramidChartFormatDialog", "PyramidChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.PyramidChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.PyramidChartFormatDialog": "actuate.dialog.impl.chartbuilder.PyramidChartFormatDialog",
                noClass: null
            }
        },
        RADAR_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_radarChartFormatDialog", "RadarChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.RadarChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.RadarChartFormatDialog": "actuate.dialog.impl.chartbuilder.RadarChartFormatDialog",
                noClass: null
            }
        },
        METER_CHART_FORMAT_TAB_DIALOG: {
            _javaScript: ["alias_js_meterChartFormatDialog", "MeterChartFormatTab", "alias_StyleModel"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.MeterChartFormatTab"],
            _publicClasses: {
                "actuate.dialog.MeterChartFormatDialog": "actuate.dialog.impl.chartbuilder.MeterChartFormatDialog",
                noClass: null
            }
        },
        CHART_BUILDER_DIALOG: {
            _javaScript: ["ChartBuilderDialog", "alias_js_chartBuilderDialog"],
            _localizedString: ["chartBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.chartbuilder.ChartBuilder", "actuate.dialog.ChartBuilderDialog"],
            _entryPoint: "actuate.dialog.ChartBuilderDialog",
            _publicClasses: {
                "actuate.dialog.ChartBuilderDialog": "actuate.dialog.impl.chartbuilder.ChartBuilderDialog",
                noClass: null
            }
        },
        FLASHGADGET_BUILDER_DIALOG: {
            _javaScript: ["FlashGadgetBuilder", "alias_js_flashGadgetBuilderDialog"],
            _localizedString: ["flashGadgetBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.FlashGadgetBuilder", "actuate.dialog.FlashGadgetBuilderDialog"],
            _entryPoint: "actuate.dialog.FlashGadgetBuilderDialog",
            _publicClasses: {
                "actuate.dialog.FlashGadgetBuilderDialog": "actuate.dialog.impl.gadgetbuilder.FlashGadgetBuilderDialog",
                noClass: null
            }
        },
        METER_FORMAT_TAB: {
            _javaScript: ["MeterFormatTab", "alias_js_meterFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.MeterFormatTab"],
            _publicClasses: {
                "actuate.dialog.MeterFormatDialog": "actuate.dialog.impl.gadgetbuilder.MeterFormatDialog",
                noClass: null
            }
        },
        METER_RESPONSIVE_FORMAT_TAB: {
            _javaScript: ["MeterResponsiveFormatTab", "alias_js_meterResponsiveFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.responsive.MeterResponsiveFormatTab"],
            _publicClasses: {
                "actuate.dialog.MeterResponsiveFormatDialog": "actuate.dialog.impl.gadgetbuilder.MeterResponsiveFormatDialog",
                noClass: null
            }
        },
        METER_DATA_TAB: {
            _javaScript: ["MeterDataTab", "alias_js_meterDataDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "common.dataTab", "numberFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.MeterDataTab"],
            _publicClasses: {
                "actuate.dialog.MeterDataDialog": "actuate.dialog.impl.gadgetbuilder.MeterDataDialog",
                noClass: null
            }
        },
        BULLET_DATA_TAB: {
            _javaScript: ["BulletDataTab", "alias_js_bulletDataDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.BulletDataTab"],
            _publicClasses: {
                "actuate.dialog.BulletDataDialog": "actuate.dialog.impl.gadgetbuilder.BulletDataDialog",
                noClass: null
            }
        },
        SPARKLINE_DATA_TAB: {
            _javaScript: ["SparkLineDataTab", "alias_js_sparkLineDataDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.SparkLineDataTab"],
            _publicClasses: {
                "actuate.dialog.SparkLineDataDialog": "actuate.dialog.impl.gadgetbuilder.SparkLineDataDialog",
                noClass: null
            }
        },
        LINEARGAUGE_FORMAT_TAB: {
            _javaScript: ["LinearGaugeFormatTab", "alias_js_linearGaugeFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.LinearGaugeFormatTab"],
            _publicClasses: {
                "actuate.dialog.LinearGaugeFormatDialog": "actuate.dialog.impl.gadgetbuilder.LinearGaugeFormatDialog",
                noClass: null
            }
        },
        LINEARGAUGE_RESPONSIVE_FORMAT_TAB: {
            _javaScript: ["LinearGaugeResponsiveFormatTab", "alias_js_linearGaugeResponsiveFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.responsive.LinearGaugeResponsiveFormatTab"],
            _publicClasses: {
                "actuate.dialog.LinearGaugeResponsiveFormatDialog": "actuate.dialog.impl.gadgetbuilder.responsive.LinearGaugeResponsiveFormatDialog",
                noClass: null
            }
        },
        SPARKLINE_FORMAT_TAB: {
            _javaScript: ["SparkLineFormatTab", "alias_js_sparkLineFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.SparkLineFormatTab"],
            _publicClasses: {
                "actuate.dialog.SparkLineFormatDialog": "actuate.dialog.impl.gadgetbuilder.SparkLineFormatDialog",
                noClass: null
            }
        },
        SPARKLINE_RESPONSIVE_FORMAT_TAB: {
            _javaScript: ["SparkLineResponsiveFormatTab", "alias_js_sparkLineResponsiveFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.responsive.SparkLineResponsiveFormatTab"],
            _publicClasses: {
                "actuate.dialog.SparkLineResponsiveFormatDialog": "actuate.dialog.impl.gadgetbuilder.responsive.SparkLineResponsiveFormatDialog",
                noClass: null
            }
        },
        BULLET_FORMAT_TAB: {
            _javaScript: ["BulletFormatTab", "alias_js_bulletFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.BulletFormatTab"],
            _publicClasses: {
                "actuate.dialog.BulletFormatDialog": "actuate.dialog.impl.gadgetbuilder.BulletFormatDialog",
                noClass: null
            }
        },
        BULLET_RESPONSIVE_FORMAT_TAB: {
            _javaScript: ["BulletResponsiveFormatTab", "alias_js_bulletResponsiveFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.responsive.BulletResponsiveFormatTab"],
            _publicClasses: {
                "actuate.dialog.BulletResponiveFormatDialog": "actuate.dialog.impl.gadgetbuilder.responsive.BulletResponiveFormatDialog",
                noClass: null
            }
        },
        CYLINDER_FORMAT_TAB: {
            _javaScript: ["CylinderFormatTab", "alias_js_cylinderFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.CylinderFormatTab"],
            _publicClasses: {
                "actuate.dialog.CylinderFormatDialog": "actuate.dialog.impl.gadgetbuilder.CylinderFormatDialog",
                noClass: null
            }
        },
        CYLINDER_RESPONSIVE_FORMAT_TAB: {
            _javaScript: ["CylinderResponsiveFormatTab", "alias_js_cylinderResponsiveFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.responsive.CylinderResponsiveFormatTab"],
            _publicClasses: {
                "actuate.dialog.CylinderResponsiveFormatDialog": "actuate.dialog.impl.gadgetbuilder.responsive.CylinderResponsiveFormatDialog",
                noClass: null
            }
        },
        APPLY_BUTTON_FORMAT_TAB: {
            _javaScript: ["ApplyButtonFormatTab", "alias_js_applyButtonFormatDialog"],
            _localizedString: ["applyButtonBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.applybuttonbuilder.ApplyButtonFormatTab"],
            _publicClasses: {
                "actuate.dialog.ApplyButtonFormatDialog": "actuate.dialog.impl.applybuttonbuilder.ApplyButtonFormatDialog",
                noClass: null
            }
        },
        THERMOMETER_FORMAT_TAB: {
            _javaScript: ["ThermometerFormatTab", "alias_js_thermometerFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.ThermometerFormatTab"],
            _publicClasses: {
                "actuate.dialog.ThermometerFormatDialog": "actuate.dialog.impl.gadgetbuilder.ThermometerFormatDialog",
                noClass: null
            }
        },
        THERMOMETER_RESPONSIVE_FORMAT_TAB: {
            _javaScript: ["ThermometerResponsiveFormatTab", "alias_js_thermometerResponsiveFormatDialog"],
            _localizedString: ["flashGadgetBuilderDialog", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.responsive.ThermometerResponsiveFormatTab"],
            _publicClasses: {
                "actuate.dialog.ThermometerResponsiveFormatDialog": "actuate.dialog.impl.gadgetbuilder.ThermometerResponsiveFormatDialog",
                noClass: null
            }
        },
        FLASHGADGET_TYPE_TAB: {
            _javaScript: ["FlashGadgetTypeTab", "alias_js_flashGadgetTypeDialog"],
            _localizedString: ["flashGadgetBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.gadgetbuilder.FlashGadgetTypeTab"],
            _publicClasses: {
                "actuate.dialog.FlashGadgetDialog": "actuate.dialog.impl.gadgetbuilder.FlashGadgetDialog",
                noClass: null
            }
        },
        SUMMARY_TABLE_BUILDER_DIALOG: {
            _javaScript: ["SummaryTableBuilder", "alias_js_summaryTableBuilderDialog"],
            _html: ["SummaryTableBuilder"],
            _localizedString: ["tableBuilder", "summaryTableBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.summarytablebuilder.SummaryTableBuilder", "actuate.dialog.SummaryTableBuilderDialog"],
            _entryPoint: "actuate.dialog.SummaryTableBuilderDialog",
            _publicClasses: {
                "actuate.dialog.SummaryTableBuilderDialog": "actuate.dialog.impl.summarytablebuilder.SummaryTableBuilderDialog",
                noClass: null
            }
        },
        SUMMARY_TABLE_DATA_TAB: {
            _javaScript: ["SummaryTableDataTab", "alias_js_summaryTableDataDialog"],
            _localizedString: ["tableBuilder", "summaryTableBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.summarytablebuilder.SummaryTableDataTab"],
            _publicClasses: {
                "actuate.dialog.SummaryTableDataDialog": "actuate.dialog.impl.summarytablebuilder.SummaryTableDataDialog",
                noClass: null
            }
        },
        SUMMARY_TABLE_FORMAT_TAB: {
            _javaScript: ["SummaryTableFormatTab", "alias_js_summaryTableFormatDialog"],
            _localizedString: ["tableBuilder", "summaryTableBuilder", "fontDialog"],
            _classInstance: ["actuate.dialog.impl.helper.summarytablebuilder.SummaryTableFormatTab"],
            _publicClasses: {
                "actuate.dialog.SummaryTableFormatDialog": "actuate.dialog.impl.summarytablebuilder.SummaryTableFormatDialog",
                noClass: null
            }
        },
        ADVANCEDFILTERDIALOG_DIALOG: {
            _javaScript: ["FilterManager", "AdvancedFilterDialog", "alias_js_advancedFilterDialog"],
            _html: ["AdvancedFilterDialog"],
            _localizedString: ["advancedFilterDialog", "filterDialog", "common"],
            _classInstance: ["actuate.dialog.impl.helper.AdvancedFilterDialog"],
            _cssFiles: new Array("advancedFilterDialog.css"),
            _mobileCssFiles: new Array("advancedFilterDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.AdvancedFilterDialog": "actuate.dialog.impl.AdvancedFilterDialog",
                noClass: null
            }
        },
        GADGETBUILDER_FILTERDIALOG_DIALOG: {
            _javaScript: ["FilterManager", "GadgetBuilderFilterTab", "alias_js_gadgetBuilderFilterDialog"],
            _html: ["GadgetBuilderFilterDialog"],
            _localizedString: ["gadgetBuilderFilterDialog", "advancedFilterDialog", "filterDialog", "common"],
            _classInstance: ["actuate.dialog.impl.helper.GadgetBuilderFilterTab"],
            _cssFiles: new Array("advancedFilterDialog.css"),
            _publicClasses: {
                "actuate.dialog.GadgetBuilderFilterDialog": "actuate.dialog.impl.GadgetBuilderFilterDialog",
                noClass: null
            }
        },
        FILTER_DIALOG: {
            _javaScript: ["SelectedFilterDialog", "alias_js_selectedFilterDialog", "ChartFilterDialog", "alias_js_chartFilterDialog"],
            _html: ["FilterDialog"],
            _localizedString: ["filterDialog"],
            _classInstance: ["actuate.dialog.impl.helper.SelectedFilterDialog", "actuate.dialog.impl.helper.ChartFilterDialog"],
            _cssFiles: new Array("selectedFilterDialog.css", "chartFilterDialog.css"),
            _publicClasses: {
                "actuate.dialog.ChartFilterDialog": "actuate.dialog.impl.ChartFilterDialog",
                "actuate.dialog.SelectedFilterDialog": "actuate.dialog.impl.SelectedFilterDialog",
                noClass: null
            }
        },
        TOPBOTTOMN_DIALOG: {
            _javaScript: ["TopBottomNDialog", "alias_js_topBottomNDialog"],
            _html: ["TopBottomNDialog"],
            _localizedString: ["filterDialog"],
            _classInstance: ["actuate.dialog.impl.helper.TopBottomNDialog"],
            _cssFiles: new Array("topBottomDialog.css"),
            _publicClasses: {"actuate.dialog.TopBottomNDialog": "actuate.dialog.impl.TopBottomNDialog", noClass: null}
        },
        CHART_CATEGORIES_DIALOG: {
            _javaScript: ["ChartCategoriesDialog", "alias_js_chartCategoriesDialog"],
            _html: ["ChartCategoriesDialog"],
            _localizedString: ["chartCategoriesDialog"],
            _classInstance: ["actuate.dialog.impl.helper.ChartCategoriesDialog"],
            _publicClasses: {
                "actuate.dialog.ChartCategoriesDialog": "actuate.dialog.impl.ChartCategoriesDialog",
                noClass: null
            }
        },
        CHART_SERIES_DIALOG: {
            _javaScript: ["ChartSeriesDialog", "alias_js_chartSeriesDialog"],
            _html: ["ChartSeriesDialog"],
            _localizedString: ["chartSeriesDialog"],
            _classInstance: ["actuate.dialog.impl.helper.ChartSeriesDialog"],
            _publicClasses: {"actuate.dialog.ChartSeriesDialog": "actuate.dialog.impl.ChartSeriesDialog", noClass: null}
        },
        STRING_FORMAT_DIALOG: {
            _javaScript: ["alias_stringFormattingDialog", "alias_js_stringFormattingDialog"],
            _html: ["StringFormattingDialog"],
            _localizedString: ["stringFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.format.StringFormattingDialog", "actuate.dialog.format.StringFormattingDialog"],
            _entryPoint: "actuate.dialog.format.StringFormattingDialog",
            _cssFiles: new Array("stringFormattingDialog.css"),
            _mobileCssFiles: new Array("stringFormattingDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.format.StringFormattingDialog": "actuate.dialog.impl.format.StringFormattingDialog",
                noClass: null
            }
        },
        NUMBER_FORMAT_DIALOG: {
            _javaScript: ["alias_numberFormattingDialog", "alias_js_numberFormattingDialog"],
            _html: ["NumberFormattingDialog"],
            _localizedString: ["numberFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.format.NumberFormattingDialog", "actuate.dialog.format.NumberFormattingDialog"],
            _entryPoint: "actuate.dialog.format.NumberFormattingDialog",
            _cssFiles: new Array("numberFormattingDialog.css"),
            _mobileCssFiles: new Array("numberFormattingDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.format.NumberFormattingDialog": "actuate.dialog.impl.format.NumberFormattingDialog",
                noClass: null
            }
        },
        CALCULATION_DIALOG: {
            _javaScript: ["CalculationDialog", "alias_js_calculationDialog"],
            _localizedString: ["calculationDialog"],
            _classInstance: ["actuate.dialog.impl.helper.CalculationDialog", "actuate.dialog.CalculationDialog"],
            _staticFunctions: ["getInstance"],
            _cssFiles: new Array("calculationDailog.css"),
            _publicClasses: {"actuate.dialog.CalculationDialog": "actuate.dialog.impl.CalculationDialog", noClass: null}
        },
        FILEPICKER_DIALOG: {
            _javaScript: ["FilePickerDialog", "alias_js_filePickerDialog"],
            _localizedString: ["filePickerDialog"],
            _classInstance: ["actuate.dialog.impl.helper.filepicker.FilePickerDialog", "actuate.dialog.FilePickerDialog"],
            _staticFunctions: ["getInstance"],
            _cssFiles: new Array("filePickerDialog.css"),
            _publicClasses: {"actuate.dialog.FilePickerDialog": "actuate.dialog.impl.FilePickerDialog", noClass: null}
        },
        HYPERLINK_BUILDER: {
            _javaScript: ["HyperlinkBuilderDialog", "alias_js_hyperlinkBuilderDialog"],
            _html: ["HyperlinkBuilderDialog"],
            _localizedString: ["hyperlinkBuilderDialog", "baseDialog"],
            _classInstance: ["actuate.dialog.impl.helper.hyperlinkBuilder.HyperlinkBuilderDialog", "actuate.dialog.hyperlinkBuilder.HyperlinkBuilderDialog"],
            _entryPoint: "actuate.dialog.hyperlinkBuilder.HyperlinkBuilderDialog",
            _cssFiles: new Array("hyperlinkDialog.css"),
            _publicClasses: {
                "actuate.dialog.hyperlinkBuilder.HyperlinkBuilderDialog": "actuate.dialog.impl.hyperlinkBuilder.HyperlinkBuilderDialog",
                noClass: null
            }
        },
        DATE_FORMAT_DIALOG: {
            _javaScript: ["alias_dateFormattingDialog", "alias_js_dateFormattingDialog"],
            _html: ["DateFormattingDialog"],
            _localizedString: ["dateFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.format.DateFormattingDialog", "actuate.dialog.format.DateFormattingDialog"],
            _entryPoint: "actuate.dialog.format.DateFormattingDialog",
            _cssFiles: new Array("dateFormattingDialog.css"),
            _mobileCssFiles: new Array("dateFormattingDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.format.DateFormattingDialog": "actuate.dialog.impl.format.DateFormattingDialog",
                noClass: null
            }
        },
        DATATIME_FORMAT_DIALOG: {
            _javaScript: ["alias_dateTimeFormattingDialog", "alias_js_dateTimeFormattingDialog"],
            _html: ["DateTimeFormattingDialog"],
            _localizedString: ["dateTimeFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.format.DateTimeFormattingDialog", "actuate.dialog.format.DateTimeFormattingDialog"],
            _entryPoint: "actuate.dialog.format.DateTimeFormattingDialog",
            _cssFiles: new Array("dateTimeFormattingDialog.css"),
            _mobileCssFiles: new Array("dateTimeFormattingDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.format.DateTimeFormattingDialog": "actuate.dialog.impl.format.DateTimeFormattingDialog",
                noClass: null
            }
        },
        TIME_FORMAT_DIALOG: {
            _javaScript: ["alias_timeFormattingDialog", "alias_js_timeFormattingDialog"],
            _html: ["TimeFormattingDialog"],
            _localizedString: ["timeFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.format.TimeFormattingDialog", "actuate.dialog.format.TimeFormattingDialog"],
            _entryPoint: "actuate.dialog.format.TimeFormattingDialog",
            _cssFiles: new Array("timeFormattingDialog.css"),
            _mobileCssFiles: new Array("timeFormattingDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.format.TimeFormattingDialog": "actuate.dialog.impl.format.TimeFormattingDialog",
                noClass: null
            }
        },
        BOOLEAN_FORMAT_DIALOG: {
            _javaScript: ["alias_booleanFormattingDialog", "alias_js_booleanFormattingDialog"],
            _html: ["BooleanFormattingDialog"],
            _localizedString: ["booleanFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.format.BooleanFormattingDialog", "actuate.dialog.format.BooleanFormattingDialog"],
            _entryPoint: "actuate.dialog.format.BooleanFormattingDialog",
            _cssFiles: new Array("booleanFormattingDialog.css"),
            _mobileCssFiles: new Array("booleanFormattingDialog_mobile.css"),
            _publicClasses: {
                "actuate.dialog.format.BooleanFormattingDialog": "actuate.dialog.impl.format.BooleanFormattingDialog",
                noClass: null
            }
        },
        APPLY_BUTTON_DIALOG: {
            _javaScript: ["ApplyButtonBuilder", "alias_js_applyButtonDialog"],
            _localizedString: ["applyButtonBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.applybuttonbuilder.ApplyButtonBuilder", "actuate.dialog.ApplyButtonDialog"],
            _entryPoint: "actuate.dialog.ApplyButtonDialog",
            _publicClasses: {
                "actuate.dialog.ApplyButtonDialog": "actuate.dialog.impl.applybuttonbuilder.ApplyButtonDialog",
                noClass: null
            }
        },
        SELECTOR_DIALOG: {
            _javaScript: ["SelectorBuilder", "alias_js_selectorDialog"],
            _html: ["SelectorBuilder", "BooleanFormattingDialog", "StringFormattingDialog", "NumberFormattingDialog", "DateFormattingDialog", "TimeFormattingDialog", "DateTimeFormattingDialog"],
            _localizedString: ["Utility", "SelectorBuilder", "booleanFormattingDialog", "stringFormattingDialog", "numberFormattingDialog", "dateFormattingDialog", "timeFormattingDialog", "dateTimeFormattingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorBuilder", "actuate.dialog.SelectorDialog"],
            _entryPoint: "actuate.dialog.SelectorDialog",
            _publicClasses: {
                "actuate.dialog.SelectorDialog": "actuate.dialog.impl.selectorbuilder.SelectorDialog",
                noClass: null
            }
        },
        REPORTLIBRARY_DIALOG: {
            _javaScript: ["ReportLibraryBuilder", "alias_js_reportLibraryDialog"],
            _localizedString: ["Utility", "reportLibraryBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.reportlibrarybuilder.ReportLibraryBuilder", "actuate.dialog.ReportLibraryDialog"],
            _entryPoint: "actuate.dialog.ReportLibraryDialog",
            _publicClasses: {
                "actuate.dialog.ReportLibraryDialog": "actuate.dialog.impl.reportlibrarybuilder.ReportLibraryDialog",
                noClass: null
            }
        },
        SELECTOR_DATA_TAB: {
            _javaScript: ["SelectorDataTab", "alias_js_selectorDataDialog", "FilterManager"],
            _localizedString: ["Utility", "selectorDialog", "selectorBuilder.dataTab", "selectorBuilder.typeTab", "selectorBuilder.formatTab", "common.dataTab", "filterDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorDataTab"],
            _publicClasses: {
                "actuate.dialog.SelectorDataDialog": "actuate.dialog.impl.selectorbuilder.SelectorDataDialog",
                noClass: null
            }
        },
        MULTI_SELECTOR_DATA_TAB: {
            _javaScript: ["MultiSelectorDataTab", "alias_js_multiSelectorDataDialog", "FilterManager"],
            _localizedString: ["Utility", "selectorDialog", "selectorBuilder.dataTab", "selectorBuilder.multidataTab", "selectorBuilder.typeTab", "selectorBuilder.formatTab", "common.dataTab", "filterDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.MultiSelectorDataTab"],
            _publicClasses: {
                "actuate.dialog.MultiSelectorDataDialog": "actuate.dialog.impl.selectorbuilder.MultiSelectorDataDialog",
                noClass: null
            }
        },
        SELECTOR_DATA_VERSION_TAB: {
            _javaScript: ["SelectorDataVersionTab", "alias_js_selectorDataVersionDialog"],
            _localizedString: ["Utility", "selectorDialog", "selectorBuilder.dataTab", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorDataVersionTab"],
            _publicClasses: {
                "actuate.dialog.SelectorDataVersionDialog": "actuate.dialog.impl.selectorbuilder.SelectorDataVersionDialog",
                noClass: null
            }
        },
        REPORTLIBRARY_DATA_TAB: {
            _javaScript: ["ReportLibraryDataTab", "alias_js_reportLibraryDataDialog"],
            _localizedString: ["Utility", "reportLibraryBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.reportlibrarybuilder.ReportLibraryDataTab"],
            _publicClasses: {
                "actuate.dialog.ReportLibraryDataDialog": "actuate.dialog.impl.reportlibrarybuilder.ReportLibraryDataDialog",
                noClass: null
            }
        },
        SELECTOR_TYPE_TAB: {
            _javaScript: ["SelectorTypeTab", "alias_js_selectorTypeDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorTypeTab"],
            _cssFiles: new Array("selectorType.css"),
            _publicClasses: {
                "actuate.dialog.SelectorTypeDialog": "actuate.dialog.impl.selectorbuilder.SelectorTypeDialog",
                noClass: null
            }
        },
        MULTI_SELECTOR_TYPE_TAB: {
            _javaScript: ["MultiSelectorTypeTab", "alias_js_multiSelectorTypeDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.MultiSelectorTypeTab"],
            _cssFiles: new Array("selectorType.css"),
            _publicClasses: {
                "actuate.dialog.MultiSelectorTypeDialog": "actuate.dialog.impl.selectorbuilder.MultiSelectorTypeDialog",
                noClass: null
            }
        },
        MULTI_SELECTOR_FORMAT_TAB: {
            _javaScript: ["MultiSelectorFormatTab", "alias_js_multiSelectorFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.MultiSelectorFormatTab"],
            _publicClasses: {
                "actuate.dialog.MultiSelectorFormatDialog": "actuate.dialog.impl.selectorbuilder.MultiSelectorFormatDialog",
                noClass: null
            }
        },
        SELECTOR_SLIDER_FORMAT_TAB: {
            _javaScript: ["SelectorSliderFormatTab", "alias_js_selectorSliderFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorSliderFormatTab"],
            _publicClasses: {
                "actuate.dialog.SelectorSliderFormatDialog": "actuate.dialog.impl.selectorbuilder.SelectorSliderFormatDialog",
                noClass: null
            }
        },
        SELECTOR_LIST_FORMAT_TAB: {
            _javaScript: ["SelectorListFormatTab", "alias_js_selectorListFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorListFormatTab"],
            _publicClasses: {
                "actuate.dialog.SelectorListFormatDialog": "actuate.dialog.impl.selectorbuilder.SelectorListFormatDialog",
                noClass: null
            }
        },
        SELECTOR_DROPDOWN_FORMAT_TAB: {
            _javaScript: ["SelectorDropdownFormatTab", "alias_js_selectorDropdownFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorDropdownFormatTab"],
            _publicClasses: {
                "actuate.dialog.SelectorDropdownFormatDialog": "actuate.dialog.impl.selectorbuilder.SelectorDropdownFormatDialog",
                noClass: null
            }
        },
        SELECTOR_CHECKBOX_FORMAT_TAB: {
            _javaScript: ["SelectorCheckboxFormatTab", "alias_js_selectorCheckboxFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorCheckboxFormatTab"],
            _publicClasses: {
                "actuate.dialog.SelectorCheckboxFormatDialog": "actuate.dialog.impl.selectorbuilder.SelectorCheckboxFormatDialog",
                noClass: null
            }
        },
        SELECTOR_RADIO_FORMAT_TAB: {
            _javaScript: ["SelectorRadioFormatTab", "alias_js_selectorRadioFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorRadioFormatTab"],
            _publicClasses: {
                "actuate.dialog.SelectorRadioFormatDialog": "actuate.dialog.impl.selectorbuilder.SelectorRadioFormatDialog",
                noClass: null
            }
        },
        SELECTOR_CALENDAR_FORMAT_TAB: {
            _javaScript: ["SelectorCalendarFormatTab", "alias_js_selectorCalendarFormatDialog"],
            _localizedString: ["Utility", "selectorDialog"],
            _classInstance: ["actuate.dialog.impl.helper.selectorbuilder.SelectorCalendarFormatTab"],
            _publicClasses: {
                "actuate.dialog.SelectorCalendarFormatDialog": "actuate.dialog.impl.selectorbuilder.SelectorCalendarFormatDialog",
                noClass: null
            }
        },
        CROSSTAB_BUILDER_DIALOG: {
            _javaScript: ["CrosstabBuilder", "alias_js_crosstabBuilderDialog"],
            _html: ["CrosstabBuilder"],
            _localizedString: ["crosstabBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.crosstabbuilder.CrosstabBuilder", "actuate.dialog.CrosstabBuilderDialog"],
            _entryPoint: "actuate.dialog.CrosstabBuilderDialog",
            _publicClasses: {
                "actuate.dialog.CrosstabBuilderDialog": "actuate.dialog.impl.crosstabbuilder.CrosstabBuilderDialog",
                noClass: null
            }
        },
        CROSSTAB_DATA_TAB: {
            _javaScript: ["CrosstabDateGroupingDialog", "CrosstabDataTab", "alias_js_crosstabDataDialog"],
            _localizedString: ["crosstabBuilderDialog", "common.dataTab", "crosstabDateGroupingDialog"],
            _classInstance: ["actuate.dialog.impl.helper.crosstabbuilder.CrosstabDataTab"],
            _cssFiles: new Array("crosstabDataTab.css"),
            _publicClasses: {
                "actuate.dialog.CrosstabDataDialog": "actuate.dialog.impl.crosstabbuilder.CrosstabDataDialog",
                noClass: null
            }
        },
        CROSSTAB_FORMAT_TAB: {
            _javaScript: ["CrosstabFormatTab", "alias_js_crosstabFormatDialog"],
            _localizedString: ["crosstabBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.crosstabbuilder.CrosstabFormatTab"],
            _cssFiles: new Array("crosstabFormatTab.css"),
            _publicClasses: {
                "actuate.dialog.CrosstabFormatDialog": "actuate.dialog.impl.crosstabbuilder.CrosstabFormatDialog",
                noClass: null
            }
        },
        MANAGE_DATA_DIALOG: {
            _javaScript: ["ManageDataDialog", "alias_js_ManageDataDialog", "DetailsDialog"],
            _localizedString: ["manageDataDialog"],
            _classInstance: ["actuate.dialog.impl.helper.datamanager.ManageDataDialog", "actuate.dialog.datamanager.ManageDataDialog", "actuate.dialog.impl.helper.datamanager.DetailsDialog"],
            _entryPoint: "actuate.dialog.datamanager.ManageDataDialog",
            _cssFiles: new Array("managedata.css"),
            _publicClasses: {
                "actuate.dialog.datamanager.ManageDataDialog": "actuate.dialog.impl.datamanager.ManageDataDialog",
                noClass: null
            }
        },
        CALENDAR_DIALOG: {
            _javaScript: ["CalendarDialog", "alias_js_calendarDialog"],
            _html: ["CalendarDialog"],
            _localizedString: ["calendarDialog"],
            _classInstance: ["actuate.dialog.impl.helper.CalendarDialog"],
            _publicClasses: {"actuate.dialog.CalendarDialog": "actuate.dialog.impl.CalendarDialog", noClass: null}
        },
        FLEXCOMPONENT_BUILDER_DIALOG: {
            _javaScript: ["FlexComponentBuilder", "alias_js_flexcomponentBuilderDialog"],
            _html: ["FlexComponentBuilder"],
            _localizedString: ["FlexComponentBuilderDialog"],
            _classInstance: ["actuate.dialog.impl.helper.flexcomponentbuilder.FlexComponentBuilder", "actuate.dialog.FlexComponentBuilderDialog"],
            _entryPoint: "actuate.dialog.FlexComponentBuilderDialog",
            _publicClasses: {
                "actuate.dialog.FlexComponentBuilderDialog": "actuate.dialog.impl.flexcomponentbuilder.FlexComponentBuilderDialog",
                noClass: null
            }
        },
        FLEXCOMPONENT_DATA_TAB: {
            _javaScript: ["FlexComponentDataTab", "alias_js_flexcomponentDataDialog"],
            _localizedString: ["FlexComponentBuilderDialog", "common.dataTab", "tableBuilder", "summaryTableBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.flexcomponentbuilder.FlexComponentDataTab"],
            _publicClasses: {
                "actuate.dialog.FlexComponentDataDialog": "actuate.dialog.impl.flexcomponentbuilder.FlexComponentDataDialog",
                noClass: null
            }
        },
        FLEXCROSSTAB_DATA_TAB: {
            _javaScript: ["FlexCrosstabDataTab", "alias_js_flexCrosstabDataDialog"],
            _localizedString: ["FlexComponentBuilderDialog", "common.dataTab", "crosstabBuilderDialog", "crosstabBuilderDialog.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.flexcomponentbuilder.FlexCrosstabDataTab"],
            _cssFiles: new Array("crosstabDataTab.css"),
            _publicClasses: {
                "actuate.dialog.FlexCrosstabDataDialog": "actuate.dialog.impl.flexcomponentbuilder.FlexCrosstabDataDialog",
                noClass: null
            }
        },
        FLEXTABLE_FORMAT_TAB: {
            _javaScript: ["FlexTableFormatTab", "alias_js_flexTableFormatDialog"],
            _localizedString: ["flexComponentBuilderDialog", "tableBuilder", "fontDialog.background", "fontDialog.color", "fontDialog.type", "fontDialog.size", "FlexComponentBuilderDialog.FontOption"],
            _classInstance: ["actuate.dialog.impl.helper.flexcomponentbuilder.FlexTableFormatTab"],
            _publicClasses: {
                "actuate.dialog.FlexTableFormatDialog": "actuate.dialog.impl.flexcomponentbuilder.FlexTableFormatDialog",
                noClass: null
            }
        },
        FLEXCROSSTAB_FORMAT_TAB: {
            _javaScript: ["FlexCrosstabFormatTab", "alias_js_flexCrosstabFormatDialog"],
            _localizedString: ["flexComponentBuilderDialog", "tableBuilder", "fontDialog.background", "fontDialog.color", "fontDialog.type", "fontDialog.size", "crosstabBuilderDialog.formatTab", "crosstabBuilderDialog.formatTab.grandTotals", "crosstabBuilderDialog.formatTab.subTotals", "flexComponentBuilderDialog.FontOption"],
            _classInstance: ["actuate.dialog.impl.helper.flexcomponentbuilder.FlexCrosstabFormatTab"],
            _publicClasses: {
                "actuate.dialog.FlexCrosstabFormatDialog": "actuate.dialog.impl.flexcomponentbuilder.FlexCrosstabFormatDialog",
                noClass: null
            }
        },
        SINGLEMETRIC_BUILDER_DIALOG: {
            _javaScript: ["SingleMetricBuilder", "alias_js_singleMetricBuilderDialog"],
            _html: ["SingleMetricBuilder"],
            _localizedString: ["singleMetricBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.singlemetricbuilder.SingleMetricBuilder", "actuate.dialog.SingleMetricBuilderDialog"],
            _entryPoint: "actuate.dialog.SingleMetricBuilderDialog",
            _publicClasses: {
                "actuate.dialog.SingleMetricBuilderDialog": "actuate.dialog.impl.singlemetricbuilder.SingleMetricBuilderDialog",
                noClass: null
            }
        },
        SINGLEMETRIC_DATA_TAB: {
            _javaScript: ["SingleMetricDataTab", "alias_js_singleMetricDataDialog"],
            _localizedString: ["singleMetricBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.singlemetricbuilder.SingleMetricDataTab"],
            _publicClasses: {
                "actuate.dialog.SingleMetricDataDialog": "actuate.dialog.impl.singlemetricbuilder.SingleMetricDataDialog",
                noClass: null
            }
        },
        SINGLEMETRIC_FORMAT_TAB: {
            _javaScript: ["SingleMetricFormatTab", "alias_js_singleMetricFormatDialog"],
            _localizedString: ["singleMetricBuilder", "formatDialog"],
            _classInstance: ["actuate.dialog.impl.helper.singlemetricbuilder.SingleMetricFormatTab"],
            _publicClasses: {
                "actuate.dialog.SingleMetricFormatDialog": "actuate.dialog.impl.singlemetricbuilder.SingleMetricFormatDialog",
                noClass: null
            }
        },
        MAP_DATA_TAB: {
            _javaScript: ["MapDataTab", "alias_js_mapDataDialog"],
            _localizedString: ["mapBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.mapbuilder.MapDataTab"],
            _publicClasses: {
                "actuate.dialog.MapDataDialog": "actuate.dialog.impl.mapbuilder.MapDataDialog",
                noClass: null
            }
        },
        MAP_COLLECTION_TAB: {
            _javaScript: ["MapCollectionTab", "alias_js_mapCollectionDialog"],
            _localizedString: ["mapBuilder", "mapCollection"],
            _classInstance: ["actuate.dialog.impl.helper.mapbuilder.MapCollectionTab"],
            _publicClasses: {
                "actuate.dialog.MapCollectionDialog": "actuate.dialog.impl.mapbuilder.MapCollectionDialog",
                noClass: null
            }
        },
        MAP_FORMAT_TAB: {
            _javaScript: ["MapFormatTab", "alias_js_mapFormatDialog"],
            _localizedString: ["mapBuilder", "mapFormat"],
            _classInstance: ["actuate.dialog.impl.helper.mapbuilder.MapFormatTab"],
            _publicClasses: {
                "actuate.dialog.MapFormatDialog": "actuate.dialog.impl.mapbuilder.MapFormatDialog",
                noClass: null
            }
        },
        CUSTOMVIZ_BUILDER_DIALOG: {
            _javaScript: ["CustomVizBuilder", "alias_js_customVizBuilderDialog"],
            _html: ["CustomVizBuilder"],
            _localizedString: ["customVizBuilder"],
            _classInstance: ["actuate.dialog.impl.helper.customvizbuilder.CustomVizBuilder", "actuate.dialog.CustomVizBuilderDialog"],
            _entryPoint: "actuate.dialog.CustomVizBuilderDialog",
            _publicClasses: {
                "actuate.dialog.CustomVizBuilderDialog": "actuate.dialog.impl.customvizbuilder.CustomVizBuilderDialog",
                noClass: null
            }
        },
        CUSTOMVIZ_DATA_TAB: {
            _javaScript: ["CustomVizDataTab", "alias_js_customVizDataDialog"],
            _localizedString: ["customVizBuilder", "common.dataTab"],
            _classInstance: ["actuate.dialog.impl.helper.customvizbuilder.CustomVizDataTab"],
            _publicClasses: {
                "actuate.dialog.CustomVizDataDialog": "actuate.dialog.impl.customvizbuilder.CustomVizDataDialog",
                noClass: null
            }
        },
        CUSTOMVIZ_FORMAT_TAB: {
            _javaScript: ["CustomVizFormatTab", "alias_js_customVizFormatDialog"],
            _localizedString: ["customVizBuilder", "formatDialog"],
            _classInstance: ["actuate.dialog.impl.helper.customvizbuilder.CustomVizFormatTab"],
            _publicClasses: {
                "actuate.dialog.CustomVizFormatDialog": "actuate.dialog.impl.customvizbuilder.CustomVizFormatDialog",
                noClass: null
            }
        }
    }
});
actuate.resource.module.define("actuate.dialog", {
    _jsPath: "iv/dialog",
    _jsFiles: new Array("dialog.js"),
    _cssPath: "iportal/jsapi/actuate/dialog/styles/",
    _cssFiles: new Array("dialog.css"),
    _desktopCssFiles: new Array("dialog_desktop.css"),
    _mobileCssPath: "iportal/jsapi/actuate/dialog/styles/",
    _mobileCssFiles: new Array("dialog_mobile.css"),
    _localizedStringServlet: "ivresource",
    _localizedString: true,
    _publicClasses: {
        "actuate.dialog.Factory": "actuate.dialog.impl.Factory",
        "actuate.dialog.UIConfig": "actuate.dialog.impl.UIConfig",
        "actuate.dialog.BaseTabDialog": "actuate.dialog.impl.BaseTabDialog",
        "actuate.dialog.EventConstants": "actuate.dialog.impl.EventConstants",
        "actuate.dialog.FontDialog": "actuate.dialog.impl.FontDialog",
        "actuate.dialog.CalculationDialog": "actuate.dialog.impl.CalculationDialog",
        "actuate.dialog.FilePickerDialog": "actuate.dialog.impl.FilePickerDialog",
        "actuate.dialog.format.BooleanFormattingDialog": "actuate.dialog.impl.format.BooleanFormattingDialog",
        "actuate.dialog.format.StringFormattingDialog": "actuate.dialog.impl.format.StringFormattingDialog",
        "actuate.dialog.format.NumberFormattingDialog": "actuate.dialog.impl.format.NumberFormattingDialog",
        "actuate.dialog.format.DateFormattingDialog": "actuate.dialog.impl.format.DateFormattingDialog",
        "actuate.dialog.format.TimeFormattingDialog": "actuate.dialog.impl.format.TimeFormattingDialog",
        "actuate.dialog.format.DateTimeFormattingDialog": "actuate.dialog.impl.format.DateTimeFormattingDialog",
        "actuate.dialog.hyperlinkBuilder.HyperlinkBuilderDialog": "actuate.dialog.impl.hyperlinkBuilder.HyperlinkBuilderDialog",
        "actuate.dialog.HyperlinkBuilderDialog": "actuate.dialog.impl.hyperlinkBuilder.HyperlinkBuilderDialog",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.builder", {
    _jsPath: "iv/builder",
    _jsFiles: new Array("builder.js"),
    _localizedString: false,
    _publicClasses: {
        "actuate.builder.Constant": "actuate.builder.impl.Constant",
        "actuate.builder.Factory": "actuate.builder.impl.Factory",
        "actuate.builder.EventConstants": "actuate.builder.impl.EventConstants",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.widget", {
    _jsPath: "iportal/jsapi/widget",
    _jsFiles: new Array("widget.js"),
    _imagePath: "iportal/jsapi/actuate/widget/images/",
    _cssPath: "iportal/jsapi/actuate/widget/styles/",
    _cssFiles: new Array("widget.css"),
    _publicClasses: {noClass: null},
    _onLoad: function () {
        this._fixCssImages()
    },
    _localizedStringServlet: "ivresource",
    _localizedString: true,
    _fixCssImages: function () {
        var B = actuate.getDefaultIportalUrl() + "iportal/jsapi/actuate/widget/images/";
        var A = "";
        A += ".actuate-combo-list-hd, .actuate-list-hd {background-image: url(" + B + "panel-title-light-bg.gif);} ";
        A += ".actuate-form-check {background-image: url(" + B + "checkbox.gif);} ";
        A += ".actuate-form-radio {background-image: url(" + B + "radio.gif);} ";
        A += "ul.actuate-tab-strip-top {background-image: url(" + B + "tabs/tab-strip-bg.gif);} ";
        A += ".actuate-tab-strip-top .actuate-tab-right {background-image: url(" + B + "tabs/tabs-sprite.png);} ";
        A += ".actuate-tab-strip-top .actuate-tab-left {background-image: url(" + B + "tabs/tabs-sprite.png);} ";
        A += ".actuate-tab-strip-top .actuate-tab-strip-inner {background-image: url(" + B + "tabs/tabs-sprite.png);} ";
        A += ".actuate-tab-strip .actuate-tab-strip-closable a.actuate-tab-strip-close {background-image: url(" + B + "tabs/tab-close.gif);} ";
        A += ".actuate-tab-strip .actuate-tab-strip-closable a.actuate-tab-strip-close:hover {background-image: url(" + B + "tabs/tab-close.gif);} ";
        A += ".actuate-tab-scroller-left {background-image: url(" + B + "tabs/icon-tab-arrow-left.png);} ";
        A += ".actuate-tab-scroller-right {background-image: url(" + B + "tabs/icon-tab-arrow-right.png);} ";
        A += ".actuate-tree-node-expanded .actuate-tree-node-icon {background-image: url(" + B + "tree/folder-open.png);} ";
        A += ".actuate-tree-node-collapsed .actuate-tree-node-icon {background-image: url(" + B + "tree/folder.png);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow {background-image: url(" + B + "tree/elbow.gif);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow-plus {background-image: url(" + B + "tree/elbow-plus.gif);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow-minus {background-image: url(" + B + "tree/elbow-minus.gif);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow-end {background-image: url(" + B + "tree/elbow-end.gif);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow-end-plus {background-image: url(" + B + "tree/elbow-end-plus.gif);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow-end-minus {background-image: url(" + B + "tree/elbow-end-minus.gif);} ";
        A += ".actuate-tree-lines .actuate-tree-elbow-line {background-image: url(" + B + "tree/elbow-line.gif);} ";
        A += ".actuate-tree-no-lines .actuate-tree-elbow-plus {background-image: url(" + B + "tree/elbow-plus-nl.gif);} ";
        A += ".actuate-tree-no-lines .actuate-tree-elbow-minus {background-image: url(" + B + "tree/elbow-minus-nl.gif);} ";
        A += ".actuate-tree-no-lines .actuate-tree-elbow-end-plus {background-image: url(" + B + "tree/elbow-end-plus-nl.gif);} ";
        A += ".actuate-tree-no-lines .actuate-tree-elbow-end-minus {background-image: url(" + B + "tree/elbow-end-minus-nl.gif);} ";
        A += ".actuate-tree-drop-ok-append .actuate-dd-drop-icon {background-image: url(" + B + "tree/drop-add.gif);} ";
        A += ".actuate-tree-drop-ok-above .actuate-dd-drop-icon {background-image: url(" + B + "tree/drop-over.gif);} ";
        A += ".actuate-tree-drop-ok-below .actuate-dd-drop-icon {background-image: url(" + B + "tree/drop-under.gif);} ";
        A += ".actuate-tree-drop-ok-between .actuate-dd-drop-icon {background-image: url(" + B + "tree/drop-between.gif);} ";
        A += ".actuate-tree-arrows .actuate-tree-elbow-plus, .actuate-tree-arrows .actuate-tree-elbow-minus, .actuate-tree-arrows .actuate-tree-elbow-end-plus, .actuate-tree-arrows .actuate-tree-elbow-end-minus {background-image: url(" + B + "tree/arrows.gif);} ";
        A += ".actuate-dd-drop-nodrop .actuate-dd-drop-icon {background:-image url(" + B + "dd/drop-no.gif)} ";
        A += ".actuate-dd-drop-ok .actuate-dd-drop-icon {background:-image url(" + B + "dd/drop-yes.gif)} ";
        A += ".actuate-dd-drop-ok-add .actuate-dd-drop-icon {background:-image url(" + B + "dd/drop-add.gif)} ";
        A += ".actuate-widget-html-editor-tb .actuate-widget-btn-text {background:transparent url(" + B + "editor/tb-sprite.gif) no-repeat;}";
        actuate.util.Style.addStyleSheet(A);
        actuate.widget.BLANK_IMAGE_URL = B + "s.gif"
    },
    _noComma: null
});
actuate.resource.module.define("actuate.mobile", {
    _jsPath: "iportal/jsapi/mobile",
    _jsFiles: new Array("mobile.js"),
    _cssPath: "iportal/jsapi/actuate/mobile/resources/css-debug/",
    _cssFiles: new Array("mobile.css"),
    _localizedString: false,
    _publicClasses: {noClass: null},
    _onLoad: function () {
        Ext.setup({
            onReady: function () {
            }
        })
    },
    _noComma: null
});
actuate.resource.module.define("actuate.mobilelanding", {
    _jsPath: "iportal/jsapi/mobilelanding",
    _jsFiles: new Array("mobilelanding.js"),
    _cssPath: "iportal/jsapi/actuate/mobilelanding/styles/",
    _cssFiles: new Array("mobilelanding.css"),
    _localizedStringServlet: "ivresource",
    _localizedString: true,
    _publicClasses: {
        "actuate.mobilelanding.Factory": "actuate.mobilelanding.impl.Factory",
        "actuate.mobilelanding.EventConstants": "actuate.mobilelanding.impl.EventConstants",
        noClass: null
    },
    _noComma: null
});
actuate.resource.module.define("actuate.uiadapter", {
    _jsPath: "iportal/jsapi/uiadapter",
    _jsFiles: new Array("uiadapter.js"),
    _localizedString: false,
    _publicClasses: {noClass: null},
    _noComma: null
});
actuate.resource.module.define("actuate.studio", {
    _jsPath: "iv/studio",
    _jsFiles: new Array("studio.js"),
    _localizedStringServlet: "",
    _localizedString: false,
    _htmlResourcesUri: null,
    _publicClasses: {"actuate.Studio": "actuate.studio.Studio", noClass: null},
    _noComma: null
});
actuate.resource.module.define("actuate.bi", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/bi",
    _jsFiles: new Array("bi.js"),
    _localizedString: true,
    _publicClasses: {noClass: null},
    _localizedStringServlet: "biresource",
    _noComma: null
});
actuate.resource.module.define("actuate.bi.dashboardProperty", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/bi.dashboardProperty",
    _jsFiles: new Array("bi.dashboardProperty.js"),
    _localizedString: true,
    _publicClasses: {noClass: null},
    _localizedStringServlet: "biresource",
    _noComma: null
});
actuate.resource.module.define("actuate.bi.dashboardDatapanel", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/bi.dashboardDatapanel",
    _jsFiles: new Array("bi.dashboardDatapanel.js"),
    _localizedString: false,
    _publicClasses: {noClass: null},
    _localizedStringServlet: "biresource",
    _noComma: null
});
actuate.resource.module.define("actuate.bi.dashboardToolbar", {
    _moduleDependencies: new Array(),
    _jsPath: "iv/bi.dashboardToolbar",
    _jsFiles: new Array("bi.dashboardToolbar.js"),
    _localizedString: true,
    _publicClasses: {noClass: null},
    _localizedStringServlet: "biresource",
    _noComma: null
});
if (typeof MBIRDashboard == 'undefined') {
    class MBIRDashboard extends HTMLElement {
        constructor() {
            super();
        }

        connectedCallback() {
            this._initComponent();
        }

        getConstants = () => {

            return {
                ATTRIBUTE: {
                    PATH: 'path',
                    YAML: 'yaml',
                    YAML_PATH: 'yamlPath',
                    USER_NAME: 'userName',
                    REQUEST_OPTIONS: 'requestOptions',
                    EXTENDED_CRENDENTIALS: 'extendedCredentials',
                    URL: 'url',
                    DASHBOARD_OPTIONS: 'dashboardOptions',
                    PASSWORD: 'password',
                    WIDTH: 'width',
                    HEIGHT: 'height',
                    AUTH_TOKEN: 'authToken',
                    WRAPPER_ID: 'id'
                },

                JSAPI: {
                    DASHBOARD: 'dashboard'
                },

                REQUEST_HEADERS: {
                    AUTH_TOKEN: 'AuthToken',
                    AUTHORIZATION: 'Authorization'
                }
            }
        }


        _initComponent = () => {
            console.clear();

            this.Constants = this.getConstants();
            actuate.load(this.Constants.JSAPI.DASHBOARD);

            this.clearErrors();

            const baseURL = this.getURL();
            const reqOps = this._getRequestOptions();

            const userName = this.getAttribute(this.Constants.ATTRIBUTE.USER_NAME);
            const password = this.getAttribute(this.Constants.ATTRIBUTE.PASSWORD);

            if (!reqOps.getRepositoryType())
                reqOps.setRepositoryType(actuate.RequestOptions.REPOSITORY_ENCYCLOPEDIA);//default
            if (!reqOps.getVolumeProfile())
                reqOps.setVolumeProfile("enterprise");//default

            this._validateInput();

            if (!actuate.isInitialized()) {
                actuate.initialize(baseURL, reqOps, userName, password, this.initRunDashboard, this.handleError);
            } else {
                actuate.authenticate(baseURL, reqOps, userName, password, null, this.initRunDashboard, this.handleError);
            }
        }

        _validateInput = () => {
            //validate mandatory inputs
            //url
            let valid = true;
            if (!this.getURL()) {
                console.error("url attribute must be provided");
                valid = false;
            }
            //auth
            const userName = this.getAttribute(this.Constants.ATTRIBUTE.USER_NAME);
            const authToken = this.getAttribute(this.Constants.ATTRIBUTE.AUTH_TOKEN);
            if (!userName && !(authToken && authToken.length > 5)) {
                console.error("username/password or authToken attribute must be provided");
                valid = false;
            }
            //yaml input
            const yaml = this.getAttribute(this.Constants.ATTRIBUTE.YAML);
            const yamlPath = this.getAttribute(this.Constants.ATTRIBUTE.YAML_PATH);
            const dashboardPath = this.getAttribute(this.Constants.ATTRIBUTE.PATH);
            if (!(yaml && yaml.length) && !yamlPath && !dashboardPath) {
                console.error("one of these attributes must be provided - 'path', 'yamlPath', 'yaml'");
                valid = false;
            }
            //wraper id
            if (!this.getAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID)) {
                console.error("element 'id' must be provided");
                valid = false;
            }

            return valid;
        }

        runDashboard = (dashboard) => {
            const wrapperId = this.getAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            dashboard = dashboard || new actuate.Dashboard(wrapperId);
            this._setDashboardOptions(dashboard);
            dashboard.registerEventHandler(actuate.dashboard.EventConstants.ON_EXCEPTION, this.dashboardErrorHandle);
            dashboard.registerEventHandler(actuate.dashboard.EventConstants.ON_SESSION_TIMEOUT, this.timeoutHandle);
            dashboard.submit();
        }

        _setDashboardOptions = (dashboard) => {
            const name = this.getAttribute(this.Constants.ATTRIBUTE.PATH);
            const width = this.getAttribute(this.Constants.ATTRIBUTE.WIDTH);
            const height = this.getAttribute(this.Constants.ATTRIBUTE.HEIGHT);

            if (width)
                dashboard.setWidth(width);

            if (height)
                dashboard.setHeight(height);

            if (name)
                dashboard.setDashboardName(name);


            const strDashboardOptions = this.getAttribute(this.Constants.ATTRIBUTE.DASHBOARD_OPTIONS);

            let dashboardOptions;

            if (strDashboardOptions) {
                dashboardOptions = JSON.parse(strDashboardOptions);
            }

            if (dashboardOptions) {
                if (!dashboard.getDashboardName() && dashboardOptions.dashboardName)
                    dashboard.setDashboardName(dashboardOptions.dashboardName);

                if (dashboardOptions.isDesigner == "true")
                    dashboard.setIsDesigner(true);

                if (dashboardOptions.activeTab)
                    dashboard.setActiveTab(dashboardOptions.activeTab);

                if (dashboardOptions.container)
                    dashboard.setContainer(dashboardOptions.container);

                if (dashboardOptions.height)
                    dashboard.setHeight(dashboardOptions.height);

                if (dashboardOptions.width)
                    dashboard.setWidth(dashboardOptions.width);

                if (dashboardOptions.isStandalone == "true")
                    dashboard.setIsStandalone(true);

                if (dashboard.service)
                    dashboard.setService(dashboardOptions.service);

                if (dashboard.size)
                    dashboard.setSize(dashboardOptions.size.width, dashboardOptions.size.height);

                if (dashboard.template)
                    dashboard.setTemplate(dashboardOptions.template);

            }

        }

        _formatURL = (url) => {
            if (url && url.endsWith('/')) {
                url = url.substr(0, url.length - 1);
            }

            return url;
        }


        getURL = () => {
            let baseURL = "";

            if (this.getAttribute(this.Constants.ATTRIBUTE.URL)) {
                baseURL = this._formatURL(this.getAttribute(this.Constants.ATTRIBUTE.URL));
                actuate.reqBaseURL = baseURL;
            }

            return this.baseURL = baseURL;
        }

        _getRequestOptions = () => {
            const requestOptions = new actuate.RequestOptions();

            const credentials = this.getAttribute(this.Constants.ATTRIBUTE.EXTENDED_CRENDENTIALS);
            const authToken = this.getAttribute(this.Constants.ATTRIBUTE.AUTH_TOKEN);

            if (credentials) {
                requestOptions.setCredentials(credentials);
            } else if (authToken) {
                requestOptions.setExternalToken(authToken);
            }

            const strReqOps = this.getAttribute(this.Constants.ATTRIBUTE.REQUEST_OPTIONS);

            if (strReqOps) {
                var reqOps = JSON.parse(strReqOps);
            }

            if (reqOps) {
                if (reqOps.credentials)
                    requestOptions.setCredentials(reqOps.credentials);
                else if (reqOps.RESTAuthToken)
                    requestOptions.setRESTAuthToken(reqOps.RESTAuthToken);

                if (reqOps.repositoryType)
                    requestOptions.setRepositoryType(reqOps.repositoryType);


                const customParams = reqOps.customParameters;

                if (customParams)
                    requestOptions.setCustomParameters(customParams);

                if (reqOps.iServerUrl)
                    requestOptions.setIServerUrl(reqOps.iServerUrl);

                if (reqOps.locale)
                    requestOptions.setLocale(reqOps.locale);

                if (reqOps.volume)
                    requestOptions.setVolume(reqOps.volume);

                if (reqOps.volumeProfile)
                    requestOptions.setVolumeProfile(reqOps.volumeProfile);
                else
                    requestOptions.setVolumeProfile("enterprise");

            }


            return requestOptions;
        }

        _runYamlGeneratedDashboard = (dashboardName) => {
            const wrapperId = this.getAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            const dashboard = new actuate.Dashboard(wrapperId);
            dashboard.setDashboardName(dashboardName);

            this.runDashboard(dashboard);
        }

        initRunDashboard = () => {
            let yamlInput = this.getAttribute(this.Constants.ATTRIBUTE.YAML);
            const yamlPath = this.getAttribute(this.Constants.ATTRIBUTE.YAML_PATH);
            if (yamlInput) {
                this._createDashboard(yamlInput);
            } else if (yamlPath) {
                fetch(yamlPath)
                    .then(response => response.text())
                    .then(yaml => this._createDashboard(yaml))
            } else if (this.getAttribute(this.Constants.ATTRIBUTE.PATH)) {
                this.runDashboard();
            }
        }

        _createDashboard = (yamlInput) => {
            const ele = this;
            const userName = this.getAttribute(this.Constants.ATTRIBUTE.USER_NAME);
            const authToken = this.getAttribute(this.Constants.ATTRIBUTE.AUTH_TOKEN);
            let url = this.getURL() + "/declarativebi";
            if (userName) {
                url += "?userid=" + userName;
            }
            const xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            if (!userName && authToken) {
                xhr.setRequestHeader(this.Constants.REQUEST_HEADERS.AUTHORIZATION, "Bearer " + authToken);
            }
            xhr.send(yamlInput);
            let runYamlGeneratedDashboard = this._runYamlGeneratedDashboard;
            xhr.onload = function () {
                const textResponse = this.responseText;
                const json = JSON.parse(textResponse);
                const fileName = json.GraphicalMetrics.filename;

                runYamlGeneratedDashboard(fileName);
            }
        }

        static get observedAttributes() {
            return ["yaml", "authToken", "authtoken", "url", "path", "yamlPath", "yamlpath"];
        }

        get authToken() {
            return this.hasAttribute("authToken");
        }

        set authToken(value) {
            return this.setAttribute("authToken", value);
        }

        get authtoken() {
            return this.hasAttribute("authtoken");
        }

        set authtoken(value) {
            return this.setAttribute("authtoken", value);
        }

        get yaml() {
            return this.hasAttribute("yaml");
        }

        set yaml(value) {
            return this.setAttribute("yaml", value);
        }

        get url() {
            return this.hasAttribute("url");
        }

        set url(value) {
            return this.setAttribute("url", value);
        }

        get path() {
            return this.hasAttribute("path");
        }

        set path(value) {
            return this.setAttribute("path", value);
        }

        get yamlpath() {
            return this.hasAttribute("yamlpath");
        }

        set yamlpath(value) {
            return this.setAttribute("yamlpath", value);
        }

        get yamlPath() {
            return this.hasAttribute("yamlPath");
        }

        set yamlPath(value) {
            return this.setAttribute("yamlPath", value);
        }

        attributeChangedCallback(name, oldValue, newValue) {
            if ((name === "yaml" || name === "authToken" || name === "authtoken" || name === "url" || name === "path" || name === "yamlpath" || name === "yamlPath") && newValue) {
                this._initComponent();
            }
        }

        handleError = (exception) => {
            this.clearErrors();
            console.log("Error: fail to authenticate user");
            this.writeError("Error: fail to authenticate user");
            if (exception.getErrCode()) {
                console.error('Error Code: ' + exception.getErrCode());
                this.writeError('Error Code: ' + exception.getErrCode());
            }
            console.error('Error Message: ' + exception.getMessage());
            this.writeError('Error Message: ' + exception.getMessage());
        }

        dashboardErrorHandle = (exception) => {
            this.clearErrors();
            console.error("Error: fail to render dashboard");
            this.writeError("Error: fail to render dashboard");
            if (exception.getErrCode()) {
                console.error('Error Code: ' + exception.getErrCode());
                this.writeError('Error Code: ' + exception.getErrCode());
            }
            console.error('Error Message: ' + exception.getMessage());
            this.writeError('Error Message: ' + exception.getMessage());
        }

        timeoutHandle = () => {
            this.clearErrors();
            console.log("session timed out, refreshing");
            this.writeError("session timed out, refreshing the page.");
            location.reload();
        }

        clearErrors = () => {
            const wrapperId = this.getAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            let errorElement = document.querySelector("#" + wrapperId + " #dashboard_error_section");
            if (errorElement) {
                errorElement.innerHTML = "";
            }
        }

        writeError = (errorText) => {
            const wrapperId = this.getAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            let errorElement = document.querySelector("#" + wrapperId + " #dashboard_error_section");
            if (!errorElement) {
                errorElement = document.createElement("span");
                errorElement.setAttribute("id", "dashboard_error_section");
                document.querySelector("#" + wrapperId).prepend(errorElement);
            }

            const el = document.createElement("p");
            el.innerHTML = errorText;
            errorElement.appendChild(el);
        }
    }

    customElements.define('mbir-dashboard', MBIRDashboard);
}
if (typeof MBIRReport == 'undefined') {
    class MBIRReport extends HTMLElement {
        constructor() {
            super();
        }

        connectedCallback() {
            this._initComponent();
        }

        getConstants = () => {

            return {
                ATTRIBUTE: {
                    PATH: 'path',
                    YAML: 'yaml',
                    YAML_PATH: 'yamlPath',
                    USER_NAME: 'userName',
                    REQUEST_OPTIONS: 'requestOptions',
                    EXTENDED_CRENDENTIALS: 'extendedCredentials',
                    URL: 'url',
                    REPORT_PARAMS: 'reportParams',
                    REPORT_OPTIONS: 'reportOptions',
                    PASSWORD: 'password',
                    WIDTH: 'width',
                    HEIGHT: 'height',
                    AUTH_TOKEN: 'authToken',
                    WRAPPER_ID: 'id'
                },

                JSAPI: {
                    REPORT: 'viewer',
                    PARAMETER: 'parameter'
                },

                REQUEST_HEADERS: {
                    AUTH_TOKEN: 'AuthToken',
                    AUTHORIZATION: 'Authorization',
                    TARGET_VOLUME: 'TargetVolume'
                }
            }
        }

        _getSupportedUIEvents = () => {
            const map = new Map();

            map.set("onchange", actuate.viewer.EventConstants.ON_CONTENT_CHANGED);
            map.set("onselected", actuate.viewer.EventConstants.ON_CONTENT_SELECTED);
            map.set("onsessiontimeout", actuate.viewer.EventConstants.ON_SESSION_TIMEOUT);
            map.set("onexception", actuate.viewer.EventConstants.ON_EXCEPTION);
            map.set("ondialogok", actuate.viewer.EventConstants.ON_DIALOG_OK);
            map.set("oncontentdragselection", actuate.viewer.EventConstants.ON_CONTENT_DRAG_SELECTION);
            map.set("oncontentdropselection", actuate.viewer.EventConstants.ON_CONTENT_DROP_SELECTION);
            map.set("onfilterbroadcast", actuate.viewer.EventConstants.ON_FILTER_BROADCAST);

            return map;
        }

        _initComponent = () => {
            console.clear();
            this.Constants = this.getConstants();
            actuate.load(this.Constants.JSAPI.REPORT);
            actuate.load(this.Constants.JSAPI.PARAMETER);

            this.clearErrors();

            let valid = true;
            let errMsg = "";

            const baseURL = this.getURL();
            const reqOps = this._getRequestOptions();

            const userName = this._getSybilAttribute(this.Constants.ATTRIBUTE.USER_NAME);
            const password = this._getSybilAttribute(this.Constants.ATTRIBUTE.PASSWORD);
            const authToken = this._getSybilAttribute(this.Constants.ATTRIBUTE.AUTH_TOKEN);

            //check userName and authToken
            if (!userName) {
                if (!authToken || (authToken.length > 0 && authToken.length <= 5)) {
                    valid = false;
                    errMsg = "invalid authToken attribute";
                    console.error(errMsg);
                    //this._showErrorMessage(errMsg);
                    valid = false;
                }
            }

            if (!reqOps.getRepositoryType())
                reqOps.setRepositoryType(actuate.RequestOptions.REPOSITORY_ENCYCLOPEDIA);//default
            if (!reqOps.getVolumeProfile())
                reqOps.setVolumeProfile("enterprise");//default

            if (valid) {
                errMsg = this._validateInput();
                if (errMsg) {
                    console.error(errMsg);
                    //this._showErrorMessage(errMsg);
                }
            }

            if (!actuate.isInitialized()) {
                actuate.initialize(baseURL, reqOps, userName, password, this.initRunReport, this.handleError);
            } else {
                actuate.authenticate(baseURL, reqOps, userName, password, null, this.initRunReport, this.handleError);
            }
        }

        _validateInput = () => {
            //validate mandatory inputs
            //url
            let errMsg = "";
            if (!this.getURL()) {
                errMsg = "url attribute must be provided";
            }

            //yaml input
            const yaml = this._getSybilAttribute(this.Constants.ATTRIBUTE.YAML);
            const yamlPath = this._getSybilAttribute(this.Constants.ATTRIBUTE.YAML_PATH);
            const reportPath = this._getSybilAttribute(this.Constants.ATTRIBUTE.PATH);
            if (!(yaml && yaml.length) && !yamlPath && !reportPath) {
                errMsg = "one of these attributes must be provided - 'path', 'yamlPath', 'yaml'";
            }
            //wrapper id
            if (!this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID)) {
                errMsg = "element 'id' must be provided";
            }

            return errMsg;
        }

        runReport = (report) => {
            this.clearErrors();
            const wrapperId = this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            report = report || new actuate.Viewer(wrapperId);
            this._setReportOptions(report);

            this.initParamsTags();

            report.registerEventHandler(actuate.viewer.EventConstants.ON_EXCEPTION, this.reportErrorHandle);
            report.registerEventHandler(actuate.viewer.EventConstants.ON_SESSION_TIMEOUT, this.timeoutHandle);

            const paramObj = new actuate.Parameter("parampane_" + wrapperId);
            paramObj.registerEventHandler(actuate.parameter.EventConstants.ON_EXCEPTION, this.reportParamErrorHandle);
            paramObj.setView(actuate.parameter.Constants.VIEW_MODERN);
            paramObj.setReportName(report.getReportName());
            paramObj.submit(() => {
                if (paramObj.getParameterValues() != null) {
                    document.getElementById(
                        "runwithparams_" + wrapperId
                    ).style.visibility = "visible";
                } else {
                    //if no param run report directly
                    report.submit(() => report.enableIV());
                }
            });
            document
                .getElementById("runwithparams_" + wrapperId)
                .addEventListener("click", () => this._runReportWithParameters(paramObj, report));
        }

        _setReportOptions = (report) => {
            const name = this._getSybilAttribute(this.Constants.ATTRIBUTE.PATH);
            const width = this._getSybilAttribute(this.Constants.ATTRIBUTE.WIDTH);
            const height = this._getSybilAttribute(this.Constants.ATTRIBUTE.HEIGHT);

            if (width)
                report.setWidth(width);

            if (height)
                report.setHeight(height);

            if (name)
                report.setReportName(name);


            const strReportOptions = this._getSybilAttribute(this.Constants.ATTRIBUTE.REPORT_OPTIONS);

            let reportOptions;

            if (strReportOptions) {
                reportOptions = JSON.parse(strReportOptions);
            }

            if (reportOptions) {
                if (!report.setReportName() && reportOptions.reportName)
                    report.setReportName(reportOptions.reportName);

                if (reportOptions.isInteractive === "true")
                    report.enableIV();

                if (reportOptions.height)
                    report.setHeight(reportOptions.height);

                if (reportOptions.width)
                    report.setWidth(reportOptions.width);

                if (report.service)
                    report.setService(reportOptions.service);

                if (report.size)
                    report.setSize(reportOptions.size.width, reportOptions.size.height);

            }

        }

        _formatURL = (url) => {
            if (url && url.endsWith('/')) {
                url = url.substr(0, url.length - 1);
            }

            return url;
        }


        getURL = () => {
            let baseURL = "";

            if (this.getAttribute(this.Constants.ATTRIBUTE.URL)) {
                baseURL = this._formatURL(this.getAttribute(this.Constants.ATTRIBUTE.URL));
                actuate.reqBaseURL = baseURL;
            }

            return this.baseURL = baseURL;
        }

        _getRequestOptions = () => {
            const requestOptions = new actuate.RequestOptions();

            const credentials = this._getSybilAttribute(this.Constants.ATTRIBUTE.EXTENDED_CRENDENTIALS);
            const authToken = this._getSybilAttribute(this.Constants.ATTRIBUTE.AUTH_TOKEN);

            if (credentials) {
                requestOptions.setCredentials(credentials);
            } else if (authToken && authToken.length > 5) {
                requestOptions.setExternalToken(authToken);
            }

            const strReqOps = this._getSybilAttribute(this.Constants.ATTRIBUTE.REQUEST_OPTIONS);

            if (strReqOps) {
                var reqOps = JSON.parse(strReqOps);
            }

            if (reqOps) {
                if (reqOps.credentials)
                    requestOptions.setCredentials(reqOps.credentials);
                else if (reqOps.RESTAuthToken)
                    requestOptions.setRESTAuthToken(reqOps.RESTAuthToken);

                if (reqOps.repositoryType)
                    requestOptions.setRepositoryType(reqOps.repositoryType);


                const customParams = reqOps.customParameters;

                if (customParams)
                    requestOptions.setCustomParameters(customParams);

                if (reqOps.iServerUrl)
                    requestOptions.setIServerUrl(reqOps.iServerUrl);

                if (reqOps.locale)
                    requestOptions.setLocale(reqOps.locale);

                if (reqOps.volume)
                    requestOptions.setVolume(reqOps.volume);

                if (reqOps.volumeProfile)
                    requestOptions.setVolumeProfile(reqOps.volumeProfile);
                else
                    requestOptions.setVolumeProfile("enterprise");

            }


            return requestOptions;
        }

        _runYamlGeneratedReport = (yamlResponse) => {
            const reportName = yamlResponse.filename;
            const wrapperId = this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            const config = new actuate.viewer.UIConfig();
            config.setContentPanel(new actuate.viewer.BrowserPanel());
            const report = new actuate.Viewer(wrapperId, config);
            report.setReportName(reportName);

            if (yamlResponse.uioptions && yamlResponse.uioptions.events) {
                if (!yamlResponse.uioptions.shownavigation) {
                    report.setUIOptions(this._getDefaultUIOptions());
                }
                this._setUIEvents(yamlResponse.uioptions.events, report);
            }
            this.runReport(report);
        }

        _showErrorMessage = (errMsg) => {
            var errorContentsDiv = document.createElement("div");
            errorContentsDiv.setAttribute("id", "validationError");
            errorContentsDiv.setAttribute(
                "style",
                "visibility: visible; margin: 10px 10px 0px; font-size: 14pt;"
            );
            const errorMsgPara = document.createElement("p");
            const errorMsgText = document.createTextNode("error: " + errMsg);
            errorMsgPara.appendChild(errorMsgText);
            errorContentsDiv.appendChild(errorMsgPara);

            const parent = document.getElementsByTagName("mbir-report")[0].parentNode;
            parent.appendChild(errorContentsDiv);
        }

        _showYamlValidationErrorMessages = (yamlResponse) => {
            var errorContentsDiv = document.createElement("div");
            errorContentsDiv.setAttribute("id", "mbirReportErrors");
            errorContentsDiv.setAttribute(
                "style",
                "visibility: visible; margin: 10px 10px 0px; font-size: 14pt;"
            );
            const errorCodePara = document.createElement("p");
            const errorCodeText = document.createTextNode("error code: " + yamlResponse["errorCode"]);
            errorCodePara.appendChild(errorCodeText);
            errorContentsDiv.appendChild(errorCodePara);

            const errorMessagePara = document.createElement("p");
            const errorMessageText = document.createTextNode("error message: " + yamlResponse["message"]);
            errorMessagePara.appendChild(errorMessageText);
            errorContentsDiv.appendChild(errorMessagePara);

            const errorDetailsPromptPara = document.createElement("p");
            const errorDetailsPrompText = document.createTextNode("Details:");
            errorDetailsPromptPara.appendChild(errorDetailsPrompText);
            errorContentsDiv.appendChild(errorDetailsPromptPara);

            const errorDetailsPara = document.createElement("p");
            const errorsArray = yamlResponse["errors"];
            for (var i = 0; i < errorsArray.length; i++) {
                var errorDetailPara = document.createElement("p");
                var errorDetailText = document.createTextNode(errorsArray[i]);
                errorDetailPara.appendChild(errorDetailText);
                errorDetailsPara.appendChild(errorDetailPara);
            }
            errorContentsDiv.appendChild(errorDetailsPara);

            const parent = document.getElementById(this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID)).parentNode;
            parent.appendChild(errorContentsDiv);
        }

        _getDefaultUIOptions = () => {
            const ui = new actuate.viewer.UIOptions();
            ui.enableParameterPage(true);
            ui.enableLaunchViewer(false);
            ui.enableEditReport(false);
            ui.enableTOC(false);
            ui.enableSaveDesign(false);
            ui.enableSaveDocument(false);
            ui.enablePrint(false);
            ui.enableHideShowItems(false);
            ui.enableLinkToThisPage(false);
            ui.enableToolBar(false);
            ui.enableContentMargin(false);
            return ui;
        }

        _setUIEvents = (uievents, viewer) => {
            let self = this;
            this.supportedUIEvents = this._getSupportedUIEvents();
            uievents.forEach(function (uievent) {
                if (uievent.name && uievent.callback) {
                    let jsapiEvent = self.supportedUIEvents.get(uievent.name);
                    if (jsapiEvent) {
                        viewer.registerEventHandler(jsapiEvent, eval(uievent.callback));
                    }
                }
            });
        }

        initRunReport = () => {
            let yamlInput = this._getSybilAttribute(this.Constants.ATTRIBUTE.YAML);
            const yamlPath = this._getSybilAttribute(this.Constants.ATTRIBUTE.YAML_PATH);
            if (yamlInput) {
                this._createReport(yamlInput);
            } else if (yamlPath) {
                fetch(yamlPath)
                    .then(response => response.text())
                    .then(yaml => this._createReport(yaml))
            } else if (this._getSybilAttribute(this.Constants.ATTRIBUTE.PATH)) {
                this.runReport();
            }
        }

        _createReport = (yamlInput) => {
            const ele = this;
            const userName = this._getSybilAttribute(this.Constants.ATTRIBUTE.USER_NAME);
            const authToken = this._getSybilAttribute(this.Constants.ATTRIBUTE.AUTH_TOKEN);
            const requestOptions = this._getSybilAttribute(
                this.Constants.ATTRIBUTE.REQUEST_OPTIONS);
            var targetVolume;
            if (requestOptions) {
                var objRequestOptions = JSON.parse(requestOptions);
                if (objRequestOptions.volume)
                    targetVolume = objRequestOptions.volume;
            }
            let url = this.getURL() + "/declarativebi"
            if (userName) {
                url += "?userid=" + userName;
            }
            const xhr = new XMLHttpRequest();
            xhr.onload = function () {
                const textResponse = this.responseText;
                const json = JSON.parse(textResponse);

                if (json.hasOwnProperty("GraphicalMetrics") && json["GraphicalMetrics"].hasOwnProperty("errorResponse")) {
                    ele._showYamlValidationErrorMessages(json.GraphicalMetrics.errorResponse);
                } else {
                    ele._runYamlGeneratedReport(json.GraphicalMetrics);
                }
            }

            xhr.open("POST", url, true);
            if (!userName && authToken) {
                xhr.setRequestHeader(this.Constants.REQUEST_HEADERS.AUTHORIZATION, "Bearer " + authToken);
            }
            if (!userName && targetVolume) {
                xhr.setRequestHeader(
                    this.Constants.REQUEST_HEADERS.TARGET_VOLUME,
                    targetVolume
                );
            }
            xhr.send(yamlInput);
        }

        _getSybilAttribute = (attributeName) => {
            return (this.getAttribute(attributeName)) ? this.getAttribute(attributeName) : this[attributeName];
        }

        initParamsTags = () => {
            const wrapperId = this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            const paramContainer = document.createElement("div");
            paramContainer.setAttribute("id", "paramcontainer_" + wrapperId);
            const paramEl = document.createElement("div");
            paramEl.setAttribute("id", "parampane_" + wrapperId);
            paramEl.setAttribute("style", "max-width:30%; margin: 25px 50px 0px;");
            const runParamEl = document.createElement("input");
            runParamEl.setAttribute("type", "button");
            runParamEl.setAttribute("class", "btn btn-primary");
            runParamEl.setAttribute("id", "runwithparams_" + wrapperId);
            runParamEl.setAttribute(
                "style",
                "visibility: hidden; margin: 10px 50px 0px;"
            );
            runParamEl.value = "Run Report";

            const parent = document.getElementById(wrapperId).parentNode;

            paramContainer.appendChild(paramEl);
            paramContainer.appendChild(runParamEl);
            parent.appendChild(paramContainer);
        }

        _runReportWithParameters = (paramObj, report) => {
            paramObj.downloadParameterValues((pvs) => {
                const wrapperId = this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
                report.setParameterValues(pvs);
                report.registerEventHandler(
                    actuate.viewer.EventConstants.ON_EXCEPTION,
                    this.reportErrorHandle
                );
                document
                    .getElementById("paramcontainer_" + wrapperId)
                    .style.display = "none";

                report.submit(() => report.enableIV());
            });
        }

        static get observedAttributes() {
            return ["yaml", "authToken", "authtoken", "url", "path", "yamlPath", "yamlpath"];
        }

        get authToken() {
            return this.hasAttribute("authToken");
        }

        set authToken(value) {
            return this.setAttribute("authToken", value);
        }

        get authtoken() {
            return this.hasAttribute("authtoken");
        }

        set authtoken(value) {
            return this.setAttribute("authtoken", value);
        }

        get yaml() {
            return this.hasAttribute("yaml");
        }

        set yaml(value) {
            return this.setAttribute("yaml", value);
        }

        get url() {
            return this.hasAttribute("url");
        }

        set url(value) {
            return this.setAttribute("url", value);
        }

        get path() {
            return this.hasAttribute("path");
        }

        set path(value) {
            return this.setAttribute("path", value);
        }

        get yamlpath() {
            return this.hasAttribute("yamlpath");
        }

        set yamlpath(value) {
            return this.setAttribute("yamlpath", value);
        }

        get yamlPath() {
            return this.hasAttribute("yamlPath");
        }

        set yamlPath(value) {
            return this.setAttribute("yamlPath", value);
        }

        attributeChangedCallback(name, oldValue, newValue) {
            if ((name === "yaml" || name === "authToken" || name === "authtoken" || name === "url" || name === "path" || name === "yamlpath" || name === "yamlPath") && newValue) {
                this._initComponent();
            }
        }

        handleError = (exception) => {
            this.clearErrors();
            console.log("Error: fail to authenticate user");
            this.writeError("Error: fail to authenticate user");
            if (exception.getErrCode()) {
                console.error('Error Code: ' + exception.getErrCode());
                this.writeError('Error Code: ' + exception.getErrCode());
            }
            console.error('Error Message: ' + exception.getMessage());
            this.writeError('Error Message: ' + exception.getMessage());
        }

        reportParamErrorHandle = (exception) => {
            this.clearErrors();
            console.error("Error: failed to render report");
            this.writeError("Error: failed to render report");
            if (exception.getErrCode()) {
                console.error('Error Code: ' + exception.getErrCode());
                this.writeError('Error Code: ' + exception.getErrCode());
            }
            console.error('Error Message: ' + exception.getMessage());
            this.writeError('Error Message: ' + exception.getMessage());
        }

        reportErrorHandle = (viewInstance, exception) => {
            this.reportParamErrorHandle(exception);
        }

        timeoutHandle = () => {
            this.clearErrors();
            console.log("session timed out, refreshing");
            this.writeError("session timed out, refreshing the page.");
            location.reload();
        }

        clearErrors = () => {
            const wrapperId = this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            let errorElement = document.querySelector("#" + wrapperId + " #report_error_section");
            if (errorElement) {
                errorElement.innerHTML = "";
            }
        }

        writeError = (errorText) => {
            const wrapperId = this._getSybilAttribute(this.Constants.ATTRIBUTE.WRAPPER_ID);
            let errorElement = document.querySelector("#" + wrapperId + " #report_error_section");
            if (!errorElement) {
                errorElement = document.createElement("span");
                errorElement.setAttribute("id", "report_error_section");
                document.querySelector("#" + wrapperId).prepend(errorElement);
            }

            const el = document.createElement("p");
            el.innerHTML = errorText;
            errorElement.appendChild(el);
        }
    }

    customElements.define('mbir-report', MBIRReport);
}


actuate.jsessionId = "";
actuate.reqBaseURL = "https://mbir-informationconsole-mbir.dev.ca.opentext.com/iportal";

//this is for storing/handling the externalToken globally, so we can attach it to authorization header which is needed for apigee proxy to authenticate
actuate.externalToken = "";

actuate.ModuleVersionInfo = "250P250402";

actuate.preLoadedResourcesBundle = new Object();
actuate.preLoadedResourcesBundle['screenReader.loading.started'] = 'Loading, please wait';
actuate.preLoadedResourcesBundle['screenReader.loading.complete'] = 'Loading complete';
