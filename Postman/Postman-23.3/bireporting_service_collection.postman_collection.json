{
	"info": {
		"_postman_id": "bf31a029-d0b2-47d4-80d0-ec98c65930b9",
		"name": "Magellan BI and Reporting Collection",
		"description": "The BI & Reporting REST API accesses and manages dynamic data using BIRT technology and generates new documents for deployment. The REST API can be used to deliver BIRT content and data from BI & Reporting to any mobile or web application.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"tmp_tenant_apigee_refresh_token\", jsonData.refresh_token);\r",
									"pm.environment.set(\"tmp_tenant_access_token\", jsonData.access_token);\r",
									"setTimeout(function(){}, 2000);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{ext_mbir_app_confclient_secret}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{ext_mbir_app_confclient_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "default"
								},
								{
									"key": "client_id",
									"value": "{{ext_mbir_app_confclient_id}}",
									"type": "default",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "{{ext_mbir_app_confclient_secret}}",
									"type": "default",
									"disabled": true
								},
								{
									"key": "username",
									"value": "{{user_name}}",
									"type": "default"
								},
								{
									"key": "password",
									"value": "{{tenant_user_password}}",
									"type": "default"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "default"
								},
								{
									"key": "response_type",
									"value": "id_token",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "{{api_host}}/tenants/{{tenant_id}}/oauth2/token",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"tenants",
								"{{tenant_id}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "version",
			"item": [
				{
					"name": "Get the REST API version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and Rest API version is returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.version).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/version/api",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"version",
								"api"
							]
						},
						"description": "Retrieves the version of the REST API."
					},
					"response": []
				},
				{
					"name": "Get the Get the Magellan BI & Reporting version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and Get the Magellan BI & Reporting version is returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.major).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/version",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"version"
							]
						},
						"description": "Retrieves the version of Get the Magellan BI & Reporting."
					},
					"response": []
				}
			]
		},
		{
			"name": "files",
			"item": [
				{
					"name": "Returns a list of files and folders in the root folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and list of files/folders is returned\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(jsonData.itemList.file[0].id).to.not.be.empty;\r",
									"  pm.environment.set(\"tmp_user_data_folder_id\", jsonData.itemList.file[0].id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/files?isRecursive=true&search=/Resources/UserData",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"files"
							],
							"query": [
								{
									"key": "latestVersionOnly",
									"value": "false",
									"description": "Specifies whether to search all versions of the file. If True, the search includes only the latest version. The default value is False",
									"disabled": true
								},
								{
									"key": "isRecursive",
									"value": "true",
									"description": "Specify True to retrieve files recursively. Supports only RPTDESIGN or DASHBOARD file types. For example, to retrieve recursively all RPTDESIGN files in Applications folder, use `/Applications/*.rptdesign` as a search expression."
								},
								{
									"key": "fetchSize",
									"value": "<string>",
									"description": "The number of entries to return at one time.",
									"disabled": true
								},
								{
									"key": "fetchHandle",
									"value": "<string>",
									"description": "Use fetchHandle to iterate through sets of files and folders retrieved by a previous GET /files request. When a GET /files request returns more files and folders than the fetch size, the response provides fetchHandle as a unique number. Use fetchHandle to access the next set of files and folders in the files and folders list. The fetchSize parameter determines the number of files and folders in each set.",
									"disabled": true
								},
								{
									"key": "fetchDirection",
									"value": "<string>",
									"description": "The sort direction of the output. True fetches entries in ascending alphabetic order, with all folders before files. False fetches entries in descending alphabetic order, with all folders after files.",
									"disabled": true
								},
								{
									"key": "search",
									"value": "/Resources/UserData"
								}
							]
						},
						"description": "Retrieves the list of files and folders in the root folder of the volume, including their properties.  \r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "Creates a folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 201 and new folder is created\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"    pm.expect(jsonData.name).to.equal(pm.environment.get('tmp_new_folder_name'));\r",
									"  pm.environment.set(\"tmp_new_folder_id\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"tmp_new_folder_name\", \"Folder\" + new Date().getTime());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{tmp_new_folder_name}}",
									"description": "(Required) A valid folder name, which becomes the new folder name."
								},
								{
									"key": "parentFolderId",
									"value": "{{tmp_user_data_folder_id}}",
									"description": "A parent folder ID number."
								},
								{
									"key": "description",
									"value": "",
									"description": "Description",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/files",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"files"
							]
						},
						"description": "Creates a folder at root level or inside a parent folder. To specify the location of the folder in the volume, provide an absolute path in the name parameter, or define an id of a parent folder where the new folder will be created. When an id of the destination folder is provided, you can specify a relative path to this folder in the name. For example, specifying a name=`Sales/Q1` and `id=565000000100` creates a folder Q1 in `/Public/Sales` folder, where `565000000100` is the id for the /Public folder.\n\n This API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "Search for files in a folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and list of files in a folder is returned\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(jsonData.itemList.file.length).to.be.gt(0)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/files/:fileId/search",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"files",
								":fileId",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "<string>",
									"description": "A search expression that defines a filter pattern for folder/file names. For example, use the value **Sales** to retrieve all folders/files whose names contain **Sales**.  All special characters included in a file name used in a search expression must be escaped. Special characters used in file paths do not need escaping. For example, a search expression `A/*` returns all occurrences of `A*` in names, and a search for `A*` returns all names starting with `A`.",
									"disabled": true
								},
								{
									"key": "owner",
									"value": "<string>",
									"description": "A search expression that defines a filter pattern for folder/file owner. For example, use the value **MCastillo** to retrieve all files whose owner is the **MCastillo** user. All special characters used in a search expression must be escaped. For example, a search expression `A/*` returns all occurrences of `A*` in names, and a search for `A*` returns all names starting with `A`.",
									"disabled": true
								},
								{
									"key": "description",
									"value": "<string>",
									"description": "A search expression that defines a search pattern for folder/file description. All special characters used in a search expression must be escaped.For example, a search expression `A/*` returns all occurrences of `A*` in names, and a search for `A*` returns all names starting with `A`.",
									"disabled": true
								},
								{
									"key": "fetchSize",
									"value": "<string>",
									"description": "The number of entries to return at one time.",
									"disabled": true
								},
								{
									"key": "fetchHandle",
									"value": "<string>",
									"description": "Use fetchHandle to iterate through sets of files and folders retrieved by a previous GET /files request. When a GET /files request returns more files and folders than the fetch size, the response provides fetchHandle as a unique number. Use fetchHandle to access the next set of files and folders in the files and folders list. The fetchSize parameter determines the number of files and folders in each set.",
									"disabled": true
								},
								{
									"key": "fetchDirection",
									"value": "<string>",
									"description": "The sort direction of the output. True fetches entries in ascending alphabetic order, with all folders before files. False fetches entries in descending alphabetic order, with all folders after files.",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{tmp_user_data_folder_id}}"
								}
							]
						},
						"description": "Retrieves the list of files in a specified folder of the volume based on filter expressions on file name, file owner, and file description.  \r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "Uploads a file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 201 and id field for uploaded file is not empty\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.expect(jsonData.id).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "ClassicModelsPredefinedMeasures.data",
									"description": "(Required) A valid file name, which becomes the file name on the volume. This file name may include the repository path and the file extension. For example, to upload `Unshipped Orders 1H2013.RPTDESIGN` to the /Public folder, use `/Public/Unshipped Orders 1H2013.RPTDESIGN` for the value of name.",
									"type": "text"
								},
								{
									"key": "id",
									"value": "{{tmp_user_data_folder_id}}",
									"description": "ID of the folder to which the file will be uploaded.",
									"type": "text"
								},
								{
									"key": "replaceExisting",
									"value": "true",
									"description": "Replace existing file of the same name in the volume. The default value is false, which creates a new version of the file and retains the previous version.",
									"type": "text"
								},
								{
									"key": "fileSource",
									"value": "<string>",
									"description": "Specifies the source of file creation. The default value is not set.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"description": "File to Upload",
									"type": "file",
									"src": "BIReportingGoldenCopy/ClassicModelsPredefinedMeasures.data"
								},
								{
									"key": "VersionNumber",
									"value": "<string>",
									"description": "File version number",
									"type": "text",
									"disabled": true
								},
								{
									"key": "MaxVersions",
									"value": "<string>",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/files/upload",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"files",
								"upload"
							]
						},
						"description": "Uploads a file at root level or inside a parent folder. To specify the location of the uploaded file in the volume, provide an absolute path in the name parameter, or define an id of a folder to which the file will be uploaded. When an id of the destination folder is provided, you can specify a relative path to this folder in the name. For example, specifying a name=`Sales/MyReport.rptdesign` and `id=800000000000` uploads the file to `Aplications/Sales/MyReport.rptdesign`, where `800000000000` is the id for the `/Applications` folder.\n\n This API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "Get file properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and id field is not empty\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.id).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/files/:fileId/properties",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"files",
								":fileId",
								"properties"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{tmp_user_data_folder_id}}",
									"description": "(Required) An file or folder ID number."
								}
							]
						},
						"description": "Retrieves the list of properties for the a specified file or folder. \r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "Deletes a file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/files/:fileId",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"files",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{tmp_new_folder_id}}",
									"description": "(Required) An file or folder ID number."
								}
							]
						},
						"description": "Removes a specific file from the iHub volume. \r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				}
			]
		},
		{
			"name": "headlessbi",
			"item": [
				{
					"name": "HeadlessBI multidimesional query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and multidimensional payload is returned\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(jsonData.names.length).to.be.gt(0)\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "apiVersion: 1.0.0 \r\ndatasources:\r\n  - datamodelName: Classic Models Data Model\r\n    path: UserData/ClassicModelsPredefinedMeasures.data\r\n    version: 1\r\nrows:\r\n  - columnName: COUNTRY\r\n    displayName: COUNTRY\r\ncolumns:\r\n  - columnName: STATUS\r\n    displayName: STATUS  \r\nmeasures:\r\n  - columnName: CREDITLIMIT\r\n    aggregation: avg\r\n    displayName: Avg Credit Limit\r\n    dataType: float\r\noutputFormat: JSON\r\n"
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/headlessbi/multidimensional",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"headlessbi",
								"multidimensional"
							]
						},
						"description": "HeadlessBI multidimesional\r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "HeadlessBI tabular query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and tabular payload is returned\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(jsonData.names.length).to.be.gt(0)\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "apiVersion: 1.0.0 \r\ndatasources:\r\n- datamodelName: Classic Models Data Model\r\n  path: UserData/ClassicModelsPredefinedMeasures.data\r\n  version: 1\r\ncolumns:\r\n- columnName: COUNTRY\r\n  dataType: string\r\n  displayName: COUNTRY\r\nmeasures:\r\n- aggregation: sum\r\n  columnName: CREDITLIMIT\r\n  dataType: integer\r\noutputFormat: JSON"
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/headlessbi/tabular",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"headlessbi",
								"tabular"
							]
						},
						"description": "HeadlessBI tabular\r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "HeadlessBI data model metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and the data model is return\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(jsonData.categories.length).to.be.gt(0)\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "datasources:\r\n- datamodelName: \"Classic Models Data Model\"\r\n  path: \"UserData/ClassicModelsPredefinedMeasures.data\"\r\n  version: 1"
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/headlessbi/datamodels",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"headlessbi",
								"datamodels"
							]
						},
						"description": "HeadlessBI data model metadata\r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "HeadlessBI data mart metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and the list of models is returned\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(jsonData.length).to.be.gt(0)\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/headlessbi/datamodels",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"headlessbi",
								"datamodels"
							]
						},
						"description": "HeadlessBI data mart metadata\r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				}
			]
		},
		{
			"name": "declarativebi",
			"item": [
				{
					"name": "Creates visualization for given yaml payload.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200 and the visualization is ready\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonData.GraphicalMetrics.filename).to.not.be.empty;\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "GraphicalMetrics:\r\n  metadata:\r\n    name: /Resources/UserData/Charts.rptdesign\r\n    apiVersion: 1.0.0\r\n  datasources:\r\n    - path: UserData/ClassicModelsPredefinedMeasures.data\r\n  layout:\r\n    - row:\r\n      - type: Area Chart\r\n        datasetName: Classic Models Data Model\r\n        binding:\r\n           x-axis:\r\n             columnName: CITY\r\n           y-axis:\r\n             series:\r\n               - columnName: CREDITLIMIT\r\n                 aggregation: sum"
						},
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/declarativebi",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"declarativebi"
							]
						},
						"description": "Creates visualization for given yaml payload.\r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				},
				{
					"name": "Gets visualization of a given report or dashboard path.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**pm.test(\"Status code is 200 and visualization of given report is returned\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"html\");\r",
									"});*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tmp_tenant_access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							},
							{
								"key": "TargetVolume",
								"value": "{{tenant_id}}",
								"type": "default",
								"disabled": true
							},
							{
								"key": "Locale",
								"value": "{{locale}}",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{mbir-bireporting_url}}/api/v3/declarativebi/visualization?file_name=/Resources/UserData/Charts.rptdesign",
							"host": [
								"{{mbir-bireporting_url}}"
							],
							"path": [
								"api",
								"v3",
								"declarativebi",
								"visualization"
							],
							"query": [
								{
									"key": "file_name",
									"value": "/Resources/UserData/Charts.rptdesign",
									"description": "(Required) Declarative BI filename to process request."
								}
							]
						},
						"description": "Gets visualization of a given report or dashboard path.\r\n\r\nThis API call uses standard header fields <B>Authorization</B> (Bearer token), <B>TargetVolume</B> (Tenant ID) and <B>Locale</B>."
					},
					"response": []
				}
			]
		},
		{
			"name": "cleanup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const envProps = pm.environment.toObject();\r",
							"console.log(envProps);\r",
							"for (let prop in envProps) {\r",
							"    if (prop.startsWith(\"tmp_\")) {\r",
							"        pm.environment.unset(prop)\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/get",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authToken",
			"value": ""
		}
	]
}